[
    {
        "comment": "/**\n     * @typedef {Object} ContentControl\n\t * Content control object.\n     * @property {string} Tag - A tag assigned to the content control. The same tag can be assigned to several content controls so that it is possible to make reference to them in your code.\n     * @property {string} Id - A unique identifier of the content control. It can be used to search for a certain content control and make reference to it in the code.\n     * @property {ContentControlLock} Lock - A value that defines if it is possible to delete and/or edit the content control or not: 0 - only deleting, 1 - no deleting or editing, 2 - only editing, 3 - full access.\n     * @property {string} InternalId - A unique internal identifier of the content control. It is used for all operations with content controls.\n     * @see office-js-api/Examples/Plugins/Forms/Enumeration/ContentControl.js\n\t */",
        "meta": {
            "lineno": 37,
            "columnno": 1
        },
        "kind": "typedef",
        "name": "ContentControl",
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        },
        "description": "Content control object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nvar oContentControl = {\n    \"Tag\": \"Document\",\n    \"Id\": 0,\n    \"Lock\": 0,\n    \"InternalId\": \"1_713\"\n};\n```",
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Tag",
                "description": "A tag assigned to the content control. The same tag can be assigned to several content controls so that it is possible to make reference to them in your code."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Id",
                "description": "A unique identifier of the content control. It can be used to search for a certain content control and make reference to it in the code."
            },
            {
                "type": {
                    "names": [
                        "ContentControlLock"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ContentControlLock"
                    }
                },
                "name": "Lock",
                "description": "A value that defines if it is possible to delete and/or edit the content control or not: 0 - only deleting, 1 - no deleting or editing, 2 - only editing, 3 - full access."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "InternalId",
                "description": "A unique internal identifier of the content control. It is used for all operations with content controls."
            }
        ],
        "longname": "ContentControl",
        "scope": "global",
        "see": [
            "office-js-api/Examples/Plugins/Forms/Enumeration/ContentControl.js"
        ],
        "examples": [
            "var oContentControl = {\n    \"Tag\": \"Document\",\n    \"Id\": 0,\n    \"Lock\": 0,\n    \"InternalId\": \"1_713\"\n};"
        ]
    },
    {
        "comment": "/**\n     * @typedef {(0 | 1 | 2 | 3)} ContentControlLock\n     * A value that defines if it is possible to delete and/or edit the content control or not:\n\t * **0** - only deleting\n\t * **1** - disable deleting or editing\n\t * **2** - only editing\n\t * **3** - full access\n     * @see office-js-api/Examples/Plugins/Forms/Enumeration/ContentControlLock.js\n\t */",
        "meta": {
            "lineno": 47,
            "columnno": 1
        },
        "kind": "typedef",
        "name": "ContentControlLock",
        "type": {
            "names": [
                "0",
                "1",
                "2",
                "3"
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "0"
                    },
                    {
                        "type": "NameExpression",
                        "name": "1"
                    },
                    {
                        "type": "NameExpression",
                        "name": "2"
                    },
                    {
                        "type": "NameExpression",
                        "name": "3"
                    }
                ]
            }
        },
        "description": "A value that defines if it is possible to delete and/or edit the content control or not:\n**0** - only deleting\n**1** - disable deleting or editing\n**2** - only editing\n**3** - full access\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nvar arrDocuments = [{\n    \"Props\": {\n        \"Id\": 100,\n        \"Tag\": \"CC_Tag\",\n        \"Lock\": 3\n    },\n    \"Script\": \"var oParagraph = Api.CreateParagraph();oParagraph.AddText('Hello world!');Api.GetDocument().InsertContent([oParagraph]);\"\n}];\nwindow.Asc.plugin.executeMethod(\"InsertAndReplaceContentControls\", [arrDocuments]);\n```",
        "longname": "ContentControlLock",
        "scope": "global",
        "see": [
            "office-js-api/Examples/Plugins/Forms/Enumeration/ContentControlLock.js"
        ],
        "examples": [
            "var arrDocuments = [{\n    \"Props\": {\n        \"Id\": 100,\n        \"Tag\": \"CC_Tag\",\n        \"Lock\": 3\n    },\n    \"Script\": \"var oParagraph = Api.CreateParagraph();oParagraph.AddText('Hello world!');Api.GetDocument().InsertContent([oParagraph]);\"\n}];\nwindow.Asc.plugin.executeMethod(\"InsertAndReplaceContentControls\", [arrDocuments]);"
        ]
    },
    {
        "comment": "/**\n\t * Returns information about all the forms that have been added to the document.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\"]\n\t * @alias GetAllForms\n\t * @returns {ContentControl[]} - An array with all the forms from the document.\n\t * @see office-js-api/Examples/Plugins/Forms/Api/Methods/GetAllForms.js\n\t */",
        "meta": {
            "lineno": 65,
            "columnno": 1
        },
        "kind": "function",
        "name": "GetAllForms",
        "description": "Returns information about all the forms that have been added to the document.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.executeMethod (\"GetAllForms\", null, function (data) {\n    for (var i = 0; i < data.length; i++) {\n        if (data[i].Tag == 11) {\n            this.Asc.plugin.executeMethod (\"SelectContentControl\", [data[i].InternalId]);\n            break;\n        }\n    }\n});\n```",
        "memberof": "Api",
        "longname": "GetAllForms",
        "alias": "GetAllForms",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ContentControl>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ContentControl",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Forms/Api/Methods/GetAllForms.js"
        ],
        "examples": [
            "window.Asc.plugin.executeMethod (\"GetAllForms\", null, function (data) {\n    for (var i = 0; i < data.length; i++) {\n        if (data[i].Tag == 11) {\n            this.Asc.plugin.executeMethod (\"SelectContentControl\", [data[i].InternalId]);\n            break;\n        }\n    }\n});"
        ]
    },
    {
        "comment": "/**\n\t * Returns information about all the forms that have been added to the document with specified tag.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\"]\n\t * @alias GetFormsByTag\n\t * @param {string} tag - The form tag.\n\t * @returns {ContentControl[]} - An array with all the forms from the document with the specified tag.\n\t * @see office-js-api/Examples/Plugins/Forms/Api/Methods/GetFormsByTag.js\n\t */",
        "meta": {
            "lineno": 88,
            "columnno": 1
        },
        "kind": "function",
        "name": "GetFormsByTag",
        "description": "Returns information about all the forms that have been added to the document with specified tag.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.executeMethod (\"GetFormsByTag\", [\"{tag}\"], function (data) {\n    for (var i = 0; i < data.length; i++) {\n        if (data[i].InternalId == \"5_556\") {\n            this.Asc.plugin.executeMethod (\"SelectContentControl\", [data[i].InternalId]);\n            break;\n        }\n    }\n});\n```",
        "memberof": "Api",
        "longname": "GetFormsByTag",
        "alias": "GetFormsByTag",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "tag",
                "description": "The form tag."
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ContentControl>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ContentControl",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Forms/Api/Methods/GetFormsByTag.js"
        ],
        "examples": [
            "window.Asc.plugin.executeMethod (\"GetFormsByTag\", [\"{tag}\"], function (data) {\n    for (var i = 0; i < data.length; i++) {\n        if (data[i].InternalId == \"5_556\") {\n            this.Asc.plugin.executeMethod (\"SelectContentControl\", [data[i].InternalId]);\n            break;\n        }\n    }\n});"
        ]
    },
    {
        "comment": "/**\n\t * Sets a value to the specified form.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\"]\n\t * @alias SetFormValue\n\t * @param {string} internalId - A unique internal identifier of the form.\n\t * @param {string | boolean} value - Form value to be set. Its type depends on the form type.\n\t * @see office-js-api/Examples/Plugins/Forms/Api/Methods/SetFormValue.js\n\t */",
        "meta": {
            "lineno": 114,
            "columnno": 1
        },
        "kind": "function",
        "name": "SetFormValue",
        "description": "Sets a value to the specified form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.executeMethod (\"SetFormValue\", [\"1_713\", true]);\n```",
        "memberof": "Api",
        "longname": "SetFormValue",
        "alias": "SetFormValue",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "internalId",
                "description": "A unique internal identifier of the form."
            },
            {
                "type": {
                    "names": [
                        "string",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                },
                "name": "value",
                "description": "Form value to be set. Its type depends on the form type."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Forms/Api/Methods/SetFormValue.js"
        ],
        "examples": [
            "window.Asc.plugin.executeMethod (\"SetFormValue\", [\"1_713\", true]);"
        ]
    },
    {
        "comment": "/**\n\t * Returns a value of the specified form.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\"]\n\t * @alias GetFormValue\n\t * @param {string} internalId - A unique internal identifier of the form.\n\t * @returns {null | string | boolean} The form value in the string or boolean format depending on the form type. The null value means that the form is filled with a placeholder.\n\t * @see office-js-api/Examples/Plugins/Forms/Api/Methods/GetFormValue.js\n\t */",
        "meta": {
            "lineno": 127,
            "columnno": 1
        },
        "kind": "function",
        "name": "GetFormValue",
        "description": "Returns a value of the specified form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.executeMethod (\"GetFormValue\", [\"1_713\"], function (res) {\n    console.log (res)\n});\n```",
        "memberof": "Api",
        "longname": "GetFormValue",
        "alias": "GetFormValue",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "internalId",
                "description": "A unique internal identifier of the form."
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "null",
                        "string",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NullLiteral"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                }
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Forms/Api/Methods/GetFormValue.js"
        ],
        "examples": [
            "window.Asc.plugin.executeMethod (\"GetFormValue\", [\"1_713\"], function (res) {\n    console.log (res)\n});"
        ]
    },
    {
        "comment": "/**\n\t * Translations for the text field. The object keys are the two letter language codes (ru, de, it, etc.) and the values are the button label translation for each language.\n\t * Example: { \"en\" : \"name\", \"ru\" : \"имя\" }\n\t * @typedef { Object.<string, string> } localeTranslate\n\t * @see office-js-api/Examples/Plugins/{Editor}/Enumeration/localeTranslate.js\n\t */",
        "meta": {
            "lineno": 41,
            "columnno": 1
        },
        "kind": "typedef",
        "name": "localeTranslate",
        "type": {
            "names": [
                "Object.<string, string>"
            ],
            "parsedType": {
                "type": "TypeApplication",
                "expression": {
                    "type": "NameExpression",
                    "name": "Object"
                },
                "applications": [
                    {
                        "type": "NameExpression",
                        "name": "string"
                    },
                    {
                        "type": "NameExpression",
                        "name": "string"
                    }
                ]
            }
        },
        "description": "Translations for the text field. The object keys are the two letter language codes (ru, de, it, etc.) and the values are the button label translation for each language.\nExample: { \"en\" : \"name\", \"ru\" : \"имя\" }\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nvar config = {\n    \"variations\": [\n        {\n            \"name\": \"plugin name\",\n            \"nameLocale\": {\n                \"fr\": \"french plugin name\",\n                \"es\": \"spanish plugin name\"\n            },\n            ...\n        }\n    ]\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nvar config = {\n    \"variations\": [\n        {\n            \"name\": \"plugin name\",\n            \"nameLocale\": {\n                \"fr\": \"french plugin name\",\n                \"es\": \"spanish plugin name\"\n            },\n            ...\n        }\n    ]\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar config = {\n    \"variations\": [\n        {\n            \"name\": \"plugin name\",\n            \"nameLocale\": {\n                \"fr\": \"french plugin name\",\n                \"es\": \"spanish plugin name\"\n            },\n            ...\n        }\n    ]\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nvar config = {\n    \"variations\": [\n        {\n            \"name\": \"plugin name\",\n            \"nameLocale\": {\n                \"fr\": \"french plugin name\",\n                \"es\": \"spanish plugin name\"\n            },\n            ...\n        }\n    ]\n};\n```",
        "longname": "localeTranslate",
        "scope": "global",
        "see": [
            "office-js-api/Examples/Plugins/Common/Enumeration/localeTranslate.js"
        ],
        "examples": [
            "var config = {\n    \"variations\": [\n        {\n            \"name\": \"plugin name\",\n            \"nameLocale\": {\n                \"fr\": \"french plugin name\",\n                \"es\": \"spanish plugin name\"\n            },\n            ...\n        }\n    ]\n};"
        ]
    },
    {
        "comment": "/**\n\t * The editors which the plugin is available for:\n\t * <b>word</b> - text document editor,\n\t * <b>cell</b> - spreadsheet editor,\n\t * <b>slide</b> - presentation editor,\n\t * <b>pdf</b> - pdf editor.\n\t * @typedef {(\"word\" | \"cell\" | \"slide\" | \"pdf\")} editorType\n\t * @see office-js-api/Examples/Plugins/{Editor}/Enumeration/editorType.js\n\t */",
        "meta": {
            "lineno": 48,
            "columnno": 1
        },
        "kind": "typedef",
        "name": "editorType",
        "type": {
            "names": [
                "\"word\"",
                "\"cell\"",
                "\"slide\"",
                "\"pdf\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"word\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"cell\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"slide\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pdf\""
                    }
                ]
            }
        },
        "description": "The editors which the plugin is available for:\n<b>word</b> - text document editor,\n<b>cell</b> - spreadsheet editor,\n<b>slide</b> - presentation editor,\n<b>pdf</b> - pdf editor.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nvar config = {\n    \"variations\": [\n        {\n            \"EditorsSupport\": [\"word\", \"cell\", \"slide\"],\n            ...\n        }\n    ]\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nvar config = {\n    \"variations\": [\n        {\n            \"EditorsSupport\": [\"word\", \"cell\", \"slide\"],\n            ...\n        }\n    ]\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar config = {\n    \"variations\": [\n        {\n            \"EditorsSupport\": [\"word\", \"cell\", \"slide\"],\n            ...\n        }\n    ]\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nvar config = {\n    \"variations\": [\n        {\n            \"EditorsSupport\": [\"word\", \"cell\", \"slide\"],\n            ...\n        }\n    ]\n};\n```",
        "longname": "editorType",
        "scope": "global",
        "see": [
            "office-js-api/Examples/Plugins/Common/Enumeration/editorType.js"
        ],
        "examples": [
            "var config = {\n    \"variations\": [\n        {\n            \"EditorsSupport\": [\"word\", \"cell\", \"slide\"],\n            ...\n        }\n    ]\n};"
        ]
    },
    {
        "comment": "/**\n\t * The data type selected in the editor and sent to the plugin:\n     * <b>text</b> - the text data,\n\t * <b>html</b> - HTML formatted code,\n\t * <b>ole</b> - OLE object data,\n     * <b>desktop</b> - the desktop editor data,\n     * <b>destop-external</b> - the main page data of the desktop app (system messages),\n     * <b>none</b> - no data will be send to the plugin from the editor,\n\t * <b>sign</b> - the sign for the keychain plugin.\n\t * @typedef {(\"text\" | \"html\" | \"ole\" | \"desktop\" | \"destop-external\" | \"none\" | \"sign\")} initDataType\n     * @see office-js-api/Examples/Plugins/{Editor}/Enumeration/initDataType.js\n\t */",
        "meta": {
            "lineno": 58,
            "columnno": 1
        },
        "kind": "typedef",
        "name": "initDataType",
        "type": {
            "names": [
                "\"text\"",
                "\"html\"",
                "\"ole\"",
                "\"desktop\"",
                "\"destop-external\"",
                "\"none\"",
                "\"sign\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"text\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"html\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ole\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"desktop\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"destop-external\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"none\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"sign\""
                    }
                ]
            }
        },
        "description": "The data type selected in the editor and sent to the plugin:\n<b>text</b> - the text data,\n<b>html</b> - HTML formatted code,\n<b>ole</b> - OLE object data,\n<b>desktop</b> - the desktop editor data,\n<b>destop-external</b> - the main page data of the desktop app (system messages),\n<b>none</b> - no data will be send to the plugin from the editor,\n<b>sign</b> - the sign for the keychain plugin.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nvar config = {\n    \"variations\": [\n        {\n            \"initDataType\": \"ole\",\n            ...\n        }\n    ]\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nvar config = {\n    \"variations\": [\n        {\n            \"initDataType\": \"ole\",\n            ...\n        }\n    ]\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar config = {\n    \"variations\": [\n        {\n            \"initDataType\": \"ole\",\n            ...\n        }\n    ]\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nvar config = {\n    \"variations\": [\n        {\n            \"initDataType\": \"ole\",\n            ...\n        }\n    ]\n};\n```",
        "longname": "initDataType",
        "scope": "global",
        "see": [
            "office-js-api/Examples/Plugins/Common/Enumeration/initDataType.js"
        ],
        "examples": [
            "var config = {\n    \"variations\": [\n        {\n            \"initDataType\": \"ole\",\n            ...\n        }\n    ]\n};"
        ]
    },
    {
        "comment": "/**\n\t * The skinnable plugin button used in the plugin interface (used for visual plugins with their own window only, i.e. isVisual == true and isInsideMode == false).\n\t * @typedef { Object } Button\n\t * @property {string} text - The label which is displayed on the button.\n\t * @property {boolean} [primary] - Defines if the button is primary or not. The primary flag affects the button skin only.\n\t * @property {boolean} [isViewer] - Defines if the button is shown in the viewer mode only or not.\n\t * @property {localeTranslate} [textLocale] - Translations for the text field. The object keys are the two letter language codes (ru, de, it, etc.) and the values are the button label translation for each language.\n\t * @see office-js-api/Examples/Plugins/{Editor}/Enumeration/Button.js\n\t */",
        "meta": {
            "lineno": 71,
            "columnno": 1
        },
        "kind": "typedef",
        "name": "Button",
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        },
        "description": "The skinnable plugin button used in the plugin interface (used for visual plugins with their own window only, i.e. isVisual == true and isInsideMode == false).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nvar config = {\n    \"variations\": [\n        {\n            \"buttons\": [\n                { \n                    \"text\": \"Cancel\",\n                    \"primary\": false,\n                    \"isviewer\": false,\n                    \"textLocale\": {\n                        \"fr\": \"Annuler\",\n                        \"es\": \"Cancelar\"\n                    }\n                }\n            ],\n            ...\n        }\n    ]\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nvar config = {\n    \"variations\": [\n        {\n            \"buttons\": [\n                { \n                    \"text\": \"Cancel\",\n                    \"primary\": false,\n                    \"isviewer\": false,\n                    \"textLocale\": {\n                        \"fr\": \"Annuler\",\n                        \"es\": \"Cancelar\"\n                    }\n                }\n            ],\n            ...\n        }\n    ]\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar config = {\n    \"variations\": [\n        {\n            \"buttons\": [\n                { \n                    \"text\": \"Cancel\",\n                    \"primary\": false,\n                    \"isviewer\": false,\n                    \"textLocale\": {\n                        \"fr\": \"Annuler\",\n                        \"es\": \"Cancelar\"\n                    }\n                }\n            ],\n            ...\n        }\n    ]\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nvar config = {\n    \"variations\": [\n        {\n            \"buttons\": [\n                { \n                    \"text\": \"Cancel\",\n                    \"primary\": false,\n                    \"isviewer\": false,\n                    \"textLocale\": {\n                        \"fr\": \"Annuler\",\n                        \"es\": \"Cancelar\"\n                    }\n                }\n            ],\n            ...\n        }\n    ]\n};\n```",
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "text",
                "description": "The label which is displayed on the button."
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "primary",
                "description": "Defines if the button is primary or not. The primary flag affects the button skin only.",
                "optional": true
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isViewer",
                "description": "Defines if the button is shown in the viewer mode only or not.",
                "optional": true
            },
            {
                "type": {
                    "names": [
                        "localeTranslate"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "localeTranslate"
                    }
                },
                "name": "textLocale",
                "description": "Translations for the text field. The object keys are the two letter language codes (ru, de, it, etc.) and the values are the button label translation for each language.",
                "optional": true
            }
        ],
        "longname": "Button",
        "scope": "global",
        "see": [
            "office-js-api/Examples/Plugins/Common/Enumeration/Button.js"
        ],
        "examples": [
            "var config = {\n    \"variations\": [\n        {\n            \"buttons\": [\n                { \n                    \"text\": \"Cancel\",\n                    \"primary\": false,\n                    \"isviewer\": false,\n                    \"textLocale\": {\n                        \"fr\": \"Annuler\",\n                        \"es\": \"Cancelar\"\n                    }\n                }\n            ],\n            ...\n        }\n    ]\n};"
        ]
    },
    {
        "comment": "/**\n\t * @typedef {Object} ContentControl\n\t * Content control object.\n\t * @property {string} Tag - A tag assigned to the content control. The same tag can be assigned to several content controls so that you can make reference to them in your code.\n\t * @property {string} Id - A unique content control identifier. It can be used to search for a certain content control and make reference to it in your code.\n\t * @property {ContentControlLock} Lock - A value that defines if it is possible to delete and/or edit the content control or not.\n\t * @property {string} InternalId - A unique internal identifier of the content control. It is used for all operations with content controls.\n\t * @see office-js-api/Examples/Plugins/{Editor}/Enumeration/ContentControl.js\n\t */",
        "meta": {
            "lineno": 81,
            "columnno": 1
        },
        "kind": "typedef",
        "name": "ContentControl",
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        },
        "description": "Content control object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nvar oContentControl = {\n    \"Tag\": \"Document\",\n    \"Id\": 0,\n    \"Lock\": 0,\n    \"InternalId\": \"1_713\"\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nvar oContentControl = {\n    \"Tag\": \"Document\",\n    \"Id\": 0,\n    \"Lock\": 0,\n    \"InternalId\": \"1_713\"\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oContentControl = {\n    \"Tag\": \"Document\",\n    \"Id\": 0,\n    \"Lock\": 0,\n    \"InternalId\": \"1_713\"\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nvar oContentControl = {\n    \"Tag\": \"Document\",\n    \"Id\": 0,\n    \"Lock\": 0,\n    \"InternalId\": \"1_713\"\n};\n```",
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Tag",
                "description": "A tag assigned to the content control. The same tag can be assigned to several content controls so that you can make reference to them in your code."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Id",
                "description": "A unique content control identifier. It can be used to search for a certain content control and make reference to it in your code."
            },
            {
                "type": {
                    "names": [
                        "ContentControlLock"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ContentControlLock"
                    }
                },
                "name": "Lock",
                "description": "A value that defines if it is possible to delete and/or edit the content control or not."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "InternalId",
                "description": "A unique internal identifier of the content control. It is used for all operations with content controls."
            }
        ],
        "longname": "ContentControl",
        "scope": "global",
        "see": [
            "office-js-api/Examples/Plugins/Common/Enumeration/ContentControl.js"
        ],
        "examples": [
            "var oContentControl = {\n    \"Tag\": \"Document\",\n    \"Id\": 0,\n    \"Lock\": 0,\n    \"InternalId\": \"1_713\"\n};"
        ]
    },
    {
        "comment": "/**\n     * @typedef {(0 | 1 | 2 | 3)} ContentControlLock\n     * A value that defines if it is possible to delete and/or edit the content control or not:\n\t * <b>0</b> - only deleting,\n\t * <b>1</b> - disable deleting or editing,\n\t * <b>2</b> - only editing,\n\t * <b>3</b> - full access.\n     * @see office-js-api/Examples/Plugins/{Editor}/Enumeration/ContentControlLock.js\n\t */",
        "meta": {
            "lineno": 91,
            "columnno": 1
        },
        "kind": "typedef",
        "name": "ContentControlLock",
        "type": {
            "names": [
                "0",
                "1",
                "2",
                "3"
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "0"
                    },
                    {
                        "type": "NameExpression",
                        "name": "1"
                    },
                    {
                        "type": "NameExpression",
                        "name": "2"
                    },
                    {
                        "type": "NameExpression",
                        "name": "3"
                    }
                ]
            }
        },
        "description": "A value that defines if it is possible to delete and/or edit the content control or not:\n<b>0</b> - only deleting,\n<b>1</b> - disable deleting or editing,\n<b>2</b> - only editing,\n<b>3</b> - full access.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nvar arrDocuments = [{\n    \"Props\": {\n        \"Id\": 100,\n        \"Tag\": \"CC_Tag\",\n        \"Lock\": 3\n    },\n    \"Script\": \"var oParagraph = Api.CreateParagraph();oParagraph.AddText('Hello world!');Api.GetDocument().InsertContent([oParagraph]);\"\n}];\nwindow.Asc.plugin.executeMethod(\"InsertAndReplaceContentControls\", [arrDocuments]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nvar arrDocuments = [{\n    \"Props\": {\n        \"Id\": 100,\n        \"Tag\": \"CC_Tag\",\n        \"Lock\": 3\n    },\n    \"Script\": \"var oParagraph = Api.CreateParagraph();oParagraph.AddText('Hello world!');Api.GetDocument().InsertContent([oParagraph]);\"\n}];\nwindow.Asc.plugin.executeMethod(\"InsertAndReplaceContentControls\", [arrDocuments]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar arrDocuments = [{\n    \"Props\": {\n        \"Id\": 100,\n        \"Tag\": \"CC_Tag\",\n        \"Lock\": 3\n    },\n    \"Script\": \"var oParagraph = Api.CreateParagraph();oParagraph.AddText('Hello world!');Api.GetDocument().InsertContent([oParagraph]);\"\n}];\nwindow.Asc.plugin.executeMethod(\"InsertAndReplaceContentControls\", [arrDocuments]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nvar arrDocuments = [{\n    \"Props\": {\n        \"Id\": 100,\n        \"Tag\": \"CC_Tag\",\n        \"Lock\": 3\n    },\n    \"Script\": \"var oParagraph = Api.CreateParagraph();oParagraph.AddText('Hello world!');Api.GetDocument().InsertContent([oParagraph]);\"\n}];\nwindow.Asc.plugin.executeMethod(\"InsertAndReplaceContentControls\", [arrDocuments]);\n```",
        "longname": "ContentControlLock",
        "scope": "global",
        "see": [
            "office-js-api/Examples/Plugins/Common/Enumeration/ContentControlLock.js"
        ],
        "examples": [
            "var arrDocuments = [{\n    \"Props\": {\n        \"Id\": 100,\n        \"Tag\": \"CC_Tag\",\n        \"Lock\": 3\n    },\n    \"Script\": \"var oParagraph = Api.CreateParagraph();oParagraph.AddText('Hello world!');Api.GetDocument().InsertContent([oParagraph]);\"\n}];\nwindow.Asc.plugin.executeMethod(\"InsertAndReplaceContentControls\", [arrDocuments]);"
        ]
    },
    {
        "comment": "/**\n\t * @typedef {Object} comment\n\t * Comment object.\n\t * @property {string} Id - The comment ID.\n\t * @property {CommentData} Data - An object which contains the comment data.\n\t * @see office-js-api/Examples/Plugins/{Editor}/Enumeration/comment.js\n\t */",
        "meta": {
            "lineno": 101,
            "columnno": 1
        },
        "kind": "typedef",
        "name": "comment",
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        },
        "description": "Comment object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nvar comment = {\n    \"Id\": \"1_631\",\n    \"Data\": {\n        \"UserName\": \"John Smith\",\n        \"Text\": \"comment\",\n        \"Time\": \"1662737941471\",\n        \"Solved\": true,\n        \"Replies\": [\n            {\n                \"UserName\": \"Mark Potato\",\n                \"Text\": \"reply 1\",\n                \"Time\": \"1662740895892\",\n                \"Solved\": false\n            }\n        ]\n    }\n}\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nvar comment = {\n    \"Id\": \"1_631\",\n    \"Data\": {\n        \"UserName\": \"John Smith\",\n        \"Text\": \"comment\",\n        \"Time\": \"1662737941471\",\n        \"Solved\": true,\n        \"Replies\": [\n            {\n                \"UserName\": \"Mark Potato\",\n                \"Text\": \"reply 1\",\n                \"Time\": \"1662740895892\",\n                \"Solved\": false\n            }\n        ]\n    }\n}\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar comment = {\n    \"Id\": \"1_631\",\n    \"Data\": {\n        \"UserName\": \"John Smith\",\n        \"Text\": \"comment\",\n        \"Time\": \"1662737941471\",\n        \"Solved\": true,\n        \"Replies\": [\n            {\n                \"UserName\": \"Mark Potato\",\n                \"Text\": \"reply 1\",\n                \"Time\": \"1662740895892\",\n                \"Solved\": false\n            }\n        ]\n    }\n}\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nvar comment = {\n    \"Id\": \"1_631\",\n    \"Data\": {\n        \"UserName\": \"John Smith\",\n        \"Text\": \"comment\",\n        \"Time\": \"1662737941471\",\n        \"Solved\": true,\n        \"Replies\": [\n            {\n                \"UserName\": \"Mark Potato\",\n                \"Text\": \"reply 1\",\n                \"Time\": \"1662740895892\",\n                \"Solved\": false\n            }\n        ]\n    }\n}\n```",
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Id",
                "description": "The comment ID."
            },
            {
                "type": {
                    "names": [
                        "CommentData"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "CommentData"
                    }
                },
                "name": "Data",
                "description": "An object which contains the comment data."
            }
        ],
        "longname": "comment",
        "scope": "global",
        "see": [
            "office-js-api/Examples/Plugins/Common/Enumeration/comment.js"
        ],
        "examples": [
            "var comment = {\n    \"Id\": \"1_631\",\n    \"Data\": {\n        \"UserName\": \"John Smith\",\n        \"Text\": \"comment\",\n        \"Time\": \"1662737941471\",\n        \"Solved\": true,\n        \"Replies\": [\n            {\n                \"UserName\": \"Mark Potato\",\n                \"Text\": \"reply 1\",\n                \"Time\": \"1662740895892\",\n                \"Solved\": false\n            }\n        ]\n    }\n}"
        ]
    },
    {
        "comment": "/**\n\t * @typedef {Object} CommentData\n\t * The comment data.\n\t * @property {string} UserName - The comment author.\n\t * @property {string} Text - The comment text.\n\t * @property {string} Time - The time when the comment was posted (in milliseconds).\n\t * @property {boolean} Solved - Specifies if the comment is resolved (**true**) or not (**false**).\n\t * @property {CommentData[]} Replies - An array containing the comment replies represented as the *CommentData* object.\n\t * @see office-js-api/Examples/Plugins/{Editor}/Enumeration/CommentData.js\n\t */",
        "meta": {
            "lineno": 109,
            "columnno": 1
        },
        "kind": "typedef",
        "name": "CommentData",
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        },
        "description": "The comment data.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nvar oCommentData = {\n    \"UserName\": \"John Smith\",\n    \"Text\": \"comment\",\n    \"Time\": \"1662737941471\",\n    \"Solved\": true,\n    \"Replies\": [\n        {\n            \"UserName\": \"Mark Potato\",\n            \"Text\": \"reply 1\",\n            \"Time\": \"1662740895892\",\n            \"Solved\": false\n        }\n    ]\n};\nwindow.Asc.plugin.executeMethod (\"AddComment\", [oCommentData]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nvar oCommentData = {\n    \"UserName\": \"John Smith\",\n    \"Text\": \"comment\",\n    \"Time\": \"1662737941471\",\n    \"Solved\": true,\n    \"Replies\": [\n        {\n            \"UserName\": \"Mark Potato\",\n            \"Text\": \"reply 1\",\n            \"Time\": \"1662740895892\",\n            \"Solved\": false\n        }\n    ]\n};\nwindow.Asc.plugin.executeMethod (\"AddComment\", [oCommentData]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oCommentData = {\n    \"UserName\": \"John Smith\",\n    \"Text\": \"comment\",\n    \"Time\": \"1662737941471\",\n    \"Solved\": true,\n    \"Replies\": [\n        {\n            \"UserName\": \"Mark Potato\",\n            \"Text\": \"reply 1\",\n            \"Time\": \"1662740895892\",\n            \"Solved\": false\n        }\n    ]\n};\nwindow.Asc.plugin.executeMethod (\"AddComment\", [oCommentData]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nvar oCommentData = {\n    \"UserName\": \"John Smith\",\n    \"Text\": \"comment\",\n    \"Time\": \"1662737941471\",\n    \"Solved\": true,\n    \"Replies\": [\n        {\n            \"UserName\": \"Mark Potato\",\n            \"Text\": \"reply 1\",\n            \"Time\": \"1662740895892\",\n            \"Solved\": false\n        }\n    ]\n};\nwindow.Asc.plugin.executeMethod (\"AddComment\", [oCommentData]);\n```",
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "UserName",
                "description": "The comment author."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Text",
                "description": "The comment text."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Time",
                "description": "The time when the comment was posted (in milliseconds)."
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "Solved",
                "description": "Specifies if the comment is resolved (**true**) or not (**false**)."
            },
            {
                "type": {
                    "names": [
                        "Array.<CommentData>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "CommentData",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "Replies",
                "description": "An array containing the comment replies represented as the *CommentData* object."
            }
        ],
        "longname": "CommentData",
        "scope": "global",
        "see": [
            "office-js-api/Examples/Plugins/Common/Enumeration/CommentData.js"
        ],
        "examples": [
            "var oCommentData = {\n    \"UserName\": \"John Smith\",\n    \"Text\": \"comment\",\n    \"Time\": \"1662737941471\",\n    \"Solved\": true,\n    \"Replies\": [\n        {\n            \"UserName\": \"Mark Potato\",\n            \"Text\": \"reply 1\",\n            \"Time\": \"1662740895892\",\n            \"Solved\": false\n        }\n    ]\n};\nwindow.Asc.plugin.executeMethod (\"AddComment\", [oCommentData]);"
        ]
    },
    {
        "comment": "/**\n\t * @global\n\t * @class\n\t * @name Plugin\n\t * @hideconstructor\n\t */",
        "meta": {
            "lineno": 177,
            "columnno": 1
        },
        "kind": "class",
        "name": "Plugin",
        "longname": "Plugin",
        "scope": "global"
    },
    {
        "comment": "/**\n\t * Event: init\n\t * @event Plugin#init\n\t * @memberof Plugin\n\t * @alias init\n\t * @description The function called when the plugin is launched. It defines the data sent to the plugin describing what actions are to be performed and how they must be performed.\n\t * @param {string} text - Defines the data parameter that depends on the {@link /plugin/config#initDataType initDataType} setting specified in the *config.json* file.\n\t * @see office-js-api/Examples/Plugins/{Editor}/Plugin/Methods/init.js\n\t */",
        "meta": {
            "lineno": 188,
            "columnno": 1
        },
        "kind": "event",
        "name": "init",
        "description": "The function called when the plugin is launched. It defines the data sent to the plugin describing what actions are to be performed and how they must be performed.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.init = function () {\n    this.callCommand(function() {\n        var oDocument = Api.GetDocument();\n        var oParagraph = Api.CreateParagraph();\n        oParagraph.AddText(\"Hello world!\");\n        oDocument.InsertContent([oParagraph]);\n    }, true);\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.init = function () {\n    this.callCommand(function() {\n        var oDocument = Api.GetDocument();\n        var oParagraph = Api.CreateParagraph();\n        oParagraph.AddText(\"Hello world!\");\n        oDocument.InsertContent([oParagraph]);\n    }, true);\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.init = function () {\n    this.callCommand(function() {\n        var oDocument = Api.GetDocument();\n        var oParagraph = Api.CreateParagraph();\n        oParagraph.AddText(\"Hello world!\");\n        oDocument.InsertContent([oParagraph]);\n    }, true);\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.init = function () {\n    this.callCommand(function() {\n        var oDocument = Api.GetDocument();\n        var oParagraph = Api.CreateParagraph();\n        oParagraph.AddText(\"Hello world!\");\n        oDocument.InsertContent([oParagraph]);\n    }, true);\n};\n```",
        "memberof": "Plugin",
        "longname": "Plugin#event:init",
        "scope": "instance",
        "alias": "init",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "text",
                "description": "Defines the data parameter that depends on the {@link /plugin/config#initDataType initDataType} setting specified in the *config.json* file."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Plugin/Methods/init.js"
        ],
        "examples": [
            "window.Asc.plugin.init = function () {\n    this.callCommand(function() {\n        var oDocument = Api.GetDocument();\n        var oParagraph = Api.CreateParagraph();\n        oParagraph.AddText(\"Hello world!\");\n        oDocument.InsertContent([oParagraph]);\n    }, true);\n};"
        ]
    },
    {
        "comment": "/**\n\t * Event: button\n\t * @event Plugin#button\n\t * @memberof Plugin\n\t * @alias button\n\t * @description The function called when any of the plugin buttons is clicked. It defines the buttons used with the plugin and the plugin behavior when they are clicked.\n\t * @param {number} buttonIndex - Defines the button index in the {@link /plugin/config#buttons buttons} array of the *config.json* file. If *id == -1*, then the plugin considers that the <b>Close</b> window cross button has been clicked or its operation has been somehow interrupted.\n\t * @see office-js-api/Examples/Plugins/{Editor}/Plugin/Methods/button.js\n\t */",
        "meta": {
            "lineno": 198,
            "columnno": 1
        },
        "kind": "event",
        "name": "button",
        "description": "The function called when any of the plugin buttons is clicked. It defines the buttons used with the plugin and the plugin behavior when they are clicked.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.button = function (id) {\n    this.executeCommand(\"close\", '');\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.button = function (id) {\n    this.executeCommand(\"close\", '');\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.button = function (id) {\n    this.executeCommand(\"close\", '');\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.button = function (id) {\n    this.executeCommand(\"close\", '');\n};\n```",
        "memberof": "Plugin",
        "longname": "Plugin#event:button",
        "scope": "instance",
        "alias": "button",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "buttonIndex",
                "description": "Defines the button index in the {@link /plugin/config#buttons buttons} array of the *config.json* file. If *id == -1*, then the plugin considers that the <b>Close</b> window cross button has been clicked or its operation has been somehow interrupted."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Plugin/Methods/button.js"
        ],
        "examples": [
            "window.Asc.plugin.button = function (id) {\n    this.executeCommand(\"close\", '');\n};"
        ]
    },
    {
        "comment": "/**\n\t * Event: onTargetPositionChanged\n\t * @event Plugin#onTargetPositionChanged\n\t * @memberof Plugin\n\t * @alias onTargetPositionChanged\n\t * @description The function called when the target position in the editor is changed.\n\t * @see office-js-api/Examples/Plugins/{Editor}/Plugin/Methods/onTargetPositionChanged.js\n\t */",
        "meta": {
            "lineno": 208,
            "columnno": 1
        },
        "kind": "event",
        "name": "onTargetPositionChanged",
        "description": "The function called when the target position in the editor is changed.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.event_onTargetPositionChanged = function() {\n    if (!fClickLabel) {\n        window.Asc.plugin.executeMethod(\"GetCurrentContentControl\");\n    }\n    fClickLabel = false;\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.event_onTargetPositionChanged = function() {\n    if (!fClickLabel) {\n        window.Asc.plugin.executeMethod(\"GetCurrentContentControl\");\n    }\n    fClickLabel = false;\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.event_onTargetPositionChanged = function() {\n    if (!fClickLabel) {\n        window.Asc.plugin.executeMethod(\"GetCurrentContentControl\");\n    }\n    fClickLabel = false;\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.event_onTargetPositionChanged = function() {\n    if (!fClickLabel) {\n        window.Asc.plugin.executeMethod(\"GetCurrentContentControl\");\n    }\n    fClickLabel = false;\n};\n```",
        "memberof": "Plugin",
        "longname": "Plugin#event:onTargetPositionChanged",
        "scope": "instance",
        "alias": "onTargetPositionChanged",
        "see": [
            "office-js-api/Examples/Plugins/Common/Plugin/Methods/onTargetPositionChanged.js"
        ],
        "examples": [
            "window.Asc.plugin.event_onTargetPositionChanged = function() {\n    if (!fClickLabel) {\n        window.Asc.plugin.executeMethod(\"GetCurrentContentControl\");\n    }\n    fClickLabel = false;\n};"
        ]
    },
    {
        "comment": "/**\n\t * Event: onDocumentContentReady\n\t * @event Plugin#onDocumentContentReady\n\t * @memberof Plugin\n\t * @alias onDocumentContentReady\n\t * @description The function called when the document is completely loaded.\n\t * @see office-js-api/Examples/Plugins/{Editor}/Plugin/Methods/onDocumentContentReady.js\n\t */",
        "meta": {
            "lineno": 217,
            "columnno": 1
        },
        "kind": "event",
        "name": "onDocumentContentReady",
        "description": "The function called when the document is completely loaded.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.event_onDocumentContentReady = function() {\n    var oProperties = {\n        \"searchString\"  : \"ONLYOFFICE\",\n        \"replaceString\" : \"ONLYOFFICE is cool\",\n        \"matchCase\"     : false\n    };\n\n    window.Asc.plugin.executeMethod(\"SearchAndReplace\", [oProperties], function() {\n            window.Asc.plugin.executeCommand(\"close\", \"\");\n    });\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.event_onDocumentContentReady = function() {\n    var oProperties = {\n        \"searchString\"  : \"ONLYOFFICE\",\n        \"replaceString\" : \"ONLYOFFICE is cool\",\n        \"matchCase\"     : false\n    };\n\n    window.Asc.plugin.executeMethod(\"SearchAndReplace\", [oProperties], function() {\n            window.Asc.plugin.executeCommand(\"close\", \"\");\n    });\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.event_onDocumentContentReady = function() {\n    var oProperties = {\n        \"searchString\"  : \"ONLYOFFICE\",\n        \"replaceString\" : \"ONLYOFFICE is cool\",\n        \"matchCase\"     : false\n    };\n\n    window.Asc.plugin.executeMethod(\"SearchAndReplace\", [oProperties], function() {\n            window.Asc.plugin.executeCommand(\"close\", \"\");\n    });\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.event_onDocumentContentReady = function() {\n    var oProperties = {\n        \"searchString\"  : \"ONLYOFFICE\",\n        \"replaceString\" : \"ONLYOFFICE is cool\",\n        \"matchCase\"     : false\n    };\n\n    window.Asc.plugin.executeMethod(\"SearchAndReplace\", [oProperties], function() {\n            window.Asc.plugin.executeCommand(\"close\", \"\");\n    });\n};\n```",
        "memberof": "Plugin",
        "longname": "Plugin#event:onDocumentContentReady",
        "scope": "instance",
        "alias": "onDocumentContentReady",
        "see": [
            "office-js-api/Examples/Plugins/Common/Plugin/Methods/onDocumentContentReady.js"
        ],
        "examples": [
            "window.Asc.plugin.event_onDocumentContentReady = function() {\n    var oProperties = {\n        \"searchString\"  : \"ONLYOFFICE\",\n        \"replaceString\" : \"ONLYOFFICE is cool\",\n        \"matchCase\"     : false\n    };\n\n    window.Asc.plugin.executeMethod(\"SearchAndReplace\", [oProperties], function() {\n            window.Asc.plugin.executeCommand(\"close\", \"\");\n    });\n};"
        ]
    },
    {
        "comment": "/**\n\t * Event: onClick\n\t * @event Plugin#onClick\n\t * @memberof Plugin\n\t * @alias onClick\n\t * @description The function called when the user clicks on the element.\n\t * @param {boolean} isSelectionUse - Defines if the selection is used or not.\n\t * @see office-js-api/Examples/Plugins/{Editor}/Plugin/Methods/onClick.js\n\t */",
        "meta": {
            "lineno": 226,
            "columnno": 1
        },
        "kind": "event",
        "name": "onClick",
        "description": "The function called when the user clicks on the element.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.event_onClick = function(isSelectionUse) {\n    window.Asc.plugin.executeMethod(\"GetCurrentContentControlPr\", [], function(obj) {\n        window.Asc.plugin.currentContentControl = obj;\n        var controlTag = obj ? obj.Tag : \"\";\n        if (isSelectionUse)\n            controlTag = \"\";\n        ...\n    });\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.event_onClick = function(isSelectionUse) {\n    window.Asc.plugin.executeMethod(\"GetCurrentContentControlPr\", [], function(obj) {\n        window.Asc.plugin.currentContentControl = obj;\n        var controlTag = obj ? obj.Tag : \"\";\n        if (isSelectionUse)\n            controlTag = \"\";\n        ...\n    });\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.event_onClick = function(isSelectionUse) {\n    window.Asc.plugin.executeMethod(\"GetCurrentContentControlPr\", [], function(obj) {\n        window.Asc.plugin.currentContentControl = obj;\n        var controlTag = obj ? obj.Tag : \"\";\n        if (isSelectionUse)\n            controlTag = \"\";\n        ...\n    });\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.event_onClick = function(isSelectionUse) {\n    window.Asc.plugin.executeMethod(\"GetCurrentContentControlPr\", [], function(obj) {\n        window.Asc.plugin.currentContentControl = obj;\n        var controlTag = obj ? obj.Tag : \"\";\n        if (isSelectionUse)\n            controlTag = \"\";\n        ...\n    });\n};\n```",
        "memberof": "Plugin",
        "longname": "Plugin#event:onClick",
        "scope": "instance",
        "alias": "onClick",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isSelectionUse",
                "description": "Defines if the selection is used or not."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Plugin/Methods/onClick.js"
        ],
        "examples": [
            "window.Asc.plugin.event_onClick = function(isSelectionUse) {\n    window.Asc.plugin.executeMethod(\"GetCurrentContentControlPr\", [], function(obj) {\n        window.Asc.plugin.currentContentControl = obj;\n        var controlTag = obj ? obj.Tag : \"\";\n        if (isSelectionUse)\n            controlTag = \"\";\n        ...\n    });\n};"
        ]
    },
    {
        "comment": "/**\n\t * Event: inputHelper_onSelectItem\n\t * @event Plugin#inputHelper_onSelectItem\n\t * @memberof Plugin\n\t * @alias inputHelper_onSelectItem\n\t * @description The function called when the user is trying to select an item from the input helper.\n\t * @param {object} item - Defines the selected item:\n\t * <b>text</b> - the item text,  \n\t * <b>type</b>: string,  \n\t * <b>example</b>: \"name\";\n\t * <b>id</b> - the item index,  \n\t * <b>type</b>: string,  \n\t * <b>example</b>: \"1\".\n\t * @see office-js-api/Examples/Plugins/{Editor}/Plugin/Methods/inputHelper_onSelectItem.js\n\t */",
        "meta": {
            "lineno": 236,
            "columnno": 1
        },
        "kind": "event",
        "name": "inputHelper_onSelectItem",
        "description": "The function called when the user is trying to select an item from the input helper.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.inputHelper_onSelectItem = function(item) {\n    if (!item)\n        return;\n\n    window.Asc.plugin.executeMethod(\"InputText\", [item.text, window.Asc.plugin.currentText]);\n    window.Asc.plugin.getInputHelper().unShow();\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.inputHelper_onSelectItem = function(item) {\n    if (!item)\n        return;\n\n    window.Asc.plugin.executeMethod(\"InputText\", [item.text, window.Asc.plugin.currentText]);\n    window.Asc.plugin.getInputHelper().unShow();\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.inputHelper_onSelectItem = function(item) {\n    if (!item)\n        return;\n\n    window.Asc.plugin.executeMethod(\"InputText\", [item.text, window.Asc.plugin.currentText]);\n    window.Asc.plugin.getInputHelper().unShow();\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.inputHelper_onSelectItem = function(item) {\n    if (!item)\n        return;\n\n    window.Asc.plugin.executeMethod(\"InputText\", [item.text, window.Asc.plugin.currentText]);\n    window.Asc.plugin.getInputHelper().unShow();\n};\n```",
        "memberof": "Plugin",
        "longname": "Plugin#event:inputHelper_onSelectItem",
        "scope": "instance",
        "alias": "inputHelper_onSelectItem",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "name": "item",
                "description": "Defines the selected item:\n<b>text</b> - the item text,  \n<b>type</b>: string,  \n<b>example</b>: \"name\";\n<b>id</b> - the item index,  \n<b>type</b>: string,  \n<b>example</b>: \"1\"."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Plugin/Methods/inputHelper_onSelectItem.js"
        ],
        "examples": [
            "window.Asc.plugin.inputHelper_onSelectItem = function(item) {\n    if (!item)\n        return;\n\n    window.Asc.plugin.executeMethod(\"InputText\", [item.text, window.Asc.plugin.currentText]);\n    window.Asc.plugin.getInputHelper().unShow();\n};"
        ]
    },
    {
        "comment": "/**\n\t * Event: onInputHelperClear\n\t * @event Plugin#onInputHelperClear\n\t * @memberof Plugin\n\t * @alias onInputHelperClear\n\t * @description The function called when the user is trying to clear the text and the input helper disappears.\n\t * @see office-js-api/Examples/Plugins/{Editor}/Plugin/Methods/onInputHelperClear.js\n\t */",
        "meta": {
            "lineno": 252,
            "columnno": 1
        },
        "kind": "event",
        "name": "onInputHelperClear",
        "description": "The function called when the user is trying to clear the text and the input helper disappears.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.event_onInputHelperClear = function() {\n    window.Asc.plugin.currentText = \"\";\n    window.Asc.plugin.getInputHelper().unShow();\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.event_onInputHelperClear = function() {\n    window.Asc.plugin.currentText = \"\";\n    window.Asc.plugin.getInputHelper().unShow();\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.event_onInputHelperClear = function() {\n    window.Asc.plugin.currentText = \"\";\n    window.Asc.plugin.getInputHelper().unShow();\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.event_onInputHelperClear = function() {\n    window.Asc.plugin.currentText = \"\";\n    window.Asc.plugin.getInputHelper().unShow();\n};\n```",
        "memberof": "Plugin",
        "longname": "Plugin#event:onInputHelperClear",
        "scope": "instance",
        "alias": "onInputHelperClear",
        "see": [
            "office-js-api/Examples/Plugins/Common/Plugin/Methods/onInputHelperClear.js"
        ],
        "examples": [
            "window.Asc.plugin.event_onInputHelperClear = function() {\n    window.Asc.plugin.currentText = \"\";\n    window.Asc.plugin.getInputHelper().unShow();\n};"
        ]
    },
    {
        "comment": "/**\n\t * Event: onInputHelperInput\n\t * @event Plugin#onInputHelperInput\n\t * @memberof Plugin\n\t * @alias onInputHelperInput\n\t * @description The function called when the user is trying to input the text and the input helper appears.\n\t * @param {object} data - Defines the text which the user inputs:\n\t * <b>add</b> - defines if the text is added to the current text (**true**) or this is the beginning of the text (**false**),  \n\t * <b>type</b>: boolean,  \n\t * <b>example</b>: true;\n\t * <b>text</b> - the text which the user inputs,  \n\t * <b>type</b>: string,  \n\t * <b>example</b>: \"text\".\n\t * @see office-js-api/Examples/Plugins/{Editor}/Plugin/Methods/onInputHelperInput.js\n\t */",
        "meta": {
            "lineno": 261,
            "columnno": 1
        },
        "kind": "event",
        "name": "onInputHelperInput",
        "description": "The function called when the user is trying to input the text and the input helper appears.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.event_onInputHelperInput = function(data) {\n    if (data.add)\n        window.Asc.plugin.currentText += data.text;\n    else\n        window.Asc.plugin.currentText = data.text;\n        ...\n}\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.event_onInputHelperInput = function(data) {\n    if (data.add)\n        window.Asc.plugin.currentText += data.text;\n    else\n        window.Asc.plugin.currentText = data.text;\n        ...\n}\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.event_onInputHelperInput = function(data) {\n    if (data.add)\n        window.Asc.plugin.currentText += data.text;\n    else\n        window.Asc.plugin.currentText = data.text;\n        ...\n}\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.event_onInputHelperInput = function(data) {\n    if (data.add)\n        window.Asc.plugin.currentText += data.text;\n    else\n        window.Asc.plugin.currentText = data.text;\n        ...\n}\n```",
        "memberof": "Plugin",
        "longname": "Plugin#event:onInputHelperInput",
        "scope": "instance",
        "alias": "onInputHelperInput",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "name": "data",
                "description": "Defines the text which the user inputs:\n<b>add</b> - defines if the text is added to the current text (**true**) or this is the beginning of the text (**false**),  \n<b>type</b>: boolean,  \n<b>example</b>: true;\n<b>text</b> - the text which the user inputs,  \n<b>type</b>: string,  \n<b>example</b>: \"text\"."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Plugin/Methods/onInputHelperInput.js"
        ],
        "examples": [
            "window.Asc.plugin.event_onInputHelperInput = function(data) {\n    if (data.add)\n        window.Asc.plugin.currentText += data.text;\n    else\n        window.Asc.plugin.currentText = data.text;\n        ...\n}"
        ]
    },
    {
        "comment": "/**\n\t * Event: onTranslate\n\t * @event Plugin#onTranslate\n\t * @memberof Plugin\n\t * @alias onTranslate\n\t * @description The function called right after the plugin startup or later in case the plugin language is changed.\n\t * @see office-js-api/Examples/Plugins/{Editor}/Plugin/Methods/onTranslate.js\n\t */",
        "meta": {
            "lineno": 277,
            "columnno": 1
        },
        "kind": "event",
        "name": "onTranslate",
        "description": "The function called right after the plugin startup or later in case the plugin language is changed.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.onTranslate = function() {\n    var label = document.getElementById(\"button_new\");\n    if (label)\n        label.innerHTML = window.Asc.plugin.tr(\"New\");\n}\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.onTranslate = function() {\n    var label = document.getElementById(\"button_new\");\n    if (label)\n        label.innerHTML = window.Asc.plugin.tr(\"New\");\n}\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.onTranslate = function() {\n    var label = document.getElementById(\"button_new\");\n    if (label)\n        label.innerHTML = window.Asc.plugin.tr(\"New\");\n}\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.onTranslate = function() {\n    var label = document.getElementById(\"button_new\");\n    if (label)\n        label.innerHTML = window.Asc.plugin.tr(\"New\");\n}\n```",
        "memberof": "Plugin",
        "longname": "Plugin#event:onTranslate",
        "scope": "instance",
        "alias": "onTranslate",
        "see": [
            "office-js-api/Examples/Plugins/Common/Plugin/Methods/onTranslate.js"
        ],
        "examples": [
            "window.Asc.plugin.onTranslate = function() {\n    var label = document.getElementById(\"button_new\");\n    if (label)\n        label.innerHTML = window.Asc.plugin.tr(\"New\");\n}"
        ]
    },
    {
        "comment": "/**\n     * Event: onEnableMouseEvent\n     * @event Plugin#onEnableMouseEvent\n     * @memberof Plugin\n     * @alias onEnableMouseEvent\n\t * @description The function called to turn the mouse or touchpad events on/off.\n\t * @param {boolean} isEnabled - Defines if the mouse or touchpad is enabled (**true**) or not (**false**).\n     * @see office-js-api/Examples/Plugins/{Editor}/Plugin/Methods/onEnableMouseEvent.js\n\t */",
        "meta": {
            "lineno": 286,
            "columnno": 4
        },
        "kind": "event",
        "name": "onEnableMouseEvent",
        "description": "The function called to turn the mouse or touchpad events on/off.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.onEnableMouseEvent = function(isEnabled) {\n    var _frames = document.getElementsByTagName(\"iframe\");\n    if (_frames && _frames[0]) {\n        _frames[0].style.pointerEvents = isEnabled ? \"none\" : \"\";\n    }\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.onEnableMouseEvent = function(isEnabled) {\n    var _frames = document.getElementsByTagName(\"iframe\");\n    if (_frames && _frames[0]) {\n        _frames[0].style.pointerEvents = isEnabled ? \"none\" : \"\";\n    }\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.onEnableMouseEvent = function(isEnabled) {\n    var _frames = document.getElementsByTagName(\"iframe\");\n    if (_frames && _frames[0]) {\n        _frames[0].style.pointerEvents = isEnabled ? \"none\" : \"\";\n    }\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.onEnableMouseEvent = function(isEnabled) {\n    var _frames = document.getElementsByTagName(\"iframe\");\n    if (_frames && _frames[0]) {\n        _frames[0].style.pointerEvents = isEnabled ? \"none\" : \"\";\n    }\n};\n```",
        "memberof": "Plugin",
        "longname": "Plugin#event:onEnableMouseEvent",
        "scope": "instance",
        "alias": "onEnableMouseEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isEnabled",
                "description": "Defines if the mouse or touchpad is enabled (**true**) or not (**false**)."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Plugin/Methods/onEnableMouseEvent.js"
        ],
        "examples": [
            "window.Asc.plugin.onEnableMouseEvent = function(isEnabled) {\n    var _frames = document.getElementsByTagName(\"iframe\");\n    if (_frames && _frames[0]) {\n        _frames[0].style.pointerEvents = isEnabled ? \"none\" : \"\";\n    }\n};"
        ]
    },
    {
        "comment": "/**\n     * Event: onExternalMouseUp\n     * @event Plugin#onExternalMouseUp\n     * @memberof Plugin\n     * @alias onExternalMouseUp\n\t * @description The function called when the mouse button is released outside the plugin iframe.\n     * @see office-js-api/Examples/Plugins/{Editor}/Plugin/Methods/onExternalMouseUp.js\n\t */",
        "meta": {
            "lineno": 296,
            "columnno": 4
        },
        "kind": "event",
        "name": "onExternalMouseUp",
        "description": "The function called when the mouse button is released outside the plugin iframe.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.onExternalMouseUp = function () {\n    var evt = document.createEvent(\"MouseEvents\");\n    evt.initMouseEvent(\"mouseup\", true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 0, null);\n    document.dispatchEvent(evt);\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.onExternalMouseUp = function () {\n    var evt = document.createEvent(\"MouseEvents\");\n    evt.initMouseEvent(\"mouseup\", true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 0, null);\n    document.dispatchEvent(evt);\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.onExternalMouseUp = function () {\n    var evt = document.createEvent(\"MouseEvents\");\n    evt.initMouseEvent(\"mouseup\", true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 0, null);\n    document.dispatchEvent(evt);\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.onExternalMouseUp = function () {\n    var evt = document.createEvent(\"MouseEvents\");\n    evt.initMouseEvent(\"mouseup\", true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 0, null);\n    document.dispatchEvent(evt);\n};\n```",
        "memberof": "Plugin",
        "longname": "Plugin#event:onExternalMouseUp",
        "scope": "instance",
        "alias": "onExternalMouseUp",
        "see": [
            "office-js-api/Examples/Plugins/Common/Plugin/Methods/onExternalMouseUp.js"
        ],
        "examples": [
            "window.Asc.plugin.onExternalMouseUp = function () {\n    var evt = document.createEvent(\"MouseEvents\");\n    evt.initMouseEvent(\"mouseup\", true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 0, null);\n    document.dispatchEvent(evt);\n};"
        ]
    },
    {
        "comment": "/**\n     * Event: onExternalPluginMessage\n     * @event Plugin#onExternalPluginMessage\n     * @memberof Plugin\n     * @alias onExternalPluginMessage\n     * @description The function called to show the editor integrator message.\n     * @param {Object} data - Defines the editor integrator message:\n\t * <b>type</b> - the message type,  \n\t * <b>type</b>: string,  \n\t * <b>example</b>: \"close\";\n\t * <b>text</b> - the message text,  \n\t * <b>type</b>: string,  \n\t * <b>example</b>: \"text\".\n     * @see office-js-api/Examples/Plugins/{Editor}/Plugin/Methods/onExternalPluginMessage.js\n\t */",
        "meta": {
            "lineno": 305,
            "columnno": 4
        },
        "kind": "event",
        "name": "onExternalPluginMessage",
        "description": "The function called to show the editor integrator message.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.onExternalPluginMessage = function(data) {\n    switch (data.type) {\n        case \"close\": {\n            this.executeCommand(\"close\", \"\");\n            break;\n        }\n        case \"insertText\": {\n            Asc.scope.text = data.text;\n            this.callCommand(function() {\n                var oDocument = Api.GetDocument();\n                var oParagraph = Api.CreateParagraph();\n                oParagraph.AddText(Asc.scope.text);\n                oDocument.InsertContent([oParagraph]);\n            }, false);\n            break;\n        }\n    }\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.onExternalPluginMessage = function(data) {\n    switch (data.type) {\n        case \"close\": {\n            this.executeCommand(\"close\", \"\");\n            break;\n        }\n        case \"insertText\": {\n            Asc.scope.text = data.text;\n            this.callCommand(function() {\n                var oDocument = Api.GetDocument();\n                var oParagraph = Api.CreateParagraph();\n                oParagraph.AddText(Asc.scope.text);\n                oDocument.InsertContent([oParagraph]);\n            }, false);\n            break;\n        }\n    }\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.onExternalPluginMessage = function(data) {\n    switch (data.type) {\n        case \"close\": {\n            this.executeCommand(\"close\", \"\");\n            break;\n        }\n        case \"insertText\": {\n            Asc.scope.text = data.text;\n            this.callCommand(function() {\n                var oDocument = Api.GetDocument();\n                var oParagraph = Api.CreateParagraph();\n                oParagraph.AddText(Asc.scope.text);\n                oDocument.InsertContent([oParagraph]);\n            }, false);\n            break;\n        }\n    }\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.onExternalPluginMessage = function(data) {\n    switch (data.type) {\n        case \"close\": {\n            this.executeCommand(\"close\", \"\");\n            break;\n        }\n        case \"insertText\": {\n            Asc.scope.text = data.text;\n            this.callCommand(function() {\n                var oDocument = Api.GetDocument();\n                var oParagraph = Api.CreateParagraph();\n                oParagraph.AddText(Asc.scope.text);\n                oDocument.InsertContent([oParagraph]);\n            }, false);\n            break;\n        }\n    }\n};\n```",
        "memberof": "Plugin",
        "longname": "Plugin#event:onExternalPluginMessage",
        "scope": "instance",
        "alias": "onExternalPluginMessage",
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Object"
                    }
                },
                "name": "data",
                "description": "Defines the editor integrator message:\n<b>type</b> - the message type,  \n<b>type</b>: string,  \n<b>example</b>: \"close\";\n<b>text</b> - the message text,  \n<b>type</b>: string,  \n<b>example</b>: \"text\"."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Plugin/Methods/onExternalPluginMessage.js"
        ],
        "examples": [
            "window.Asc.plugin.onExternalPluginMessage = function(data) {\n    switch (data.type) {\n        case \"close\": {\n            this.executeCommand(\"close\", \"\");\n            break;\n        }\n        case \"insertText\": {\n            Asc.scope.text = data.text;\n            this.callCommand(function() {\n                var oDocument = Api.GetDocument();\n                var oParagraph = Api.CreateParagraph();\n                oParagraph.AddText(Asc.scope.text);\n                oDocument.InsertContent([oParagraph]);\n            }, false);\n            break;\n        }\n    }\n};"
        ]
    },
    {
        "comment": "/**\n\t * Event: onFocusContentControl\n\t * @event Plugin#onFocusContentControl\n\t * @memberof Plugin\n\t * @typeofeditors [\"CDE\"]\n\t * @alias onFocusContentControl\n\t * @description The function called to show which content control has been focused.\n\t * @param {ContentControl} control - Defines the content control that has been focused.\n\t * @see office-js-api/Examples/Plugins/{Editor}/Plugin/Methods/onFocusContentControl.js\n\t */",
        "meta": {
            "lineno": 321,
            "columnno": 1
        },
        "kind": "event",
        "name": "onFocusContentControl",
        "description": "The function called to show which content control has been focused.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.onFocusContentControl = function(control)\n{\n    focusContentControl(control);\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.onFocusContentControl = function(control)\n{\n    focusContentControl(control);\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.onFocusContentControl = function(control)\n{\n    focusContentControl(control);\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.onFocusContentControl = function(control)\n{\n    focusContentControl(control);\n};\n```",
        "memberof": "Plugin",
        "longname": "Plugin#event:onFocusContentControl",
        "scope": "instance",
        "alias": "onFocusContentControl",
        "params": [
            {
                "type": {
                    "names": [
                        "ContentControl"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ContentControl"
                    }
                },
                "name": "control",
                "description": "Defines the content control that has been focused."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Plugin/Methods/onFocusContentControl.js"
        ],
        "examples": [
            "window.Asc.plugin.onFocusContentControl = function(control)\n{\n    focusContentControl(control);\n};"
        ]
    },
    {
        "comment": "/**\n\t * Event: onBlurContentControl\n\t * @event Plugin#onBlurContentControl\n\t * @memberof Plugin\n\t * @typeofeditors [\"CDE\"]\n\t * @alias onBlurContentControl\n\t * @description The function called to show which content control has been blurred.\n\t * @param {ContentControl} control - Defines the content control that has been blurred.\n\t * @see office-js-api/Examples/Plugins/{Editor}/Plugin/Methods/onBlurContentControl.js\n\t */",
        "meta": {
            "lineno": 332,
            "columnno": 1
        },
        "kind": "event",
        "name": "onBlurContentControl",
        "description": "The function called to show which content control has been blurred.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.onBlurContentControl = function(oPr)\n{\n    if (oPr && \"BankBIC\" === oPr[\"Tag\"])\n    {\n        window.Asc.plugin.executeMethod(\"GetFormValue\", [oPr[\"InternalId\"]], function(value)\n        {\n            if (\"12345678\" !== value)\n                return;\n\n            window.Asc.plugin.executeMethod.executeMethod(\"GetFormsByTag\", [\"BankAccount\"], function(forms)\n            {\n                for (let i = 0; i < forms.length; ++i)\n                {\n                    connector.executeMethod(\"SetFormValue\", [forms[i][\"InternalId\"], \"10101110100000000123\"], null);\n                }\n            });\n\n            window.Asc.plugin.executeMethod.executeMethod(\"GetFormsByTag\", [\"BankName\"], function(forms)\n            {\n                for (let i = 0; i < forms.length; ++i)\n                {\n                    connector.executeMethod(\"SetFormValue\", [forms[i][\"InternalId\"], \"OnlyOffice BANK\"], null);\n                }\n            });\n\n            window.Asc.plugin.executeMethod.executeMethod(\"GetFormsByTag\", [\"BankPlace\"], function(forms)\n            {\n                for (let i = 0; i < forms.length; ++i)\n                {\n                    connector.executeMethod(\"SetFormValue\", [forms[i][\"InternalId\"], \"Himalayas\"], null);\n                }\n            });\n        });\n    }\n    console.log(\"event: onBlurContentControl\");\n}\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.onBlurContentControl = function(oPr)\n{\n    if (oPr && \"BankBIC\" === oPr[\"Tag\"])\n    {\n        window.Asc.plugin.executeMethod(\"GetFormValue\", [oPr[\"InternalId\"]], function(value)\n        {\n            if (\"12345678\" !== value)\n                return;\n\n            window.Asc.plugin.executeMethod.executeMethod(\"GetFormsByTag\", [\"BankAccount\"], function(forms)\n            {\n                for (let i = 0; i < forms.length; ++i)\n                {\n                    connector.executeMethod(\"SetFormValue\", [forms[i][\"InternalId\"], \"10101110100000000123\"], null);\n                }\n            });\n\n            window.Asc.plugin.executeMethod.executeMethod(\"GetFormsByTag\", [\"BankName\"], function(forms)\n            {\n                for (let i = 0; i < forms.length; ++i)\n                {\n                    connector.executeMethod(\"SetFormValue\", [forms[i][\"InternalId\"], \"OnlyOffice BANK\"], null);\n                }\n            });\n\n            window.Asc.plugin.executeMethod.executeMethod(\"GetFormsByTag\", [\"BankPlace\"], function(forms)\n            {\n                for (let i = 0; i < forms.length; ++i)\n                {\n                    connector.executeMethod(\"SetFormValue\", [forms[i][\"InternalId\"], \"Himalayas\"], null);\n                }\n            });\n        });\n    }\n    console.log(\"event: onBlurContentControl\");\n}\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.onBlurContentControl = function(oPr)\n{\n    if (oPr && \"BankBIC\" === oPr[\"Tag\"])\n    {\n        window.Asc.plugin.executeMethod(\"GetFormValue\", [oPr[\"InternalId\"]], function(value)\n        {\n            if (\"12345678\" !== value)\n                return;\n\n            window.Asc.plugin.executeMethod.executeMethod(\"GetFormsByTag\", [\"BankAccount\"], function(forms)\n            {\n                for (let i = 0; i < forms.length; ++i)\n                {\n                    connector.executeMethod(\"SetFormValue\", [forms[i][\"InternalId\"], \"10101110100000000123\"], null);\n                }\n            });\n\n            window.Asc.plugin.executeMethod.executeMethod(\"GetFormsByTag\", [\"BankName\"], function(forms)\n            {\n                for (let i = 0; i < forms.length; ++i)\n                {\n                    connector.executeMethod(\"SetFormValue\", [forms[i][\"InternalId\"], \"OnlyOffice BANK\"], null);\n                }\n            });\n\n            window.Asc.plugin.executeMethod.executeMethod(\"GetFormsByTag\", [\"BankPlace\"], function(forms)\n            {\n                for (let i = 0; i < forms.length; ++i)\n                {\n                    connector.executeMethod(\"SetFormValue\", [forms[i][\"InternalId\"], \"Himalayas\"], null);\n                }\n            });\n        });\n    }\n    console.log(\"event: onBlurContentControl\");\n}\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.onBlurContentControl = function(oPr)\n{\n    if (oPr && \"BankBIC\" === oPr[\"Tag\"])\n    {\n        window.Asc.plugin.executeMethod(\"GetFormValue\", [oPr[\"InternalId\"]], function(value)\n        {\n            if (\"12345678\" !== value)\n                return;\n\n            window.Asc.plugin.executeMethod.executeMethod(\"GetFormsByTag\", [\"BankAccount\"], function(forms)\n            {\n                for (let i = 0; i < forms.length; ++i)\n                {\n                    connector.executeMethod(\"SetFormValue\", [forms[i][\"InternalId\"], \"10101110100000000123\"], null);\n                }\n            });\n\n            window.Asc.plugin.executeMethod.executeMethod(\"GetFormsByTag\", [\"BankName\"], function(forms)\n            {\n                for (let i = 0; i < forms.length; ++i)\n                {\n                    connector.executeMethod(\"SetFormValue\", [forms[i][\"InternalId\"], \"OnlyOffice BANK\"], null);\n                }\n            });\n\n            window.Asc.plugin.executeMethod.executeMethod(\"GetFormsByTag\", [\"BankPlace\"], function(forms)\n            {\n                for (let i = 0; i < forms.length; ++i)\n                {\n                    connector.executeMethod(\"SetFormValue\", [forms[i][\"InternalId\"], \"Himalayas\"], null);\n                }\n            });\n        });\n    }\n    console.log(\"event: onBlurContentControl\");\n}\n```",
        "memberof": "Plugin",
        "longname": "Plugin#event:onBlurContentControl",
        "scope": "instance",
        "alias": "onBlurContentControl",
        "params": [
            {
                "type": {
                    "names": [
                        "ContentControl"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ContentControl"
                    }
                },
                "name": "control",
                "description": "Defines the content control that has been blurred."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Plugin/Methods/onBlurContentControl.js"
        ],
        "examples": [
            "window.Asc.plugin.onBlurContentControl = function(oPr)\n{\n    if (oPr && \"BankBIC\" === oPr[\"Tag\"])\n    {\n        window.Asc.plugin.executeMethod(\"GetFormValue\", [oPr[\"InternalId\"]], function(value)\n        {\n            if (\"12345678\" !== value)\n                return;\n\n            window.Asc.plugin.executeMethod.executeMethod(\"GetFormsByTag\", [\"BankAccount\"], function(forms)\n            {\n                for (let i = 0; i < forms.length; ++i)\n                {\n                    connector.executeMethod(\"SetFormValue\", [forms[i][\"InternalId\"], \"10101110100000000123\"], null);\n                }\n            });\n\n            window.Asc.plugin.executeMethod.executeMethod(\"GetFormsByTag\", [\"BankName\"], function(forms)\n            {\n                for (let i = 0; i < forms.length; ++i)\n                {\n                    connector.executeMethod(\"SetFormValue\", [forms[i][\"InternalId\"], \"OnlyOffice BANK\"], null);\n                }\n            });\n\n            window.Asc.plugin.executeMethod.executeMethod(\"GetFormsByTag\", [\"BankPlace\"], function(forms)\n            {\n                for (let i = 0; i < forms.length; ++i)\n                {\n                    connector.executeMethod(\"SetFormValue\", [forms[i][\"InternalId\"], \"Himalayas\"], null);\n                }\n            });\n        });\n    }\n    console.log(\"event: onBlurContentControl\");\n}"
        ]
    },
    {
        "comment": "/**\n\t * Event: onChangeContentControl\n\t * @event Plugin#onChangeContentControl\n\t * @memberof Plugin\n\t * @typeofeditors [\"CDE\"]\n\t * @alias onChangeContentControl\n\t * @description The function called to show which content control has been changed.\n\t * @param {ContentControl} control - Defines the content control that has been changed.\n\t * @see office-js-api/Examples/Plugins/{Editor}/Plugin/Methods/onChangeContentControl.js\n\t */",
        "meta": {
            "lineno": 343,
            "columnno": 1
        },
        "kind": "event",
        "name": "onChangeContentControl",
        "description": "The function called to show which content control has been changed.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.onChangeContentControl = function(control)\n{\n    changeContentControl(control);\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.onChangeContentControl = function(control)\n{\n    changeContentControl(control);\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.onChangeContentControl = function(control)\n{\n    changeContentControl(control);\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.onChangeContentControl = function(control)\n{\n    changeContentControl(control);\n};\n```",
        "memberof": "Plugin",
        "longname": "Plugin#event:onChangeContentControl",
        "scope": "instance",
        "alias": "onChangeContentControl",
        "params": [
            {
                "type": {
                    "names": [
                        "ContentControl"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ContentControl"
                    }
                },
                "name": "control",
                "description": "Defines the content control that has been changed."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Plugin/Methods/onChangeContentControl.js"
        ],
        "examples": [
            "window.Asc.plugin.onChangeContentControl = function(control)\n{\n    changeContentControl(control);\n};"
        ]
    },
    {
        "comment": "/**\n\t * The context menu type:\n\t * <b>None</b> - not used,\n\t * <b>Target</b> - nothing is selected,\n\t * <b>Selection</b> - text is selected,\n\t * <b>Image</b> - image is selected,\n\t * <b>Shape</b> - shape is selected,\n\t * <b>OleObject</b> - OLE object is selected.\n\t * @typedef {(\"None\" | \"Target\" | \"Selection\" | \"Image\" | \"Shape\" | \"OleObject\")} ContextMenuType\n\t */",
        "meta": {
            "lineno": 354,
            "columnno": 1
        },
        "kind": "typedef",
        "name": "ContextMenuType",
        "type": {
            "names": [
                "\"None\"",
                "\"Target\"",
                "\"Selection\"",
                "\"Image\"",
                "\"Shape\"",
                "\"OleObject\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"None\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Target\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Selection\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Image\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Shape\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"OleObject\""
                    }
                ]
            }
        },
        "description": "The context menu type:\n<b>None</b> - not used,\n<b>Target</b> - nothing is selected,\n<b>Selection</b> - text is selected,\n<b>Image</b> - image is selected,\n<b>Shape</b> - shape is selected,\n<b>OleObject</b> - OLE object is selected.",
        "longname": "ContextMenuType",
        "scope": "global"
    },
    {
        "comment": "/**\n\t * @typedef {Object} ContextMenuOptions\n\t * @description Defines the context menu options.\n\t * @property {ContextMenuType} Type - The context menu type.\n\t * @property {boolean} [header] - Specifies if the context menu is opened inside the header.\n\t * @property {boolean} [footer] - Specifies if the context menu is opened inside the footer.\n\t * @property {boolean} [headerArea] - Specifies if the context menu is opened over the header.\n\t * @property {boolean} [footerArea] - Specifies if the context menu is opened over the footer.\n\t */",
        "meta": {
            "lineno": 365,
            "columnno": 1
        },
        "kind": "typedef",
        "name": "ContextMenuOptions",
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        },
        "description": "Defines the context menu options.",
        "properties": [
            {
                "type": {
                    "names": [
                        "ContextMenuType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ContextMenuType"
                    }
                },
                "name": "Type",
                "description": "The context menu type."
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "header",
                "description": "Specifies if the context menu is opened inside the header.",
                "optional": true
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "footer",
                "description": "Specifies if the context menu is opened inside the footer.",
                "optional": true
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "headerArea",
                "description": "Specifies if the context menu is opened over the header.",
                "optional": true
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "footerArea",
                "description": "Specifies if the context menu is opened over the footer.",
                "optional": true
            }
        ],
        "longname": "ContextMenuOptions",
        "scope": "global"
    },
    {
        "comment": "/**\n\t * Event: onContextMenuShow\n\t * WARNING! If plugin is listening this event, it MUST call AddContextMenuItem method (synchronously or not),\n\t * because editor wait answers from ALL plugins and then and only then fill contextmenu.\n\t * @event Plugin#onContextMenuShow\n\t * @memberof Plugin\n\t * @alias onContextMenuShow\n\t * @description The function called when the context menu has been shown.\n\t * \n\t * <note>If a plugin is listening for this event, it must call the {@link /plugin/executeMethod/common/addcontextmenuitem AddContextMenuItem} method (synchronously or not),\n\t * because the editor waits for responses from all plugins before filling the context menu.</note>\n\t * @param {ContextMenuOptions} options - Defines the context menu information.\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/Plugins/{Editor}/Plugin/Methods/onContextMenuShow.js\n\t */",
        "meta": {
            "lineno": 375,
            "columnno": 1
        },
        "kind": "event",
        "since": "7.4.0",
        "name": "onContextMenuShow",
        "description": "The function called when the context menu has been shown.\n\n<note>If a plugin is listening for this event, it must call the {@link /plugin/executeMethod/common/addcontextmenuitem AddContextMenuItem} method (synchronously or not),\nbecause the editor waits for responses from all plugins before filling the context menu.</note>\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.attachEvent('onContextMenuShow', function(options) {\n\tif (!options) return;\n\n\tif (options.type === 'Selection' || options.type === 'Target')\n\t\tthis.executeMethod('AddContextMenuItem', [getContextMenuItems()]);\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.attachEvent('onContextMenuShow', function(options) {\n\tif (!options) return;\n\n\tif (options.type === 'Selection' || options.type === 'Target')\n\t\tthis.executeMethod('AddContextMenuItem', [getContextMenuItems()]);\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.attachEvent('onContextMenuShow', function(options) {\n\tif (!options) return;\n\n\tif (options.type === 'Selection' || options.type === 'Target')\n\t\tthis.executeMethod('AddContextMenuItem', [getContextMenuItems()]);\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.attachEvent('onContextMenuShow', function(options) {\n\tif (!options) return;\n\n\tif (options.type === 'Selection' || options.type === 'Target')\n\t\tthis.executeMethod('AddContextMenuItem', [getContextMenuItems()]);\n});\n```",
        "memberof": "Plugin",
        "longname": "Plugin#event:onContextMenuShow",
        "scope": "instance",
        "alias": "onContextMenuShow",
        "params": [
            {
                "type": {
                    "names": [
                        "ContextMenuOptions"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ContextMenuOptions"
                    }
                },
                "name": "options",
                "description": "Defines the context menu information."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Plugin/Methods/onContextMenuShow.js"
        ],
        "examples": [
            "window.Asc.plugin.attachEvent('onContextMenuShow', function(options) {\n\tif (!options) return;\n\n\tif (options.type === 'Selection' || options.type === 'Target')\n\t\tthis.executeMethod('AddContextMenuItem', [getContextMenuItems()]);\n});"
        ]
    },
    {
        "comment": "/**\n\t * Event: onContextMenuClick\n\t * @event Plugin#onContextMenuClick\n\t * @memberof Plugin\n\t * @alias onContextMenuClick\n\t * @description The function called when the context menu item has been clicked.\n\t * @param {string} id - Item ID.\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/Plugins/{Editor}/Plugin/Methods/onContextMenuClick.js\n\t */",
        "meta": {
            "lineno": 391,
            "columnno": 1
        },
        "kind": "event",
        "since": "7.4.0",
        "name": "onContextMenuClick",
        "description": "The function called when the context menu item has been clicked.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.event_onContextMenuClick = function(id)\n{\n    var pluginObj = window.Asc.plugin;\n    var itemId = id;\n    var itemData = undefined;\n    var itemPos = itemId.indexOf(\"_oo_sep_\");\n    if (-1 !== itemPos)\n    {\n        itemData = itemId.substring(itemPos + 8);\n        itemId = itemId.substring(0, itemPos);\n    }\n\n    if (pluginObj.contextMenuEvents && pluginObj.contextMenuEvents[itemId])\n        pluginObj.contextMenuEvents[itemId].call(pluginObj, itemData);\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.event_onContextMenuClick = function(id)\n{\n    var pluginObj = window.Asc.plugin;\n    var itemId = id;\n    var itemData = undefined;\n    var itemPos = itemId.indexOf(\"_oo_sep_\");\n    if (-1 !== itemPos)\n    {\n        itemData = itemId.substring(itemPos + 8);\n        itemId = itemId.substring(0, itemPos);\n    }\n\n    if (pluginObj.contextMenuEvents && pluginObj.contextMenuEvents[itemId])\n        pluginObj.contextMenuEvents[itemId].call(pluginObj, itemData);\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.event_onContextMenuClick = function(id)\n{\n    var pluginObj = window.Asc.plugin;\n    var itemId = id;\n    var itemData = undefined;\n    var itemPos = itemId.indexOf(\"_oo_sep_\");\n    if (-1 !== itemPos)\n    {\n        itemData = itemId.substring(itemPos + 8);\n        itemId = itemId.substring(0, itemPos);\n    }\n\n    if (pluginObj.contextMenuEvents && pluginObj.contextMenuEvents[itemId])\n        pluginObj.contextMenuEvents[itemId].call(pluginObj, itemData);\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.event_onContextMenuClick = function(id)\n{\n    var pluginObj = window.Asc.plugin;\n    var itemId = id;\n    var itemData = undefined;\n    var itemPos = itemId.indexOf(\"_oo_sep_\");\n    if (-1 !== itemPos)\n    {\n        itemData = itemId.substring(itemPos + 8);\n        itemId = itemId.substring(0, itemPos);\n    }\n\n    if (pluginObj.contextMenuEvents && pluginObj.contextMenuEvents[itemId])\n        pluginObj.contextMenuEvents[itemId].call(pluginObj, itemData);\n};\n```",
        "memberof": "Plugin",
        "longname": "Plugin#event:onContextMenuClick",
        "scope": "instance",
        "alias": "onContextMenuClick",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "id",
                "description": "Item ID."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Plugin/Methods/onContextMenuClick.js"
        ],
        "examples": [
            "window.Asc.plugin.event_onContextMenuClick = function(id)\n{\n    var pluginObj = window.Asc.plugin;\n    var itemId = id;\n    var itemData = undefined;\n    var itemPos = itemId.indexOf(\"_oo_sep_\");\n    if (-1 !== itemPos)\n    {\n        itemData = itemId.substring(itemPos + 8);\n        itemId = itemId.substring(0, itemPos);\n    }\n\n    if (pluginObj.contextMenuEvents && pluginObj.contextMenuEvents[itemId])\n        pluginObj.contextMenuEvents[itemId].call(pluginObj, itemData);\n};"
        ]
    },
    {
        "comment": "/**\n\t * Event: onToolbarMenuClick\n\t * @event Plugin#onToolbarMenuClick\n\t * @memberof Plugin\n\t * @alias onToolbarMenuClick\n\t * @description The function called when the toolbar menu item has been clicked.\n\t * @param {string} id - Item ID.\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/Plugins/{Editor}/Plugin/Methods/onToolbarMenuClick.js\n\t */",
        "meta": {
            "lineno": 402,
            "columnno": 1
        },
        "kind": "event",
        "since": "8.1.0",
        "name": "onToolbarMenuClick",
        "description": "The function called when the toolbar menu item has been clicked.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.event_onToolbarMenuClick = function(id)\n{\n    this._onCustomMenuClick(\"toolbarMenuEvents\", id);\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.event_onToolbarMenuClick = function(id)\n{\n    this._onCustomMenuClick(\"toolbarMenuEvents\", id);\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.event_onToolbarMenuClick = function(id)\n{\n    this._onCustomMenuClick(\"toolbarMenuEvents\", id);\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.event_onToolbarMenuClick = function(id)\n{\n    this._onCustomMenuClick(\"toolbarMenuEvents\", id);\n};\n```",
        "memberof": "Plugin",
        "longname": "Plugin#event:onToolbarMenuClick",
        "scope": "instance",
        "alias": "onToolbarMenuClick",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "id",
                "description": "Item ID."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Plugin/Methods/onToolbarMenuClick.js"
        ],
        "examples": [
            "window.Asc.plugin.event_onToolbarMenuClick = function(id)\n{\n    this._onCustomMenuClick(\"toolbarMenuEvents\", id);\n};"
        ]
    },
    {
        "comment": "/**\n\t * Event: onCommandCallback\n\t * @event Plugin#onCommandCallback\n\t * @memberof Plugin\n\t * @typeofeditors [\"CDE\"]\n\t * @alias onCommandCallback\n\t * @description The function called to return the result of the previously executed command. It can be used to return data after executing the {@link Plugin#callCommand callCommand} method.\n\t * @see office-js-api/Examples/Plugins/{Editor}/Plugin/Methods/onCommandCallback.js\n\t */",
        "meta": {
            "lineno": 413,
            "columnno": 1
        },
        "kind": "event",
        "name": "onCommandCallback",
        "description": "The function called to return the result of the previously executed command. It can be used to return data after executing the {@link Plugin#callCommand callCommand} method.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.onCommandCallback = function() {\n    var plugin = window.Asc.plugin;\n    plugin.executeCommand(\"close\", \"\");\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.onCommandCallback = function() {\n    var plugin = window.Asc.plugin;\n    plugin.executeCommand(\"close\", \"\");\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.onCommandCallback = function() {\n    var plugin = window.Asc.plugin;\n    plugin.executeCommand(\"close\", \"\");\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.onCommandCallback = function() {\n    var plugin = window.Asc.plugin;\n    plugin.executeCommand(\"close\", \"\");\n};\n```",
        "memberof": "Plugin",
        "longname": "Plugin#event:onCommandCallback",
        "scope": "instance",
        "alias": "onCommandCallback",
        "see": [
            "office-js-api/Examples/Plugins/Common/Plugin/Methods/onCommandCallback.js"
        ],
        "examples": [
            "window.Asc.plugin.onCommandCallback = function() {\n    var plugin = window.Asc.plugin;\n    plugin.executeCommand(\"close\", \"\");\n};"
        ]
    },
    {
        "comment": "/**\n\t * Event: onMethodReturn\n\t * @event Plugin#onMethodReturn\n\t * @memberof Plugin\n\t * @typeofeditors [\"CDE\"]\n\t * @alias onMethodReturn\n\t * @description The function called to return the result of the previously executed method. It can be used to return data after executing the {@link Plugin#executeMethod executeMethod} method.\n\t * @param returnValue - Defines the value that will be returned.\n\t * @see office-js-api/Examples/Plugins/{Editor}/Plugin/Methods/onMethodReturn.js\n\t */",
        "meta": {
            "lineno": 423,
            "columnno": 1
        },
        "kind": "event",
        "name": "onMethodReturn",
        "description": "The function called to return the result of the previously executed method. It can be used to return data after executing the {@link Plugin#executeMethod executeMethod} method.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.executeMethod(\"InsertAndReplaceContentControls\", [_obj]);\nwindow.Asc.plugin.onMethodReturn = function(returnValue) {\n    if (window.Asc.plugin.info.methodName == \"InsertAndReplaceContentControls\") {\n        window.Asc.plugin.executeMethod(\"GetAllContentControls\");\n    } else if (\"GetAllContentControls\") {\n        window.Asc.plugin.executeCommand(\"close\", console.log(JSON.stringify(returnValue)));\n    }\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.executeMethod(\"InsertAndReplaceContentControls\", [_obj]);\nwindow.Asc.plugin.onMethodReturn = function(returnValue) {\n    if (window.Asc.plugin.info.methodName == \"InsertAndReplaceContentControls\") {\n        window.Asc.plugin.executeMethod(\"GetAllContentControls\");\n    } else if (\"GetAllContentControls\") {\n        window.Asc.plugin.executeCommand(\"close\", console.log(JSON.stringify(returnValue)));\n    }\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.executeMethod(\"InsertAndReplaceContentControls\", [_obj]);\nwindow.Asc.plugin.onMethodReturn = function(returnValue) {\n    if (window.Asc.plugin.info.methodName == \"InsertAndReplaceContentControls\") {\n        window.Asc.plugin.executeMethod(\"GetAllContentControls\");\n    } else if (\"GetAllContentControls\") {\n        window.Asc.plugin.executeCommand(\"close\", console.log(JSON.stringify(returnValue)));\n    }\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.executeMethod(\"InsertAndReplaceContentControls\", [_obj]);\nwindow.Asc.plugin.onMethodReturn = function(returnValue) {\n    if (window.Asc.plugin.info.methodName == \"InsertAndReplaceContentControls\") {\n        window.Asc.plugin.executeMethod(\"GetAllContentControls\");\n    } else if (\"GetAllContentControls\") {\n        window.Asc.plugin.executeCommand(\"close\", console.log(JSON.stringify(returnValue)));\n    }\n};\n```",
        "memberof": "Plugin",
        "longname": "Plugin#event:onMethodReturn",
        "scope": "instance",
        "alias": "onMethodReturn",
        "params": [
            {
                "name": "returnValue",
                "description": "Defines the value that will be returned."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Plugin/Methods/onMethodReturn.js"
        ],
        "examples": [
            "window.Asc.plugin.executeMethod(\"InsertAndReplaceContentControls\", [_obj]);\nwindow.Asc.plugin.onMethodReturn = function(returnValue) {\n    if (window.Asc.plugin.info.methodName == \"InsertAndReplaceContentControls\") {\n        window.Asc.plugin.executeMethod(\"GetAllContentControls\");\n    } else if (\"GetAllContentControls\") {\n        window.Asc.plugin.executeCommand(\"close\", console.log(JSON.stringify(returnValue)));\n    }\n};"
        ]
    },
    {
        "comment": "/**\n\t * Event: onAddComment\n\t * @event Plugin#onAddComment\n\t * @memberof Plugin\n\t * @typeofeditors [\"CDE\"]\n\t * @alias onAddComment\n\t * @description The function called when a comment is added to the document with the {@link /plugin/executeMethod/text/addcomment AddComment} method.\n\t * @param {comment} comment - Defines the comment object containing the comment data.\n\t * @see office-js-api/Examples/Plugins/{Editor}/Plugin/Methods/onAddComment.js\n\t */",
        "meta": {
            "lineno": 434,
            "columnno": 1
        },
        "kind": "event",
        "name": "onAddComment",
        "description": "The function called when a comment is added to the document with the {@link /plugin/executeMethod/text/addcomment AddComment} method.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.event_onAddComment = function(comment)\n{\n    Comments.push(comment);\n    $('#scrollable-container-id').append(makeComment(comment.Id, comment));\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.event_onAddComment = function(comment)\n{\n    Comments.push(comment);\n    $('#scrollable-container-id').append(makeComment(comment.Id, comment));\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.event_onAddComment = function(comment)\n{\n    Comments.push(comment);\n    $('#scrollable-container-id').append(makeComment(comment.Id, comment));\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.event_onAddComment = function(comment)\n{\n    Comments.push(comment);\n    $('#scrollable-container-id').append(makeComment(comment.Id, comment));\n};\n```",
        "memberof": "Plugin",
        "longname": "Plugin#event:onAddComment",
        "scope": "instance",
        "alias": "onAddComment",
        "params": [
            {
                "type": {
                    "names": [
                        "comment"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "comment"
                    }
                },
                "name": "comment",
                "description": "Defines the comment object containing the comment data."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Plugin/Methods/onAddComment.js"
        ],
        "examples": [
            "window.Asc.plugin.event_onAddComment = function(comment)\n{\n    Comments.push(comment);\n    $('#scrollable-container-id').append(makeComment(comment.Id, comment));\n};"
        ]
    },
    {
        "comment": "/**\n\t * Event: onChangeCommentData\n\t * @event Plugin#onChangeCommentData\n\t * @memberof Plugin\n\t * @typeofeditors [\"CDE\"]\n\t * @alias onChangeCommentData\n\t * @description The function called when the specified comment is changed with the {@link /plugin/executeMethod/text/changecomment ChangeComment} method.\n\t * @param {comment} comment - Defines the comment object containing the comment data.\n\t * @see office-js-api/Examples/Plugins/{Editor}/Plugin/Methods/onChangeCommentData.js\n\t */",
        "meta": {
            "lineno": 445,
            "columnno": 1
        },
        "kind": "event",
        "name": "onChangeCommentData",
        "description": "The function called when the specified comment is changed with the {@link /plugin/executeMethod/text/changecomment ChangeComment} method.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.event_onChangeCommentData = function(comment)\n{\n    changeComment(comment);\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.event_onChangeCommentData = function(comment)\n{\n    changeComment(comment);\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.event_onChangeCommentData = function(comment)\n{\n    changeComment(comment);\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.event_onChangeCommentData = function(comment)\n{\n    changeComment(comment);\n};\n```",
        "memberof": "Plugin",
        "longname": "Plugin#event:onChangeCommentData",
        "scope": "instance",
        "alias": "onChangeCommentData",
        "params": [
            {
                "type": {
                    "names": [
                        "comment"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "comment"
                    }
                },
                "name": "comment",
                "description": "Defines the comment object containing the comment data."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Plugin/Methods/onChangeCommentData.js"
        ],
        "examples": [
            "window.Asc.plugin.event_onChangeCommentData = function(comment)\n{\n    changeComment(comment);\n};"
        ]
    },
    {
        "comment": "/**\n\t * Event: onRemoveComment\n\t * @event Plugin#onRemoveComment\n\t * @memberof Plugin\n\t * @typeofeditors [\"CDE\"]\n\t * @alias onRemoveComment\n\t * @description The function called when the specified comment is removed with the {@link /plugin/executeMethod/text/removecomments RemoveComments} method.\n\t * @param {comment} comment - Defines the comment object containing the comment data.\n\t * @see office-js-api/Examples/Plugins/{Editor}/Plugin/Methods/onRemoveComment.js\n\t */",
        "meta": {
            "lineno": 456,
            "columnno": 1
        },
        "kind": "event",
        "name": "onRemoveComment",
        "description": "The function called when the specified comment is removed with the {@link /plugin/executeMethod/text/removecomments RemoveComments} method.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.event_onRemoveComment = function(comment)\n{\n    removeComments([comment.Id]);\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.event_onRemoveComment = function(comment)\n{\n    removeComments([comment.Id]);\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.event_onRemoveComment = function(comment)\n{\n    removeComments([comment.Id]);\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.event_onRemoveComment = function(comment)\n{\n    removeComments([comment.Id]);\n};\n```",
        "memberof": "Plugin",
        "longname": "Plugin#event:onRemoveComment",
        "scope": "instance",
        "alias": "onRemoveComment",
        "params": [
            {
                "type": {
                    "names": [
                        "comment"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "comment"
                    }
                },
                "name": "comment",
                "description": "Defines the comment object containing the comment data."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Plugin/Methods/onRemoveComment.js"
        ],
        "examples": [
            "window.Asc.plugin.event_onRemoveComment = function(comment)\n{\n    removeComments([comment.Id]);\n};"
        ]
    },
    {
        "comment": "/**\n\t * Event: onSubmitForm\n\t * @event Plugin#onSubmitForm\n\t * @memberof Plugin\n\t * @typeofeditors [\"CDE\"]\n\t * @alias onSubmitForm\n\t * @description The function called when the user clicks the \"Complete & Submit\" button.\n\t * @see office-js-api/Examples/Plugins/{Editor}/Plugin/Methods/onSubmitForm.js\n\t */",
        "meta": {
            "lineno": 467,
            "columnno": 1
        },
        "kind": "event",
        "name": "onSubmitForm",
        "description": "The function called when the user clicks the \"Complete & Submit\" button.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.onSubmitForm = function() {\n\tAsc.scope.st = \"\";\n\tthis.callCommand(function() {\n        var oDocument = Api.GetDocument();\n\t\tvar aFormsData = oDocument.GetFormsData();\n\t\tAsc.scope.st += \"event: onSubmitForm\";\n\t\tAsc.scope.st += \"\\n\";\n\t\tAsc.scope.st += \"The type of the first form: \" + aFormsData[0][\"type\"];\n\t\tAsc.scope.st += \"\\n\";\n\t\tAsc.scope.st += \"The value of the second form: \" + aFormsData[1][\"value\"];\n    }, false);\n\tconsole.log(Asc.scope.st);\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.onSubmitForm = function() {\n\tAsc.scope.st = \"\";\n\tthis.callCommand(function() {\n        var oDocument = Api.GetDocument();\n\t\tvar aFormsData = oDocument.GetFormsData();\n\t\tAsc.scope.st += \"event: onSubmitForm\";\n\t\tAsc.scope.st += \"\\n\";\n\t\tAsc.scope.st += \"The type of the first form: \" + aFormsData[0][\"type\"];\n\t\tAsc.scope.st += \"\\n\";\n\t\tAsc.scope.st += \"The value of the second form: \" + aFormsData[1][\"value\"];\n    }, false);\n\tconsole.log(Asc.scope.st);\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.onSubmitForm = function() {\n\tAsc.scope.st = \"\";\n\tthis.callCommand(function() {\n        var oDocument = Api.GetDocument();\n\t\tvar aFormsData = oDocument.GetFormsData();\n\t\tAsc.scope.st += \"event: onSubmitForm\";\n\t\tAsc.scope.st += \"\\n\";\n\t\tAsc.scope.st += \"The type of the first form: \" + aFormsData[0][\"type\"];\n\t\tAsc.scope.st += \"\\n\";\n\t\tAsc.scope.st += \"The value of the second form: \" + aFormsData[1][\"value\"];\n    }, false);\n\tconsole.log(Asc.scope.st);\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.onSubmitForm = function() {\n\tAsc.scope.st = \"\";\n\tthis.callCommand(function() {\n        var oDocument = Api.GetDocument();\n\t\tvar aFormsData = oDocument.GetFormsData();\n\t\tAsc.scope.st += \"event: onSubmitForm\";\n\t\tAsc.scope.st += \"\\n\";\n\t\tAsc.scope.st += \"The type of the first form: \" + aFormsData[0][\"type\"];\n\t\tAsc.scope.st += \"\\n\";\n\t\tAsc.scope.st += \"The value of the second form: \" + aFormsData[1][\"value\"];\n    }, false);\n\tconsole.log(Asc.scope.st);\n};\n```",
        "memberof": "Plugin",
        "longname": "Plugin#event:onSubmitForm",
        "scope": "instance",
        "alias": "onSubmitForm",
        "see": [
            "office-js-api/Examples/Plugins/Common/Plugin/Methods/onSubmitForm.js"
        ],
        "examples": [
            "window.Asc.plugin.onSubmitForm = function() {\n\tAsc.scope.st = \"\";\n\tthis.callCommand(function() {\n        var oDocument = Api.GetDocument();\n\t\tvar aFormsData = oDocument.GetFormsData();\n\t\tAsc.scope.st += \"event: onSubmitForm\";\n\t\tAsc.scope.st += \"\\n\";\n\t\tAsc.scope.st += \"The type of the first form: \" + aFormsData[0][\"type\"];\n\t\tAsc.scope.st += \"\\n\";\n\t\tAsc.scope.st += \"The value of the second form: \" + aFormsData[1][\"value\"];\n    }, false);\n\tconsole.log(Asc.scope.st);\n};"
        ]
    },
    {
        "comment": "/**\n\t * executeMethod\n\t * @memberof Plugin\n\t * @alias executeMethod\n\t * @description Defines the method used to execute certain editor methods using the plugin.\n\t * \n\t * The callback is the result that the method returns. It is an optional parameter. In case it is missing, the {@link Plugin#onMethodReturn window.Asc.plugin.onMethodReturn} function will be used to return the result of the method execution.\n\t * @param {string} name - The name of the specific method that must be executed.\n\t * @param {Array} params - The arguments that the method in use has (if it has any).\n     * @param {Function} callback - The result that the method returns.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/Plugins/{Editor}/Plugin/Methods/executeMethod.js\n\t */",
        "meta": {
            "lineno": 583,
            "columnno": 1
        },
        "kind": "function",
        "name": "executeMethod",
        "description": "Defines the method used to execute certain editor methods using the plugin.\n\nThe callback is the result that the method returns. It is an optional parameter. In case it is missing, the {@link Plugin#onMethodReturn window.Asc.plugin.onMethodReturn} function will be used to return the result of the method execution.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nvar arrDocuments = [{\n    \"Props\": {\n        \"Id\": 100,\n        \"Tag\": \"CC_Tag\",\n        \"Lock\": 3\n    },\n    \"Script\": \"var oParagraph = Api.CreateParagraph();oParagraph.AddText('Hello world!');Api.GetDocument().InsertContent([oParagraph]);\"\n}];\nwindow.Asc.plugin.executeMethod (\"InsertAndReplaceContentControls\", [arrDocuments]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nvar arrDocuments = [{\n    \"Props\": {\n        \"Id\": 100,\n        \"Tag\": \"CC_Tag\",\n        \"Lock\": 3\n    },\n    \"Script\": \"var oParagraph = Api.CreateParagraph();oParagraph.AddText('Hello world!');Api.GetDocument().InsertContent([oParagraph]);\"\n}];\nwindow.Asc.plugin.executeMethod (\"InsertAndReplaceContentControls\", [arrDocuments]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar arrDocuments = [{\n    \"Props\": {\n        \"Id\": 100,\n        \"Tag\": \"CC_Tag\",\n        \"Lock\": 3\n    },\n    \"Script\": \"var oParagraph = Api.CreateParagraph();oParagraph.AddText('Hello world!');Api.GetDocument().InsertContent([oParagraph]);\"\n}];\nwindow.Asc.plugin.executeMethod (\"InsertAndReplaceContentControls\", [arrDocuments]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nvar arrDocuments = [{\n    \"Props\": {\n        \"Id\": 100,\n        \"Tag\": \"CC_Tag\",\n        \"Lock\": 3\n    },\n    \"Script\": \"var oParagraph = Api.CreateParagraph();oParagraph.AddText('Hello world!');Api.GetDocument().InsertContent([oParagraph]);\"\n}];\nwindow.Asc.plugin.executeMethod (\"InsertAndReplaceContentControls\", [arrDocuments]);\n```",
        "memberof": "Plugin",
        "longname": "executeMethod",
        "alias": "executeMethod",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "name",
                "description": "The name of the specific method that must be executed."
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Array"
                    }
                },
                "name": "params",
                "description": "The arguments that the method in use has (if it has any)."
            },
            {
                "type": {
                    "names": [
                        "function"
                    ],
                    "parsedType": {
                        "type": "FunctionType",
                        "params": []
                    }
                },
                "name": "callback",
                "description": "The result that the method returns."
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Plugin/Methods/executeMethod.js"
        ],
        "examples": [
            "var arrDocuments = [{\n    \"Props\": {\n        \"Id\": 100,\n        \"Tag\": \"CC_Tag\",\n        \"Lock\": 3\n    },\n    \"Script\": \"var oParagraph = Api.CreateParagraph();oParagraph.AddText('Hello world!');Api.GetDocument().InsertContent([oParagraph]);\"\n}];\nwindow.Asc.plugin.executeMethod (\"InsertAndReplaceContentControls\", [arrDocuments]);"
        ]
    },
    {
        "comment": "/**\n\t * resizeWindow (only for visual modal plugins)\n\t * @memberof Plugin\n\t * @alias resizeWindow\n\t * @description Defines the method used to change the window size updating the minimum/maximum sizes.\n\t * <note>This method is used for visual modal plugins only.</note>\n\t * @param {number} width - The window width.\n     * @param {number} height - The window height.\n     * @param {number} minW - The window minimum width.\n     * @param {number} minH - The window minimum height.\n     * @param {number} maxW - The window maximum width.\n\t * @param {number} maxH - The window maximum height.\n\t * @see office-js-api/Examples/Plugins/{Editor}/Plugin/Methods/resizeWindow.js\n\t */",
        "meta": {
            "lineno": 635,
            "columnno": 1
        },
        "kind": "function",
        "name": "resizeWindow",
        "description": "Defines the method used to change the window size updating the minimum/maximum sizes.\n<note>This method is used for visual modal plugins only.</note>\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.init = function() {\n    this.resizeWindow(392, 147, 392, 147, 392, 147);\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.init = function() {\n    this.resizeWindow(392, 147, 392, 147, 392, 147);\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.init = function() {\n    this.resizeWindow(392, 147, 392, 147, 392, 147);\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.init = function() {\n    this.resizeWindow(392, 147, 392, 147, 392, 147);\n};\n```",
        "memberof": "Plugin",
        "longname": "resizeWindow",
        "alias": "resizeWindow",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "width",
                "description": "The window width."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "height",
                "description": "The window height."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "minW",
                "description": "The window minimum width."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "minH",
                "description": "The window minimum height."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "maxW",
                "description": "The window maximum width."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "maxH",
                "description": "The window maximum height."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Plugin/Methods/resizeWindow.js"
        ],
        "examples": [
            "window.Asc.plugin.init = function() {\n    this.resizeWindow(392, 147, 392, 147, 392, 147);\n};"
        ]
    },
    {
        "comment": "/**\n\t * callCommand\n\t * @memberof Plugin\n\t * @alias callCommand\n\t * @description Defines the method used to send the data back to the editor.\n\t * It allows the plugin to send structured data that can be inserted to the resulting document file (formatted paragraphs, tables, text parts, and separate words, etc.).\n\t * \n\t * The *callback* is the result that the command returns. It is an optional parameter. In case it is missing, the {@link Plugin#onCommandCallback window.Asc.plugin.onCommandCallback} function will be used to return the result of the command execution.\n     * <note><b>ONLYOFFICE Document Builder</b> commands can be only used to create content and insert it to the document editor (using the *Api.GetDocument().InsertContent(...)*).\n\t * This limitation exists due to the co-editing feature in the online editors. If it is necessary to create a plugin for desktop editors to work with local files, no such limitation is applied.</note>\n     * \n\t * This method is executed in its own context isolated from other JavaScript data. If some parameters or other data need to be passed to this method, use {@link /plugin/scope Asc.scope} object.\n\t * @param {Function} func - Defines the command written in JavaScript which purpose is to form structured data which can be inserted to the resulting document file\n\t * (formatted paragraphs, tables, text parts, and separate words, etc.). Then the data is sent to the editors.\n\t * The command must be compatible with {@link /docbuilder/basic ONLYOFFICE Document Builder} syntax.\n\t * @param {boolean} isClose - Defines whether the plugin window must be closed after the code is executed or left open waiting for another command or action.\n\t * The *true* value is used to close the plugin window after executing the function in the *func* parameter.\n\t * The *false* value is used to execute the command and leave the window open waiting for the next command.\n     * @param {boolean} isCalc - Defines whether the document will be recalculated or not.\n\t * The *true* value is used to recalculate the document after executing the function in the *func* parameter.\n\t * The *false* value will not recalculate the document (use it only when your edits surely will not require document recalculation).\n\t * @param {Function} callback - The result that the method returns. Only the js standart types are available (any objects will be replaced with *undefined*).\n\t * @see office-js-api/Examples/Plugins/{Editor}/Plugin/Methods/callCommand.js\n\t */",
        "meta": {
            "lineno": 686,
            "columnno": 1
        },
        "kind": "function",
        "name": "callCommand",
        "description": "Defines the method used to send the data back to the editor.\nIt allows the plugin to send structured data that can be inserted to the resulting document file (formatted paragraphs, tables, text parts, and separate words, etc.).\n\nThe *callback* is the result that the command returns. It is an optional parameter. In case it is missing, the {@link Plugin#onCommandCallback window.Asc.plugin.onCommandCallback} function will be used to return the result of the command execution.\n<note><b>ONLYOFFICE Document Builder</b> commands can be only used to create content and insert it to the document editor (using the *Api.GetDocument().InsertContent(...)*).\nThis limitation exists due to the co-editing feature in the online editors. If it is necessary to create a plugin for desktop editors to work with local files, no such limitation is applied.</note>\n\nThis method is executed in its own context isolated from other JavaScript data. If some parameters or other data need to be passed to this method, use {@link /plugin/scope Asc.scope} object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.init = function () {\n    this.callCommand(function() {\n        var oDocument = Api.GetDocument();\n        var oParagraph = Api.CreateParagraph();\n        oParagraph.AddText(\"Hello world!\");\n        oDocument.InsertContent([oParagraph]);\n    }, true);\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.init = function () {\n    this.callCommand(function() {\n        var oDocument = Api.GetDocument();\n        var oParagraph = Api.CreateParagraph();\n        oParagraph.AddText(\"Hello world!\");\n        oDocument.InsertContent([oParagraph]);\n    }, true);\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.init = function () {\n    this.callCommand(function() {\n        var oDocument = Api.GetDocument();\n        var oParagraph = Api.CreateParagraph();\n        oParagraph.AddText(\"Hello world!\");\n        oDocument.InsertContent([oParagraph]);\n    }, true);\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.init = function () {\n    this.callCommand(function() {\n        var oDocument = Api.GetDocument();\n        var oParagraph = Api.CreateParagraph();\n        oParagraph.AddText(\"Hello world!\");\n        oDocument.InsertContent([oParagraph]);\n    }, true);\n};\n```",
        "memberof": "Plugin",
        "longname": "callCommand",
        "alias": "callCommand",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ],
                    "parsedType": {
                        "type": "FunctionType",
                        "params": []
                    }
                },
                "name": "func",
                "description": "Defines the command written in JavaScript which purpose is to form structured data which can be inserted to the resulting document file\n(formatted paragraphs, tables, text parts, and separate words, etc.). Then the data is sent to the editors.\nThe command must be compatible with {@link /docbuilder/basic ONLYOFFICE Document Builder} syntax."
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isClose",
                "description": "Defines whether the plugin window must be closed after the code is executed or left open waiting for another command or action.\nThe *true* value is used to close the plugin window after executing the function in the *func* parameter.\nThe *false* value is used to execute the command and leave the window open waiting for the next command."
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isCalc",
                "description": "Defines whether the document will be recalculated or not.\nThe *true* value is used to recalculate the document after executing the function in the *func* parameter.\nThe *false* value will not recalculate the document (use it only when your edits surely will not require document recalculation)."
            },
            {
                "type": {
                    "names": [
                        "function"
                    ],
                    "parsedType": {
                        "type": "FunctionType",
                        "params": []
                    }
                },
                "name": "callback",
                "description": "The result that the method returns. Only the js standart types are available (any objects will be replaced with *undefined*)."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Plugin/Methods/callCommand.js"
        ],
        "examples": [
            "window.Asc.plugin.init = function () {\n    this.callCommand(function() {\n        var oDocument = Api.GetDocument();\n        var oParagraph = Api.CreateParagraph();\n        oParagraph.AddText(\"Hello world!\");\n        oDocument.InsertContent([oParagraph]);\n    }, true);\n};"
        ]
    },
    {
        "comment": "/**\n\t * callModule\n\t * @memberof Plugin\n\t * @alias callModule\n\t * @description Defines the method used to execute a remotely located script following a link.\n\t * @param {string} url - The resource code URL.\n\t * @param {Function} callback - The result that the method returns.\n\t * @param {boolean} isClose - Defines whether the plugin window must be closed after the code is executed or left open waiting for another action.\n\t * The *true* value is used to close the plugin window after executing a remotely located script.\n\t * The *false* value is used to execute the code and leave the window open waiting for the next action.\n\t * @see office-js-api/Examples/Plugins/{Editor}/Plugin/Methods/callModule.js\n\t */",
        "meta": {
            "lineno": 713,
            "columnno": 1
        },
        "kind": "function",
        "name": "callModule",
        "description": "Defines the method used to execute a remotely located script following a link.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.callModule(\"./templates/\" + _templates[_index][0] + \"/script.txt\", function(content) {\n    _templates_code[_index] = content;\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.callModule(\"./templates/\" + _templates[_index][0] + \"/script.txt\", function(content) {\n    _templates_code[_index] = content;\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.callModule(\"./templates/\" + _templates[_index][0] + \"/script.txt\", function(content) {\n    _templates_code[_index] = content;\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.callModule(\"./templates/\" + _templates[_index][0] + \"/script.txt\", function(content) {\n    _templates_code[_index] = content;\n});\n```",
        "memberof": "Plugin",
        "longname": "callModule",
        "alias": "callModule",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "url",
                "description": "The resource code URL."
            },
            {
                "type": {
                    "names": [
                        "function"
                    ],
                    "parsedType": {
                        "type": "FunctionType",
                        "params": []
                    }
                },
                "name": "callback",
                "description": "The result that the method returns."
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isClose",
                "description": "Defines whether the plugin window must be closed after the code is executed or left open waiting for another action.\nThe *true* value is used to close the plugin window after executing a remotely located script.\nThe *false* value is used to execute the code and leave the window open waiting for the next action."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Plugin/Methods/callModule.js"
        ],
        "examples": [
            "window.Asc.plugin.callModule(\"./templates/\" + _templates[_index][0] + \"/script.txt\", function(content) {\n    _templates_code[_index] = content;\n});"
        ]
    },
    {
        "comment": "/**\n\t * loadModule\n\t * @memberof Plugin\n\t * @alias loadModule\n\t * @description Defines the method used to load a remotely located text resource.\n     * @param {string} url - The resource code URL.\n\t * @param {Function} callback - The result that the method returns.\n\t * @see office-js-api/Examples/Plugins/{Editor}/Plugin/Methods/loadModule.js\n\t */",
        "meta": {
            "lineno": 743,
            "columnno": 1
        },
        "kind": "function",
        "name": "loadModule",
        "description": "Defines the method used to load a remotely located text resource.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.loadModule(\"./vendor/highlight/styles/\" + e.params.data.id , function(content) {\n    var style_value = content;\n    if (isDE || isFF) {\n        $(\"#jq_color\").spectrum(\"set\", (hexc($(container).css('backgroundColor'))));\n    } else {\n        background_color.value = hexc($(container).css('backgroundColor'));\n    }\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.loadModule(\"./vendor/highlight/styles/\" + e.params.data.id , function(content) {\n    var style_value = content;\n    if (isDE || isFF) {\n        $(\"#jq_color\").spectrum(\"set\", (hexc($(container).css('backgroundColor'))));\n    } else {\n        background_color.value = hexc($(container).css('backgroundColor'));\n    }\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.loadModule(\"./vendor/highlight/styles/\" + e.params.data.id , function(content) {\n    var style_value = content;\n    if (isDE || isFF) {\n        $(\"#jq_color\").spectrum(\"set\", (hexc($(container).css('backgroundColor'))));\n    } else {\n        background_color.value = hexc($(container).css('backgroundColor'));\n    }\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.loadModule(\"./vendor/highlight/styles/\" + e.params.data.id , function(content) {\n    var style_value = content;\n    if (isDE || isFF) {\n        $(\"#jq_color\").spectrum(\"set\", (hexc($(container).css('backgroundColor'))));\n    } else {\n        background_color.value = hexc($(container).css('backgroundColor'));\n    }\n});\n```",
        "memberof": "Plugin",
        "longname": "loadModule",
        "alias": "loadModule",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "url",
                "description": "The resource code URL."
            },
            {
                "type": {
                    "names": [
                        "function"
                    ],
                    "parsedType": {
                        "type": "FunctionType",
                        "params": []
                    }
                },
                "name": "callback",
                "description": "The result that the method returns."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Plugin/Methods/loadModule.js"
        ],
        "examples": [
            "window.Asc.plugin.loadModule(\"./vendor/highlight/styles/\" + e.params.data.id , function(content) {\n    var style_value = content;\n    if (isDE || isFF) {\n        $(\"#jq_color\").spectrum(\"set\", (hexc($(container).css('backgroundColor'))));\n    } else {\n        background_color.value = hexc($(container).css('backgroundColor'));\n    }\n});"
        ]
    },
    {
        "comment": "/**\n\t * @function attachEvent\n\t * @memberof Plugin\n\t * @alias attachEvent\n\t * @description Defines the method to add an event listener, a function that will be called whenever the specified event is delivered to the target.\n\t * The list of all the available events can be found {@link /plugin/events here}.\n     * @param {string} id - The event name.\n\t * @param {Function} action - The event listener.\n\t * @see office-js-api/Examples/Plugins/{Editor}/Plugin/Methods/attachEvent.js\n\t */",
        "meta": {
            "lineno": 760,
            "columnno": 1
        },
        "kind": "function",
        "name": "attachEvent",
        "description": "Defines the method to add an event listener, a function that will be called whenever the specified event is delivered to the target.\nThe list of all the available events can be found {@link /plugin/events here}.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.attachEvent(\"onContextMenuShow\", function(options) {\n    if (!options) return;\n    if (options.type === \"Selection\" || options.type === \"Target\")\n        this.executeMethod(\"AddContextMenuItem\", [getContextMenuItems()]);\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.attachEvent(\"onContextMenuShow\", function(options) {\n    if (!options) return;\n    if (options.type === \"Selection\" || options.type === \"Target\")\n        this.executeMethod(\"AddContextMenuItem\", [getContextMenuItems()]);\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.attachEvent(\"onContextMenuShow\", function(options) {\n    if (!options) return;\n    if (options.type === \"Selection\" || options.type === \"Target\")\n        this.executeMethod(\"AddContextMenuItem\", [getContextMenuItems()]);\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.attachEvent(\"onContextMenuShow\", function(options) {\n    if (!options) return;\n    if (options.type === \"Selection\" || options.type === \"Target\")\n        this.executeMethod(\"AddContextMenuItem\", [getContextMenuItems()]);\n});\n```",
        "memberof": "Plugin",
        "longname": "attachEvent",
        "scope": "global",
        "alias": "attachEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "id",
                "description": "The event name."
            },
            {
                "type": {
                    "names": [
                        "function"
                    ],
                    "parsedType": {
                        "type": "FunctionType",
                        "params": []
                    }
                },
                "name": "action",
                "description": "The event listener."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Plugin/Methods/attachEvent.js"
        ],
        "examples": [
            "window.Asc.plugin.attachEvent(\"onContextMenuShow\", function(options) {\n    if (!options) return;\n    if (options.type === \"Selection\" || options.type === \"Target\")\n        this.executeMethod(\"AddContextMenuItem\", [getContextMenuItems()]);\n});"
        ]
    },
    {
        "comment": "/**\n\t * @function attachContextMenuClickEvent\n\t * @memberof Plugin\n\t * @alias attachContextMenuClickEvent\n\t * @description Defines the method to add an event listener, a function that will be called whenever the specified event is clicked in the context menu.\n     * @param {string} id - The event name.\n\t * @param {Function} action - The event listener.\n\t * @see office-js-api/Examples/Plugins/{Editor}/Plugin/Methods/attachContextMenuClickEvent.js\n\t */",
        "meta": {
            "lineno": 771,
            "columnno": 1
        },
        "kind": "function",
        "name": "attachContextMenuClickEvent",
        "description": "Defines the method to add an event listener, a function that will be called whenever the specified event is clicked in the context menu.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.attachContextMenuClickEvent(\"onClickItem1Sub1\", function(){\n    window.Asc.plugin.executeMethod(\"InputText\", [\"clicked: onClickItem1Sub1\"]);\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.attachContextMenuClickEvent(\"onClickItem1Sub1\", function(){\n    window.Asc.plugin.executeMethod(\"InputText\", [\"clicked: onClickItem1Sub1\"]);\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.attachContextMenuClickEvent(\"onClickItem1Sub1\", function(){\n    window.Asc.plugin.executeMethod(\"InputText\", [\"clicked: onClickItem1Sub1\"]);\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.attachContextMenuClickEvent(\"onClickItem1Sub1\", function(){\n    window.Asc.plugin.executeMethod(\"InputText\", [\"clicked: onClickItem1Sub1\"]);\n});\n```",
        "memberof": "Plugin",
        "longname": "attachContextMenuClickEvent",
        "scope": "global",
        "alias": "attachContextMenuClickEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "id",
                "description": "The event name."
            },
            {
                "type": {
                    "names": [
                        "function"
                    ],
                    "parsedType": {
                        "type": "FunctionType",
                        "params": []
                    }
                },
                "name": "action",
                "description": "The event listener."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Plugin/Methods/attachContextMenuClickEvent.js"
        ],
        "examples": [
            "window.Asc.plugin.attachContextMenuClickEvent(\"onClickItem1Sub1\", function(){\n    window.Asc.plugin.executeMethod(\"InputText\", [\"clicked: onClickItem1Sub1\"]);\n});"
        ]
    },
    {
        "comment": "/**\n\t * @typedef {Object} InputHelperItem\n\t * @description Defines the input helper item.\n\t * @property {string} id - The item index.\n\t * @property {string} text - The item text.\n\t * @see office-js-api/Examples/Plugins/{Editor}/Enumeration/InputHelperItem.js\n\t */",
        "meta": {
            "lineno": 785,
            "columnno": 1
        },
        "kind": "typedef",
        "name": "InputHelperItem",
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        },
        "description": "Defines the input helper item.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nvar items = [\n    { text: \"Name1.Family1\", id : \"0\" },\n    { text: \"Name2.Family2\", id : \"1\" },\n    { text: \"Name3.Family3\", id : \"2\" },\n    { text: \"Name4.Family4\", id : \"3\" },\n    { text: \"Name5.Family5\", id : \"4\" },\n    { text: \"Name6.Family6\", id : \"5\" },\n    { text: \"Name7.Family7\", id : \"6\" },\n    { text: \"Name8.Family8\", id : \"7\" },\n    { text: \"Name9.Family9\", id : \"8\" },\n    { text: \"Name10.Family10\", id : \"9\" },\n    { text: \"Name11.Family11\", id : \"10\" },\n    { text: \"Name12.Family12\", id : \"11\" },\n    { text: \"Name13.Family13\", id : \"12\" }\n];\nwindow.Asc.plugin.getInputHelper().setItems(items);\nvar _sizes = getInputHelperSize();\nwindow.Asc.plugin.getInputHelper().show(_sizes.w, _sizes.h, true);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nvar items = [\n    { text: \"Name1.Family1\", id : \"0\" },\n    { text: \"Name2.Family2\", id : \"1\" },\n    { text: \"Name3.Family3\", id : \"2\" },\n    { text: \"Name4.Family4\", id : \"3\" },\n    { text: \"Name5.Family5\", id : \"4\" },\n    { text: \"Name6.Family6\", id : \"5\" },\n    { text: \"Name7.Family7\", id : \"6\" },\n    { text: \"Name8.Family8\", id : \"7\" },\n    { text: \"Name9.Family9\", id : \"8\" },\n    { text: \"Name10.Family10\", id : \"9\" },\n    { text: \"Name11.Family11\", id : \"10\" },\n    { text: \"Name12.Family12\", id : \"11\" },\n    { text: \"Name13.Family13\", id : \"12\" }\n];\nwindow.Asc.plugin.getInputHelper().setItems(items);\nvar _sizes = getInputHelperSize();\nwindow.Asc.plugin.getInputHelper().show(_sizes.w, _sizes.h, true);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar items = [\n    { text: \"Name1.Family1\", id : \"0\" },\n    { text: \"Name2.Family2\", id : \"1\" },\n    { text: \"Name3.Family3\", id : \"2\" },\n    { text: \"Name4.Family4\", id : \"3\" },\n    { text: \"Name5.Family5\", id : \"4\" },\n    { text: \"Name6.Family6\", id : \"5\" },\n    { text: \"Name7.Family7\", id : \"6\" },\n    { text: \"Name8.Family8\", id : \"7\" },\n    { text: \"Name9.Family9\", id : \"8\" },\n    { text: \"Name10.Family10\", id : \"9\" },\n    { text: \"Name11.Family11\", id : \"10\" },\n    { text: \"Name12.Family12\", id : \"11\" },\n    { text: \"Name13.Family13\", id : \"12\" }\n];\nwindow.Asc.plugin.getInputHelper().setItems(items);\nvar _sizes = getInputHelperSize();\nwindow.Asc.plugin.getInputHelper().show(_sizes.w, _sizes.h, true);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nvar items = [\n    { text: \"Name1.Family1\", id : \"0\" },\n    { text: \"Name2.Family2\", id : \"1\" },\n    { text: \"Name3.Family3\", id : \"2\" },\n    { text: \"Name4.Family4\", id : \"3\" },\n    { text: \"Name5.Family5\", id : \"4\" },\n    { text: \"Name6.Family6\", id : \"5\" },\n    { text: \"Name7.Family7\", id : \"6\" },\n    { text: \"Name8.Family8\", id : \"7\" },\n    { text: \"Name9.Family9\", id : \"8\" },\n    { text: \"Name10.Family10\", id : \"9\" },\n    { text: \"Name11.Family11\", id : \"10\" },\n    { text: \"Name12.Family12\", id : \"11\" },\n    { text: \"Name13.Family13\", id : \"12\" }\n];\nwindow.Asc.plugin.getInputHelper().setItems(items);\nvar _sizes = getInputHelperSize();\nwindow.Asc.plugin.getInputHelper().show(_sizes.w, _sizes.h, true);\n```",
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "id",
                "description": "The item index."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "text",
                "description": "The item text."
            }
        ],
        "longname": "InputHelperItem",
        "scope": "global",
        "see": [
            "office-js-api/Examples/Plugins/Common/Enumeration/InputHelperItem.js"
        ],
        "examples": [
            "var items = [\n    { text: \"Name1.Family1\", id : \"0\" },\n    { text: \"Name2.Family2\", id : \"1\" },\n    { text: \"Name3.Family3\", id : \"2\" },\n    { text: \"Name4.Family4\", id : \"3\" },\n    { text: \"Name5.Family5\", id : \"4\" },\n    { text: \"Name6.Family6\", id : \"5\" },\n    { text: \"Name7.Family7\", id : \"6\" },\n    { text: \"Name8.Family8\", id : \"7\" },\n    { text: \"Name9.Family9\", id : \"8\" },\n    { text: \"Name10.Family10\", id : \"9\" },\n    { text: \"Name11.Family11\", id : \"10\" },\n    { text: \"Name12.Family12\", id : \"11\" },\n    { text: \"Name13.Family13\", id : \"12\" }\n];\nwindow.Asc.plugin.getInputHelper().setItems(items);\nvar _sizes = getInputHelperSize();\nwindow.Asc.plugin.getInputHelper().show(_sizes.w, _sizes.h, true);"
        ]
    },
    {
        "comment": "/**\n\t * Class representing an input helper - a window that appears and disappears when you type text. Its location is tied to the cursor.\n\t * @global\n\t * @class\n\t * @name InputHelper\n\t * @hideconstructor\n\t */",
        "meta": {
            "lineno": 793,
            "columnno": 1
        },
        "kind": "class",
        "name": "InputHelper",
        "description": "Class representing an input helper - a window that appears and disappears when you type text. Its location is tied to the cursor.",
        "longname": "InputHelper",
        "scope": "global"
    },
    {
        "comment": "/**\n\t * @function createWindow\n\t * @memberof InputHelper\n\t * @alias createWindow\n\t * @description Creates an input helper window.\n\t * @see office-js-api/Examples/Plugins/{Editor}/InputHelper/Methods/createWindow.js\n\t */",
        "meta": {
            "lineno": 801,
            "columnno": 1
        },
        "kind": "function",
        "name": "createWindow",
        "description": "Creates an input helper window.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.init = function(text) {\n    if (!window.isInit) {\n        window.isInit = true;\n        window.Asc.plugin.currentText = \"\";\n        window.Asc.plugin.createInputHelper();\n        window.Asc.plugin.getInputHelper().createWindow();\n    }\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.init = function(text) {\n    if (!window.isInit) {\n        window.isInit = true;\n        window.Asc.plugin.currentText = \"\";\n        window.Asc.plugin.createInputHelper();\n        window.Asc.plugin.getInputHelper().createWindow();\n    }\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.init = function(text) {\n    if (!window.isInit) {\n        window.isInit = true;\n        window.Asc.plugin.currentText = \"\";\n        window.Asc.plugin.createInputHelper();\n        window.Asc.plugin.getInputHelper().createWindow();\n    }\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.init = function(text) {\n    if (!window.isInit) {\n        window.isInit = true;\n        window.Asc.plugin.currentText = \"\";\n        window.Asc.plugin.createInputHelper();\n        window.Asc.plugin.getInputHelper().createWindow();\n    }\n};\n```",
        "memberof": "InputHelper",
        "longname": "createWindow",
        "scope": "global",
        "alias": "createWindow",
        "see": [
            "office-js-api/Examples/Plugins/Common/InputHelper/Methods/createWindow.js"
        ],
        "examples": [
            "window.Asc.plugin.init = function(text) {\n    if (!window.isInit) {\n        window.isInit = true;\n        window.Asc.plugin.currentText = \"\";\n        window.Asc.plugin.createInputHelper();\n        window.Asc.plugin.getInputHelper().createWindow();\n    }\n};"
        ]
    },
    {
        "comment": "/**\n\t * @function getItems\n\t * @memberof InputHelper\n\t * @alias getItems\n\t * @description Returns an array of the {@link global#InputHelperItem InputHelperItem} objects that contain all the items from the input helper.\n\t * @return {InputHelperItem[]}\n\t * @see office-js-api/Examples/Plugins/{Editor}/InputHelper/Methods/getItems.js\n\t */",
        "meta": {
            "lineno": 809,
            "columnno": 1
        },
        "kind": "function",
        "name": "getItems",
        "description": "Returns an array of the {@link global#InputHelperItem InputHelperItem} objects that contain all the items from the input helper.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nfunction getInputHelperSize () {\n    var _size = window.Asc.plugin.getInputHelper().getScrollSizes();\n    var _width = 150;\n    var _height = _size.h;\n    var _heightMin = window.Asc.plugin.getInputHelper().getItemsHeight(Math.min(5, window.Asc.plugin.getInputHelper().getItems().length));\n    if (_width > 400)\n        _width = 400;\n    if (_height > _heightMin)\n        _height = _heightMin;\n        _width += 30;\n        return { w: _width, h : _height };\n}\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nfunction getInputHelperSize () {\n    var _size = window.Asc.plugin.getInputHelper().getScrollSizes();\n    var _width = 150;\n    var _height = _size.h;\n    var _heightMin = window.Asc.plugin.getInputHelper().getItemsHeight(Math.min(5, window.Asc.plugin.getInputHelper().getItems().length));\n    if (_width > 400)\n        _width = 400;\n    if (_height > _heightMin)\n        _height = _heightMin;\n        _width += 30;\n        return { w: _width, h : _height };\n}\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nfunction getInputHelperSize () {\n    var _size = window.Asc.plugin.getInputHelper().getScrollSizes();\n    var _width = 150;\n    var _height = _size.h;\n    var _heightMin = window.Asc.plugin.getInputHelper().getItemsHeight(Math.min(5, window.Asc.plugin.getInputHelper().getItems().length));\n    if (_width > 400)\n        _width = 400;\n    if (_height > _heightMin)\n        _height = _heightMin;\n        _width += 30;\n        return { w: _width, h : _height };\n}\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nfunction getInputHelperSize () {\n    var _size = window.Asc.plugin.getInputHelper().getScrollSizes();\n    var _width = 150;\n    var _height = _size.h;\n    var _heightMin = window.Asc.plugin.getInputHelper().getItemsHeight(Math.min(5, window.Asc.plugin.getInputHelper().getItems().length));\n    if (_width > 400)\n        _width = 400;\n    if (_height > _heightMin)\n        _height = _heightMin;\n        _width += 30;\n        return { w: _width, h : _height };\n}\n```",
        "memberof": "InputHelper",
        "longname": "getItems",
        "scope": "global",
        "alias": "getItems",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<InputHelperItem>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "InputHelperItem",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/InputHelper/Methods/getItems.js"
        ],
        "examples": [
            "function getInputHelperSize () {\n    var _size = window.Asc.plugin.getInputHelper().getScrollSizes();\n    var _width = 150;\n    var _height = _size.h;\n    var _heightMin = window.Asc.plugin.getInputHelper().getItemsHeight(Math.min(5, window.Asc.plugin.getInputHelper().getItems().length));\n    if (_width > 400)\n        _width = 400;\n    if (_height > _heightMin)\n        _height = _heightMin;\n        _width += 30;\n        return { w: _width, h : _height };\n}"
        ]
    },
    {
        "comment": "/**\n\t * @function setItems\n\t * @memberof InputHelper\n\t * @alias setItems\n\t * @description Sets the items to the input helper.\n\t * @param {InputHelperItem[]} items - Defines an array of the {@link global#InputHelperItem InputHelperItem} objects which contain all the items for the input helper.\n\t * @see office-js-api/Examples/Plugins/{Editor}/InputHelper/Methods/setItems.js\n\t */",
        "meta": {
            "lineno": 818,
            "columnno": 1
        },
        "kind": "function",
        "name": "setItems",
        "description": "Sets the items to the input helper.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\n{\n    var items = [\n        { text: \"Name1.Family1\", id : \"0\" },\n        { text: \"Name2.Family2\", id : \"1\" },\n        { text: \"Name3.Family3\", id : \"2\" },\n        { text: \"Name4.Family4\", id : \"3\" },\n        { text: \"Name5.Family5\", id : \"4\" },\n        { text: \"Name6.Family6\", id : \"5\" },\n        { text: \"Name7.Family7\", id : \"6\" },\n        { text: \"Name8.Family8\", id : \"7\" },\n        { text: \"Name9.Family9\", id : \"8\" },\n        { text: \"Name10.Family10\", id : \"9\" },\n        { text: \"Name11.Family11\", id : \"10\" },\n        { text: \"Name12.Family12\", id : \"11\" },\n        { text: \"Name13.Family13\", id : \"12\" }\n    ];\n    window.Asc.plugin.getInputHelper().setItems(items);\n    var _sizes = getInputHelperSize();\n    window.Asc.plugin.getInputHelper().show(_sizes.w, _sizes.h, true);\n}\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n{\n    var items = [\n        { text: \"Name1.Family1\", id : \"0\" },\n        { text: \"Name2.Family2\", id : \"1\" },\n        { text: \"Name3.Family3\", id : \"2\" },\n        { text: \"Name4.Family4\", id : \"3\" },\n        { text: \"Name5.Family5\", id : \"4\" },\n        { text: \"Name6.Family6\", id : \"5\" },\n        { text: \"Name7.Family7\", id : \"6\" },\n        { text: \"Name8.Family8\", id : \"7\" },\n        { text: \"Name9.Family9\", id : \"8\" },\n        { text: \"Name10.Family10\", id : \"9\" },\n        { text: \"Name11.Family11\", id : \"10\" },\n        { text: \"Name12.Family12\", id : \"11\" },\n        { text: \"Name13.Family13\", id : \"12\" }\n    ];\n    window.Asc.plugin.getInputHelper().setItems(items);\n    var _sizes = getInputHelperSize();\n    window.Asc.plugin.getInputHelper().show(_sizes.w, _sizes.h, true);\n}\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\n{\n    var items = [\n        { text: \"Name1.Family1\", id : \"0\" },\n        { text: \"Name2.Family2\", id : \"1\" },\n        { text: \"Name3.Family3\", id : \"2\" },\n        { text: \"Name4.Family4\", id : \"3\" },\n        { text: \"Name5.Family5\", id : \"4\" },\n        { text: \"Name6.Family6\", id : \"5\" },\n        { text: \"Name7.Family7\", id : \"6\" },\n        { text: \"Name8.Family8\", id : \"7\" },\n        { text: \"Name9.Family9\", id : \"8\" },\n        { text: \"Name10.Family10\", id : \"9\" },\n        { text: \"Name11.Family11\", id : \"10\" },\n        { text: \"Name12.Family12\", id : \"11\" },\n        { text: \"Name13.Family13\", id : \"12\" }\n    ];\n    window.Asc.plugin.getInputHelper().setItems(items);\n    var _sizes = getInputHelperSize();\n    window.Asc.plugin.getInputHelper().show(_sizes.w, _sizes.h, true);\n}\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\n{\n    var items = [\n        { text: \"Name1.Family1\", id : \"0\" },\n        { text: \"Name2.Family2\", id : \"1\" },\n        { text: \"Name3.Family3\", id : \"2\" },\n        { text: \"Name4.Family4\", id : \"3\" },\n        { text: \"Name5.Family5\", id : \"4\" },\n        { text: \"Name6.Family6\", id : \"5\" },\n        { text: \"Name7.Family7\", id : \"6\" },\n        { text: \"Name8.Family8\", id : \"7\" },\n        { text: \"Name9.Family9\", id : \"8\" },\n        { text: \"Name10.Family10\", id : \"9\" },\n        { text: \"Name11.Family11\", id : \"10\" },\n        { text: \"Name12.Family12\", id : \"11\" },\n        { text: \"Name13.Family13\", id : \"12\" }\n    ];\n    window.Asc.plugin.getInputHelper().setItems(items);\n    var _sizes = getInputHelperSize();\n    window.Asc.plugin.getInputHelper().show(_sizes.w, _sizes.h, true);\n}\n```",
        "memberof": "InputHelper",
        "longname": "setItems",
        "scope": "global",
        "alias": "setItems",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<InputHelperItem>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "InputHelperItem",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "items",
                "description": "Defines an array of the {@link global#InputHelperItem InputHelperItem} objects which contain all the items for the input helper."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/InputHelper/Methods/setItems.js"
        ],
        "examples": [
            "{\n    var items = [\n        { text: \"Name1.Family1\", id : \"0\" },\n        { text: \"Name2.Family2\", id : \"1\" },\n        { text: \"Name3.Family3\", id : \"2\" },\n        { text: \"Name4.Family4\", id : \"3\" },\n        { text: \"Name5.Family5\", id : \"4\" },\n        { text: \"Name6.Family6\", id : \"5\" },\n        { text: \"Name7.Family7\", id : \"6\" },\n        { text: \"Name8.Family8\", id : \"7\" },\n        { text: \"Name9.Family9\", id : \"8\" },\n        { text: \"Name10.Family10\", id : \"9\" },\n        { text: \"Name11.Family11\", id : \"10\" },\n        { text: \"Name12.Family12\", id : \"11\" },\n        { text: \"Name13.Family13\", id : \"12\" }\n    ];\n    window.Asc.plugin.getInputHelper().setItems(items);\n    var _sizes = getInputHelperSize();\n    window.Asc.plugin.getInputHelper().show(_sizes.w, _sizes.h, true);\n}"
        ]
    },
    {
        "comment": "/**\n\t * @function show\n\t * @memberof InputHelper\n\t * @alias show\n\t * @description Shows an input helper.\n\t * @param {number} width - The input helper window width measured in millimeters.\n\t * @param {number} height - The input helper window height measured in millimeters.\n\t * @param {boolean} isCaptureKeyboard - Defines if the keyboard is caught (**true**) or not (**false**).\n\t * @see office-js-api/Examples/Plugins/{Editor}/InputHelper/Methods/show.js\n\t */",
        "meta": {
            "lineno": 827,
            "columnno": 1
        },
        "kind": "function",
        "name": "show",
        "description": "Shows an input helper.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\n{\n    var items = [\n        { text: \"Name1.Family1\", id : \"0\" },\n        { text: \"Name2.Family2\", id : \"1\" },\n        { text: \"Name3.Family3\", id : \"2\" },\n        { text: \"Name4.Family4\", id : \"3\" },\n        { text: \"Name5.Family5\", id : \"4\" },\n        { text: \"Name6.Family6\", id : \"5\" },\n        { text: \"Name7.Family7\", id : \"6\" },\n        { text: \"Name8.Family8\", id : \"7\" },\n        { text: \"Name9.Family9\", id : \"8\" },\n        { text: \"Name10.Family10\", id : \"9\" },\n        { text: \"Name11.Family11\", id : \"10\" },\n        { text: \"Name12.Family12\", id : \"11\" },\n        { text: \"Name13.Family13\", id : \"12\" }\n    ];\n    window.Asc.plugin.getInputHelper().setItems(items);\n    var _sizes = getInputHelperSize();\n    window.Asc.plugin.getInputHelper().show(_sizes.w, _sizes.h, true);\n}\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n{\n    var items = [\n        { text: \"Name1.Family1\", id : \"0\" },\n        { text: \"Name2.Family2\", id : \"1\" },\n        { text: \"Name3.Family3\", id : \"2\" },\n        { text: \"Name4.Family4\", id : \"3\" },\n        { text: \"Name5.Family5\", id : \"4\" },\n        { text: \"Name6.Family6\", id : \"5\" },\n        { text: \"Name7.Family7\", id : \"6\" },\n        { text: \"Name8.Family8\", id : \"7\" },\n        { text: \"Name9.Family9\", id : \"8\" },\n        { text: \"Name10.Family10\", id : \"9\" },\n        { text: \"Name11.Family11\", id : \"10\" },\n        { text: \"Name12.Family12\", id : \"11\" },\n        { text: \"Name13.Family13\", id : \"12\" }\n    ];\n    window.Asc.plugin.getInputHelper().setItems(items);\n    var _sizes = getInputHelperSize();\n    window.Asc.plugin.getInputHelper().show(_sizes.w, _sizes.h, true);\n}\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\n{\n    var items = [\n        { text: \"Name1.Family1\", id : \"0\" },\n        { text: \"Name2.Family2\", id : \"1\" },\n        { text: \"Name3.Family3\", id : \"2\" },\n        { text: \"Name4.Family4\", id : \"3\" },\n        { text: \"Name5.Family5\", id : \"4\" },\n        { text: \"Name6.Family6\", id : \"5\" },\n        { text: \"Name7.Family7\", id : \"6\" },\n        { text: \"Name8.Family8\", id : \"7\" },\n        { text: \"Name9.Family9\", id : \"8\" },\n        { text: \"Name10.Family10\", id : \"9\" },\n        { text: \"Name11.Family11\", id : \"10\" },\n        { text: \"Name12.Family12\", id : \"11\" },\n        { text: \"Name13.Family13\", id : \"12\" }\n    ];\n    window.Asc.plugin.getInputHelper().setItems(items);\n    var _sizes = getInputHelperSize();\n    window.Asc.plugin.getInputHelper().show(_sizes.w, _sizes.h, true);\n}\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\n{\n    var items = [\n        { text: \"Name1.Family1\", id : \"0\" },\n        { text: \"Name2.Family2\", id : \"1\" },\n        { text: \"Name3.Family3\", id : \"2\" },\n        { text: \"Name4.Family4\", id : \"3\" },\n        { text: \"Name5.Family5\", id : \"4\" },\n        { text: \"Name6.Family6\", id : \"5\" },\n        { text: \"Name7.Family7\", id : \"6\" },\n        { text: \"Name8.Family8\", id : \"7\" },\n        { text: \"Name9.Family9\", id : \"8\" },\n        { text: \"Name10.Family10\", id : \"9\" },\n        { text: \"Name11.Family11\", id : \"10\" },\n        { text: \"Name12.Family12\", id : \"11\" },\n        { text: \"Name13.Family13\", id : \"12\" }\n    ];\n    window.Asc.plugin.getInputHelper().setItems(items);\n    var _sizes = getInputHelperSize();\n    window.Asc.plugin.getInputHelper().show(_sizes.w, _sizes.h, true);\n}\n```",
        "memberof": "InputHelper",
        "longname": "show",
        "scope": "global",
        "alias": "show",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "width",
                "description": "The input helper window width measured in millimeters."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "height",
                "description": "The input helper window height measured in millimeters."
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isCaptureKeyboard",
                "description": "Defines if the keyboard is caught (**true**) or not (**false**)."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/InputHelper/Methods/show.js"
        ],
        "examples": [
            "{\n    var items = [\n        { text: \"Name1.Family1\", id : \"0\" },\n        { text: \"Name2.Family2\", id : \"1\" },\n        { text: \"Name3.Family3\", id : \"2\" },\n        { text: \"Name4.Family4\", id : \"3\" },\n        { text: \"Name5.Family5\", id : \"4\" },\n        { text: \"Name6.Family6\", id : \"5\" },\n        { text: \"Name7.Family7\", id : \"6\" },\n        { text: \"Name8.Family8\", id : \"7\" },\n        { text: \"Name9.Family9\", id : \"8\" },\n        { text: \"Name10.Family10\", id : \"9\" },\n        { text: \"Name11.Family11\", id : \"10\" },\n        { text: \"Name12.Family12\", id : \"11\" },\n        { text: \"Name13.Family13\", id : \"12\" }\n    ];\n    window.Asc.plugin.getInputHelper().setItems(items);\n    var _sizes = getInputHelperSize();\n    window.Asc.plugin.getInputHelper().show(_sizes.w, _sizes.h, true);\n}"
        ]
    },
    {
        "comment": "/**\n\t * @function unShow\n\t * @memberof InputHelper\n\t * @alias unShow\n\t * @description Hides an input helper.\n\t * @see office-js-api/Examples/Plugins/{Editor}/InputHelper/Methods/unShow.js\n\t */",
        "meta": {
            "lineno": 838,
            "columnno": 1
        },
        "kind": "function",
        "name": "unShow",
        "description": "Hides an input helper.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.executeMethod (\"SelectContentControl\", [window.Asc.plugin.currentContentControl.InternalId], function() {\n    window.Asc.plugin.executeMethod(\"InputText\", [item.text]);\n    window.Asc.plugin.getInputHelper().unShow();\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.executeMethod (\"SelectContentControl\", [window.Asc.plugin.currentContentControl.InternalId], function() {\n    window.Asc.plugin.executeMethod(\"InputText\", [item.text]);\n    window.Asc.plugin.getInputHelper().unShow();\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.executeMethod (\"SelectContentControl\", [window.Asc.plugin.currentContentControl.InternalId], function() {\n    window.Asc.plugin.executeMethod(\"InputText\", [item.text]);\n    window.Asc.plugin.getInputHelper().unShow();\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.executeMethod (\"SelectContentControl\", [window.Asc.plugin.currentContentControl.InternalId], function() {\n    window.Asc.plugin.executeMethod(\"InputText\", [item.text]);\n    window.Asc.plugin.getInputHelper().unShow();\n});\n```",
        "memberof": "InputHelper",
        "longname": "unShow",
        "scope": "global",
        "alias": "unShow",
        "see": [
            "office-js-api/Examples/Plugins/Common/InputHelper/Methods/unShow.js"
        ],
        "examples": [
            "window.Asc.plugin.executeMethod (\"SelectContentControl\", [window.Asc.plugin.currentContentControl.InternalId], function() {\n    window.Asc.plugin.executeMethod(\"InputText\", [item.text]);\n    window.Asc.plugin.getInputHelper().unShow();\n});"
        ]
    },
    {
        "comment": "/**\n\t * @function getScrollSizes\n\t * @memberof InputHelper\n\t * @alias getScrollSizes\n\t * @description Returns the sizes of the input helper scrolled window. Returns an object with width and height parameters.\n\t * @return {number}\n\t * @see office-js-api/Examples/Plugins/{Editor}/InputHelper/Methods/getScrollSizes.js\n\t */",
        "meta": {
            "lineno": 846,
            "columnno": 1
        },
        "kind": "function",
        "name": "getScrollSizes",
        "description": "Returns the sizes of the input helper scrolled window. Returns an object with width and height parameters.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nfunction getInputHelperSize () {\n    var _size = window.Asc.plugin.getInputHelper().getScrollSizes();\n    var _width = 200;\n    var _height = _size.h;\n    var _heightMin = window.Asc.plugin.getInputHelper().getItemsHeight(Math.min(5, window.Asc.plugin.getInputHelper().getItems().length));\n    if (_width > 400)\n        _width = 400;\n    if (_height > _heightMin)\n        _height = _heightMin;\n        _width += 30;\n        return { w: _width, h : _height };\n}\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nfunction getInputHelperSize () {\n    var _size = window.Asc.plugin.getInputHelper().getScrollSizes();\n    var _width = 200;\n    var _height = _size.h;\n    var _heightMin = window.Asc.plugin.getInputHelper().getItemsHeight(Math.min(5, window.Asc.plugin.getInputHelper().getItems().length));\n    if (_width > 400)\n        _width = 400;\n    if (_height > _heightMin)\n        _height = _heightMin;\n        _width += 30;\n        return { w: _width, h : _height };\n}\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nfunction getInputHelperSize () {\n    var _size = window.Asc.plugin.getInputHelper().getScrollSizes();\n    var _width = 200;\n    var _height = _size.h;\n    var _heightMin = window.Asc.plugin.getInputHelper().getItemsHeight(Math.min(5, window.Asc.plugin.getInputHelper().getItems().length));\n    if (_width > 400)\n        _width = 400;\n    if (_height > _heightMin)\n        _height = _heightMin;\n        _width += 30;\n        return { w: _width, h : _height };\n}\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nfunction getInputHelperSize () {\n    var _size = window.Asc.plugin.getInputHelper().getScrollSizes();\n    var _width = 200;\n    var _height = _size.h;\n    var _heightMin = window.Asc.plugin.getInputHelper().getItemsHeight(Math.min(5, window.Asc.plugin.getInputHelper().getItems().length));\n    if (_width > 400)\n        _width = 400;\n    if (_height > _heightMin)\n        _height = _heightMin;\n        _width += 30;\n        return { w: _width, h : _height };\n}\n```",
        "memberof": "InputHelper",
        "longname": "getScrollSizes",
        "scope": "global",
        "alias": "getScrollSizes",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/InputHelper/Methods/getScrollSizes.js"
        ],
        "examples": [
            "function getInputHelperSize () {\n    var _size = window.Asc.plugin.getInputHelper().getScrollSizes();\n    var _width = 200;\n    var _height = _size.h;\n    var _heightMin = window.Asc.plugin.getInputHelper().getItemsHeight(Math.min(5, window.Asc.plugin.getInputHelper().getItems().length));\n    if (_width > 400)\n        _width = 400;\n    if (_height > _heightMin)\n        _height = _heightMin;\n        _width += 30;\n        return { w: _width, h : _height };\n}"
        ]
    },
    {
        "comment": "/**\n\t * createInputHelper\n\t * @memberof Plugin\n\t * @alias createInputHelper\n\t * @description Defines the method used to create an {@link inputhelper input helper} - a window that appears and disappears when you type text. Its location is tied to the cursor.\n\t * @see office-js-api/Examples/Plugins/{Editor}/Plugin/Methods/createInputHelper.js\n\t */",
        "meta": {
            "lineno": 862,
            "columnno": 1
        },
        "kind": "function",
        "name": "createInputHelper",
        "description": "Defines the method used to create an {@link inputhelper input helper} - a window that appears and disappears when you type text. Its location is tied to the cursor.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.init = function(text) {\n    if (!window.isInit) {\n        window.isInit = true;\n        window.Asc.plugin.currentContentControl = null;\n        window.Asc.plugin.createInputHelper();\n        window.Asc.plugin.getInputHelper().createWindow();\n    }\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.init = function(text) {\n    if (!window.isInit) {\n        window.isInit = true;\n        window.Asc.plugin.currentContentControl = null;\n        window.Asc.plugin.createInputHelper();\n        window.Asc.plugin.getInputHelper().createWindow();\n    }\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.init = function(text) {\n    if (!window.isInit) {\n        window.isInit = true;\n        window.Asc.plugin.currentContentControl = null;\n        window.Asc.plugin.createInputHelper();\n        window.Asc.plugin.getInputHelper().createWindow();\n    }\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.init = function(text) {\n    if (!window.isInit) {\n        window.isInit = true;\n        window.Asc.plugin.currentContentControl = null;\n        window.Asc.plugin.createInputHelper();\n        window.Asc.plugin.getInputHelper().createWindow();\n    }\n};\n```",
        "memberof": "Plugin",
        "longname": "createInputHelper",
        "alias": "createInputHelper",
        "see": [
            "office-js-api/Examples/Plugins/Common/Plugin/Methods/createInputHelper.js"
        ],
        "examples": [
            "window.Asc.plugin.init = function(text) {\n    if (!window.isInit) {\n        window.isInit = true;\n        window.Asc.plugin.currentContentControl = null;\n        window.Asc.plugin.createInputHelper();\n        window.Asc.plugin.getInputHelper().createWindow();\n    }\n};"
        ]
    },
    {
        "comment": "/**\n\t * getInputHelper\n\t * @memberof Plugin\n\t * @alias getInputHelper\n\t * @description Defines the method used to get the {@link inputhelper InputHelper object}.\n\t * @return {InputHelper} Input helper object\n\t * @see office-js-api/Examples/Plugins/{Editor}/Plugin/Methods/getInputHelper.js\n\t */",
        "meta": {
            "lineno": 876,
            "columnno": 1
        },
        "kind": "function",
        "name": "getInputHelper",
        "description": "Defines the method used to get the {@link inputhelper InputHelper object}.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.init = function(text) {\n    if (!window.isInit) {\n        window.isInit = true;\n        window.Asc.plugin.currentContentControl = null;\n        window.Asc.plugin.createInputHelper();\n        window.Asc.plugin.getInputHelper().createWindow();\n    }\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.init = function(text) {\n    if (!window.isInit) {\n        window.isInit = true;\n        window.Asc.plugin.currentContentControl = null;\n        window.Asc.plugin.createInputHelper();\n        window.Asc.plugin.getInputHelper().createWindow();\n    }\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.init = function(text) {\n    if (!window.isInit) {\n        window.isInit = true;\n        window.Asc.plugin.currentContentControl = null;\n        window.Asc.plugin.createInputHelper();\n        window.Asc.plugin.getInputHelper().createWindow();\n    }\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.init = function(text) {\n    if (!window.isInit) {\n        window.isInit = true;\n        window.Asc.plugin.currentContentControl = null;\n        window.Asc.plugin.createInputHelper();\n        window.Asc.plugin.getInputHelper().createWindow();\n    }\n};\n```",
        "memberof": "Plugin",
        "longname": "getInputHelper",
        "alias": "getInputHelper",
        "returns": [
            {
                "type": {
                    "names": [
                        "InputHelper"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "InputHelper"
                    }
                }
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Plugin/Methods/getInputHelper.js"
        ],
        "examples": [
            "window.Asc.plugin.init = function(text) {\n    if (!window.isInit) {\n        window.isInit = true;\n        window.Asc.plugin.currentContentControl = null;\n        window.Asc.plugin.createInputHelper();\n        window.Asc.plugin.getInputHelper().createWindow();\n    }\n};"
        ]
    },
    {
        "comment": "/**\n\t * sendToPlugin\n\t * @memberof Plugin\n\t * @alias sendToPlugin\n\t * @description Sends a message from the modal window to the plugin.\n\t * @param {string} name - The event name.\n\t * @param {object} data - The event data.\n\t * @return {boolean} Returns true if the operation is successful.\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/Plugins/{Editor}/Plugin/Methods/sendToPlugin.js\n\t */",
        "meta": {
            "lineno": 894,
            "columnno": 1
        },
        "kind": "function",
        "since": "7.4.0",
        "name": "sendToPlugin",
        "description": "Sends a message from the modal window to the plugin.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nfunction makeConvetration() {\n    if (window.Asc.plugin.windowID) {\n        window.Asc.plugin.sendToPlugin(\"onWindowMessage\", {config: oConfig});\n    } else {\n        window.Asc.plugin.executeMethod('ConvertDocument', [oConfig.convertType, oConfig.htmlHeadings, oConfig.base64img, oConfig.demoteHeadings, oConfig.renderHTMLTags], function(sOutput) {\n            document.getElementById(\"text-area\").value = sOutput;\n        });\n    }\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nfunction makeConvetration() {\n    if (window.Asc.plugin.windowID) {\n        window.Asc.plugin.sendToPlugin(\"onWindowMessage\", {config: oConfig});\n    } else {\n        window.Asc.plugin.executeMethod('ConvertDocument', [oConfig.convertType, oConfig.htmlHeadings, oConfig.base64img, oConfig.demoteHeadings, oConfig.renderHTMLTags], function(sOutput) {\n            document.getElementById(\"text-area\").value = sOutput;\n        });\n    }\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nfunction makeConvetration() {\n    if (window.Asc.plugin.windowID) {\n        window.Asc.plugin.sendToPlugin(\"onWindowMessage\", {config: oConfig});\n    } else {\n        window.Asc.plugin.executeMethod('ConvertDocument', [oConfig.convertType, oConfig.htmlHeadings, oConfig.base64img, oConfig.demoteHeadings, oConfig.renderHTMLTags], function(sOutput) {\n            document.getElementById(\"text-area\").value = sOutput;\n        });\n    }\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nfunction makeConvetration() {\n    if (window.Asc.plugin.windowID) {\n        window.Asc.plugin.sendToPlugin(\"onWindowMessage\", {config: oConfig});\n    } else {\n        window.Asc.plugin.executeMethod('ConvertDocument', [oConfig.convertType, oConfig.htmlHeadings, oConfig.base64img, oConfig.demoteHeadings, oConfig.renderHTMLTags], function(sOutput) {\n            document.getElementById(\"text-area\").value = sOutput;\n        });\n    }\n};\n```",
        "memberof": "Plugin",
        "longname": "sendToPlugin",
        "alias": "sendToPlugin",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "name",
                "description": "The event name."
            },
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "name": "data",
                "description": "The event data."
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Plugin/Methods/sendToPlugin.js"
        ],
        "examples": [
            "function makeConvetration() {\n    if (window.Asc.plugin.windowID) {\n        window.Asc.plugin.sendToPlugin(\"onWindowMessage\", {config: oConfig});\n    } else {\n        window.Asc.plugin.executeMethod('ConvertDocument', [oConfig.convertType, oConfig.htmlHeadings, oConfig.base64img, oConfig.demoteHeadings, oConfig.renderHTMLTags], function(sOutput) {\n            document.getElementById(\"text-area\").value = sOutput;\n        });\n    }\n};"
        ]
    },
    {
        "comment": "/**\n     * The editors which the plugin is available for:\n\t * <b>word</b> - text document editor,\n\t * <b>cell</b> - spreadsheet editor,\n\t * <b>slide</b> - presentation editor,\n\t * <b>pdf</b> - pdf editor.\n\t * @typedef {(\"word\" | \"cell\" | \"slide\" | \"pdf\")} editorType\n     * @see office-js-api/Examples/Plugins/{Editor}/Enumeration/editorType.js\n\t */",
        "meta": {
            "lineno": 57,
            "columnno": 4
        },
        "kind": "typedef",
        "name": "editorType",
        "type": {
            "names": [
                "\"word\"",
                "\"cell\"",
                "\"slide\"",
                "\"pdf\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"word\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"cell\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"slide\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pdf\""
                    }
                ]
            }
        },
        "description": "The editors which the plugin is available for:\n<b>word</b> - text document editor,\n<b>cell</b> - spreadsheet editor,\n<b>slide</b> - presentation editor,\n<b>pdf</b> - pdf editor.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nvar config = {\n    \"variations\": [\n        {\n            \"EditorsSupport\": [\"word\", \"cell\", \"slide\"],\n            ...\n        }\n    ]\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nvar config = {\n    \"variations\": [\n        {\n            \"EditorsSupport\": [\"word\", \"cell\", \"slide\"],\n            ...\n        }\n    ]\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar config = {\n    \"variations\": [\n        {\n            \"EditorsSupport\": [\"word\", \"cell\", \"slide\"],\n            ...\n        }\n    ]\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nvar config = {\n    \"variations\": [\n        {\n            \"EditorsSupport\": [\"word\", \"cell\", \"slide\"],\n            ...\n        }\n    ]\n};\n```",
        "longname": "editorType",
        "scope": "global",
        "see": [
            "office-js-api/Examples/Plugins/Common/Enumeration/editorType.js"
        ],
        "examples": [
            "var config = {\n    \"variations\": [\n        {\n            \"EditorsSupport\": [\"word\", \"cell\", \"slide\"],\n            ...\n        }\n    ]\n};"
        ]
    },
    {
        "comment": "/**\n\t * The data type selected in the editor and sent to the plugin:\n     * <b>text</b> - the text data,\n\t * <b>html</b> - HTML formatted code,\n\t * <b>ole</b> - OLE object data,\n     * <b>desktop</b> - the desktop editor data,\n     * <b>destop-external</b> - the main page data of the desktop app (system messages),\n     * <b>none</b> - no data will be send to the plugin from the editor,\n\t * <b>sign</b> - the sign for the keychain plugin.\n\t * @typedef {(\"text\" | \"html\" | \"ole\" | \"desktop\" | \"destop-external\" | \"none\" | \"sign\")} initDataType\n     * @see office-js-api/Examples/Plugins/{Editor}/Enumeration/initDataType.js\n\t */",
        "meta": {
            "lineno": 67,
            "columnno": 4
        },
        "kind": "typedef",
        "name": "initDataType",
        "type": {
            "names": [
                "\"text\"",
                "\"html\"",
                "\"ole\"",
                "\"desktop\"",
                "\"destop-external\"",
                "\"none\"",
                "\"sign\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"text\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"html\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ole\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"desktop\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"destop-external\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"none\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"sign\""
                    }
                ]
            }
        },
        "description": "The data type selected in the editor and sent to the plugin:\n<b>text</b> - the text data,\n<b>html</b> - HTML formatted code,\n<b>ole</b> - OLE object data,\n<b>desktop</b> - the desktop editor data,\n<b>destop-external</b> - the main page data of the desktop app (system messages),\n<b>none</b> - no data will be send to the plugin from the editor,\n<b>sign</b> - the sign for the keychain plugin.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nvar config = {\n    \"variations\": [\n        {\n            \"initDataType\": \"ole\",\n            ...\n        }\n    ]\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nvar config = {\n    \"variations\": [\n        {\n            \"initDataType\": \"ole\",\n            ...\n        }\n    ]\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar config = {\n    \"variations\": [\n        {\n            \"initDataType\": \"ole\",\n            ...\n        }\n    ]\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nvar config = {\n    \"variations\": [\n        {\n            \"initDataType\": \"ole\",\n            ...\n        }\n    ]\n};\n```",
        "longname": "initDataType",
        "scope": "global",
        "see": [
            "office-js-api/Examples/Plugins/Common/Enumeration/initDataType.js"
        ],
        "examples": [
            "var config = {\n    \"variations\": [\n        {\n            \"initDataType\": \"ole\",\n            ...\n        }\n    ]\n};"
        ]
    },
    {
        "comment": "/**\n     * Plugin event (\"onDocumentContentReady\", \"onTargetPositionChanged\", onClick\", \"onInputHelperClear\", \"onInputHelperInput\", etc.).\n     * @typedef {string} EventType\n     * @see office-js-api/Examples/Plugins/{Editor}/Enumeration/EventType.js\n\t */",
        "meta": {
            "lineno": 80,
            "columnno": 4
        },
        "kind": "typedef",
        "name": "EventType",
        "type": {
            "names": [
                "string"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "string"
            }
        },
        "description": "Plugin event (\"onDocumentContentReady\", \"onTargetPositionChanged\", onClick\", \"onInputHelperClear\", \"onInputHelperInput\", etc.).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nvar config = {\n    \"variations\": [\n        {\n            \"events\": [\"onClick\"],\n            ...\n        }\n    ]\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nvar config = {\n    \"variations\": [\n        {\n            \"events\": [\"onClick\"],\n            ...\n        }\n    ]\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar config = {\n    \"variations\": [\n        {\n            \"events\": [\"onClick\"],\n            ...\n        }\n    ]\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nvar config = {\n    \"variations\": [\n        {\n            \"events\": [\"onClick\"],\n            ...\n        }\n    ]\n};\n```",
        "longname": "EventType",
        "scope": "global",
        "see": [
            "office-js-api/Examples/Plugins/Common/Enumeration/EventType.js"
        ],
        "examples": [
            "var config = {\n    \"variations\": [\n        {\n            \"events\": [\"onClick\"],\n            ...\n        }\n    ]\n};"
        ]
    },
    {
        "comment": "/**\n\t * The skinnable plugin button used in the plugin interface (used for visual plugins with their own window only, i.e. isVisual == true and isInsideMode == false).\n\t * @typedef { Object } Button\n\t * @property {string} text - The label which is displayed on the button.\n\t * @property {boolean} [primary] - Defines if the button is primary or not. The primary flag affects the button skin only.\n\t * @property {boolean} [isViewer] - Defines if the button is shown in the viewer mode only or not.\n\t * @property {localeTranslate} [textLocale] - Translations for the text field. The object keys are the two letter language codes (ru, de, it, etc.) and the values are the button label translation for each language.\n\t * @see office-js-api/Examples/Plugins/{Editor}/Enumeration/Button.js\n\t */",
        "meta": {
            "lineno": 147,
            "columnno": 4
        },
        "kind": "typedef",
        "name": "Button",
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        },
        "description": "The skinnable plugin button used in the plugin interface (used for visual plugins with their own window only, i.e. isVisual == true and isInsideMode == false).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nvar config = {\n    \"variations\": [\n        {\n            \"buttons\": [\n                { \n                    \"text\": \"Cancel\",\n                    \"primary\": false,\n                    \"isviewer\": false,\n                    \"textLocale\": {\n                        \"fr\": \"Annuler\",\n                        \"es\": \"Cancelar\"\n                    }\n                }\n            ],\n            ...\n        }\n    ]\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nvar config = {\n    \"variations\": [\n        {\n            \"buttons\": [\n                { \n                    \"text\": \"Cancel\",\n                    \"primary\": false,\n                    \"isviewer\": false,\n                    \"textLocale\": {\n                        \"fr\": \"Annuler\",\n                        \"es\": \"Cancelar\"\n                    }\n                }\n            ],\n            ...\n        }\n    ]\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar config = {\n    \"variations\": [\n        {\n            \"buttons\": [\n                { \n                    \"text\": \"Cancel\",\n                    \"primary\": false,\n                    \"isviewer\": false,\n                    \"textLocale\": {\n                        \"fr\": \"Annuler\",\n                        \"es\": \"Cancelar\"\n                    }\n                }\n            ],\n            ...\n        }\n    ]\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nvar config = {\n    \"variations\": [\n        {\n            \"buttons\": [\n                { \n                    \"text\": \"Cancel\",\n                    \"primary\": false,\n                    \"isviewer\": false,\n                    \"textLocale\": {\n                        \"fr\": \"Annuler\",\n                        \"es\": \"Cancelar\"\n                    }\n                }\n            ],\n            ...\n        }\n    ]\n};\n```",
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "text",
                "description": "The label which is displayed on the button."
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "primary",
                "description": "Defines if the button is primary or not. The primary flag affects the button skin only.",
                "optional": true
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isViewer",
                "description": "Defines if the button is shown in the viewer mode only or not.",
                "optional": true
            },
            {
                "type": {
                    "names": [
                        "localeTranslate"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "localeTranslate"
                    }
                },
                "name": "textLocale",
                "description": "Translations for the text field. The object keys are the two letter language codes (ru, de, it, etc.) and the values are the button label translation for each language.",
                "optional": true
            }
        ],
        "longname": "Button",
        "scope": "global",
        "see": [
            "office-js-api/Examples/Plugins/Common/Enumeration/Button.js"
        ],
        "examples": [
            "var config = {\n    \"variations\": [\n        {\n            \"buttons\": [\n                { \n                    \"text\": \"Cancel\",\n                    \"primary\": false,\n                    \"isviewer\": false,\n                    \"textLocale\": {\n                        \"fr\": \"Annuler\",\n                        \"es\": \"Cancelar\"\n                    }\n                }\n            ],\n            ...\n        }\n    ]\n};"
        ]
    },
    {
        "comment": "/**\n\t * The OLE object properties\n\t * @typedef {Object} OLEProperties\n\t * @property {string} data - OLE object data (internal format).\n\t * @property {string} imgSrc - A link to the image (its visual representation) stored in the OLE object and used by the plugin.\n\t * @property {string} guid - An identifier of the plugin which can edit the current OLE object and must be of the *asc.{UUID}* type.\n\t * @property {number} width - The OLE object width measured in millimeters.\n\t * @property {number} height - The OLE object height measured in millimeters.\n\t * @property {number} widthPix - The OLE object image width in pixels.\n\t * @property {number} heightPix - The OLE object image height in pixels.\n\t * @see office-js-api/Examples/Plugins/{Editor}/Enumeration/OLEProperties.js\n\t */",
        "meta": {
            "lineno": 157,
            "columnno": 1
        },
        "kind": "typedef",
        "name": "OLEProperties",
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        },
        "description": "The OLE object properties\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nvar oOLEProperties = {\n    \"data\": \"{data}\",\n    \"imgSrc\": \"https://link-to-the-image.jpg\",\n    \"guid\": \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\",\n    \"width\": 70,\n    \"height\": 70,\n    \"widthPix\": 60 * 36000,\n    \"heightPix\": 60 * 36000\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nvar oOLEProperties = {\n    \"data\": \"{data}\",\n    \"imgSrc\": \"https://link-to-the-image.jpg\",\n    \"guid\": \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\",\n    \"width\": 70,\n    \"height\": 70,\n    \"widthPix\": 60 * 36000,\n    \"heightPix\": 60 * 36000\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oOLEProperties = {\n    \"data\": \"{data}\",\n    \"imgSrc\": \"https://link-to-the-image.jpg\",\n    \"guid\": \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\",\n    \"width\": 70,\n    \"height\": 70,\n    \"widthPix\": 60 * 36000,\n    \"heightPix\": 60 * 36000\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nvar oOLEProperties = {\n    \"data\": \"{data}\",\n    \"imgSrc\": \"https://link-to-the-image.jpg\",\n    \"guid\": \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\",\n    \"width\": 70,\n    \"height\": 70,\n    \"widthPix\": 60 * 36000,\n    \"heightPix\": 60 * 36000\n};\n```",
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "data",
                "description": "OLE object data (internal format)."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "imgSrc",
                "description": "A link to the image (its visual representation) stored in the OLE object and used by the plugin."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "guid",
                "description": "An identifier of the plugin which can edit the current OLE object and must be of the *asc.{UUID}* type."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "width",
                "description": "The OLE object width measured in millimeters."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "height",
                "description": "The OLE object height measured in millimeters."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "widthPix",
                "description": "The OLE object image width in pixels."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "heightPix",
                "description": "The OLE object image height in pixels."
            }
        ],
        "longname": "OLEProperties",
        "scope": "global",
        "see": [
            "office-js-api/Examples/Plugins/Common/Enumeration/OLEProperties.js"
        ],
        "examples": [
            "var oOLEProperties = {\n    \"data\": \"{data}\",\n    \"imgSrc\": \"https://link-to-the-image.jpg\",\n    \"guid\": \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\",\n    \"width\": 70,\n    \"height\": 70,\n    \"widthPix\": 60 * 36000,\n    \"heightPix\": 60 * 36000\n};"
        ]
    },
    {
        "comment": "/**\n     * Base class\n     * @global\n     * @class\n     * @name Api\n     */",
        "meta": {
            "lineno": 170,
            "columnno": 4
        },
        "kind": "class",
        "name": "Api",
        "description": "Base class",
        "longname": "Api",
        "scope": "global"
    },
    {
        "comment": "/**\n     * Returns the editor version.\n     * @memberof Api\n     * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n     * @alias GetVersion\n     * @returns {string} - The editor version.\n     * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/GetVersion.js\n\t */",
        "meta": {
            "lineno": 187,
            "columnno": 4
        },
        "kind": "function",
        "name": "GetVersion",
        "description": "Returns the editor version.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.executeMethod (\"GetVersion\", [], function (version) {\n    if (version === undefined) {\n        window.Asc.plugin.executeMethod (\"PasteText\", [ifr.contentDocument.getElementById (\"google_translate_element\").outerText], function (result) {\n            paste_done = true;\n        });\n    }\n    else {\n        window.Asc.plugin.executeMethod (\"GetSelectionType\", [], function (sType) {\n            switch (sType) {\n                case \"none\":\n                case \"drawing\":\n                    window.Asc.plugin.executeMethod(\"PasteText\", [ifr.contentDocument.getElementById (\"google_translate_element\").outerText], function (result) {\n                        paste_done = true;\n                    });\n                    break;\n                case \"text\":\n                    window.Asc.plugin.callCommand (function () {\n                        Api.ReplaceTextSmart (Asc.scope.arr);\n                    }, undefined, undefined, function (result) {\n                        paste_done = true;\n                    });\n                    break;\n            }\n        });\n    }\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.executeMethod (\"GetVersion\", [], function (version) {\n    if (version === undefined) {\n        window.Asc.plugin.executeMethod (\"PasteText\", [ifr.contentDocument.getElementById (\"google_translate_element\").outerText], function (result) {\n            paste_done = true;\n        });\n    }\n    else {\n        window.Asc.plugin.executeMethod (\"GetSelectionType\", [], function (sType) {\n            switch (sType) {\n                case \"none\":\n                case \"drawing\":\n                    window.Asc.plugin.executeMethod(\"PasteText\", [ifr.contentDocument.getElementById (\"google_translate_element\").outerText], function (result) {\n                        paste_done = true;\n                    });\n                    break;\n                case \"text\":\n                    window.Asc.plugin.callCommand (function () {\n                        Api.ReplaceTextSmart (Asc.scope.arr);\n                    }, undefined, undefined, function (result) {\n                        paste_done = true;\n                    });\n                    break;\n            }\n        });\n    }\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.executeMethod (\"GetVersion\", [], function (version) {\n    if (version === undefined) {\n        window.Asc.plugin.executeMethod (\"PasteText\", [ifr.contentDocument.getElementById (\"google_translate_element\").outerText], function (result) {\n            paste_done = true;\n        });\n    }\n    else {\n        window.Asc.plugin.executeMethod (\"GetSelectionType\", [], function (sType) {\n            switch (sType) {\n                case \"none\":\n                case \"drawing\":\n                    window.Asc.plugin.executeMethod(\"PasteText\", [ifr.contentDocument.getElementById (\"google_translate_element\").outerText], function (result) {\n                        paste_done = true;\n                    });\n                    break;\n                case \"text\":\n                    window.Asc.plugin.callCommand (function () {\n                        Api.ReplaceTextSmart (Asc.scope.arr);\n                    }, undefined, undefined, function (result) {\n                        paste_done = true;\n                    });\n                    break;\n            }\n        });\n    }\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.executeMethod (\"GetVersion\", [], function (version) {\n    if (version === undefined) {\n        window.Asc.plugin.executeMethod (\"PasteText\", [ifr.contentDocument.getElementById (\"google_translate_element\").outerText], function (result) {\n            paste_done = true;\n        });\n    }\n    else {\n        window.Asc.plugin.executeMethod (\"GetSelectionType\", [], function (sType) {\n            switch (sType) {\n                case \"none\":\n                case \"drawing\":\n                    window.Asc.plugin.executeMethod(\"PasteText\", [ifr.contentDocument.getElementById (\"google_translate_element\").outerText], function (result) {\n                        paste_done = true;\n                    });\n                    break;\n                case \"text\":\n                    window.Asc.plugin.callCommand (function () {\n                        Api.ReplaceTextSmart (Asc.scope.arr);\n                    }, undefined, undefined, function (result) {\n                        paste_done = true;\n                    });\n                    break;\n            }\n        });\n    }\n});\n```",
        "memberof": "Api",
        "longname": "GetVersion",
        "alias": "GetVersion",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/GetVersion.js"
        ],
        "examples": [
            "window.Asc.plugin.executeMethod (\"GetVersion\", [], function (version) {\n    if (version === undefined) {\n        window.Asc.plugin.executeMethod (\"PasteText\", [ifr.contentDocument.getElementById (\"google_translate_element\").outerText], function (result) {\n            paste_done = true;\n        });\n    }\n    else {\n        window.Asc.plugin.executeMethod (\"GetSelectionType\", [], function (sType) {\n            switch (sType) {\n                case \"none\":\n                case \"drawing\":\n                    window.Asc.plugin.executeMethod(\"PasteText\", [ifr.contentDocument.getElementById (\"google_translate_element\").outerText], function (result) {\n                        paste_done = true;\n                    });\n                    break;\n                case \"text\":\n                    window.Asc.plugin.callCommand (function () {\n                        Api.ReplaceTextSmart (Asc.scope.arr);\n                    }, undefined, undefined, function (result) {\n                        paste_done = true;\n                    });\n                    break;\n            }\n        });\n    }\n});"
        ]
    },
    {
        "comment": "/**\n     * Adds an OLE object to the current document position.\n     * @memberof Api\n     * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @alias AddOleObject\n\t * @this Api\n     * @param {OLEProperties} data - The OLE object properties.\n    * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/AddOleObject.js\n\t */",
        "meta": {
            "lineno": 198,
            "columnno": 4
        },
        "kind": "function",
        "name": "AddOleObject",
        "description": "Adds an OLE object to the current document position.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nvar _param = {\n    \"data\": \"{data}\",\n    \"imgSrc\": \"https://link-to-the-image.jpg\",\n    \"guid\": \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\",\n    \"width\": 70,\n    \"height\": 70,\n    \"widthPix\": 60 * 36000,\n    \"heightPix\": 60 * 36000\n};\nwindow.Asc.plugin.executeMethod (\"AddOleObject\", [_param], function() {\n    window.Asc.plugin.executeCommand (\"close\", \"\");\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nvar _param = {\n    \"data\": \"{data}\",\n    \"imgSrc\": \"https://link-to-the-image.jpg\",\n    \"guid\": \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\",\n    \"width\": 70,\n    \"height\": 70,\n    \"widthPix\": 60 * 36000,\n    \"heightPix\": 60 * 36000\n};\nwindow.Asc.plugin.executeMethod (\"AddOleObject\", [_param], function() {\n    window.Asc.plugin.executeCommand (\"close\", \"\");\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar _param = {\n    \"data\": \"{data}\",\n    \"imgSrc\": \"https://link-to-the-image.jpg\",\n    \"guid\": \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\",\n    \"width\": 70,\n    \"height\": 70,\n    \"widthPix\": 60 * 36000,\n    \"heightPix\": 60 * 36000\n};\nwindow.Asc.plugin.executeMethod (\"AddOleObject\", [_param], function() {\n    window.Asc.plugin.executeCommand (\"close\", \"\");\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nvar _param = {\n    \"data\": \"{data}\",\n    \"imgSrc\": \"https://link-to-the-image.jpg\",\n    \"guid\": \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\",\n    \"width\": 70,\n    \"height\": 70,\n    \"widthPix\": 60 * 36000,\n    \"heightPix\": 60 * 36000\n};\nwindow.Asc.plugin.executeMethod (\"AddOleObject\", [_param], function() {\n    window.Asc.plugin.executeCommand (\"close\", \"\");\n});\n```",
        "memberof": "Api",
        "longname": "AddOleObject",
        "alias": "AddOleObject",
        "params": [
            {
                "type": {
                    "names": [
                        "OLEProperties"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "OLEProperties"
                    }
                },
                "name": "data",
                "description": "The OLE object properties."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/AddOleObject.js"
        ],
        "examples": [
            "var _param = {\n    \"data\": \"{data}\",\n    \"imgSrc\": \"https://link-to-the-image.jpg\",\n    \"guid\": \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\",\n    \"width\": 70,\n    \"height\": 70,\n    \"widthPix\": 60 * 36000,\n    \"heightPix\": 60 * 36000\n};\nwindow.Asc.plugin.executeMethod (\"AddOleObject\", [_param], function() {\n    window.Asc.plugin.executeCommand (\"close\", \"\");\n});"
        ]
    },
    {
        "comment": "/**\n     * Edits an OLE object in the document.\n     * @memberof Api\n     * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n     * @alias EditOleObject\n     * @param {OLEProperties} data - The OLE object properties.\n     * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/EditOleObject.js\n\t */",
        "meta": {
            "lineno": 208,
            "columnno": 4
        },
        "kind": "function",
        "name": "EditOleObject",
        "description": "Edits an OLE object in the document.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nvar _param = {\n    \"data\": \"{data}\",\n    \"imgSrc\": \"https://link-to-the-image.jpg\",\n    \"objectId\": \"5_556\",\n    \"width\": 70,\n    \"height\": 70,\n    \"widthPix\": 60 * 36000,\n    \"heightPix\": 60 * 36000\n};\nwindow.Asc.plugin.executeMethod (\"EditOleObject\", [_param], function () {\n    window.Asc.plugin.executeCommand (\"close\", \"\");\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nvar _param = {\n    \"data\": \"{data}\",\n    \"imgSrc\": \"https://link-to-the-image.jpg\",\n    \"objectId\": \"5_556\",\n    \"width\": 70,\n    \"height\": 70,\n    \"widthPix\": 60 * 36000,\n    \"heightPix\": 60 * 36000\n};\nwindow.Asc.plugin.executeMethod (\"EditOleObject\", [_param], function () {\n    window.Asc.plugin.executeCommand (\"close\", \"\");\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar _param = {\n    \"data\": \"{data}\",\n    \"imgSrc\": \"https://link-to-the-image.jpg\",\n    \"objectId\": \"5_556\",\n    \"width\": 70,\n    \"height\": 70,\n    \"widthPix\": 60 * 36000,\n    \"heightPix\": 60 * 36000\n};\nwindow.Asc.plugin.executeMethod (\"EditOleObject\", [_param], function () {\n    window.Asc.plugin.executeCommand (\"close\", \"\");\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nvar _param = {\n    \"data\": \"{data}\",\n    \"imgSrc\": \"https://link-to-the-image.jpg\",\n    \"objectId\": \"5_556\",\n    \"width\": 70,\n    \"height\": 70,\n    \"widthPix\": 60 * 36000,\n    \"heightPix\": 60 * 36000\n};\nwindow.Asc.plugin.executeMethod (\"EditOleObject\", [_param], function () {\n    window.Asc.plugin.executeCommand (\"close\", \"\");\n});\n```",
        "memberof": "Api",
        "longname": "EditOleObject",
        "alias": "EditOleObject",
        "params": [
            {
                "type": {
                    "names": [
                        "OLEProperties"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "OLEProperties"
                    }
                },
                "name": "data",
                "description": "The OLE object properties."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/EditOleObject.js"
        ],
        "examples": [
            "var _param = {\n    \"data\": \"{data}\",\n    \"imgSrc\": \"https://link-to-the-image.jpg\",\n    \"objectId\": \"5_556\",\n    \"width\": 70,\n    \"height\": 70,\n    \"widthPix\": 60 * 36000,\n    \"heightPix\": 60 * 36000\n};\nwindow.Asc.plugin.executeMethod (\"EditOleObject\", [_param], function () {\n    window.Asc.plugin.executeCommand (\"close\", \"\");\n});"
        ]
    },
    {
        "comment": "/**\n\t * Returns an array of the selected OLE objects.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @alias GetSelectedOleObjects\n\t * @returns {OLEProperties[]} - An array of the *OLEProperties* objects containing the data about the OLE object parameters.\n\t * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/GetSelectedOleObjects.js\n\t */",
        "meta": {
            "lineno": 219,
            "columnno": 1
        },
        "kind": "function",
        "name": "GetSelectedOleObjects",
        "description": "Returns an array of the selected OLE objects.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.executeMethod (\"GetSelectedOleObjects\");\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.executeMethod (\"GetSelectedOleObjects\");\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.executeMethod (\"GetSelectedOleObjects\");\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.executeMethod (\"GetSelectedOleObjects\");\n```",
        "memberof": "Api",
        "longname": "GetSelectedOleObjects",
        "alias": "GetSelectedOleObjects",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<OLEProperties>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "OLEProperties",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/GetSelectedOleObjects.js"
        ],
        "examples": [
            "window.Asc.plugin.executeMethod (\"GetSelectedOleObjects\");"
        ]
    },
    {
        "comment": "/**\n\t * An object containing the font information.\n     * @typedef {Object} FontInfo\n     * @property {string} m_wsFontName The font name.\n     * @property {string} m_wsFontPath The path to the file with the current font.\n\t * @property {number} m_lIndex The font number in the file if there is more than one font in the file.\n\t * @property {boolean} m_bBold Specifies if the font characters are bold or not.\n\t * @property {boolean} m_bItalic Specifies if the font characters are italic or not.\n\t * @property {boolean} m_bIsFixed Specifies if the current font is monospaced or not.\n\t * @property {Array.<number>} m_aPanose The PANOSE Typeface Classification Number, a compact 10-byte description of the font critical visual characteristics, such as contrast, weight, and serif style.\n\t * @property {number} m_ulUnicodeRange1 The Unicode range encompassed by the font file (Bits 0-31).\n\t * @property {number} m_ulUnicodeRange2 The Unicode range encompassed by the font file (Bits 32-63).\n\t * @property {number} m_ulUnicodeRange3 The Unicode range encompassed by the font file (Bits 64-95).\n\t * @property {number} m_ulUnicodeRange4 The Unicode range encompassed by the font file (Bits 96-127).\n\t * @property {number} m_ulCodePageRange1 The code pages encompassed by the font file (Bits 0-31).\n\t * @property {number} m_ulCodePageRange2 The code pages encompassed by the font file (Bits 32-63).\n\t * @property {number} m_usWeigth The visual weight (stroke blackness or thickness) of the font characters (1-1000).\n\t * @property {number} m_usWidth The relative change from the normal aspect ratio (width to height ratio).\n\t * @property {number} m_sFamilyClass The font family class which values are assigned by IBM to each font family.\n\t * @property {number} m_eFontFormat The specific file type(s) used to store font data: <b>0</b> - *.fon, <b>1</b> - *.ttf, <b>2</b> - *.ttf, *.otf (CFF), <b>3</b> - unknown font format.\n\t * @property {number} m_shAvgCharWidth The arithmetic average of the escapement (width) of all non-zero width glyphs in the font.\n\t * @property {number} m_shAscent The height above the baseline for a clipping region.\n\t * @property {number} m_shDescent The vertical extent below the baseline for a clipping region.\n\t * @property {number} m_shLineGap The typographic line gap for the current font.\n\t * @property {number} m_shXHeight The distance between the baseline and the approximate height of non-ascending lowercase letters measured in FUnits.\n\t * @property {number} m_shCapHeight The distance between the baseline and the approximate height of uppercase letters measured in FUnits.\n     * @see office-js-api/Examples/Plugins/{Editor}/Enumeration/FontInfo.js\n\t */",
        "meta": {
            "lineno": 232,
            "columnno": 4
        },
        "kind": "typedef",
        "name": "FontInfo",
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        },
        "description": "An object containing the font information.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nvar oFontInfo = {\n    \"m_wsFontName\": \"Open Sans\",\n    \"m_wsFontPath\": \"OpenSans-Bold.ttf\",\n    \"m_lIndex\": 0,\n    \"m_bBold\": true,\n    \"m_bItalic\": false,\n    \"m_bIsFixed\": false,\n    \"m_aPanose\": [2, 11, 8, 6, 3, 5, 4, 2, 2, 4],\n    \"m_ulUnicodeRange1\": 3758097135,\n    \"m_ulUnicodeRange2\": 1073750107,\n    \"m_ulUnicodeRange3\": 40,\n    \"m_ulUnicodeRange4\": 0,\n    \"m_ulCodePageRange1\": 536871327,\n    \"m_ulCodePageRange2\": 0,\n    \"m_usWeigth\": 700,\n    \"m_usWidth\": 5,\n    \"m_sFamilyClass\": 2050,\n    \"m_eFontFormat\": 1,\n    \"m_shAvgCharWidth\": 632,\n    \"m_shAscent\": 765,\n    \"m_shDescent\": -240,\n    \"m_shLineGap\": 64,\n    \"m_shXHeight\": 545,\n    \"m_shCapHeight\": 713\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nvar oFontInfo = {\n    \"m_wsFontName\": \"Open Sans\",\n    \"m_wsFontPath\": \"OpenSans-Bold.ttf\",\n    \"m_lIndex\": 0,\n    \"m_bBold\": true,\n    \"m_bItalic\": false,\n    \"m_bIsFixed\": false,\n    \"m_aPanose\": [2, 11, 8, 6, 3, 5, 4, 2, 2, 4],\n    \"m_ulUnicodeRange1\": 3758097135,\n    \"m_ulUnicodeRange2\": 1073750107,\n    \"m_ulUnicodeRange3\": 40,\n    \"m_ulUnicodeRange4\": 0,\n    \"m_ulCodePageRange1\": 536871327,\n    \"m_ulCodePageRange2\": 0,\n    \"m_usWeigth\": 700,\n    \"m_usWidth\": 5,\n    \"m_sFamilyClass\": 2050,\n    \"m_eFontFormat\": 1,\n    \"m_shAvgCharWidth\": 632,\n    \"m_shAscent\": 765,\n    \"m_shDescent\": -240,\n    \"m_shLineGap\": 64,\n    \"m_shXHeight\": 545,\n    \"m_shCapHeight\": 713\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oFontInfo = {\n    \"m_wsFontName\": \"Open Sans\",\n    \"m_wsFontPath\": \"OpenSans-Bold.ttf\",\n    \"m_lIndex\": 0,\n    \"m_bBold\": true,\n    \"m_bItalic\": false,\n    \"m_bIsFixed\": false,\n    \"m_aPanose\": [2, 11, 8, 6, 3, 5, 4, 2, 2, 4],\n    \"m_ulUnicodeRange1\": 3758097135,\n    \"m_ulUnicodeRange2\": 1073750107,\n    \"m_ulUnicodeRange3\": 40,\n    \"m_ulUnicodeRange4\": 0,\n    \"m_ulCodePageRange1\": 536871327,\n    \"m_ulCodePageRange2\": 0,\n    \"m_usWeigth\": 700,\n    \"m_usWidth\": 5,\n    \"m_sFamilyClass\": 2050,\n    \"m_eFontFormat\": 1,\n    \"m_shAvgCharWidth\": 632,\n    \"m_shAscent\": 765,\n    \"m_shDescent\": -240,\n    \"m_shLineGap\": 64,\n    \"m_shXHeight\": 545,\n    \"m_shCapHeight\": 713\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nvar oFontInfo = {\n    \"m_wsFontName\": \"Open Sans\",\n    \"m_wsFontPath\": \"OpenSans-Bold.ttf\",\n    \"m_lIndex\": 0,\n    \"m_bBold\": true,\n    \"m_bItalic\": false,\n    \"m_bIsFixed\": false,\n    \"m_aPanose\": [2, 11, 8, 6, 3, 5, 4, 2, 2, 4],\n    \"m_ulUnicodeRange1\": 3758097135,\n    \"m_ulUnicodeRange2\": 1073750107,\n    \"m_ulUnicodeRange3\": 40,\n    \"m_ulUnicodeRange4\": 0,\n    \"m_ulCodePageRange1\": 536871327,\n    \"m_ulCodePageRange2\": 0,\n    \"m_usWeigth\": 700,\n    \"m_usWidth\": 5,\n    \"m_sFamilyClass\": 2050,\n    \"m_eFontFormat\": 1,\n    \"m_shAvgCharWidth\": 632,\n    \"m_shAscent\": 765,\n    \"m_shDescent\": -240,\n    \"m_shLineGap\": 64,\n    \"m_shXHeight\": 545,\n    \"m_shCapHeight\": 713\n};\n```",
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "m_wsFontName",
                "description": "The font name."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "m_wsFontPath",
                "description": "The path to the file with the current font."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "m_lIndex",
                "description": "The font number in the file if there is more than one font in the file."
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "m_bBold",
                "description": "Specifies if the font characters are bold or not."
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "m_bItalic",
                "description": "Specifies if the font characters are italic or not."
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "m_bIsFixed",
                "description": "Specifies if the current font is monospaced or not."
            },
            {
                "type": {
                    "names": [
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "m_aPanose",
                "description": "The PANOSE Typeface Classification Number, a compact 10-byte description of the font critical visual characteristics, such as contrast, weight, and serif style."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "m_ulUnicodeRange1",
                "description": "The Unicode range encompassed by the font file (Bits 0-31)."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "m_ulUnicodeRange2",
                "description": "The Unicode range encompassed by the font file (Bits 32-63)."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "m_ulUnicodeRange3",
                "description": "The Unicode range encompassed by the font file (Bits 64-95)."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "m_ulUnicodeRange4",
                "description": "The Unicode range encompassed by the font file (Bits 96-127)."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "m_ulCodePageRange1",
                "description": "The code pages encompassed by the font file (Bits 0-31)."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "m_ulCodePageRange2",
                "description": "The code pages encompassed by the font file (Bits 32-63)."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "m_usWeigth",
                "description": "The visual weight (stroke blackness or thickness) of the font characters (1-1000)."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "m_usWidth",
                "description": "The relative change from the normal aspect ratio (width to height ratio)."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "m_sFamilyClass",
                "description": "The font family class which values are assigned by IBM to each font family."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "m_eFontFormat",
                "description": "The specific file type(s) used to store font data: <b>0</b> - *.fon, <b>1</b> - *.ttf, <b>2</b> - *.ttf, *.otf (CFF), <b>3</b> - unknown font format."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "m_shAvgCharWidth",
                "description": "The arithmetic average of the escapement (width) of all non-zero width glyphs in the font."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "m_shAscent",
                "description": "The height above the baseline for a clipping region."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "m_shDescent",
                "description": "The vertical extent below the baseline for a clipping region."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "m_shLineGap",
                "description": "The typographic line gap for the current font."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "m_shXHeight",
                "description": "The distance between the baseline and the approximate height of non-ascending lowercase letters measured in FUnits."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "m_shCapHeight",
                "description": "The distance between the baseline and the approximate height of uppercase letters measured in FUnits."
            }
        ],
        "longname": "FontInfo",
        "scope": "global",
        "see": [
            "office-js-api/Examples/Plugins/Common/Enumeration/FontInfo.js"
        ],
        "examples": [
            "var oFontInfo = {\n    \"m_wsFontName\": \"Open Sans\",\n    \"m_wsFontPath\": \"OpenSans-Bold.ttf\",\n    \"m_lIndex\": 0,\n    \"m_bBold\": true,\n    \"m_bItalic\": false,\n    \"m_bIsFixed\": false,\n    \"m_aPanose\": [2, 11, 8, 6, 3, 5, 4, 2, 2, 4],\n    \"m_ulUnicodeRange1\": 3758097135,\n    \"m_ulUnicodeRange2\": 1073750107,\n    \"m_ulUnicodeRange3\": 40,\n    \"m_ulUnicodeRange4\": 0,\n    \"m_ulCodePageRange1\": 536871327,\n    \"m_ulCodePageRange2\": 0,\n    \"m_usWeigth\": 700,\n    \"m_usWidth\": 5,\n    \"m_sFamilyClass\": 2050,\n    \"m_eFontFormat\": 1,\n    \"m_shAvgCharWidth\": 632,\n    \"m_shAscent\": 765,\n    \"m_shDescent\": -240,\n    \"m_shLineGap\": 64,\n    \"m_shXHeight\": 545,\n    \"m_shCapHeight\": 713\n};"
        ]
    },
    {
        "comment": "/**\n     * Returns the fonts list.\n     * @memberof Api\n     * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n     * @alias GetFontList\n     * @returns {FontInfo[]} - An array of the FontInfo objects containing the data about the used fonts.\n     * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/GetFontList.js\n\t */",
        "meta": {
            "lineno": 269,
            "columnno": 4
        },
        "kind": "function",
        "name": "GetFontList",
        "description": "Returns the fonts list.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.executeMethod (\"GetFontList\", null, function (res) {\n    console.log (res)\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.executeMethod (\"GetFontList\", null, function (res) {\n    console.log (res)\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.executeMethod (\"GetFontList\", null, function (res) {\n    console.log (res)\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.executeMethod (\"GetFontList\", null, function (res) {\n    console.log (res)\n});\n```",
        "memberof": "Api",
        "longname": "GetFontList",
        "alias": "GetFontList",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<FontInfo>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "FontInfo",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/GetFontList.js"
        ],
        "examples": [
            "window.Asc.plugin.executeMethod (\"GetFontList\", null, function (res) {\n    console.log (res)\n});"
        ]
    },
    {
        "comment": "/**\n     * Inserts text into the document.\n     * @memberof Api\n     * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n     * @alias InputText\n\t * @param {string} text - A string value that specifies the text to be inserted into the document.\n\t * @param {string} textReplace - A string value that specifies the text to be replaced with a new text.\n     * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/InputText.js\n\t */",
        "meta": {
            "lineno": 283,
            "columnno": 4
        },
        "kind": "function",
        "name": "InputText",
        "description": "Inserts text into the document.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.executeMethod (\"InputText\", [\"ONLYOFFICE Plugins\", \"ONLYOFFICE for developers\"]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.executeMethod (\"InputText\", [\"ONLYOFFICE Plugins\", \"ONLYOFFICE for developers\"]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.executeMethod (\"InputText\", [\"ONLYOFFICE Plugins\", \"ONLYOFFICE for developers\"]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.executeMethod (\"InputText\", [\"ONLYOFFICE Plugins\", \"ONLYOFFICE for developers\"]);\n```",
        "memberof": "Api",
        "longname": "InputText",
        "alias": "InputText",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "text",
                "description": "A string value that specifies the text to be inserted into the document."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "textReplace",
                "description": "A string value that specifies the text to be replaced with a new text."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/InputText.js"
        ],
        "examples": [
            "window.Asc.plugin.executeMethod (\"InputText\", [\"ONLYOFFICE Plugins\", \"ONLYOFFICE for developers\"]);"
        ]
    },
    {
        "comment": "/**\n\t * Pastes text in the HTML format into the document.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @alias PasteHtml\n\t * @param {string} htmlText - A string value that specifies the text in the *HTML* format to be pasted into the document.\n\t * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/PasteHtml.js\n\t */",
        "meta": {
            "lineno": 306,
            "columnno": 1
        },
        "kind": "function",
        "name": "PasteHtml",
        "description": "Pastes text in the HTML format into the document.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.executeMethod (\"PasteHtml\", [\"&lt;p&gt;&lt;b&gt;Plugin methods for OLE objects&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;AddOleObject&lt;/li&gt;&lt;li&gt;EditOleObject&lt;/li&gt;&lt;/ul&gt;\"]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.executeMethod (\"PasteHtml\", [\"&lt;p&gt;&lt;b&gt;Plugin methods for OLE objects&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;AddOleObject&lt;/li&gt;&lt;li&gt;EditOleObject&lt;/li&gt;&lt;/ul&gt;\"]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.executeMethod (\"PasteHtml\", [\"&lt;p&gt;&lt;b&gt;Plugin methods for OLE objects&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;AddOleObject&lt;/li&gt;&lt;li&gt;EditOleObject&lt;/li&gt;&lt;/ul&gt;\"]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.executeMethod (\"PasteHtml\", [\"&lt;p&gt;&lt;b&gt;Plugin methods for OLE objects&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;AddOleObject&lt;/li&gt;&lt;li&gt;EditOleObject&lt;/li&gt;&lt;/ul&gt;\"]);\n```",
        "memberof": "Api",
        "longname": "PasteHtml",
        "alias": "PasteHtml",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "htmlText",
                "description": "A string value that specifies the text in the *HTML* format to be pasted into the document."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/PasteHtml.js"
        ],
        "examples": [
            "window.Asc.plugin.executeMethod (\"PasteHtml\", [\"&lt;p&gt;&lt;b&gt;Plugin methods for OLE objects&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;AddOleObject&lt;/li&gt;&lt;li&gt;EditOleObject&lt;/li&gt;&lt;/ul&gt;\"]);"
        ]
    },
    {
        "comment": "/**\n     * Pastes text into the document.\n     * @memberof Api\n     * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n     * @alias PasteText\n     * @param {string} text - A string value that specifies the text to be pasted into the document.\n     * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/PasteText.js\n\t */",
        "meta": {
            "lineno": 380,
            "columnno": 4
        },
        "kind": "function",
        "name": "PasteText",
        "description": "Pastes text into the document.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.executeMethod (\"PasteText\", [\"ONLYOFFICE for developers\"]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.executeMethod (\"PasteText\", [\"ONLYOFFICE for developers\"]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.executeMethod (\"PasteText\", [\"ONLYOFFICE for developers\"]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.executeMethod (\"PasteText\", [\"ONLYOFFICE for developers\"]);\n```",
        "memberof": "Api",
        "longname": "PasteText",
        "alias": "PasteText",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "text",
                "description": "A string value that specifies the text to be pasted into the document."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/PasteText.js"
        ],
        "examples": [
            "window.Asc.plugin.executeMethod (\"PasteText\", [\"ONLYOFFICE for developers\"]);"
        ]
    },
    {
        "comment": "/**\n     * An object containing the data about all the macros from the document.\n     * @typedef {Object} Macros\n     * @property {Array.<string>} macrosArray - An array of macros codes (*[{\"name\": \"Macros1\", \"value\": \"{macrosCode}\"}]*).\n     * @property {number} current - A current macro index.\n     * @see office-js-api/Examples/Plugins/{Editor}/Enumeration/Macros.js\n\t */",
        "meta": {
            "lineno": 388,
            "columnno": 4
        },
        "kind": "typedef",
        "name": "Macros",
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        },
        "description": "An object containing the data about all the macros from the document.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nvar oMacros = {\n    \"macrosArray\": [\n        {\n            \"name\": \"Macros 1\",\n            \"value\": \"(function()\\n{oDocument = Api.GetDocument();\\noParagraph = Api.CreateParagraph();\\noParagraph.AddText(\\\"This is a new paragraph\\\");\\noDocument.Push(oParagraph);\\n})();\"\n        },\n        {\n            \"name\": \"Macros 2\",\n            \"value\": \"(function()\\n{oDocument = Api.GetDocument();\\noParagraph = oDocument.GetElement(0);\\noParagraph.AddText(\\\"ONLYOFFICE Document Builder\\\");\\noRange = oDocument.GetRange(0, 24);\\noRange.SetBold(true);\\n})();\"\n        }\n    ],\n    \"current\": 1\n};\nwindow.Asc.plugin.executeMethod(\"SetMacros\", [oMacros]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nvar oMacros = {\n    \"macrosArray\": [\n        {\n            \"name\": \"Macros 1\",\n            \"value\": \"(function()\\n{oDocument = Api.GetDocument();\\noParagraph = Api.CreateParagraph();\\noParagraph.AddText(\\\"This is a new paragraph\\\");\\noDocument.Push(oParagraph);\\n})();\"\n        },\n        {\n            \"name\": \"Macros 2\",\n            \"value\": \"(function()\\n{oDocument = Api.GetDocument();\\noParagraph = oDocument.GetElement(0);\\noParagraph.AddText(\\\"ONLYOFFICE Document Builder\\\");\\noRange = oDocument.GetRange(0, 24);\\noRange.SetBold(true);\\n})();\"\n        }\n    ],\n    \"current\": 1\n};\nwindow.Asc.plugin.executeMethod(\"SetMacros\", [oMacros]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oMacros = {\n    \"macrosArray\": [\n        {\n            \"name\": \"Macros 1\",\n            \"value\": \"(function()\\n{oDocument = Api.GetDocument();\\noParagraph = Api.CreateParagraph();\\noParagraph.AddText(\\\"This is a new paragraph\\\");\\noDocument.Push(oParagraph);\\n})();\"\n        },\n        {\n            \"name\": \"Macros 2\",\n            \"value\": \"(function()\\n{oDocument = Api.GetDocument();\\noParagraph = oDocument.GetElement(0);\\noParagraph.AddText(\\\"ONLYOFFICE Document Builder\\\");\\noRange = oDocument.GetRange(0, 24);\\noRange.SetBold(true);\\n})();\"\n        }\n    ],\n    \"current\": 1\n};\nwindow.Asc.plugin.executeMethod(\"SetMacros\", [oMacros]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nvar oMacros = {\n    \"macrosArray\": [\n        {\n            \"name\": \"Macros 1\",\n            \"value\": \"(function()\\n{oDocument = Api.GetDocument();\\noParagraph = Api.CreateParagraph();\\noParagraph.AddText(\\\"This is a new paragraph\\\");\\noDocument.Push(oParagraph);\\n})();\"\n        },\n        {\n            \"name\": \"Macros 2\",\n            \"value\": \"(function()\\n{oDocument = Api.GetDocument();\\noParagraph = oDocument.GetElement(0);\\noParagraph.AddText(\\\"ONLYOFFICE Document Builder\\\");\\noRange = oDocument.GetRange(0, 24);\\noRange.SetBold(true);\\n})();\"\n        }\n    ],\n    \"current\": 1\n};\nwindow.Asc.plugin.executeMethod(\"SetMacros\", [oMacros]);\n```",
        "properties": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "macrosArray",
                "description": "An array of macros codes (*[{\"name\": \"Macros1\", \"value\": \"{macrosCode}\"}]*)."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "current",
                "description": "A current macro index."
            }
        ],
        "longname": "Macros",
        "scope": "global",
        "see": [
            "office-js-api/Examples/Plugins/Common/Enumeration/Macros.js"
        ],
        "examples": [
            "var oMacros = {\n    \"macrosArray\": [\n        {\n            \"name\": \"Macros 1\",\n            \"value\": \"(function()\\n{oDocument = Api.GetDocument();\\noParagraph = Api.CreateParagraph();\\noParagraph.AddText(\\\"This is a new paragraph\\\");\\noDocument.Push(oParagraph);\\n})();\"\n        },\n        {\n            \"name\": \"Macros 2\",\n            \"value\": \"(function()\\n{oDocument = Api.GetDocument();\\noParagraph = oDocument.GetElement(0);\\noParagraph.AddText(\\\"ONLYOFFICE Document Builder\\\");\\noRange = oDocument.GetRange(0, 24);\\noRange.SetBold(true);\\n})();\"\n        }\n    ],\n    \"current\": 1\n};\nwindow.Asc.plugin.executeMethod(\"SetMacros\", [oMacros]);"
        ]
    },
    {
        "comment": "/**\n     * Returns the document macros.\n     * @memberof Api\n     * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n     * @alias GetMacros\n     * @returns {Macros} - The Macros object containing the data about all the macros from the document\n     * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/GetMacros.js\n\t */",
        "meta": {
            "lineno": 404,
            "columnno": 4
        },
        "kind": "function",
        "name": "GetMacros",
        "description": "Returns the document macros.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.executeMethod (\"GetMacros\", [JSON.stringify(Content)], function(data) {\n\n    try\n    {\n        Content = JSON.parse (data);\n\n        for (var i = 0; i < Content.macrosArray.length; i++)\n        {\n            var value = Content.macrosArray[i].name;\n            if (undefined === value)\n                value = \"\";\n\n            value = value.replace (/&/g,'&amp;');\n            value = value.replace (/</g,'&lt;');\n            value = value.replace (/>/g,'&gt;');\n            value = value.replace (/'/g,'&apos;');\n            value = value.replace (/\"/g,'&quot;');\n\n            Content.macrosArray[i].name = value;\n        }\n    }\n    catch (err)\n    {\n        Content = {\n            macrosArray : [],\n            current : -1\n        };\n    }\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.executeMethod (\"GetMacros\", [JSON.stringify(Content)], function(data) {\n\n    try\n    {\n        Content = JSON.parse (data);\n\n        for (var i = 0; i < Content.macrosArray.length; i++)\n        {\n            var value = Content.macrosArray[i].name;\n            if (undefined === value)\n                value = \"\";\n\n            value = value.replace (/&/g,'&amp;');\n            value = value.replace (/</g,'&lt;');\n            value = value.replace (/>/g,'&gt;');\n            value = value.replace (/'/g,'&apos;');\n            value = value.replace (/\"/g,'&quot;');\n\n            Content.macrosArray[i].name = value;\n        }\n    }\n    catch (err)\n    {\n        Content = {\n            macrosArray : [],\n            current : -1\n        };\n    }\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.executeMethod (\"GetMacros\", [JSON.stringify(Content)], function(data) {\n\n    try\n    {\n        Content = JSON.parse (data);\n\n        for (var i = 0; i < Content.macrosArray.length; i++)\n        {\n            var value = Content.macrosArray[i].name;\n            if (undefined === value)\n                value = \"\";\n\n            value = value.replace (/&/g,'&amp;');\n            value = value.replace (/</g,'&lt;');\n            value = value.replace (/>/g,'&gt;');\n            value = value.replace (/'/g,'&apos;');\n            value = value.replace (/\"/g,'&quot;');\n\n            Content.macrosArray[i].name = value;\n        }\n    }\n    catch (err)\n    {\n        Content = {\n            macrosArray : [],\n            current : -1\n        };\n    }\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.executeMethod (\"GetMacros\", [JSON.stringify(Content)], function(data) {\n\n    try\n    {\n        Content = JSON.parse (data);\n\n        for (var i = 0; i < Content.macrosArray.length; i++)\n        {\n            var value = Content.macrosArray[i].name;\n            if (undefined === value)\n                value = \"\";\n\n            value = value.replace (/&/g,'&amp;');\n            value = value.replace (/</g,'&lt;');\n            value = value.replace (/>/g,'&gt;');\n            value = value.replace (/'/g,'&apos;');\n            value = value.replace (/\"/g,'&quot;');\n\n            Content.macrosArray[i].name = value;\n        }\n    }\n    catch (err)\n    {\n        Content = {\n            macrosArray : [],\n            current : -1\n        };\n    }\n});\n```",
        "memberof": "Api",
        "longname": "GetMacros",
        "alias": "GetMacros",
        "returns": [
            {
                "type": {
                    "names": [
                        "Macros"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Macros"
                    }
                }
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/GetMacros.js"
        ],
        "examples": [
            "window.Asc.plugin.executeMethod (\"GetMacros\", [JSON.stringify(Content)], function(data) {\n\n    try\n    {\n        Content = JSON.parse (data);\n\n        for (var i = 0; i < Content.macrosArray.length; i++)\n        {\n            var value = Content.macrosArray[i].name;\n            if (undefined === value)\n                value = \"\";\n\n            value = value.replace (/&/g,'&amp;');\n            value = value.replace (/</g,'&lt;');\n            value = value.replace (/>/g,'&gt;');\n            value = value.replace (/'/g,'&apos;');\n            value = value.replace (/\"/g,'&quot;');\n\n            Content.macrosArray[i].name = value;\n        }\n    }\n    catch (err)\n    {\n        Content = {\n            macrosArray : [],\n            current : -1\n        };\n    }\n});"
        ]
    },
    {
        "comment": "/**\n     * Sets macros to the document.\n     * @memberof Api\n     * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n     * @alias SetMacros\n     * @param {Macros} data - The *Macros* object containing the data about all the macros from the document.\n     * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/SetMacros.js\n\t */",
        "meta": {
            "lineno": 417,
            "columnno": 4
        },
        "kind": "function",
        "name": "SetMacros",
        "description": "Sets macros to the document.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.executeMethod (\"SetMacros\", [JSON.stringify (Content)], function () {\n    window.Asc.plugin.executeCommand (\"close\", \"\");\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.executeMethod (\"SetMacros\", [JSON.stringify (Content)], function () {\n    window.Asc.plugin.executeCommand (\"close\", \"\");\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.executeMethod (\"SetMacros\", [JSON.stringify (Content)], function () {\n    window.Asc.plugin.executeCommand (\"close\", \"\");\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.executeMethod (\"SetMacros\", [JSON.stringify (Content)], function () {\n    window.Asc.plugin.executeCommand (\"close\", \"\");\n});\n```",
        "memberof": "Api",
        "longname": "SetMacros",
        "alias": "SetMacros",
        "params": [
            {
                "type": {
                    "names": [
                        "Macros"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Macros"
                    }
                },
                "name": "data",
                "description": "The *Macros* object containing the data about all the macros from the document."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/SetMacros.js"
        ],
        "examples": [
            "window.Asc.plugin.executeMethod (\"SetMacros\", [JSON.stringify (Content)], function () {\n    window.Asc.plugin.executeCommand (\"close\", \"\");\n});"
        ]
    },
    {
        "comment": "/**\n\t * Returns all VBA macros from the document.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @alias GetVBAMacros\n\t * @returns {string | null} VBA xml macros.\n\t * @since 7.3.0\n\t * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/GetVBAMacros.js\n\t */",
        "meta": {
            "lineno": 431,
            "columnno": 1
        },
        "kind": "function",
        "since": "7.3.0",
        "name": "GetVBAMacros",
        "description": "Returns all VBA macros from the document.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.executeMethod (\"GetVBAMacros\", null, function (data) {\n    if (data && typeof data === 'string' && data.includes ('<Module')) {\n        var arr = data.split ('<Module ').filter (function (el) {return el.includes ('Type=\"Procedural\"')});\n        arr.forEach (function (el) {\n            var start = el.indexOf ('<SourceCode>') + 12;\n            var end = el.indexOf ('</SourceCode>', start);\n            var macros = el.slice (start, end);\n\n            start = el.indexOf ('Name=\"') + 6;\n            end = el.indexOf ('\"', start);\n            var name = el.slice (start, end);\n            var index = Content.macrosArray.findIndex (function (macr) {return macr.name == name});\n            if (index == -1) {\n                macros = macros.replace (/&amp;/g,'&');\n                macros = macros.replace (/&lt;/g,'<');\n                macros = macros.replace (/&gt;/g,'>');\n                macros = macros.replace (/&apos;/g,'\\'');\n                macros = macros.replace (/&quot;/g,'\"');\n                macros = macros.replace (/Attribute [\\w \\.=\"\\\\]*/g,'');\n                Content.macrosArray.push (\n                    {\n                        name: name,\n                        value: '(function ()\\n{\\n\\t/* Enter your code here. */\\n})();\\n\\n/*\\nExecution of VBA commands does not support.\\n' + macros + '*/',\n                        guid: create_guid ()\n                    }\n                );\n            }\n        });\n    }\n    updateMenu ();\n    window.CustomContextMenu.init ();\n    if (Content.current === -1)\n    {\n        let event = new Event (\"click\");\n        document.getElementById (\"button_new\").dispatchEvent (event);\n    }\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.executeMethod (\"GetVBAMacros\", null, function (data) {\n    if (data && typeof data === 'string' && data.includes ('<Module')) {\n        var arr = data.split ('<Module ').filter (function (el) {return el.includes ('Type=\"Procedural\"')});\n        arr.forEach (function (el) {\n            var start = el.indexOf ('<SourceCode>') + 12;\n            var end = el.indexOf ('</SourceCode>', start);\n            var macros = el.slice (start, end);\n\n            start = el.indexOf ('Name=\"') + 6;\n            end = el.indexOf ('\"', start);\n            var name = el.slice (start, end);\n            var index = Content.macrosArray.findIndex (function (macr) {return macr.name == name});\n            if (index == -1) {\n                macros = macros.replace (/&amp;/g,'&');\n                macros = macros.replace (/&lt;/g,'<');\n                macros = macros.replace (/&gt;/g,'>');\n                macros = macros.replace (/&apos;/g,'\\'');\n                macros = macros.replace (/&quot;/g,'\"');\n                macros = macros.replace (/Attribute [\\w \\.=\"\\\\]*/g,'');\n                Content.macrosArray.push (\n                    {\n                        name: name,\n                        value: '(function ()\\n{\\n\\t/* Enter your code here. */\\n})();\\n\\n/*\\nExecution of VBA commands does not support.\\n' + macros + '*/',\n                        guid: create_guid ()\n                    }\n                );\n            }\n        });\n    }\n    updateMenu ();\n    window.CustomContextMenu.init ();\n    if (Content.current === -1)\n    {\n        let event = new Event (\"click\");\n        document.getElementById (\"button_new\").dispatchEvent (event);\n    }\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.executeMethod (\"GetVBAMacros\", null, function (data) {\n    if (data && typeof data === 'string' && data.includes ('<Module')) {\n        var arr = data.split ('<Module ').filter (function (el) {return el.includes ('Type=\"Procedural\"')});\n        arr.forEach (function (el) {\n            var start = el.indexOf ('<SourceCode>') + 12;\n            var end = el.indexOf ('</SourceCode>', start);\n            var macros = el.slice (start, end);\n\n            start = el.indexOf ('Name=\"') + 6;\n            end = el.indexOf ('\"', start);\n            var name = el.slice (start, end);\n            var index = Content.macrosArray.findIndex (function (macr) {return macr.name == name});\n            if (index == -1) {\n                macros = macros.replace (/&amp;/g,'&');\n                macros = macros.replace (/&lt;/g,'<');\n                macros = macros.replace (/&gt;/g,'>');\n                macros = macros.replace (/&apos;/g,'\\'');\n                macros = macros.replace (/&quot;/g,'\"');\n                macros = macros.replace (/Attribute [\\w \\.=\"\\\\]*/g,'');\n                Content.macrosArray.push (\n                    {\n                        name: name,\n                        value: '(function ()\\n{\\n\\t/* Enter your code here. */\\n})();\\n\\n/*\\nExecution of VBA commands does not support.\\n' + macros + '*/',\n                        guid: create_guid ()\n                    }\n                );\n            }\n        });\n    }\n    updateMenu ();\n    window.CustomContextMenu.init ();\n    if (Content.current === -1)\n    {\n        let event = new Event (\"click\");\n        document.getElementById (\"button_new\").dispatchEvent (event);\n    }\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.executeMethod (\"GetVBAMacros\", null, function (data) {\n    if (data && typeof data === 'string' && data.includes ('<Module')) {\n        var arr = data.split ('<Module ').filter (function (el) {return el.includes ('Type=\"Procedural\"')});\n        arr.forEach (function (el) {\n            var start = el.indexOf ('<SourceCode>') + 12;\n            var end = el.indexOf ('</SourceCode>', start);\n            var macros = el.slice (start, end);\n\n            start = el.indexOf ('Name=\"') + 6;\n            end = el.indexOf ('\"', start);\n            var name = el.slice (start, end);\n            var index = Content.macrosArray.findIndex (function (macr) {return macr.name == name});\n            if (index == -1) {\n                macros = macros.replace (/&amp;/g,'&');\n                macros = macros.replace (/&lt;/g,'<');\n                macros = macros.replace (/&gt;/g,'>');\n                macros = macros.replace (/&apos;/g,'\\'');\n                macros = macros.replace (/&quot;/g,'\"');\n                macros = macros.replace (/Attribute [\\w \\.=\"\\\\]*/g,'');\n                Content.macrosArray.push (\n                    {\n                        name: name,\n                        value: '(function ()\\n{\\n\\t/* Enter your code here. */\\n})();\\n\\n/*\\nExecution of VBA commands does not support.\\n' + macros + '*/',\n                        guid: create_guid ()\n                    }\n                );\n            }\n        });\n    }\n    updateMenu ();\n    window.CustomContextMenu.init ();\n    if (Content.current === -1)\n    {\n        let event = new Event (\"click\");\n        document.getElementById (\"button_new\").dispatchEvent (event);\n    }\n});\n```",
        "memberof": "Api",
        "longname": "GetVBAMacros",
        "alias": "GetVBAMacros",
        "returns": [
            {
                "type": {
                    "names": [
                        "string",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/GetVBAMacros.js"
        ],
        "examples": [
            "window.Asc.plugin.executeMethod (\"GetVBAMacros\", null, function (data) {\n    if (data && typeof data === 'string' && data.includes ('<Module')) {\n        var arr = data.split ('<Module ').filter (function (el) {return el.includes ('Type=\"Procedural\"')});\n        arr.forEach (function (el) {\n            var start = el.indexOf ('<SourceCode>') + 12;\n            var end = el.indexOf ('</SourceCode>', start);\n            var macros = el.slice (start, end);\n\n            start = el.indexOf ('Name=\"') + 6;\n            end = el.indexOf ('\"', start);\n            var name = el.slice (start, end);\n            var index = Content.macrosArray.findIndex (function (macr) {return macr.name == name});\n            if (index == -1) {\n                macros = macros.replace (/&amp;/g,'&');\n                macros = macros.replace (/&lt;/g,'<');\n                macros = macros.replace (/&gt;/g,'>');\n                macros = macros.replace (/&apos;/g,'\\'');\n                macros = macros.replace (/&quot;/g,'\"');\n                macros = macros.replace (/Attribute [\\w \\.=\"\\\\]*/g,'');\n                Content.macrosArray.push (\n                    {\n                        name: name,\n                        value: '(function ()\\n{\\n\\t/* Enter your code here. */\\n})();\\n\\n/*\\nExecution of VBA commands does not support.\\n' + macros + '*/',\n                        guid: create_guid ()\n                    }\n                );\n            }\n        });\n    }\n    updateMenu ();\n    window.CustomContextMenu.init ();\n    if (Content.current === -1)\n    {\n        let event = new Event (\"click\");\n        document.getElementById (\"button_new\").dispatchEvent (event);\n    }\n});"
        ]
    },
    {
        "comment": "/**\n     * Specifies the start action for long operations.\n     * @memberof Api\n     * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n     * @alias StartAction\n     * @param {number} type - A value which defines an action type which can take <b>0</b> if this is an *Information* action or <b>1</b> if this is a *BlockInteraction* action.\n\t * @param {string} description - A string value that specifies the description text for the start action of the operation.\n     * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/StartAction.js\n\t */",
        "meta": {
            "lineno": 445,
            "columnno": 4
        },
        "kind": "function",
        "name": "StartAction",
        "description": "Specifies the start action for long operations.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.executeMethod (\"StartAction\", [\"Block\", \"Save to local storage...\"], function () {\n    setPasswordByFile (\"sha256\", \"123456\");\n\n    setTimeout (function () {\n        window.Asc.plugin.executeMethod (\"EndAction\", [\"Block\", \"Save to localstorage...\"]);\n    }, 200););\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.executeMethod (\"StartAction\", [\"Block\", \"Save to local storage...\"], function () {\n    setPasswordByFile (\"sha256\", \"123456\");\n\n    setTimeout (function () {\n        window.Asc.plugin.executeMethod (\"EndAction\", [\"Block\", \"Save to localstorage...\"]);\n    }, 200););\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.executeMethod (\"StartAction\", [\"Block\", \"Save to local storage...\"], function () {\n    setPasswordByFile (\"sha256\", \"123456\");\n\n    setTimeout (function () {\n        window.Asc.plugin.executeMethod (\"EndAction\", [\"Block\", \"Save to localstorage...\"]);\n    }, 200););\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.executeMethod (\"StartAction\", [\"Block\", \"Save to local storage...\"], function () {\n    setPasswordByFile (\"sha256\", \"123456\");\n\n    setTimeout (function () {\n        window.Asc.plugin.executeMethod (\"EndAction\", [\"Block\", \"Save to localstorage...\"]);\n    }, 200););\n});\n```",
        "memberof": "Api",
        "longname": "StartAction",
        "alias": "StartAction",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "type",
                "description": "A value which defines an action type which can take <b>0</b> if this is an *Information* action or <b>1</b> if this is a *BlockInteraction* action."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "description",
                "description": "A string value that specifies the description text for the start action of the operation."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/StartAction.js"
        ],
        "examples": [
            "window.Asc.plugin.executeMethod (\"StartAction\", [\"Block\", \"Save to local storage...\"], function () {\n    setPasswordByFile (\"sha256\", \"123456\");\n\n    setTimeout (function () {\n        window.Asc.plugin.executeMethod (\"EndAction\", [\"Block\", \"Save to localstorage...\"]);\n    }, 200););\n});"
        ]
    },
    {
        "comment": "/**\n     * Specifies the end action for long operations.\n     * @memberof Api\n     * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n     * @alias EndAction\n     * @param {number} type - A value which defines an action type which can take <b>\"Block\"</b> if this is the *BlockInteraction* action or <b>\"Information</b> if this is the *Information* action.\n     * @param {string} description - A string value that specifies the description text for the operation end action.\n\t * @param {string} status - The error status code. If no error occurs, then an empty string is passed.\n     * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/EndAction.js\n\t */",
        "meta": {
            "lineno": 460,
            "columnno": 4
        },
        "kind": "function",
        "name": "EndAction",
        "description": "Specifies the end action for long operations.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.executeMethod (\"EndAction\", [\"Block\", \"Save to local storage...\", \"\"]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.executeMethod (\"EndAction\", [\"Block\", \"Save to local storage...\", \"\"]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.executeMethod (\"EndAction\", [\"Block\", \"Save to local storage...\", \"\"]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.executeMethod (\"EndAction\", [\"Block\", \"Save to local storage...\", \"\"]);\n```",
        "memberof": "Api",
        "longname": "EndAction",
        "alias": "EndAction",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "type",
                "description": "A value which defines an action type which can take <b>\"Block\"</b> if this is the *BlockInteraction* action or <b>\"Information</b> if this is the *Information* action."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "description",
                "description": "A string value that specifies the description text for the operation end action."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "status",
                "description": "The error status code. If no error occurs, then an empty string is passed."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/EndAction.js"
        ],
        "examples": [
            "window.Asc.plugin.executeMethod (\"EndAction\", [\"Block\", \"Save to local storage...\", \"\"]);"
        ]
    },
    {
        "comment": "/**\n     * Encrypts the document.\n     * @memberof Api\n     * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n     * @alias OnEncryption\n     * @param {object} obj - The encryption properties.\n     * @param {string} obj.type - The type of encrypting operation:\n     * <b>generatePassword</b> - generates a password for the document,\n     * <b>getPasswordByFile</b> - sends the password when opening the document,\n     * <b>encryptData</b> - encrypts changes when co-editing,\n     * <b>decryptData</b> - decrypts changes when co-editing.\n     * @param {string} obj.password - A string value specifying the password to access the document.\n     * @param {string} obj.data - Encrypted/decrypted changes.\n     * @param {boolean} obj.check - Checks if the encryption/decryption operation is successful or not (used only for *encryptData* or *decryptData* types).\n     * @param {string} obj.docinfo - An unencrypted part of the encrypted file.\n     * @param {string} obj.hash - A string value specifying a file hash (*sha256* by default).\n     * @param {string} obj.error - A string value specifying an error that occurs (the \"\" value means that the operation is successful).\n     * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/OnEncryption.js\n\t */",
        "meta": {
            "lineno": 524,
            "columnno": 4
        },
        "kind": "function",
        "name": "OnEncryption",
        "description": "Encrypts the document.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.executeMethod (\"OnEncryption\", [\n    {\n        \"type\": \"getPasswordByFile\",\n        \"password\": \"123456\",\n        \"docinfo\": \"{docinfo}\",\n        \"hash\": \"sha256\"\n    }\n]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.executeMethod (\"OnEncryption\", [\n    {\n        \"type\": \"getPasswordByFile\",\n        \"password\": \"123456\",\n        \"docinfo\": \"{docinfo}\",\n        \"hash\": \"sha256\"\n    }\n]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.executeMethod (\"OnEncryption\", [\n    {\n        \"type\": \"getPasswordByFile\",\n        \"password\": \"123456\",\n        \"docinfo\": \"{docinfo}\",\n        \"hash\": \"sha256\"\n    }\n]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.executeMethod (\"OnEncryption\", [\n    {\n        \"type\": \"getPasswordByFile\",\n        \"password\": \"123456\",\n        \"docinfo\": \"{docinfo}\",\n        \"hash\": \"sha256\"\n    }\n]);\n```",
        "memberof": "Api",
        "longname": "OnEncryption",
        "alias": "OnEncryption",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "name": "obj",
                "description": "The encryption properties."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "obj.type",
                "description": "The type of encrypting operation:\n<b>generatePassword</b> - generates a password for the document,\n<b>getPasswordByFile</b> - sends the password when opening the document,\n<b>encryptData</b> - encrypts changes when co-editing,\n<b>decryptData</b> - decrypts changes when co-editing."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "obj.password",
                "description": "A string value specifying the password to access the document."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "obj.data",
                "description": "Encrypted/decrypted changes."
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "obj.check",
                "description": "Checks if the encryption/decryption operation is successful or not (used only for *encryptData* or *decryptData* types)."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "obj.docinfo",
                "description": "An unencrypted part of the encrypted file."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "obj.hash",
                "description": "A string value specifying a file hash (*sha256* by default)."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "obj.error",
                "description": "A string value specifying an error that occurs (the \"\" value means that the operation is successful)."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/OnEncryption.js"
        ],
        "examples": [
            "window.Asc.plugin.executeMethod (\"OnEncryption\", [\n    {\n        \"type\": \"getPasswordByFile\",\n        \"password\": \"123456\",\n        \"docinfo\": \"{docinfo}\",\n        \"hash\": \"sha256\"\n    }\n]);"
        ]
    },
    {
        "comment": "/**\n\t * An object containing the watermark properties.\n     * @typedef {Object} watermark_on_draw\n     * @property {float} transparent The watermark transparency degree.\n     * @property {string} type The {@link /docbuilder/global#ShapeType shape type} which specifies the preset shape geometry for the current watermark.\n\t * @property {number} width The watermark width measured in millimeters.\n\t * @property {number} height The watermark height measured in millimeters.\n\t * @property {number} rotate The watermark rotation angle measured in degrees.\n\t * @property {Array.<number>} margins The text margins measured in millimeters in the watermark shape.\n\t * @property {Array.<number> | string} fill The watermark fill color in the RGB format, or the URL to image (base64 support: data:image/png;...). The empty array [] means that the watermark has no fill.\n     * @property {number} stroke-width The watermark stroke width measured in millimeters.\n\t * @property {Array.<number>} stroke The watermark stroke color in the RGB format. The empty array [] means that the watermark stroke has no fill.\n\t * @property {number} align The vertical text align in the watermark shape: <b>0</b> - bottom, <b>1</b> - center, <b>4</b> - top.\n\t * @property {Array.<object>} paragraphs The array with paragraphs from the current watermark with their properties.\n\t * @property {number} paragraphs.align The horizontal text align in the current paragraph: <b>0</b> - right, <b>1</b> - left, <b>2</b> - center, <b>3</b> - justify.\n\t * @property {Array.<number>} paragraphs.fill The paragraph highlight in the RGB format. The empty array [] means that the paragraph is not highlighted.\n\t * @property {number} paragraphs.linespacing The text linespacing in the current paragraph.\n\t * @property {Array.<object>} paragraphs.runs The array with runs from the current paragraph with their properties.\n\t * @property {string} paragraphs.runs.text The run text.\n\t * @property {Array.<number>} paragraphs.runs.fill The text highlight in the RGB format. The empty array [] means that the text is not highlighted.\n\t * @property {string} paragraphs.runs.font-family The text font family.\n\t * @property {string} paragraphs.runs.font-size The text font size measured in points (pt).\n\t * @property {boolean} paragraphs.runs.bold Defines if the current text is displayed bold or not.\n\t * @property {boolean} paragraphs.runs.italic Defines if the current text is displayed italic or not.\n\t * @property {boolean} paragraphs.runs.strikeout Defines if the current text is displayed struck through or not.\n\t * @property {boolean} paragraphs.runs.underline Defines if the current text is displayed underlined or not.\n     * @see office-js-api/Examples/Plugins/{Editor}/Enumeration/watermark_on_draw.js\n\t */",
        "meta": {
            "lineno": 584,
            "columnno": 4
        },
        "kind": "typedef",
        "name": "watermark_on_draw",
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        },
        "description": "An object containing the watermark properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nvar initSettings = {\n    \"copyoutenabled\" : false,\n    \"hideContentControlTrack\" : false,\n    \"watermark_on_draw\" : JSON.stringify({\n        \"transparent\" : 0.3,\n        \"type\" : \"rect\",\n        \"width\" : 100,\n        \"height\" : 100,\n        \"rotate\" : -45,\n        \"margins\" : [ 10, 10, 10, 10 ],\n        \"fill\" : [255, 0, 0],\n        \"stroke-width\" : 1,\n        \"stroke\" : [0, 0, 255],\n        \"align\" : 1,\n\n        \"paragraphs\" : [ {\n            \"align\" : 2,\n            \"fill\" : [255, 0, 0],\n            \"linespacing\" : 1,\n\n            \"runs\" : [\n                        {\n                            \"text\" : \"Do not steal, %user_name%!\",\n                            \"fill\" : [0, 0, 0],\n                            \"font-family\" : \"Arial\",\n                            \"font-size\" : 40,\n                            \"bold\" : true,\n                            \"italic\" : false,\n                            \"strikeout\" : false,\n                            \"underline\" : false\n                        },\n                        {\n                            \"text\" : \"<%br%>\"\n                        }\n                    ]\n            }\n        ]\n    }),\n    \"disableAutostartMacros\" : true,\n    \"fillForms\" : JSON.stringify({\n        \"tags\" : {\n            \"111\" : {\n                \"text\" : \"Text in form with tag 111\",\n                \"checkBox\" : \"true\",\n                \"picture\" : \"https://upload.wikimedia.org/wikipedia/commons/9/91/ONLYOFFICE_logo.png\",\n                \"comboBox\" : \"item1\"\n            },\n            \"222\" : {\n                \"text\" : \"Text in form with tag 222\",\n                \"checkBox\" : \"false\",\n                \"comboBox\" : \"item2\"\n            },\n            \"333\" : {\n                \"text\" : \"OnlyOffice\"\n            }\n        }\n    })\n};\nwindow.Asc.plugin.executeMethod(\"SetProperties\", [initSettings]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nvar initSettings = {\n    \"copyoutenabled\" : false,\n    \"hideContentControlTrack\" : false,\n    \"watermark_on_draw\" : JSON.stringify({\n        \"transparent\" : 0.3,\n        \"type\" : \"rect\",\n        \"width\" : 100,\n        \"height\" : 100,\n        \"rotate\" : -45,\n        \"margins\" : [ 10, 10, 10, 10 ],\n        \"fill\" : [255, 0, 0],\n        \"stroke-width\" : 1,\n        \"stroke\" : [0, 0, 255],\n        \"align\" : 1,\n\n        \"paragraphs\" : [ {\n            \"align\" : 2,\n            \"fill\" : [255, 0, 0],\n            \"linespacing\" : 1,\n\n            \"runs\" : [\n                        {\n                            \"text\" : \"Do not steal, %user_name%!\",\n                            \"fill\" : [0, 0, 0],\n                            \"font-family\" : \"Arial\",\n                            \"font-size\" : 40,\n                            \"bold\" : true,\n                            \"italic\" : false,\n                            \"strikeout\" : false,\n                            \"underline\" : false\n                        },\n                        {\n                            \"text\" : \"<%br%>\"\n                        }\n                    ]\n            }\n        ]\n    }),\n    \"disableAutostartMacros\" : true,\n    \"fillForms\" : JSON.stringify({\n        \"tags\" : {\n            \"111\" : {\n                \"text\" : \"Text in form with tag 111\",\n                \"checkBox\" : \"true\",\n                \"picture\" : \"https://upload.wikimedia.org/wikipedia/commons/9/91/ONLYOFFICE_logo.png\",\n                \"comboBox\" : \"item1\"\n            },\n            \"222\" : {\n                \"text\" : \"Text in form with tag 222\",\n                \"checkBox\" : \"false\",\n                \"comboBox\" : \"item2\"\n            },\n            \"333\" : {\n                \"text\" : \"OnlyOffice\"\n            }\n        }\n    })\n};\nwindow.Asc.plugin.executeMethod(\"SetProperties\", [initSettings]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar initSettings = {\n    \"copyoutenabled\" : false,\n    \"hideContentControlTrack\" : false,\n    \"watermark_on_draw\" : JSON.stringify({\n        \"transparent\" : 0.3,\n        \"type\" : \"rect\",\n        \"width\" : 100,\n        \"height\" : 100,\n        \"rotate\" : -45,\n        \"margins\" : [ 10, 10, 10, 10 ],\n        \"fill\" : [255, 0, 0],\n        \"stroke-width\" : 1,\n        \"stroke\" : [0, 0, 255],\n        \"align\" : 1,\n\n        \"paragraphs\" : [ {\n            \"align\" : 2,\n            \"fill\" : [255, 0, 0],\n            \"linespacing\" : 1,\n\n            \"runs\" : [\n                        {\n                            \"text\" : \"Do not steal, %user_name%!\",\n                            \"fill\" : [0, 0, 0],\n                            \"font-family\" : \"Arial\",\n                            \"font-size\" : 40,\n                            \"bold\" : true,\n                            \"italic\" : false,\n                            \"strikeout\" : false,\n                            \"underline\" : false\n                        },\n                        {\n                            \"text\" : \"<%br%>\"\n                        }\n                    ]\n            }\n        ]\n    }),\n    \"disableAutostartMacros\" : true,\n    \"fillForms\" : JSON.stringify({\n        \"tags\" : {\n            \"111\" : {\n                \"text\" : \"Text in form with tag 111\",\n                \"checkBox\" : \"true\",\n                \"picture\" : \"https://upload.wikimedia.org/wikipedia/commons/9/91/ONLYOFFICE_logo.png\",\n                \"comboBox\" : \"item1\"\n            },\n            \"222\" : {\n                \"text\" : \"Text in form with tag 222\",\n                \"checkBox\" : \"false\",\n                \"comboBox\" : \"item2\"\n            },\n            \"333\" : {\n                \"text\" : \"OnlyOffice\"\n            }\n        }\n    })\n};\nwindow.Asc.plugin.executeMethod(\"SetProperties\", [initSettings]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nvar initSettings = {\n    \"copyoutenabled\" : false,\n    \"hideContentControlTrack\" : false,\n    \"watermark_on_draw\" : JSON.stringify({\n        \"transparent\" : 0.3,\n        \"type\" : \"rect\",\n        \"width\" : 100,\n        \"height\" : 100,\n        \"rotate\" : -45,\n        \"margins\" : [ 10, 10, 10, 10 ],\n        \"fill\" : [255, 0, 0],\n        \"stroke-width\" : 1,\n        \"stroke\" : [0, 0, 255],\n        \"align\" : 1,\n\n        \"paragraphs\" : [ {\n            \"align\" : 2,\n            \"fill\" : [255, 0, 0],\n            \"linespacing\" : 1,\n\n            \"runs\" : [\n                        {\n                            \"text\" : \"Do not steal, %user_name%!\",\n                            \"fill\" : [0, 0, 0],\n                            \"font-family\" : \"Arial\",\n                            \"font-size\" : 40,\n                            \"bold\" : true,\n                            \"italic\" : false,\n                            \"strikeout\" : false,\n                            \"underline\" : false\n                        },\n                        {\n                            \"text\" : \"<%br%>\"\n                        }\n                    ]\n            }\n        ]\n    }),\n    \"disableAutostartMacros\" : true,\n    \"fillForms\" : JSON.stringify({\n        \"tags\" : {\n            \"111\" : {\n                \"text\" : \"Text in form with tag 111\",\n                \"checkBox\" : \"true\",\n                \"picture\" : \"https://upload.wikimedia.org/wikipedia/commons/9/91/ONLYOFFICE_logo.png\",\n                \"comboBox\" : \"item1\"\n            },\n            \"222\" : {\n                \"text\" : \"Text in form with tag 222\",\n                \"checkBox\" : \"false\",\n                \"comboBox\" : \"item2\"\n            },\n            \"333\" : {\n                \"text\" : \"OnlyOffice\"\n            }\n        }\n    })\n};\nwindow.Asc.plugin.executeMethod(\"SetProperties\", [initSettings]);\n```",
        "properties": [
            {
                "type": {
                    "names": [
                        "float"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "float"
                    }
                },
                "name": "transparent",
                "description": "The watermark transparency degree."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "type",
                "description": "The {@link /docbuilder/global#ShapeType shape type} which specifies the preset shape geometry for the current watermark."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "width",
                "description": "The watermark width measured in millimeters."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "height",
                "description": "The watermark height measured in millimeters."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "rotate",
                "description": "The watermark rotation angle measured in degrees."
            },
            {
                "type": {
                    "names": [
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "margins",
                "description": "The text margins measured in millimeters in the watermark shape."
            },
            {
                "type": {
                    "names": [
                        "Array.<number>",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "type": "NameExpression",
                                        "name": "number"
                                    }
                                ]
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "fill",
                "description": "The watermark fill color in the RGB format, or the URL to image (base64 support: data:image/png;...). The empty array [] means that the watermark has no fill."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "stroke-width",
                "description": "The watermark stroke width measured in millimeters."
            },
            {
                "type": {
                    "names": [
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "stroke",
                "description": "The watermark stroke color in the RGB format. The empty array [] means that the watermark stroke has no fill."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "align",
                "description": "The vertical text align in the watermark shape: <b>0</b> - bottom, <b>1</b> - center, <b>4</b> - top."
            },
            {
                "type": {
                    "names": [
                        "Array.<object>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "type": "NameExpression",
                                "name": "object"
                            }
                        ]
                    }
                },
                "name": "paragraphs",
                "description": "The array with paragraphs from the current watermark with their properties."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "paragraphs.align",
                "description": "The horizontal text align in the current paragraph: <b>0</b> - right, <b>1</b> - left, <b>2</b> - center, <b>3</b> - justify."
            },
            {
                "type": {
                    "names": [
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "paragraphs.fill",
                "description": "The paragraph highlight in the RGB format. The empty array [] means that the paragraph is not highlighted."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "paragraphs.linespacing",
                "description": "The text linespacing in the current paragraph."
            },
            {
                "type": {
                    "names": [
                        "Array.<object>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "type": "NameExpression",
                                "name": "object"
                            }
                        ]
                    }
                },
                "name": "paragraphs.runs",
                "description": "The array with runs from the current paragraph with their properties."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "paragraphs.runs.text",
                "description": "The run text."
            },
            {
                "type": {
                    "names": [
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "paragraphs.runs.fill",
                "description": "The text highlight in the RGB format. The empty array [] means that the text is not highlighted."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "paragraphs.runs.font-family",
                "description": "The text font family."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "paragraphs.runs.font-size",
                "description": "The text font size measured in points (pt)."
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "paragraphs.runs.bold",
                "description": "Defines if the current text is displayed bold or not."
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "paragraphs.runs.italic",
                "description": "Defines if the current text is displayed italic or not."
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "paragraphs.runs.strikeout",
                "description": "Defines if the current text is displayed struck through or not."
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "paragraphs.runs.underline",
                "description": "Defines if the current text is displayed underlined or not."
            }
        ],
        "longname": "watermark_on_draw",
        "scope": "global",
        "see": [
            "office-js-api/Examples/Plugins/Common/Enumeration/watermark_on_draw.js"
        ],
        "examples": [
            "var initSettings = {\n    \"copyoutenabled\" : false,\n    \"hideContentControlTrack\" : false,\n    \"watermark_on_draw\" : JSON.stringify({\n        \"transparent\" : 0.3,\n        \"type\" : \"rect\",\n        \"width\" : 100,\n        \"height\" : 100,\n        \"rotate\" : -45,\n        \"margins\" : [ 10, 10, 10, 10 ],\n        \"fill\" : [255, 0, 0],\n        \"stroke-width\" : 1,\n        \"stroke\" : [0, 0, 255],\n        \"align\" : 1,\n\n        \"paragraphs\" : [ {\n            \"align\" : 2,\n            \"fill\" : [255, 0, 0],\n            \"linespacing\" : 1,\n\n            \"runs\" : [\n                        {\n                            \"text\" : \"Do not steal, %user_name%!\",\n                            \"fill\" : [0, 0, 0],\n                            \"font-family\" : \"Arial\",\n                            \"font-size\" : 40,\n                            \"bold\" : true,\n                            \"italic\" : false,\n                            \"strikeout\" : false,\n                            \"underline\" : false\n                        },\n                        {\n                            \"text\" : \"<%br%>\"\n                        }\n                    ]\n            }\n        ]\n    }),\n    \"disableAutostartMacros\" : true,\n    \"fillForms\" : JSON.stringify({\n        \"tags\" : {\n            \"111\" : {\n                \"text\" : \"Text in form with tag 111\",\n                \"checkBox\" : \"true\",\n                \"picture\" : \"https://upload.wikimedia.org/wikipedia/commons/9/91/ONLYOFFICE_logo.png\",\n                \"comboBox\" : \"item1\"\n            },\n            \"222\" : {\n                \"text\" : \"Text in form with tag 222\",\n                \"checkBox\" : \"false\",\n                \"comboBox\" : \"item2\"\n            },\n            \"333\" : {\n                \"text\" : \"OnlyOffice\"\n            }\n        }\n    })\n};\nwindow.Asc.plugin.executeMethod(\"SetProperties\", [initSettings]);"
        ]
    },
    {
        "comment": "/**\n\t * An object containing the form properties.\n     * @typedef {Object} fillForms\n     * @property {object} tags The form tags which specify the content for each form type with such a tag.\n     * @property {string} tags.text The text field value (some text).\n\t * @property {string} tags.checkBox The checkbox form value (<b>true</b> - checked, <b>false</b> - unchecked).\n\t * @property {string} tags.picture The image form value (a link to the image).\n\t * @property {string} tags.comboBox The combo box form value (one of the items from the combo box list values).\n     * @see office-js-api/Examples/Plugins/{Editor}/Enumeration/fillForms.js\n\t */",
        "meta": {
            "lineno": 613,
            "columnno": 4
        },
        "kind": "typedef",
        "name": "fillForms",
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        },
        "description": "An object containing the form properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nvar initSettings = {\n    \"copyoutenabled\" : false,\n    \"hideContentControlTrack\" : false,\n    \"watermark_on_draw\" : JSON.stringify({\n        \"transparent\" : 0.3,\n        \"type\" : \"rect\",\n        \"width\" : 100,\n        \"height\" : 100,\n        \"rotate\" : -45,\n        \"margins\" : [ 10, 10, 10, 10 ],\n        \"fill\" : [255, 0, 0],\n        \"stroke-width\" : 1,\n        \"stroke\" : [0, 0, 255],\n        \"align\" : 1,\n\n        \"paragraphs\" : [ {\n            \"align\" : 2,\n            \"fill\" : [255, 0, 0],\n            \"linespacing\" : 1,\n\n            \"runs\" : [\n                        {\n                            \"text\" : \"Do not steal, %user_name%!\",\n                            \"fill\" : [0, 0, 0],\n                            \"font-family\" : \"Arial\",\n                            \"font-size\" : 40,\n                            \"bold\" : true,\n                            \"italic\" : false,\n                            \"strikeout\" : false,\n                            \"underline\" : false\n                        },\n                        {\n                            \"text\" : \"<%br%>\"\n                        }\n                    ]\n            }\n        ]\n    }),\n    \"disableAutostartMacros\" : true,\n    \"fillForms\" : JSON.stringify({\n        \"tags\" : {\n            \"111\" : {\n                \"text\" : \"Text in form with tag 111\",\n                \"checkBox\" : \"true\",\n                \"picture\" : \"https://upload.wikimedia.org/wikipedia/commons/9/91/ONLYOFFICE_logo.png\",\n                \"comboBox\" : \"item1\"\n            },\n            \"222\" : {\n                \"text\" : \"Text in form with tag 222\",\n                \"checkBox\" : \"false\",\n                \"comboBox\" : \"item2\"\n            },\n            \"333\" : {\n                \"text\" : \"OnlyOffice\"\n            }\n        }\n    })\n};\nwindow.Asc.plugin.executeMethod(\"SetProperties\", [initSettings]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nvar initSettings = {\n    \"copyoutenabled\" : false,\n    \"hideContentControlTrack\" : false,\n    \"watermark_on_draw\" : JSON.stringify({\n        \"transparent\" : 0.3,\n        \"type\" : \"rect\",\n        \"width\" : 100,\n        \"height\" : 100,\n        \"rotate\" : -45,\n        \"margins\" : [ 10, 10, 10, 10 ],\n        \"fill\" : [255, 0, 0],\n        \"stroke-width\" : 1,\n        \"stroke\" : [0, 0, 255],\n        \"align\" : 1,\n\n        \"paragraphs\" : [ {\n            \"align\" : 2,\n            \"fill\" : [255, 0, 0],\n            \"linespacing\" : 1,\n\n            \"runs\" : [\n                        {\n                            \"text\" : \"Do not steal, %user_name%!\",\n                            \"fill\" : [0, 0, 0],\n                            \"font-family\" : \"Arial\",\n                            \"font-size\" : 40,\n                            \"bold\" : true,\n                            \"italic\" : false,\n                            \"strikeout\" : false,\n                            \"underline\" : false\n                        },\n                        {\n                            \"text\" : \"<%br%>\"\n                        }\n                    ]\n            }\n        ]\n    }),\n    \"disableAutostartMacros\" : true,\n    \"fillForms\" : JSON.stringify({\n        \"tags\" : {\n            \"111\" : {\n                \"text\" : \"Text in form with tag 111\",\n                \"checkBox\" : \"true\",\n                \"picture\" : \"https://upload.wikimedia.org/wikipedia/commons/9/91/ONLYOFFICE_logo.png\",\n                \"comboBox\" : \"item1\"\n            },\n            \"222\" : {\n                \"text\" : \"Text in form with tag 222\",\n                \"checkBox\" : \"false\",\n                \"comboBox\" : \"item2\"\n            },\n            \"333\" : {\n                \"text\" : \"OnlyOffice\"\n            }\n        }\n    })\n};\nwindow.Asc.plugin.executeMethod(\"SetProperties\", [initSettings]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar initSettings = {\n    \"copyoutenabled\" : false,\n    \"hideContentControlTrack\" : false,\n    \"watermark_on_draw\" : JSON.stringify({\n        \"transparent\" : 0.3,\n        \"type\" : \"rect\",\n        \"width\" : 100,\n        \"height\" : 100,\n        \"rotate\" : -45,\n        \"margins\" : [ 10, 10, 10, 10 ],\n        \"fill\" : [255, 0, 0],\n        \"stroke-width\" : 1,\n        \"stroke\" : [0, 0, 255],\n        \"align\" : 1,\n\n        \"paragraphs\" : [ {\n            \"align\" : 2,\n            \"fill\" : [255, 0, 0],\n            \"linespacing\" : 1,\n\n            \"runs\" : [\n                        {\n                            \"text\" : \"Do not steal, %user_name%!\",\n                            \"fill\" : [0, 0, 0],\n                            \"font-family\" : \"Arial\",\n                            \"font-size\" : 40,\n                            \"bold\" : true,\n                            \"italic\" : false,\n                            \"strikeout\" : false,\n                            \"underline\" : false\n                        },\n                        {\n                            \"text\" : \"<%br%>\"\n                        }\n                    ]\n            }\n        ]\n    }),\n    \"disableAutostartMacros\" : true,\n    \"fillForms\" : JSON.stringify({\n        \"tags\" : {\n            \"111\" : {\n                \"text\" : \"Text in form with tag 111\",\n                \"checkBox\" : \"true\",\n                \"picture\" : \"https://upload.wikimedia.org/wikipedia/commons/9/91/ONLYOFFICE_logo.png\",\n                \"comboBox\" : \"item1\"\n            },\n            \"222\" : {\n                \"text\" : \"Text in form with tag 222\",\n                \"checkBox\" : \"false\",\n                \"comboBox\" : \"item2\"\n            },\n            \"333\" : {\n                \"text\" : \"OnlyOffice\"\n            }\n        }\n    })\n};\nwindow.Asc.plugin.executeMethod(\"SetProperties\", [initSettings]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nvar initSettings = {\n    \"copyoutenabled\" : false,\n    \"hideContentControlTrack\" : false,\n    \"watermark_on_draw\" : JSON.stringify({\n        \"transparent\" : 0.3,\n        \"type\" : \"rect\",\n        \"width\" : 100,\n        \"height\" : 100,\n        \"rotate\" : -45,\n        \"margins\" : [ 10, 10, 10, 10 ],\n        \"fill\" : [255, 0, 0],\n        \"stroke-width\" : 1,\n        \"stroke\" : [0, 0, 255],\n        \"align\" : 1,\n\n        \"paragraphs\" : [ {\n            \"align\" : 2,\n            \"fill\" : [255, 0, 0],\n            \"linespacing\" : 1,\n\n            \"runs\" : [\n                        {\n                            \"text\" : \"Do not steal, %user_name%!\",\n                            \"fill\" : [0, 0, 0],\n                            \"font-family\" : \"Arial\",\n                            \"font-size\" : 40,\n                            \"bold\" : true,\n                            \"italic\" : false,\n                            \"strikeout\" : false,\n                            \"underline\" : false\n                        },\n                        {\n                            \"text\" : \"<%br%>\"\n                        }\n                    ]\n            }\n        ]\n    }),\n    \"disableAutostartMacros\" : true,\n    \"fillForms\" : JSON.stringify({\n        \"tags\" : {\n            \"111\" : {\n                \"text\" : \"Text in form with tag 111\",\n                \"checkBox\" : \"true\",\n                \"picture\" : \"https://upload.wikimedia.org/wikipedia/commons/9/91/ONLYOFFICE_logo.png\",\n                \"comboBox\" : \"item1\"\n            },\n            \"222\" : {\n                \"text\" : \"Text in form with tag 222\",\n                \"checkBox\" : \"false\",\n                \"comboBox\" : \"item2\"\n            },\n            \"333\" : {\n                \"text\" : \"OnlyOffice\"\n            }\n        }\n    })\n};\nwindow.Asc.plugin.executeMethod(\"SetProperties\", [initSettings]);\n```",
        "properties": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "name": "tags",
                "description": "The form tags which specify the content for each form type with such a tag."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "tags.text",
                "description": "The text field value (some text)."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "tags.checkBox",
                "description": "The checkbox form value (<b>true</b> - checked, <b>false</b> - unchecked)."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "tags.picture",
                "description": "The image form value (a link to the image)."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "tags.comboBox",
                "description": "The combo box form value (one of the items from the combo box list values)."
            }
        ],
        "longname": "fillForms",
        "scope": "global",
        "see": [
            "office-js-api/Examples/Plugins/Common/Enumeration/fillForms.js"
        ],
        "examples": [
            "var initSettings = {\n    \"copyoutenabled\" : false,\n    \"hideContentControlTrack\" : false,\n    \"watermark_on_draw\" : JSON.stringify({\n        \"transparent\" : 0.3,\n        \"type\" : \"rect\",\n        \"width\" : 100,\n        \"height\" : 100,\n        \"rotate\" : -45,\n        \"margins\" : [ 10, 10, 10, 10 ],\n        \"fill\" : [255, 0, 0],\n        \"stroke-width\" : 1,\n        \"stroke\" : [0, 0, 255],\n        \"align\" : 1,\n\n        \"paragraphs\" : [ {\n            \"align\" : 2,\n            \"fill\" : [255, 0, 0],\n            \"linespacing\" : 1,\n\n            \"runs\" : [\n                        {\n                            \"text\" : \"Do not steal, %user_name%!\",\n                            \"fill\" : [0, 0, 0],\n                            \"font-family\" : \"Arial\",\n                            \"font-size\" : 40,\n                            \"bold\" : true,\n                            \"italic\" : false,\n                            \"strikeout\" : false,\n                            \"underline\" : false\n                        },\n                        {\n                            \"text\" : \"<%br%>\"\n                        }\n                    ]\n            }\n        ]\n    }),\n    \"disableAutostartMacros\" : true,\n    \"fillForms\" : JSON.stringify({\n        \"tags\" : {\n            \"111\" : {\n                \"text\" : \"Text in form with tag 111\",\n                \"checkBox\" : \"true\",\n                \"picture\" : \"https://upload.wikimedia.org/wikipedia/commons/9/91/ONLYOFFICE_logo.png\",\n                \"comboBox\" : \"item1\"\n            },\n            \"222\" : {\n                \"text\" : \"Text in form with tag 222\",\n                \"checkBox\" : \"false\",\n                \"comboBox\" : \"item2\"\n            },\n            \"333\" : {\n                \"text\" : \"OnlyOffice\"\n            }\n        }\n    })\n};\nwindow.Asc.plugin.executeMethod(\"SetProperties\", [initSettings]);"
        ]
    },
    {
        "comment": "/**\n     * Sets the properties to the document.\n     * @memberof Api\n     * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n     * @alias SetProperties\n     * @param {object} obj - The document properties.\n\t * @param {?boolean} obj.copyoutenabled - Disables copying from the editor if it is set to **false**.\n\t * @param {?boolean} obj.hideContentControlTrack - Disables tracking the content control if it is set to **true**.\n\t * @param {?string} obj.watermark_on_draw - A string value for {@link global#watermark_on_draw watermark properties} in JSON format.\n     * @param {?boolean} obj.disableAutostartMacros - Sets a flag that specifies that macros are started automatically when the editor opens.\n     * @param {?string} obj.fillForms - Sets rules in JSON format for filling document {@link global#fillForms forms} by tags.\n     * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/SetProperties.js\n\t */",
        "meta": {
            "lineno": 637,
            "columnno": 4
        },
        "kind": "function",
        "name": "SetProperties",
        "description": "Sets the properties to the document.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nvar initSettings = {\n    \"copyoutenabled\" : false,\n    \"hideContentControlTrack\" : false,\n    \"watermark_on_draw\" : JSON.stringify ( {\n        \"transparent\" : 0.3,\n        \"type\" : \"rect\",\n        \"width\" : 100,\n        \"height\" : 100,\n        \"rotate\" : -45,\n        \"margins\" : [ 10, 10, 10, 10 ],\n        \"fill\" : [255, 0, 0],\n        \"stroke-width\" : 1,\n        \"stroke\" : [0, 0, 255],\n        \"align\" : 1,\n\n        \"paragraphs\" : [ {\n            \"align\" : 2,\n            \"fill\" : [255, 0, 0],\n            \"linespacing\" : 1,\n\n            \"runs\" : [\n                        {\n                            \"text\" : \"Do not steal, %user_name%!\",\n                            \"fill\" : [0, 0, 0],\n                            \"font-family\" : \"Arial\",\n                            \"font-size\" : 40,\n                            \"bold\" : true,\n                            \"italic\" : false,\n                            \"strikeout\" : false,\n                            \"underline\" : false\n                        },\n                        {\n                            \"text\" : \"<%br%>\"\n                        }\n                    ]\n            }\n        ]\n    }),\n    \"disableAutostartMacros\" : true,\n    \"fillForms\" : JSON.stringify ( {\n        \"tags\" : {\n            \"111\" : {\n                \"text\" : \"Text in form with tag 111\",\n                \"checkBox\" : \"true\",\n                \"picture\" : \"https://upload.wikimedia.org/wikipedia/commons/9/91/ONLYOFFICE_logo.png\",\n                \"comboBox\" : \"item1\"\n            },\n            \"222\" : {\n                \"text\" : \"Text in form with tag 222\",\n                \"checkBox\" : \"false\",\n                \"comboBox\" : \"item2\"\n            },\n            \"333\" : {\n                \"text\" : \"OnlyOffice\"\n            }\n        }\n    })\n};\nwindow.Asc.plugin.executeMethod (\"SetProperties\", [initSettings], function () {\n    window.Asc.plugin.executeCommand (\"close\", \"\");\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nvar initSettings = {\n    \"copyoutenabled\" : false,\n    \"hideContentControlTrack\" : false,\n    \"watermark_on_draw\" : JSON.stringify ( {\n        \"transparent\" : 0.3,\n        \"type\" : \"rect\",\n        \"width\" : 100,\n        \"height\" : 100,\n        \"rotate\" : -45,\n        \"margins\" : [ 10, 10, 10, 10 ],\n        \"fill\" : [255, 0, 0],\n        \"stroke-width\" : 1,\n        \"stroke\" : [0, 0, 255],\n        \"align\" : 1,\n\n        \"paragraphs\" : [ {\n            \"align\" : 2,\n            \"fill\" : [255, 0, 0],\n            \"linespacing\" : 1,\n\n            \"runs\" : [\n                        {\n                            \"text\" : \"Do not steal, %user_name%!\",\n                            \"fill\" : [0, 0, 0],\n                            \"font-family\" : \"Arial\",\n                            \"font-size\" : 40,\n                            \"bold\" : true,\n                            \"italic\" : false,\n                            \"strikeout\" : false,\n                            \"underline\" : false\n                        },\n                        {\n                            \"text\" : \"<%br%>\"\n                        }\n                    ]\n            }\n        ]\n    }),\n    \"disableAutostartMacros\" : true,\n    \"fillForms\" : JSON.stringify ( {\n        \"tags\" : {\n            \"111\" : {\n                \"text\" : \"Text in form with tag 111\",\n                \"checkBox\" : \"true\",\n                \"picture\" : \"https://upload.wikimedia.org/wikipedia/commons/9/91/ONLYOFFICE_logo.png\",\n                \"comboBox\" : \"item1\"\n            },\n            \"222\" : {\n                \"text\" : \"Text in form with tag 222\",\n                \"checkBox\" : \"false\",\n                \"comboBox\" : \"item2\"\n            },\n            \"333\" : {\n                \"text\" : \"OnlyOffice\"\n            }\n        }\n    })\n};\nwindow.Asc.plugin.executeMethod (\"SetProperties\", [initSettings], function () {\n    window.Asc.plugin.executeCommand (\"close\", \"\");\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar initSettings = {\n    \"copyoutenabled\" : false,\n    \"hideContentControlTrack\" : false,\n    \"watermark_on_draw\" : JSON.stringify ( {\n        \"transparent\" : 0.3,\n        \"type\" : \"rect\",\n        \"width\" : 100,\n        \"height\" : 100,\n        \"rotate\" : -45,\n        \"margins\" : [ 10, 10, 10, 10 ],\n        \"fill\" : [255, 0, 0],\n        \"stroke-width\" : 1,\n        \"stroke\" : [0, 0, 255],\n        \"align\" : 1,\n\n        \"paragraphs\" : [ {\n            \"align\" : 2,\n            \"fill\" : [255, 0, 0],\n            \"linespacing\" : 1,\n\n            \"runs\" : [\n                        {\n                            \"text\" : \"Do not steal, %user_name%!\",\n                            \"fill\" : [0, 0, 0],\n                            \"font-family\" : \"Arial\",\n                            \"font-size\" : 40,\n                            \"bold\" : true,\n                            \"italic\" : false,\n                            \"strikeout\" : false,\n                            \"underline\" : false\n                        },\n                        {\n                            \"text\" : \"<%br%>\"\n                        }\n                    ]\n            }\n        ]\n    }),\n    \"disableAutostartMacros\" : true,\n    \"fillForms\" : JSON.stringify ( {\n        \"tags\" : {\n            \"111\" : {\n                \"text\" : \"Text in form with tag 111\",\n                \"checkBox\" : \"true\",\n                \"picture\" : \"https://upload.wikimedia.org/wikipedia/commons/9/91/ONLYOFFICE_logo.png\",\n                \"comboBox\" : \"item1\"\n            },\n            \"222\" : {\n                \"text\" : \"Text in form with tag 222\",\n                \"checkBox\" : \"false\",\n                \"comboBox\" : \"item2\"\n            },\n            \"333\" : {\n                \"text\" : \"OnlyOffice\"\n            }\n        }\n    })\n};\nwindow.Asc.plugin.executeMethod (\"SetProperties\", [initSettings], function () {\n    window.Asc.plugin.executeCommand (\"close\", \"\");\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nvar initSettings = {\n    \"copyoutenabled\" : false,\n    \"hideContentControlTrack\" : false,\n    \"watermark_on_draw\" : JSON.stringify ( {\n        \"transparent\" : 0.3,\n        \"type\" : \"rect\",\n        \"width\" : 100,\n        \"height\" : 100,\n        \"rotate\" : -45,\n        \"margins\" : [ 10, 10, 10, 10 ],\n        \"fill\" : [255, 0, 0],\n        \"stroke-width\" : 1,\n        \"stroke\" : [0, 0, 255],\n        \"align\" : 1,\n\n        \"paragraphs\" : [ {\n            \"align\" : 2,\n            \"fill\" : [255, 0, 0],\n            \"linespacing\" : 1,\n\n            \"runs\" : [\n                        {\n                            \"text\" : \"Do not steal, %user_name%!\",\n                            \"fill\" : [0, 0, 0],\n                            \"font-family\" : \"Arial\",\n                            \"font-size\" : 40,\n                            \"bold\" : true,\n                            \"italic\" : false,\n                            \"strikeout\" : false,\n                            \"underline\" : false\n                        },\n                        {\n                            \"text\" : \"<%br%>\"\n                        }\n                    ]\n            }\n        ]\n    }),\n    \"disableAutostartMacros\" : true,\n    \"fillForms\" : JSON.stringify ( {\n        \"tags\" : {\n            \"111\" : {\n                \"text\" : \"Text in form with tag 111\",\n                \"checkBox\" : \"true\",\n                \"picture\" : \"https://upload.wikimedia.org/wikipedia/commons/9/91/ONLYOFFICE_logo.png\",\n                \"comboBox\" : \"item1\"\n            },\n            \"222\" : {\n                \"text\" : \"Text in form with tag 222\",\n                \"checkBox\" : \"false\",\n                \"comboBox\" : \"item2\"\n            },\n            \"333\" : {\n                \"text\" : \"OnlyOffice\"\n            }\n        }\n    })\n};\nwindow.Asc.plugin.executeMethod (\"SetProperties\", [initSettings], function () {\n    window.Asc.plugin.executeCommand (\"close\", \"\");\n});\n```",
        "memberof": "Api",
        "longname": "SetProperties",
        "alias": "SetProperties",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "name": "obj",
                "description": "The document properties."
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean",
                        "nullable": true
                    }
                },
                "name": "obj.copyoutenabled",
                "description": "Disables copying from the editor if it is set to **false**."
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean",
                        "nullable": true
                    }
                },
                "name": "obj.hideContentControlTrack",
                "description": "Disables tracking the content control if it is set to **true**."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string",
                        "nullable": true
                    }
                },
                "name": "obj.watermark_on_draw",
                "description": "A string value for {@link global#watermark_on_draw watermark properties} in JSON format."
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean",
                        "nullable": true
                    }
                },
                "name": "obj.disableAutostartMacros",
                "description": "Sets a flag that specifies that macros are started automatically when the editor opens."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string",
                        "nullable": true
                    }
                },
                "name": "obj.fillForms",
                "description": "Sets rules in JSON format for filling document {@link global#fillForms forms} by tags."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/SetProperties.js"
        ],
        "examples": [
            "var initSettings = {\n    \"copyoutenabled\" : false,\n    \"hideContentControlTrack\" : false,\n    \"watermark_on_draw\" : JSON.stringify ( {\n        \"transparent\" : 0.3,\n        \"type\" : \"rect\",\n        \"width\" : 100,\n        \"height\" : 100,\n        \"rotate\" : -45,\n        \"margins\" : [ 10, 10, 10, 10 ],\n        \"fill\" : [255, 0, 0],\n        \"stroke-width\" : 1,\n        \"stroke\" : [0, 0, 255],\n        \"align\" : 1,\n\n        \"paragraphs\" : [ {\n            \"align\" : 2,\n            \"fill\" : [255, 0, 0],\n            \"linespacing\" : 1,\n\n            \"runs\" : [\n                        {\n                            \"text\" : \"Do not steal, %user_name%!\",\n                            \"fill\" : [0, 0, 0],\n                            \"font-family\" : \"Arial\",\n                            \"font-size\" : 40,\n                            \"bold\" : true,\n                            \"italic\" : false,\n                            \"strikeout\" : false,\n                            \"underline\" : false\n                        },\n                        {\n                            \"text\" : \"<%br%>\"\n                        }\n                    ]\n            }\n        ]\n    }),\n    \"disableAutostartMacros\" : true,\n    \"fillForms\" : JSON.stringify ( {\n        \"tags\" : {\n            \"111\" : {\n                \"text\" : \"Text in form with tag 111\",\n                \"checkBox\" : \"true\",\n                \"picture\" : \"https://upload.wikimedia.org/wikipedia/commons/9/91/ONLYOFFICE_logo.png\",\n                \"comboBox\" : \"item1\"\n            },\n            \"222\" : {\n                \"text\" : \"Text in form with tag 222\",\n                \"checkBox\" : \"false\",\n                \"comboBox\" : \"item2\"\n            },\n            \"333\" : {\n                \"text\" : \"OnlyOffice\"\n            }\n        }\n    })\n};\nwindow.Asc.plugin.executeMethod (\"SetProperties\", [initSettings], function () {\n    window.Asc.plugin.executeCommand (\"close\", \"\");\n});"
        ]
    },
    {
        "comment": "/**\n\t * The plugin options.\n     * @typedef {Object} PluginOptions\n     * @property {object} all The parameters which will be set for all plugins ({ \"all\" : { key, value } }).\n     * @property {object} plugin_guid The parameters which will be set for a specific plugin. The plugin must be specified with the plugin GUID of the asc.{UUID} type ({ \"plugin_guid\" : { keyForSpecificPlugin : valueForSpecificPlugin } }).\n     * @see office-js-api/Examples/Plugins/{Editor}/Enumeration/PluginOptions.js\n\t */",
        "meta": {
            "lineno": 840,
            "columnno": 1
        },
        "kind": "typedef",
        "name": "PluginOptions",
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        },
        "description": "The plugin options.",
        "properties": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "name": "all",
                "description": "The parameters which will be set for all plugins ({ \"all\" : { key, value } })."
            },
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "name": "plugin_guid",
                "description": "The parameters which will be set for a specific plugin. The plugin must be specified with the plugin GUID of the asc.{UUID} type ({ \"plugin_guid\" : { keyForSpecificPlugin : valueForSpecificPlugin } })."
            }
        ],
        "longname": "PluginOptions",
        "scope": "global",
        "see": [
            "office-js-api/Examples/Plugins/Common/Enumeration/PluginOptions.js"
        ]
    },
    {
        "comment": "/**\n\t * Configures plugins from an external source. The settings can be set for all plugins or for a specific plugin.\n\t * For example, this method can be used to pass an authorization token to the plugin. This method can be used only with the connector class.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @alias SetPluginsOptions\n\t * @param {PluginOptions} options - Plugin options.\n\t * @since 8.1.1\n\t * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/SetPluginsOptions.js\n\t */",
        "meta": {
            "lineno": 858,
            "columnno": 1
        },
        "kind": "function",
        "since": "8.1.1",
        "name": "SetPluginsOptions",
        "description": "Configures plugins from an external source. The settings can be set for all plugins or for a specific plugin.\nFor example, this method can be used to pass an authorization token to the plugin. This method can be used only with the connector class.",
        "memberof": "Api",
        "longname": "SetPluginsOptions",
        "alias": "SetPluginsOptions",
        "params": [
            {
                "type": {
                    "names": [
                        "PluginOptions"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PluginOptions"
                    }
                },
                "name": "options",
                "description": "Plugin options."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/SetPluginsOptions.js"
        ]
    },
    {
        "comment": "/**\n     * Shows the input helper.\n     * @memberof Api\n     * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n     * @alias ShowInputHelper\n     * @param {string} guid - A string value which specifies a plugin identifier which must be of the *asc.{UUID}* type.\n     * @param {number} w - A number which specifies the window width measured in millimeters.\n     * @param {number} h - A number which specifies the window height measured in millimeters.\n     * @param {boolean} isKeyboardTake - Defines if the keyboard is caught (**true**) or not (**alse**).\n     * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/ShowInputHelper.js\n\t */",
        "meta": {
            "lineno": 878,
            "columnno": 4
        },
        "kind": "function",
        "name": "ShowInputHelper",
        "description": "Shows the input helper.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.executeMethod (\"ShowInputHelper\", [\"asc.{UUID}\", 70, 70, true]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.executeMethod (\"ShowInputHelper\", [\"asc.{UUID}\", 70, 70, true]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.executeMethod (\"ShowInputHelper\", [\"asc.{UUID}\", 70, 70, true]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.executeMethod (\"ShowInputHelper\", [\"asc.{UUID}\", 70, 70, true]);\n```",
        "memberof": "Api",
        "longname": "ShowInputHelper",
        "alias": "ShowInputHelper",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "guid",
                "description": "A string value which specifies a plugin identifier which must be of the *asc.{UUID}* type."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "w",
                "description": "A number which specifies the window width measured in millimeters."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "h",
                "description": "A number which specifies the window height measured in millimeters."
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isKeyboardTake",
                "description": "Defines if the keyboard is caught (**true**) or not (**alse**)."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/ShowInputHelper.js"
        ],
        "examples": [
            "window.Asc.plugin.executeMethod (\"ShowInputHelper\", [\"asc.{UUID}\", 70, 70, true]);"
        ]
    },
    {
        "comment": "/**\n     * Unshows the input helper.\n     * @memberof Api\n     * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n     * @alias UnShowInputHelper\n     * @param {string} guid - A string value which specifies a plugin identifier which must be of the *asc.{UUID}* type.\n     * @param {string} isclear - Defines if the input context will be cleared (**true**) or not (**false**).\n     * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/UnShowInputHelper.js\n\t */",
        "meta": {
            "lineno": 964,
            "columnno": 4
        },
        "kind": "function",
        "name": "UnShowInputHelper",
        "description": "Unshows the input helper.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.executeMethod (\"UnShowInputHelper\", [\"asc.{UUID}\", true]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.executeMethod (\"UnShowInputHelper\", [\"asc.{UUID}\", true]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.executeMethod (\"UnShowInputHelper\", [\"asc.{UUID}\", true]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.executeMethod (\"UnShowInputHelper\", [\"asc.{UUID}\", true]);\n```",
        "memberof": "Api",
        "longname": "UnShowInputHelper",
        "alias": "UnShowInputHelper",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "guid",
                "description": "A string value which specifies a plugin identifier which must be of the *asc.{UUID}* type."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "isclear",
                "description": "Defines if the input context will be cleared (**true**) or not (**false**)."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/UnShowInputHelper.js"
        ],
        "examples": [
            "window.Asc.plugin.executeMethod (\"UnShowInputHelper\", [\"asc.{UUID}\", true]);"
        ]
    },
    {
        "comment": "/**\n     * Sends a message to the co-authoring chat.\n     * @memberof Api\n     * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n     * @alias CoAuthoringChatSendMessage\n     * @param {string} sText - Message text.\n     * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/CoAuthoringChatSendMessage.js\n\t */",
        "meta": {
            "lineno": 1006,
            "columnno": 4
        },
        "kind": "function",
        "name": "CoAuthoringChatSendMessage",
        "description": "Sends a message to the co-authoring chat.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.executeMethod (\"CoAuthoringChatSendMessage\", [Asc.scope.meeting_info], function (isTrue) {\n    if (isTrue)\n        alert (\"Meeting was created\");\n    else\n        alert (\"Meeting was create, please update SDK for checking info about created meeting in chat.\");\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.executeMethod (\"CoAuthoringChatSendMessage\", [Asc.scope.meeting_info], function (isTrue) {\n    if (isTrue)\n        alert (\"Meeting was created\");\n    else\n        alert (\"Meeting was create, please update SDK for checking info about created meeting in chat.\");\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.executeMethod (\"CoAuthoringChatSendMessage\", [Asc.scope.meeting_info], function (isTrue) {\n    if (isTrue)\n        alert (\"Meeting was created\");\n    else\n        alert (\"Meeting was create, please update SDK for checking info about created meeting in chat.\");\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.executeMethod (\"CoAuthoringChatSendMessage\", [Asc.scope.meeting_info], function (isTrue) {\n    if (isTrue)\n        alert (\"Meeting was created\");\n    else\n        alert (\"Meeting was create, please update SDK for checking info about created meeting in chat.\");\n});\n```",
        "memberof": "Api",
        "longname": "CoAuthoringChatSendMessage",
        "alias": "CoAuthoringChatSendMessage",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sText",
                "description": "Message text."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/CoAuthoringChatSendMessage.js"
        ],
        "examples": [
            "window.Asc.plugin.executeMethod (\"CoAuthoringChatSendMessage\", [Asc.scope.meeting_info], function (isTrue) {\n    if (isTrue)\n        alert (\"Meeting was created\");\n    else\n        alert (\"Meeting was create, please update SDK for checking info about created meeting in chat.\");\n});"
        ]
    },
    {
        "comment": "/**\n\t * The current selection type (\"none\", \"text\", \"drawing\", or \"slide\").\n\t * @typedef {(\"none\" | \"text\" | \"drawing\" | \"slide\")} SelectionType\n\t * @see office-js-api/Examples/Plugins/{Editor}/Enumeration/SelectionType.js\n\t */",
        "meta": {
            "lineno": 1011,
            "columnno": 1
        },
        "kind": "typedef",
        "name": "SelectionType",
        "type": {
            "names": [
                "\"none\"",
                "\"text\"",
                "\"drawing\"",
                "\"slide\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"none\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"text\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"drawing\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"slide\""
                    }
                ]
            }
        },
        "description": "The current selection type (\"none\", \"text\", \"drawing\", or \"slide\").\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.executeMethod (\"GetSelectionType\", [], function(sType) {\n    switch (sType) {\n        case \"none\":\n        case \"drawing\":\n            window.Asc.plugin.executeMethod (\"PasteText\", [$(\"#txt_shower\")[0].innerText]);\n            break;\n        case \"text\":\n            window.Asc.plugin.callCommand (function() {\n                Api.ReplaceTextSmart (Asc.scope.arr);\n            });\n            break;\n    }\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.executeMethod (\"GetSelectionType\", [], function(sType) {\n    switch (sType) {\n        case \"none\":\n        case \"drawing\":\n            window.Asc.plugin.executeMethod (\"PasteText\", [$(\"#txt_shower\")[0].innerText]);\n            break;\n        case \"text\":\n            window.Asc.plugin.callCommand (function() {\n                Api.ReplaceTextSmart (Asc.scope.arr);\n            });\n            break;\n    }\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.executeMethod (\"GetSelectionType\", [], function(sType) {\n    switch (sType) {\n        case \"none\":\n        case \"drawing\":\n            window.Asc.plugin.executeMethod (\"PasteText\", [$(\"#txt_shower\")[0].innerText]);\n            break;\n        case \"text\":\n            window.Asc.plugin.callCommand (function() {\n                Api.ReplaceTextSmart (Asc.scope.arr);\n            });\n            break;\n    }\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.executeMethod (\"GetSelectionType\", [], function(sType) {\n    switch (sType) {\n        case \"none\":\n        case \"drawing\":\n            window.Asc.plugin.executeMethod (\"PasteText\", [$(\"#txt_shower\")[0].innerText]);\n            break;\n        case \"text\":\n            window.Asc.plugin.callCommand (function() {\n                Api.ReplaceTextSmart (Asc.scope.arr);\n            });\n            break;\n    }\n});\n```",
        "longname": "SelectionType",
        "scope": "global",
        "see": [
            "office-js-api/Examples/Plugins/Common/Enumeration/SelectionType.js"
        ],
        "examples": [
            "window.Asc.plugin.executeMethod (\"GetSelectionType\", [], function(sType) {\n    switch (sType) {\n        case \"none\":\n        case \"drawing\":\n            window.Asc.plugin.executeMethod (\"PasteText\", [$(\"#txt_shower\")[0].innerText]);\n            break;\n        case \"text\":\n            window.Asc.plugin.callCommand (function() {\n                Api.ReplaceTextSmart (Asc.scope.arr);\n            });\n            break;\n    }\n});"
        ]
    },
    {
        "comment": "/**\n\t * Returns the type of the current selection.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @alias GetSelectionType\n\t * @returns {SelectionType} - The selection type.\n\t * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/GetSelectionType.js\n\t */",
        "meta": {
            "lineno": 1025,
            "columnno": 1
        },
        "kind": "function",
        "name": "GetSelectionType",
        "description": "Returns the type of the current selection.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.executeMethod (\"GetSelectionType\", [], function(sType) {\n    switch (sType) {\n        case \"none\":\n        case \"drawing\":\n            window.Asc.plugin.executeMethod (\"PasteText\", [$(\"#txt_shower\")[0].innerText], function (result) {\n                paste_done = true;\n            });\n            break;\n        case \"text\":\n            window.Asc.plugin.callCommand (function() {\n                Api.ReplaceTextSmart (Asc.scope.arr);\n            }, undefined, undefined, function(result) {\n                paste_done = true;\n            });\n            break;\n    }\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.executeMethod (\"GetSelectionType\", [], function(sType) {\n    switch (sType) {\n        case \"none\":\n        case \"drawing\":\n            window.Asc.plugin.executeMethod (\"PasteText\", [$(\"#txt_shower\")[0].innerText], function (result) {\n                paste_done = true;\n            });\n            break;\n        case \"text\":\n            window.Asc.plugin.callCommand (function() {\n                Api.ReplaceTextSmart (Asc.scope.arr);\n            }, undefined, undefined, function(result) {\n                paste_done = true;\n            });\n            break;\n    }\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.executeMethod (\"GetSelectionType\", [], function(sType) {\n    switch (sType) {\n        case \"none\":\n        case \"drawing\":\n            window.Asc.plugin.executeMethod (\"PasteText\", [$(\"#txt_shower\")[0].innerText], function (result) {\n                paste_done = true;\n            });\n            break;\n        case \"text\":\n            window.Asc.plugin.callCommand (function() {\n                Api.ReplaceTextSmart (Asc.scope.arr);\n            }, undefined, undefined, function(result) {\n                paste_done = true;\n            });\n            break;\n    }\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.executeMethod (\"GetSelectionType\", [], function(sType) {\n    switch (sType) {\n        case \"none\":\n        case \"drawing\":\n            window.Asc.plugin.executeMethod (\"PasteText\", [$(\"#txt_shower\")[0].innerText], function (result) {\n                paste_done = true;\n            });\n            break;\n        case \"text\":\n            window.Asc.plugin.callCommand (function() {\n                Api.ReplaceTextSmart (Asc.scope.arr);\n            }, undefined, undefined, function(result) {\n                paste_done = true;\n            });\n            break;\n    }\n});\n```",
        "memberof": "Api",
        "longname": "GetSelectionType",
        "alias": "GetSelectionType",
        "returns": [
            {
                "type": {
                    "names": [
                        "SelectionType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "SelectionType"
                    }
                }
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/GetSelectionType.js"
        ],
        "examples": [
            "window.Asc.plugin.executeMethod (\"GetSelectionType\", [], function(sType) {\n    switch (sType) {\n        case \"none\":\n        case \"drawing\":\n            window.Asc.plugin.executeMethod (\"PasteText\", [$(\"#txt_shower\")[0].innerText], function (result) {\n                paste_done = true;\n            });\n            break;\n        case \"text\":\n            window.Asc.plugin.callCommand (function() {\n                Api.ReplaceTextSmart (Asc.scope.arr);\n            }, undefined, undefined, function(result) {\n                paste_done = true;\n            });\n            break;\n    }\n});"
        ]
    },
    {
        "comment": "/**\n     * Converts a document to Markdown or HTML text.\n     * @memberof Api\n     * @typeofeditors [\"CDE\"]\n     * @alias ConvertDocument\n     * @param {\"markdown\" | \"html\"} [sConvertType=\"markdown\"] - Conversion type (\"markdown\" or \"html\").\n     * @param {boolean} [bHtmlHeadings=false] - Defines if the HTML headings and IDs will be generated when the Markdown renderer of your target platform does not handle Markdown-style IDs.\n\t * @param {boolean} [bBase64img=false] - Defines if the images will be created in the base64 format.\n\t * @param {boolean} [bDemoteHeadings=false] - Defines if all heading levels in your document will be demoted to conform with the following standard: single H1 as title, H2 as top-level heading in the text body.\n\t * @param {boolean} [bRenderHTMLTags=false] - Defines if HTML tags will be preserved in your Markdown. If you just want to use an occasional HTML tag, you can avoid using the opening angle bracket in the following way: \\<tag>text\\</tag>. By default, the opening angle brackets will be replaced with the special characters.\n     * @return {string} - The Markdown/HTML text.\n     * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/ConvertDocument.js\n\t */",
        "meta": {
            "lineno": 1119,
            "columnno": 4
        },
        "kind": "function",
        "name": "ConvertDocument",
        "description": "Converts a document to Markdown or HTML text.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nvar sInfo = \"\";\nwindow.Asc.plugin.executeMethod (\"ConvertDocument\", [\"markdown\", false, false, true, false], function (sOutput) {\n    document.getElementById (\"text-area\").value = sInfo + sOutput;\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nvar sInfo = \"\";\nwindow.Asc.plugin.executeMethod (\"ConvertDocument\", [\"markdown\", false, false, true, false], function (sOutput) {\n    document.getElementById (\"text-area\").value = sInfo + sOutput;\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar sInfo = \"\";\nwindow.Asc.plugin.executeMethod (\"ConvertDocument\", [\"markdown\", false, false, true, false], function (sOutput) {\n    document.getElementById (\"text-area\").value = sInfo + sOutput;\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nvar sInfo = \"\";\nwindow.Asc.plugin.executeMethod (\"ConvertDocument\", [\"markdown\", false, false, true, false], function (sOutput) {\n    document.getElementById (\"text-area\").value = sInfo + sOutput;\n});\n```",
        "memberof": "Api",
        "longname": "ConvertDocument",
        "alias": "ConvertDocument",
        "params": [
            {
                "type": {
                    "names": [
                        "\"markdown\"",
                        "\"html\""
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "\"markdown\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"html\""
                            }
                        ]
                    }
                },
                "name": "sConvertType",
                "description": "Conversion type (\"markdown\" or \"html\").",
                "optional": true,
                "defaultvalue": "\"markdown\""
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bHtmlHeadings",
                "description": "Defines if the HTML headings and IDs will be generated when the Markdown renderer of your target platform does not handle Markdown-style IDs.",
                "optional": true,
                "defaultvalue": false
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bBase64img",
                "description": "Defines if the images will be created in the base64 format.",
                "optional": true,
                "defaultvalue": false
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bDemoteHeadings",
                "description": "Defines if all heading levels in your document will be demoted to conform with the following standard: single H1 as title, H2 as top-level heading in the text body.",
                "optional": true,
                "defaultvalue": false
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bRenderHTMLTags",
                "description": "Defines if HTML tags will be preserved in your Markdown. If you just want to use an occasional HTML tag, you can avoid using the opening angle bracket in the following way: \\<tag>text\\</tag>. By default, the opening angle brackets will be replaced with the special characters.",
                "optional": true,
                "defaultvalue": false
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/ConvertDocument.js"
        ],
        "examples": [
            "var sInfo = \"\";\nwindow.Asc.plugin.executeMethod (\"ConvertDocument\", [\"markdown\", false, false, true, false], function (sOutput) {\n    document.getElementById (\"text-area\").value = sInfo + sOutput;\n});"
        ]
    },
    {
        "comment": "/**\n     * Returns the selected text from the document.\n     * @memberof Api\n     * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\n     * @alias GetSelectedText\n     * @param {object} prop - The resulting string display properties.\n     * @param {boolean} prop.NewLine - Defines if the resulting string will include line boundaries or not (they will be replaced with '\\r').\n     * @param {boolean} prop.NewLineParagraph - Defines if the resulting string will include paragraph line boundaries or not.\n     * @param {boolean} prop.Numbering - Defines if the resulting string will include numbering or not.\n     * @param {boolean} prop.Math - Defines if the resulting string will include mathematical expressions or not.\n     * @param {string} prop.TableCellSeparator - Defines how the table cell separator will be specified in the resulting string.\n     * @param {string} prop.TableRowSeparator - Defines how the table row separator will be specified in the resulting string.\n     * @param {string} prop.ParaSeparator - Defines how the paragraph separator will be specified in the resulting string.\n     * @param {string} prop.TabSymbol - Defines how the tab will be specified in the resulting string.\n     * @param {string} prop.NewLineSeparator - Defines how the line separator will be specified in the resulting string (this property has the priority over *NewLine*).\n\t * @return {string} - Selected text.\n     * @since 7.1.0\n     * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/GetSelectedText.js\n\t */",
        "meta": {
            "lineno": 1142,
            "columnno": 4
        },
        "kind": "function",
        "since": "7.1.0",
        "name": "GetSelectedText",
        "description": "Returns the selected text from the document.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nfunction CorrectText () {\n    switch (window.Asc.plugin.info.editorType) {\n        case 'word':\n        case 'slide': {\n            window.Asc.plugin.executeMethod (\"GetSelectedText\", [{\"Numbering\": false, \"Math\": false, \"TableCellSeparator\": '\\n', \"ParaSeparator\": '\\n', \"TabSymbol\": String.fromCharCode(9)}], function (data) {\n                sText = data;\n                ExecTypograf (sText);\n            });\n            break;\n        }\n        case 'cell': {\n            window.Asc.plugin.executeMethod (\"GetSelectedText\", [{\"Numbering\": false, \"Math\": false, \"TableCellSeparator\": '\\n', \"ParaSeparator\": '\\n', \"TabSymbol\": String.fromCharCode(9)}], function (data) {\n                if (data == '') {\n                    sText = sText.replace (/\\t/g, '\\n');\n                    ExecTypograf (sText);\n                }\n                else {\n                    sText = data;\n                    ExecTypograf (sText);\n                }\n            });\n            break;\n        }\n    }\n}\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nfunction CorrectText () {\n    switch (window.Asc.plugin.info.editorType) {\n        case 'word':\n        case 'slide': {\n            window.Asc.plugin.executeMethod (\"GetSelectedText\", [{\"Numbering\": false, \"Math\": false, \"TableCellSeparator\": '\\n', \"ParaSeparator\": '\\n', \"TabSymbol\": String.fromCharCode(9)}], function (data) {\n                sText = data;\n                ExecTypograf (sText);\n            });\n            break;\n        }\n        case 'cell': {\n            window.Asc.plugin.executeMethod (\"GetSelectedText\", [{\"Numbering\": false, \"Math\": false, \"TableCellSeparator\": '\\n', \"ParaSeparator\": '\\n', \"TabSymbol\": String.fromCharCode(9)}], function (data) {\n                if (data == '') {\n                    sText = sText.replace (/\\t/g, '\\n');\n                    ExecTypograf (sText);\n                }\n                else {\n                    sText = data;\n                    ExecTypograf (sText);\n                }\n            });\n            break;\n        }\n    }\n}\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nfunction CorrectText () {\n    switch (window.Asc.plugin.info.editorType) {\n        case 'word':\n        case 'slide': {\n            window.Asc.plugin.executeMethod (\"GetSelectedText\", [{\"Numbering\": false, \"Math\": false, \"TableCellSeparator\": '\\n', \"ParaSeparator\": '\\n', \"TabSymbol\": String.fromCharCode(9)}], function (data) {\n                sText = data;\n                ExecTypograf (sText);\n            });\n            break;\n        }\n        case 'cell': {\n            window.Asc.plugin.executeMethod (\"GetSelectedText\", [{\"Numbering\": false, \"Math\": false, \"TableCellSeparator\": '\\n', \"ParaSeparator\": '\\n', \"TabSymbol\": String.fromCharCode(9)}], function (data) {\n                if (data == '') {\n                    sText = sText.replace (/\\t/g, '\\n');\n                    ExecTypograf (sText);\n                }\n                else {\n                    sText = data;\n                    ExecTypograf (sText);\n                }\n            });\n            break;\n        }\n    }\n}\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nfunction CorrectText () {\n    switch (window.Asc.plugin.info.editorType) {\n        case 'word':\n        case 'slide': {\n            window.Asc.plugin.executeMethod (\"GetSelectedText\", [{\"Numbering\": false, \"Math\": false, \"TableCellSeparator\": '\\n', \"ParaSeparator\": '\\n', \"TabSymbol\": String.fromCharCode(9)}], function (data) {\n                sText = data;\n                ExecTypograf (sText);\n            });\n            break;\n        }\n        case 'cell': {\n            window.Asc.plugin.executeMethod (\"GetSelectedText\", [{\"Numbering\": false, \"Math\": false, \"TableCellSeparator\": '\\n', \"ParaSeparator\": '\\n', \"TabSymbol\": String.fromCharCode(9)}], function (data) {\n                if (data == '') {\n                    sText = sText.replace (/\\t/g, '\\n');\n                    ExecTypograf (sText);\n                }\n                else {\n                    sText = data;\n                    ExecTypograf (sText);\n                }\n            });\n            break;\n        }\n    }\n}\n```",
        "memberof": "Api",
        "longname": "GetSelectedText",
        "alias": "GetSelectedText",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "name": "prop",
                "description": "The resulting string display properties."
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "prop.NewLine",
                "description": "Defines if the resulting string will include line boundaries or not (they will be replaced with '\\r')."
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "prop.NewLineParagraph",
                "description": "Defines if the resulting string will include paragraph line boundaries or not."
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "prop.Numbering",
                "description": "Defines if the resulting string will include numbering or not."
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "prop.Math",
                "description": "Defines if the resulting string will include mathematical expressions or not."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "prop.TableCellSeparator",
                "description": "Defines how the table cell separator will be specified in the resulting string."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "prop.TableRowSeparator",
                "description": "Defines how the table row separator will be specified in the resulting string."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "prop.ParaSeparator",
                "description": "Defines how the paragraph separator will be specified in the resulting string."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "prop.TabSymbol",
                "description": "Defines how the tab will be specified in the resulting string."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "prop.NewLineSeparator",
                "description": "Defines how the line separator will be specified in the resulting string (this property has the priority over *NewLine*)."
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/GetSelectedText.js"
        ],
        "examples": [
            "function CorrectText () {\n    switch (window.Asc.plugin.info.editorType) {\n        case 'word':\n        case 'slide': {\n            window.Asc.plugin.executeMethod (\"GetSelectedText\", [{\"Numbering\": false, \"Math\": false, \"TableCellSeparator\": '\\n', \"ParaSeparator\": '\\n', \"TabSymbol\": String.fromCharCode(9)}], function (data) {\n                sText = data;\n                ExecTypograf (sText);\n            });\n            break;\n        }\n        case 'cell': {\n            window.Asc.plugin.executeMethod (\"GetSelectedText\", [{\"Numbering\": false, \"Math\": false, \"TableCellSeparator\": '\\n', \"ParaSeparator\": '\\n', \"TabSymbol\": String.fromCharCode(9)}], function (data) {\n                if (data == '') {\n                    sText = sText.replace (/\\t/g, '\\n');\n                    ExecTypograf (sText);\n                }\n                else {\n                    sText = data;\n                    ExecTypograf (sText);\n                }\n            });\n            break;\n        }\n    }\n}"
        ]
    },
    {
        "comment": "/**\n     * Replaces each paragraph (or text in cell) in the select with the corresponding text from an array of strings.\n     * @memberof Api\n     * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n     * @alias ReplaceTextSmart\n     * @param {Array} arrString - An array of replacement strings.\n     * @param {string} [sParaTab=\" \"] - A character which is used to specify the tab in the source text.\n     * @param {string} [sParaNewLine=\" \"] - A character which is used to specify the line break character in the source text.\n     * @returns {boolean} - Always returns true.\n     * @since 7.1.0\n     * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/ReplaceTextSmart.js\n\t */",
        "meta": {
            "lineno": 1184,
            "columnno": 4
        },
        "kind": "function",
        "since": "7.1.0",
        "name": "ReplaceTextSmart",
        "description": "Replaces each paragraph (or text in cell) in the select with the corresponding text from an array of strings.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.executeMethod (\"ReplaceTextSmart\", [Asc.scope.arr, String.fromCharCode(9), String.fromCharCode(13)], function (isDone) {\n    if (!isDone)\n        window.Asc.plugin.callCommand (function () {\n            Api.ReplaceTextSmart (Asc.scope.arr);\n        });\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.executeMethod (\"ReplaceTextSmart\", [Asc.scope.arr, String.fromCharCode(9), String.fromCharCode(13)], function (isDone) {\n    if (!isDone)\n        window.Asc.plugin.callCommand (function () {\n            Api.ReplaceTextSmart (Asc.scope.arr);\n        });\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.executeMethod (\"ReplaceTextSmart\", [Asc.scope.arr, String.fromCharCode(9), String.fromCharCode(13)], function (isDone) {\n    if (!isDone)\n        window.Asc.plugin.callCommand (function () {\n            Api.ReplaceTextSmart (Asc.scope.arr);\n        });\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.executeMethod (\"ReplaceTextSmart\", [Asc.scope.arr, String.fromCharCode(9), String.fromCharCode(13)], function (isDone) {\n    if (!isDone)\n        window.Asc.plugin.callCommand (function () {\n            Api.ReplaceTextSmart (Asc.scope.arr);\n        });\n});\n```",
        "memberof": "Api",
        "longname": "ReplaceTextSmart",
        "alias": "ReplaceTextSmart",
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Array"
                    }
                },
                "name": "arrString",
                "description": "An array of replacement strings."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sParaTab",
                "description": "A character which is used to specify the tab in the source text.",
                "optional": true,
                "defaultvalue": "\" \""
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sParaNewLine",
                "description": "A character which is used to specify the line break character in the source text.",
                "optional": true,
                "defaultvalue": "\" \""
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/ReplaceTextSmart.js"
        ],
        "examples": [
            "window.Asc.plugin.executeMethod (\"ReplaceTextSmart\", [Asc.scope.arr, String.fromCharCode(9), String.fromCharCode(13)], function (isDone) {\n    if (!isDone)\n        window.Asc.plugin.callCommand (function () {\n            Api.ReplaceTextSmart (Asc.scope.arr);\n        });\n});"
        ]
    },
    {
        "comment": "/**\n     * Returns the current file to download in the specified format.\n     * @memberof Api\n     * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n     * @alias GetFileToDownload\n     * @param {string} [format=\" \"] - A format in which you need to download a file.\n     * @returns {string} - URL to download the file in the specified format or error.\n     * @since 7.2.0\n     * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/GetFileToDownload.js\n\t */",
        "meta": {
            "lineno": 1227,
            "columnno": 1
        },
        "kind": "function",
        "since": "7.2.0",
        "name": "GetFileToDownload",
        "description": "Returns the current file to download in the specified format.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.executeMethod (\"GetFileToDownload\", [\"pdf\"], function (res) {\n    console.log (res)\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.executeMethod (\"GetFileToDownload\", [\"pdf\"], function (res) {\n    console.log (res)\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.executeMethod (\"GetFileToDownload\", [\"pdf\"], function (res) {\n    console.log (res)\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.executeMethod (\"GetFileToDownload\", [\"pdf\"], function (res) {\n    console.log (res)\n});\n```",
        "memberof": "Api",
        "longname": "GetFileToDownload",
        "alias": "GetFileToDownload",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "format",
                "description": "A format in which you need to download a file.",
                "optional": true,
                "defaultvalue": "\" \""
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/GetFileToDownload.js"
        ],
        "examples": [
            "window.Asc.plugin.executeMethod (\"GetFileToDownload\", [\"pdf\"], function (res) {\n    console.log (res)\n});"
        ]
    },
    {
        "comment": "/**\n\t * Specifies how to adjust the image object in case of replacing the selected image.\n\t * @typedef {(\"fill\" | \"fit\" | \"original\" | \"stretch\")} ReplaceImageMode\n\t * @see office-js-api/Examples/Plugins/{Editor}/Enumeration/ReplaceImageMode.js\n\t */",
        "meta": {
            "lineno": 1243,
            "columnno": 1
        },
        "kind": "typedef",
        "name": "ReplaceImageMode",
        "type": {
            "names": [
                "\"fill\"",
                "\"fit\"",
                "\"original\"",
                "\"stretch\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"fill\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"fit\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"original\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"stretch\""
                    }
                ]
            }
        },
        "description": "Specifies how to adjust the image object in case of replacing the selected image.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.saveImage = function () {\n    let sImageSrc = imageEditor.toDataURL();\n    let editorDimension = imageEditor.getCanvasSize();\n    let nWidth = editorDimension.width;\n    let nHeight = editorDimension.height;\n    let oImageData = {\n        \"src\": sImageSrc,\n        \"width\": nWidth,\n        \"height\": nHeight,\n        \"replaceMode\": \"original\"\n    };\n    window.Asc.plugin.executeMethod (\"PutImageDataToSelection\", [oImageData]);\n    window.Asc.plugin.executeCommand(\"close\", \"\");\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.saveImage = function () {\n    let sImageSrc = imageEditor.toDataURL();\n    let editorDimension = imageEditor.getCanvasSize();\n    let nWidth = editorDimension.width;\n    let nHeight = editorDimension.height;\n    let oImageData = {\n        \"src\": sImageSrc,\n        \"width\": nWidth,\n        \"height\": nHeight,\n        \"replaceMode\": \"original\"\n    };\n    window.Asc.plugin.executeMethod (\"PutImageDataToSelection\", [oImageData]);\n    window.Asc.plugin.executeCommand(\"close\", \"\");\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.saveImage = function () {\n    let sImageSrc = imageEditor.toDataURL();\n    let editorDimension = imageEditor.getCanvasSize();\n    let nWidth = editorDimension.width;\n    let nHeight = editorDimension.height;\n    let oImageData = {\n        \"src\": sImageSrc,\n        \"width\": nWidth,\n        \"height\": nHeight,\n        \"replaceMode\": \"original\"\n    };\n    window.Asc.plugin.executeMethod (\"PutImageDataToSelection\", [oImageData]);\n    window.Asc.plugin.executeCommand(\"close\", \"\");\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.saveImage = function () {\n    let sImageSrc = imageEditor.toDataURL();\n    let editorDimension = imageEditor.getCanvasSize();\n    let nWidth = editorDimension.width;\n    let nHeight = editorDimension.height;\n    let oImageData = {\n        \"src\": sImageSrc,\n        \"width\": nWidth,\n        \"height\": nHeight,\n        \"replaceMode\": \"original\"\n    };\n    window.Asc.plugin.executeMethod (\"PutImageDataToSelection\", [oImageData]);\n    window.Asc.plugin.executeCommand(\"close\", \"\");\n};\n```",
        "longname": "ReplaceImageMode",
        "scope": "global",
        "see": [
            "office-js-api/Examples/Plugins/Common/Enumeration/ReplaceImageMode.js"
        ],
        "examples": [
            "window.saveImage = function () {\n    let sImageSrc = imageEditor.toDataURL();\n    let editorDimension = imageEditor.getCanvasSize();\n    let nWidth = editorDimension.width;\n    let nHeight = editorDimension.height;\n    let oImageData = {\n        \"src\": sImageSrc,\n        \"width\": nWidth,\n        \"height\": nHeight,\n        \"replaceMode\": \"original\"\n    };\n    window.Asc.plugin.executeMethod (\"PutImageDataToSelection\", [oImageData]);\n    window.Asc.plugin.executeCommand(\"close\", \"\");\n};"
        ]
    },
    {
        "comment": "/**\n     * An object containing the information about the base64 encoded *png* image.\n     * @typedef {Object} ImageData\n     * @property {string} src The image source in the base64 format.\n     * @property {number} width The image width in pixels.\n     * @property {number} height The image height in pixels.\n     * @property {?ReplaceImageMode} replaceMode Specifies how to adjust the image object in case of replacing the selected image.\n     * @see office-js-api/Examples/Plugins/{Editor}/Enumeration/ImageData.js\n\t */",
        "meta": {
            "lineno": 1249,
            "columnno": 4
        },
        "kind": "typedef",
        "name": "ImageData",
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        },
        "description": "An object containing the information about the base64 encoded *png* image.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.saveImage = function () {\n    let sImageSrc = imageEditor.toDataURL();\n    let editorDimension = imageEditor.getCanvasSize();\n    let nWidth = editorDimension.width;\n    let nHeight = editorDimension.height;\n    let oImageData = {\n        \"src\": sImageSrc,\n        \"width\": nWidth,\n        \"height\": nHeight,\n        \"replaceMode\": \"original\"\n    };\n    window.Asc.plugin.executeMethod (\"PutImageDataToSelection\", [oImageData]);\n    window.Asc.plugin.callCommand(\"close\", \"\");\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.saveImage = function () {\n    let sImageSrc = imageEditor.toDataURL();\n    let editorDimension = imageEditor.getCanvasSize();\n    let nWidth = editorDimension.width;\n    let nHeight = editorDimension.height;\n    let oImageData = {\n        \"src\": sImageSrc,\n        \"width\": nWidth,\n        \"height\": nHeight,\n        \"replaceMode\": \"original\"\n    };\n    window.Asc.plugin.executeMethod (\"PutImageDataToSelection\", [oImageData]);\n    window.Asc.plugin.callCommand(\"close\", \"\");\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.saveImage = function () {\n    let sImageSrc = imageEditor.toDataURL();\n    let editorDimension = imageEditor.getCanvasSize();\n    let nWidth = editorDimension.width;\n    let nHeight = editorDimension.height;\n    let oImageData = {\n        \"src\": sImageSrc,\n        \"width\": nWidth,\n        \"height\": nHeight,\n        \"replaceMode\": \"original\"\n    };\n    window.Asc.plugin.executeMethod (\"PutImageDataToSelection\", [oImageData]);\n    window.Asc.plugin.callCommand(\"close\", \"\");\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.saveImage = function () {\n    let sImageSrc = imageEditor.toDataURL();\n    let editorDimension = imageEditor.getCanvasSize();\n    let nWidth = editorDimension.width;\n    let nHeight = editorDimension.height;\n    let oImageData = {\n        \"src\": sImageSrc,\n        \"width\": nWidth,\n        \"height\": nHeight,\n        \"replaceMode\": \"original\"\n    };\n    window.Asc.plugin.executeMethod (\"PutImageDataToSelection\", [oImageData]);\n    window.Asc.plugin.callCommand(\"close\", \"\");\n};\n```",
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "src",
                "description": "The image source in the base64 format."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "width",
                "description": "The image width in pixels."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "height",
                "description": "The image height in pixels."
            },
            {
                "type": {
                    "names": [
                        "ReplaceImageMode"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ReplaceImageMode",
                        "nullable": true
                    }
                },
                "name": "replaceMode",
                "description": "Specifies how to adjust the image object in case of replacing the selected image."
            }
        ],
        "longname": "ImageData",
        "scope": "global",
        "see": [
            "office-js-api/Examples/Plugins/Common/Enumeration/ImageData.js"
        ],
        "examples": [
            "window.saveImage = function () {\n    let sImageSrc = imageEditor.toDataURL();\n    let editorDimension = imageEditor.getCanvasSize();\n    let nWidth = editorDimension.width;\n    let nHeight = editorDimension.height;\n    let oImageData = {\n        \"src\": sImageSrc,\n        \"width\": nWidth,\n        \"height\": nHeight,\n        \"replaceMode\": \"original\"\n    };\n    window.Asc.plugin.executeMethod (\"PutImageDataToSelection\", [oImageData]);\n    window.Asc.plugin.callCommand(\"close\", \"\");\n};"
        ]
    },
    {
        "comment": "/**\n     * Returns the image data from the first of the selected drawings. If there are no drawings selected, the method returns a white rectangle.\n     * @memberof Api\n     * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n     * @alias GetImageDataFromSelection\n     * @returns {?ImageData} - The ImageData object containig the information about the base64 encoded png image.\n     * @since 7.2.0\n     * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/GetImageDataFromSelection.js\n\t */",
        "meta": {
            "lineno": 1268,
            "columnno": 1
        },
        "kind": "function",
        "since": "7.2.0",
        "name": "GetImageDataFromSelection",
        "description": "Returns the image data from the first of the selected drawings. If there are no drawings selected, the method returns a white rectangle.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.executeMethod (\"GetImageDataFromSelection\", [], function (oResult) {\n    oImage = document.createElement (\"img\");\n    oImage.src = oResult.src;\n    oImage.width = oResult.width;\n    oImage.height = oResult.height;\n    CreateImageEditor ();\n    initializationDone = true;\n    var imageHeight = null;\n    oImage.height > 500 ? imageHeight = 500 : imageHeight = oImage.height;\n    window.Asc.plugin.resizeWindow (undefined, undefined, 870, imageHeight + 300, 0, 0);\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.executeMethod (\"GetImageDataFromSelection\", [], function (oResult) {\n    oImage = document.createElement (\"img\");\n    oImage.src = oResult.src;\n    oImage.width = oResult.width;\n    oImage.height = oResult.height;\n    CreateImageEditor ();\n    initializationDone = true;\n    var imageHeight = null;\n    oImage.height > 500 ? imageHeight = 500 : imageHeight = oImage.height;\n    window.Asc.plugin.resizeWindow (undefined, undefined, 870, imageHeight + 300, 0, 0);\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.executeMethod (\"GetImageDataFromSelection\", [], function (oResult) {\n    oImage = document.createElement (\"img\");\n    oImage.src = oResult.src;\n    oImage.width = oResult.width;\n    oImage.height = oResult.height;\n    CreateImageEditor ();\n    initializationDone = true;\n    var imageHeight = null;\n    oImage.height > 500 ? imageHeight = 500 : imageHeight = oImage.height;\n    window.Asc.plugin.resizeWindow (undefined, undefined, 870, imageHeight + 300, 0, 0);\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.executeMethod (\"GetImageDataFromSelection\", [], function (oResult) {\n    oImage = document.createElement (\"img\");\n    oImage.src = oResult.src;\n    oImage.width = oResult.width;\n    oImage.height = oResult.height;\n    CreateImageEditor ();\n    initializationDone = true;\n    var imageHeight = null;\n    oImage.height > 500 ? imageHeight = 500 : imageHeight = oImage.height;\n    window.Asc.plugin.resizeWindow (undefined, undefined, 870, imageHeight + 300, 0, 0);\n});\n```",
        "memberof": "Api",
        "longname": "GetImageDataFromSelection",
        "alias": "GetImageDataFromSelection",
        "returns": [
            {
                "type": {
                    "names": [
                        "ImageData"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ImageData",
                        "nullable": true
                    }
                }
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/GetImageDataFromSelection.js"
        ],
        "examples": [
            "window.Asc.plugin.executeMethod (\"GetImageDataFromSelection\", [], function (oResult) {\n    oImage = document.createElement (\"img\");\n    oImage.src = oResult.src;\n    oImage.width = oResult.width;\n    oImage.height = oResult.height;\n    CreateImageEditor ();\n    initializationDone = true;\n    var imageHeight = null;\n    oImage.height > 500 ? imageHeight = 500 : imageHeight = oImage.height;\n    window.Asc.plugin.resizeWindow (undefined, undefined, 870, imageHeight + 300, 0, 0);\n});"
        ]
    },
    {
        "comment": "/**\n     * Replaces the first selected drawing with the image specified in the parameters.\n     * If there are no drawings selected, the method inserts the image at the current position.\n     * @memberof Api\n     * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n     * @alias PutImageDataToSelection\n     * @param {ImageData} oImageData - The information about the base64 encoded *png* image.\n     * @since 7.2.0\n     * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/PutImageDataToSelection.js\n\t */",
        "meta": {
            "lineno": 1282,
            "columnno": 1
        },
        "kind": "function",
        "since": "7.2.0",
        "name": "PutImageDataToSelection",
        "description": "Replaces the first selected drawing with the image specified in the parameters.\nIf there are no drawings selected, the method inserts the image at the current position.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.saveImage = function () {\n    let sImageSrc = imageEditor.toDataURL ();\n    let editorDimension = imageEditor.getCanvasSize ();\n    let nWidth = editorDimension.width;\n    let nHeight = editorDimension.height;\n    let oImageData = {\n        \"src\": sImageSrc,\n        \"width\": nWidth,\n        \"height\": nHeight\n    };\n    window.Asc.plugin.executeMethod (\"PutImageDataToSelection\", [oImageData]);\n    window.Asc.plugin.executeCommand (\"close\", \"\");\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.saveImage = function () {\n    let sImageSrc = imageEditor.toDataURL ();\n    let editorDimension = imageEditor.getCanvasSize ();\n    let nWidth = editorDimension.width;\n    let nHeight = editorDimension.height;\n    let oImageData = {\n        \"src\": sImageSrc,\n        \"width\": nWidth,\n        \"height\": nHeight\n    };\n    window.Asc.plugin.executeMethod (\"PutImageDataToSelection\", [oImageData]);\n    window.Asc.plugin.executeCommand (\"close\", \"\");\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.saveImage = function () {\n    let sImageSrc = imageEditor.toDataURL ();\n    let editorDimension = imageEditor.getCanvasSize ();\n    let nWidth = editorDimension.width;\n    let nHeight = editorDimension.height;\n    let oImageData = {\n        \"src\": sImageSrc,\n        \"width\": nWidth,\n        \"height\": nHeight\n    };\n    window.Asc.plugin.executeMethod (\"PutImageDataToSelection\", [oImageData]);\n    window.Asc.plugin.executeCommand (\"close\", \"\");\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.saveImage = function () {\n    let sImageSrc = imageEditor.toDataURL ();\n    let editorDimension = imageEditor.getCanvasSize ();\n    let nWidth = editorDimension.width;\n    let nHeight = editorDimension.height;\n    let oImageData = {\n        \"src\": sImageSrc,\n        \"width\": nWidth,\n        \"height\": nHeight\n    };\n    window.Asc.plugin.executeMethod (\"PutImageDataToSelection\", [oImageData]);\n    window.Asc.plugin.executeCommand (\"close\", \"\");\n};\n```",
        "memberof": "Api",
        "longname": "PutImageDataToSelection",
        "alias": "PutImageDataToSelection",
        "params": [
            {
                "type": {
                    "names": [
                        "ImageData"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ImageData"
                    }
                },
                "name": "oImageData",
                "description": "The information about the base64 encoded *png* image."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/PutImageDataToSelection.js"
        ],
        "examples": [
            "window.saveImage = function () {\n    let sImageSrc = imageEditor.toDataURL ();\n    let editorDimension = imageEditor.getCanvasSize ();\n    let nWidth = editorDimension.width;\n    let nHeight = editorDimension.height;\n    let oImageData = {\n        \"src\": sImageSrc,\n        \"width\": nWidth,\n        \"height\": nHeight\n    };\n    window.Asc.plugin.executeMethod (\"PutImageDataToSelection\", [oImageData]);\n    window.Asc.plugin.executeCommand (\"close\", \"\");\n};"
        ]
    },
    {
        "comment": "/**\n\t * The plugin object.\n     * @typedef {Object} PluginData\n     * @property {string} url The URL to plugin config.\n     * @property {string} guid The plugin identifier. It must be of the *asc.{UUID}* type.\n\t * @property {boolean} canRemoved Specifies if the plugin can be removed (**true**) or not (**false**).\n     * @property {object} obj The {@link /plugin/config config} of the installed plugin. The version is taken from the config and compared with the current one to check for updates.\n     * @see office-js-api/Examples/Plugins/{Editor}/Enumeration/PluginData.js\n\t */",
        "meta": {
            "lineno": 1478,
            "columnno": 4
        },
        "kind": "typedef",
        "name": "PluginData",
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        },
        "description": "The plugin object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nvar oPlugin = {\n    \"url\": \"https://example.com/plugin/config.json\",\n    \"guid\": \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\",\n    \"canRemoved\": true,\n    \"obj\": {\n        \"baseUrl\": \"\",\n        \"guid\": \"asc.{FFE1F462-1EA2-4391-990D-4CC84940B754}\",\n        \"version\": \"1.0\",\n        \"minVersion\": \"6.3.0\",\n        ...\n    }\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nvar oPlugin = {\n    \"url\": \"https://example.com/plugin/config.json\",\n    \"guid\": \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\",\n    \"canRemoved\": true,\n    \"obj\": {\n        \"baseUrl\": \"\",\n        \"guid\": \"asc.{FFE1F462-1EA2-4391-990D-4CC84940B754}\",\n        \"version\": \"1.0\",\n        \"minVersion\": \"6.3.0\",\n        ...\n    }\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPlugin = {\n    \"url\": \"https://example.com/plugin/config.json\",\n    \"guid\": \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\",\n    \"canRemoved\": true,\n    \"obj\": {\n        \"baseUrl\": \"\",\n        \"guid\": \"asc.{FFE1F462-1EA2-4391-990D-4CC84940B754}\",\n        \"version\": \"1.0\",\n        \"minVersion\": \"6.3.0\",\n        ...\n    }\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nvar oPlugin = {\n    \"url\": \"https://example.com/plugin/config.json\",\n    \"guid\": \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\",\n    \"canRemoved\": true,\n    \"obj\": {\n        \"baseUrl\": \"\",\n        \"guid\": \"asc.{FFE1F462-1EA2-4391-990D-4CC84940B754}\",\n        \"version\": \"1.0\",\n        \"minVersion\": \"6.3.0\",\n        ...\n    }\n};\n```",
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "url",
                "description": "The URL to plugin config."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "guid",
                "description": "The plugin identifier. It must be of the *asc.{UUID}* type."
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "canRemoved",
                "description": "Specifies if the plugin can be removed (**true**) or not (**false**)."
            },
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "name": "obj",
                "description": "The {@link /plugin/config config} of the installed plugin. The version is taken from the config and compared with the current one to check for updates."
            }
        ],
        "longname": "PluginData",
        "scope": "global",
        "see": [
            "office-js-api/Examples/Plugins/Common/Enumeration/PluginData.js"
        ],
        "examples": [
            "var oPlugin = {\n    \"url\": \"https://example.com/plugin/config.json\",\n    \"guid\": \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\",\n    \"canRemoved\": true,\n    \"obj\": {\n        \"baseUrl\": \"\",\n        \"guid\": \"asc.{FFE1F462-1EA2-4391-990D-4CC84940B754}\",\n        \"version\": \"1.0\",\n        \"minVersion\": \"6.3.0\",\n        ...\n    }\n};"
        ]
    },
    {
        "comment": "/**\n    * Returns all the installed plugins.\n     * @memberof Api\n     * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n     * @alias GetInstalledPlugins\n     * @returns {PluginData[]} - An array of all the installed plugins.\n     * @since 7.2.0\n     * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/GetInstalledPlugins.js\n\t */",
        "meta": {
            "lineno": 1497,
            "columnno": 1
        },
        "kind": "function",
        "since": "7.2.0",
        "name": "GetInstalledPlugins",
        "description": "Returns all the installed plugins.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.executeMethod (\"GetInstalledPlugins\", null, function (result) {\n    postMessage (JSON.stringify ({type: 'InstalledPlugins', data: result }));\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.executeMethod (\"GetInstalledPlugins\", null, function (result) {\n    postMessage (JSON.stringify ({type: 'InstalledPlugins', data: result }));\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.executeMethod (\"GetInstalledPlugins\", null, function (result) {\n    postMessage (JSON.stringify ({type: 'InstalledPlugins', data: result }));\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.executeMethod (\"GetInstalledPlugins\", null, function (result) {\n    postMessage (JSON.stringify ({type: 'InstalledPlugins', data: result }));\n});\n```",
        "memberof": "Api",
        "longname": "GetInstalledPlugins",
        "alias": "GetInstalledPlugins",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<PluginData>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "PluginData",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/GetInstalledPlugins.js"
        ],
        "examples": [
            "window.Asc.plugin.executeMethod (\"GetInstalledPlugins\", null, function (result) {\n    postMessage (JSON.stringify ({type: 'InstalledPlugins', data: result }));\n});"
        ]
    },
    {
        "comment": "/**\n    * Removes a plugin with the specified GUID.\n     * @memberof Api\n     * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n     * @param {string} guid - The plugin identifier. It must be of the *asc.{UUID}* type.\n\t * @param {string} backup - The plugin backup. This parameter is used when working with the desktop editors.\n     * @alias RemovePlugin\n     * @returns {object} - An object with the result information.\n     * @since 7.2.0\n     * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/RemovePlugin.js\n\t */",
        "meta": {
            "lineno": 1589,
            "columnno": 1
        },
        "kind": "function",
        "since": "7.2.0",
        "name": "RemovePlugin",
        "description": "Removes a plugin with the specified GUID.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nfunction removePlugin(backup) {\n    if (removeGuid)\n        window.Asc.plugin.executeMethod('RemovePlugin', [removeGuid, backup], function(result) {\n            postMessage(result);\n        });\n\n    removeGuid = null;\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nfunction removePlugin(backup) {\n    if (removeGuid)\n        window.Asc.plugin.executeMethod('RemovePlugin', [removeGuid, backup], function(result) {\n            postMessage(result);\n        });\n\n    removeGuid = null;\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nfunction removePlugin(backup) {\n    if (removeGuid)\n        window.Asc.plugin.executeMethod('RemovePlugin', [removeGuid, backup], function(result) {\n            postMessage(result);\n        });\n\n    removeGuid = null;\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nfunction removePlugin(backup) {\n    if (removeGuid)\n        window.Asc.plugin.executeMethod('RemovePlugin', [removeGuid, backup], function(result) {\n            postMessage(result);\n        });\n\n    removeGuid = null;\n};\n```",
        "memberof": "Api",
        "longname": "RemovePlugin",
        "alias": "RemovePlugin",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "guid",
                "description": "The plugin identifier. It must be of the *asc.{UUID}* type."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "backup",
                "description": "The plugin backup. This parameter is used when working with the desktop editors."
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                }
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/RemovePlugin.js"
        ],
        "examples": [
            "function removePlugin(backup) {\n    if (removeGuid)\n        window.Asc.plugin.executeMethod('RemovePlugin', [removeGuid, backup], function(result) {\n            postMessage(result);\n        });\n\n    removeGuid = null;\n};"
        ]
    },
    {
        "comment": "/**\n    * Installs a plugin using the specified plugin config.\n     * @memberof Api\n     * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n     * @param {object} [config] - The plugin {@link https://api.onlyoffice.com/docs/plugin-and-macros/structure/manifest/ config}.\n     * @alias InstallPlugin\n     * @returns {object} - An object with the result information.\n     * @since 7.2.0\n     * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/InstallPlugin.js\n\t */",
        "meta": {
            "lineno": 1651,
            "columnno": 1
        },
        "kind": "function",
        "since": "7.2.0",
        "name": "InstallPlugin",
        "description": "Installs a plugin using the specified plugin config.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.executeMethod (\"InstallPlugin\", [config], function (result) {\n    postMessage (JSON.stringify (result));\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.executeMethod (\"InstallPlugin\", [config], function (result) {\n    postMessage (JSON.stringify (result));\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.executeMethod (\"InstallPlugin\", [config], function (result) {\n    postMessage (JSON.stringify (result));\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.executeMethod (\"InstallPlugin\", [config], function (result) {\n    postMessage (JSON.stringify (result));\n});\n```",
        "memberof": "Api",
        "longname": "InstallPlugin",
        "alias": "InstallPlugin",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "name": "config",
                "description": "The plugin {@link https://api.onlyoffice.com/docs/plugin-and-macros/structure/manifest/ config}.",
                "optional": true
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                }
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/InstallPlugin.js"
        ],
        "examples": [
            "window.Asc.plugin.executeMethod (\"InstallPlugin\", [config], function (result) {\n    postMessage (JSON.stringify (result));\n});"
        ]
    },
    {
        "comment": "/**\n    * Updates a plugin using the specified plugin config.\n     * @memberof Api\n     * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n     * @param {object} [config] - The plugin {@link https://api.onlyoffice.com/docs/plugin-and-macros/structure/manifest/ config}.\n     * @alias UpdatePlugin\n     * @returns {object} - An object with the result information.\n     * @since 7.3.0\n     * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/UpdatePlugin.js\n\t */",
        "meta": {
            "lineno": 1665,
            "columnno": 1
        },
        "kind": "function",
        "since": "7.3.0",
        "name": "UpdatePlugin",
        "description": "Updates a plugin using the specified plugin config.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.executeMethod (\"UpdatePlugin\", [config], function (result) {\n    postMessage (JSON.stringify (result));\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.executeMethod (\"UpdatePlugin\", [config], function (result) {\n    postMessage (JSON.stringify (result));\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.executeMethod (\"UpdatePlugin\", [config], function (result) {\n    postMessage (JSON.stringify (result));\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.executeMethod (\"UpdatePlugin\", [config], function (result) {\n    postMessage (JSON.stringify (result));\n});\n```",
        "memberof": "Api",
        "longname": "UpdatePlugin",
        "alias": "UpdatePlugin",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "name": "config",
                "description": "The plugin {@link https://api.onlyoffice.com/docs/plugin-and-macros/structure/manifest/ config}.",
                "optional": true
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                }
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/UpdatePlugin.js"
        ],
        "examples": [
            "window.Asc.plugin.executeMethod (\"UpdatePlugin\", [config], function (result) {\n    postMessage (JSON.stringify (result));\n});"
        ]
    },
    {
        "comment": "/**\n\t* Shows or hides buttons in the header.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {string} id - The button ID.\n\t * @param {boolean} bShow - The flag specifies whether the button is shown (**true**) or hidden (**false**).\n\t * @param {string} align - The parameter indicates whether the button will be displayed on the right side of the window or on the left. The default value is \"left\".\n\t * @alias ShowButton \n\t * @since 7.2.0\n\t * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/ShowButton.js\n\t */",
        "meta": {
            "lineno": 1702,
            "columnno": 1
        },
        "kind": "function",
        "since": "7.2.0",
        "name": "ShowButton",
        "description": "Shows or hides buttons in the header.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.executeMethod (\"ShowButton\", [\"back\", false, \"right\"]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.executeMethod (\"ShowButton\", [\"back\", false, \"right\"]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.executeMethod (\"ShowButton\", [\"back\", false, \"right\"]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.executeMethod (\"ShowButton\", [\"back\", false, \"right\"]);\n```",
        "memberof": "Api",
        "longname": "ShowButton",
        "alias": "ShowButton",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "id",
                "description": "The button ID."
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bShow",
                "description": "The flag specifies whether the button is shown (**true**) or hidden (**false**)."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "align",
                "description": "The parameter indicates whether the button will be displayed on the right side of the window or on the left. The default value is \"left\"."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/ShowButton.js"
        ],
        "examples": [
            "window.Asc.plugin.executeMethod (\"ShowButton\", [\"back\", false, \"right\"]);"
        ]
    },
    {
        "comment": "/**\n\t * Implements the external drag&drop emulation.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {object} obj The drag&drop emulation properties.\n     * @param {string} obj.type - The drag&drop event type:\n     * <b>onbeforedrop</b> - an event that is fired when the selected text or element is dragged;\n     * <b>ondrop</b> - an event that is fired when the selected text or element is dropped on a valid drop target.\n     * @param {number} obj.x - The horizontal coordinate (in pixels) at which the mouse was clicked, relative to the left edge of the entire document.\n     * @param {number} obj.y - The vertical coordinate (in pixels) at which the mouse was clicked, relative to the top edge of the entire document.\n     * @param {string} obj.html - The dragged HTML element.\n     * @param {string} obj.text - The dragged text.\n\t * @alias OnDropEvent\n\t * @since 7.3.0\n\t * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/OnDropEvent.js\n\t */",
        "meta": {
            "lineno": 1751,
            "columnno": 1
        },
        "kind": "function",
        "since": "7.3.0",
        "name": "OnDropEvent",
        "description": "Implements the external drag&drop emulation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.executeMethod (\"OnDropEvent\", [{\n  \"type\": \"onbeforedrop\",\n  \"x\" : pos.x,\n  \"y\" : pos.y\n}]);\n\nwindow.Asc.plugin.executeMethod (\"OnDropEvent\", [{\n  \"type\": \"ondrop\",\n  \"x\" : pos.x,\n  \"y\" : pos.y,\n  \"text\" : \"test text\",\n  \"html\" : \"<span>test html</span>\"\n}]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.executeMethod (\"OnDropEvent\", [{\n  \"type\": \"onbeforedrop\",\n  \"x\" : pos.x,\n  \"y\" : pos.y\n}]);\n\nwindow.Asc.plugin.executeMethod (\"OnDropEvent\", [{\n  \"type\": \"ondrop\",\n  \"x\" : pos.x,\n  \"y\" : pos.y,\n  \"text\" : \"test text\",\n  \"html\" : \"<span>test html</span>\"\n}]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.executeMethod (\"OnDropEvent\", [{\n  \"type\": \"onbeforedrop\",\n  \"x\" : pos.x,\n  \"y\" : pos.y\n}]);\n\nwindow.Asc.plugin.executeMethod (\"OnDropEvent\", [{\n  \"type\": \"ondrop\",\n  \"x\" : pos.x,\n  \"y\" : pos.y,\n  \"text\" : \"test text\",\n  \"html\" : \"<span>test html</span>\"\n}]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.executeMethod (\"OnDropEvent\", [{\n  \"type\": \"onbeforedrop\",\n  \"x\" : pos.x,\n  \"y\" : pos.y\n}]);\n\nwindow.Asc.plugin.executeMethod (\"OnDropEvent\", [{\n  \"type\": \"ondrop\",\n  \"x\" : pos.x,\n  \"y\" : pos.y,\n  \"text\" : \"test text\",\n  \"html\" : \"<span>test html</span>\"\n}]);\n```",
        "memberof": "Api",
        "longname": "OnDropEvent",
        "alias": "OnDropEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "name": "obj",
                "description": "The drag&drop emulation properties."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "obj.type",
                "description": "The drag&drop event type:\n<b>onbeforedrop</b> - an event that is fired when the selected text or element is dragged;\n<b>ondrop</b> - an event that is fired when the selected text or element is dropped on a valid drop target."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "obj.x",
                "description": "The horizontal coordinate (in pixels) at which the mouse was clicked, relative to the left edge of the entire document."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "obj.y",
                "description": "The vertical coordinate (in pixels) at which the mouse was clicked, relative to the top edge of the entire document."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "obj.html",
                "description": "The dragged HTML element."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "obj.text",
                "description": "The dragged text."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/OnDropEvent.js"
        ],
        "examples": [
            "window.Asc.plugin.executeMethod (\"OnDropEvent\", [{\n  \"type\": \"onbeforedrop\",\n  \"x\" : pos.x,\n  \"y\" : pos.y\n}]);\n\nwindow.Asc.plugin.executeMethod (\"OnDropEvent\", [{\n  \"type\": \"ondrop\",\n  \"x\" : pos.x,\n  \"y\" : pos.y,\n  \"text\" : \"test text\",\n  \"html\" : \"<span>test html</span>\"\n}]);"
        ]
    },
    {
        "comment": "/**\n     * Returns the document language.\n     * @memberof Api\n     * @typeofeditors [\"CDE\", \"CPE\"]\n     * @alias GetDocumentLang\n     * @returns {string} - Document language.\n\t * @since 7.4.0\n     * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/GetDocumentLang.js\n\t */",
        "meta": {
            "lineno": 1793,
            "columnno": 4
        },
        "kind": "function",
        "since": "7.4.0",
        "name": "GetDocumentLang",
        "description": "Returns the document language.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.executeMethod(\"GetDocumentLang\", [], function(lang) {\n\tlet documentLang = lang || defaultLang;\n\n\tlet aOptions = Array.from($('#custom_menu option'));\n\tlet oDefaultOption = aOptions.find(function(item) {\n\t\tif (item.value == defaultLang)\n\t\t\treturn item;\n\t});\n\n\tlet oMatchOption = undefined;\n\toMatchOption = aOptions.find(function(item) {\n\t\tif (item.value == documentLang)\n\t\t\treturn true;\n\t});\n\tif (!oMatchOption) {\n\t\toMatchOption = aOptions.find(function(item) {\n\t\t\tif (item.value.search(documentLang.split('-')[0]) != -1)\n\t\t\t\treturn true;\n\t\t});\n\t}\n\n\tif (!oMatchOption)\n\t\toMatchOption = oDefaultOption;\n\n\tif (oMatchOption) {\n\t\t$('#custom_menu').val(oMatchOption.value);\n\t\t$('#custom_menu').trigger('change');\n\t}\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.executeMethod(\"GetDocumentLang\", [], function(lang) {\n\tlet documentLang = lang || defaultLang;\n\n\tlet aOptions = Array.from($('#custom_menu option'));\n\tlet oDefaultOption = aOptions.find(function(item) {\n\t\tif (item.value == defaultLang)\n\t\t\treturn item;\n\t});\n\n\tlet oMatchOption = undefined;\n\toMatchOption = aOptions.find(function(item) {\n\t\tif (item.value == documentLang)\n\t\t\treturn true;\n\t});\n\tif (!oMatchOption) {\n\t\toMatchOption = aOptions.find(function(item) {\n\t\t\tif (item.value.search(documentLang.split('-')[0]) != -1)\n\t\t\t\treturn true;\n\t\t});\n\t}\n\n\tif (!oMatchOption)\n\t\toMatchOption = oDefaultOption;\n\n\tif (oMatchOption) {\n\t\t$('#custom_menu').val(oMatchOption.value);\n\t\t$('#custom_menu').trigger('change');\n\t}\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.executeMethod(\"GetDocumentLang\", [], function(lang) {\n\tlet documentLang = lang || defaultLang;\n\n\tlet aOptions = Array.from($('#custom_menu option'));\n\tlet oDefaultOption = aOptions.find(function(item) {\n\t\tif (item.value == defaultLang)\n\t\t\treturn item;\n\t});\n\n\tlet oMatchOption = undefined;\n\toMatchOption = aOptions.find(function(item) {\n\t\tif (item.value == documentLang)\n\t\t\treturn true;\n\t});\n\tif (!oMatchOption) {\n\t\toMatchOption = aOptions.find(function(item) {\n\t\t\tif (item.value.search(documentLang.split('-')[0]) != -1)\n\t\t\t\treturn true;\n\t\t});\n\t}\n\n\tif (!oMatchOption)\n\t\toMatchOption = oDefaultOption;\n\n\tif (oMatchOption) {\n\t\t$('#custom_menu').val(oMatchOption.value);\n\t\t$('#custom_menu').trigger('change');\n\t}\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.executeMethod(\"GetDocumentLang\", [], function(lang) {\n\tlet documentLang = lang || defaultLang;\n\n\tlet aOptions = Array.from($('#custom_menu option'));\n\tlet oDefaultOption = aOptions.find(function(item) {\n\t\tif (item.value == defaultLang)\n\t\t\treturn item;\n\t});\n\n\tlet oMatchOption = undefined;\n\toMatchOption = aOptions.find(function(item) {\n\t\tif (item.value == documentLang)\n\t\t\treturn true;\n\t});\n\tif (!oMatchOption) {\n\t\toMatchOption = aOptions.find(function(item) {\n\t\t\tif (item.value.search(documentLang.split('-')[0]) != -1)\n\t\t\t\treturn true;\n\t\t});\n\t}\n\n\tif (!oMatchOption)\n\t\toMatchOption = oDefaultOption;\n\n\tif (oMatchOption) {\n\t\t$('#custom_menu').val(oMatchOption.value);\n\t\t$('#custom_menu').trigger('change');\n\t}\n});\n```",
        "memberof": "Api",
        "longname": "GetDocumentLang",
        "alias": "GetDocumentLang",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/GetDocumentLang.js"
        ],
        "examples": [
            "window.Asc.plugin.executeMethod(\"GetDocumentLang\", [], function(lang) {\n\tlet documentLang = lang || defaultLang;\n\n\tlet aOptions = Array.from($('#custom_menu option'));\n\tlet oDefaultOption = aOptions.find(function(item) {\n\t\tif (item.value == defaultLang)\n\t\t\treturn item;\n\t});\n\n\tlet oMatchOption = undefined;\n\toMatchOption = aOptions.find(function(item) {\n\t\tif (item.value == documentLang)\n\t\t\treturn true;\n\t});\n\tif (!oMatchOption) {\n\t\toMatchOption = aOptions.find(function(item) {\n\t\t\tif (item.value.search(documentLang.split('-')[0]) != -1)\n\t\t\t\treturn true;\n\t\t});\n\t}\n\n\tif (!oMatchOption)\n\t\toMatchOption = oDefaultOption;\n\n\tif (oMatchOption) {\n\t\t$('#custom_menu').val(oMatchOption.value);\n\t\t$('#custom_menu').trigger('change');\n\t}\n});"
        ]
    },
    {
        "comment": "/**\n\t * @typedef {Object} ContextMenuItem\n\t * The context menu item.\n\t * @property {string} id - The item ID.\n\t * @property {string} text - The item text.\n\t * @property {string} [data] - The item data (this data will be sent to the click event callback).\n\t * @property {boolean} [disabled] - Specifies if the current item is disabled or not.\n\t * @property {string} [icons] - The item icons (see the plugins {@link /plugin/config config} documentation).\n\t * @property {ContextMenuItem[]} items - An array containing the context menu items for the current item.\n\t * @see office-js-api/Examples/Plugins/{Editor}/Enumeration/ContextMenuItem.js\n\t */",
        "meta": {
            "lineno": 1843,
            "columnno": 1
        },
        "kind": "typedef",
        "name": "ContextMenuItem",
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        },
        "description": "The context menu item.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nvar aContextMenuItems = function getContextMenuItems() {\n\tlet settings = {\n\t\tguid: window.Asc.plugin.guid,\n\t\titems: [\n\t\t\t{\n\t\t\t\tid : 'onConvert',\n\t\t\t\ttext : getMessage('Convert to Markdown or HTML')\n\t\t\t}\n\t\t]\n\t};\n\treturn settings;\n};\n\nwindow.Asc.plugin.attachEvent('onContextMenuShow', function(options) {\n\tif (!options) return;\n\n\tif (options.type === 'Selection' || options.type === 'Target')\n\t\tthis.executeMethod('AddContextMenuItem', [aContextMenuItems]);\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nvar aContextMenuItems = function getContextMenuItems() {\n\tlet settings = {\n\t\tguid: window.Asc.plugin.guid,\n\t\titems: [\n\t\t\t{\n\t\t\t\tid : 'onConvert',\n\t\t\t\ttext : getMessage('Convert to Markdown or HTML')\n\t\t\t}\n\t\t]\n\t};\n\treturn settings;\n};\n\nwindow.Asc.plugin.attachEvent('onContextMenuShow', function(options) {\n\tif (!options) return;\n\n\tif (options.type === 'Selection' || options.type === 'Target')\n\t\tthis.executeMethod('AddContextMenuItem', [aContextMenuItems]);\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar aContextMenuItems = function getContextMenuItems() {\n\tlet settings = {\n\t\tguid: window.Asc.plugin.guid,\n\t\titems: [\n\t\t\t{\n\t\t\t\tid : 'onConvert',\n\t\t\t\ttext : getMessage('Convert to Markdown or HTML')\n\t\t\t}\n\t\t]\n\t};\n\treturn settings;\n};\n\nwindow.Asc.plugin.attachEvent('onContextMenuShow', function(options) {\n\tif (!options) return;\n\n\tif (options.type === 'Selection' || options.type === 'Target')\n\t\tthis.executeMethod('AddContextMenuItem', [aContextMenuItems]);\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nvar aContextMenuItems = function getContextMenuItems() {\n\tlet settings = {\n\t\tguid: window.Asc.plugin.guid,\n\t\titems: [\n\t\t\t{\n\t\t\t\tid : 'onConvert',\n\t\t\t\ttext : getMessage('Convert to Markdown or HTML')\n\t\t\t}\n\t\t]\n\t};\n\treturn settings;\n};\n\nwindow.Asc.plugin.attachEvent('onContextMenuShow', function(options) {\n\tif (!options) return;\n\n\tif (options.type === 'Selection' || options.type === 'Target')\n\t\tthis.executeMethod('AddContextMenuItem', [aContextMenuItems]);\n});\n```",
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "id",
                "description": "The item ID."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "text",
                "description": "The item text."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "data",
                "description": "The item data (this data will be sent to the click event callback).",
                "optional": true
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "disabled",
                "description": "Specifies if the current item is disabled or not.",
                "optional": true
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "icons",
                "description": "The item icons (see the plugins {@link /plugin/config config} documentation).",
                "optional": true
            },
            {
                "type": {
                    "names": [
                        "Array.<ContextMenuItem>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ContextMenuItem",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "items",
                "description": "An array containing the context menu items for the current item."
            }
        ],
        "longname": "ContextMenuItem",
        "scope": "global",
        "see": [
            "office-js-api/Examples/Plugins/Common/Enumeration/ContextMenuItem.js"
        ],
        "examples": [
            "var aContextMenuItems = function getContextMenuItems() {\n\tlet settings = {\n\t\tguid: window.Asc.plugin.guid,\n\t\titems: [\n\t\t\t{\n\t\t\t\tid : 'onConvert',\n\t\t\t\ttext : getMessage('Convert to Markdown or HTML')\n\t\t\t}\n\t\t]\n\t};\n\treturn settings;\n};\n\nwindow.Asc.plugin.attachEvent('onContextMenuShow', function(options) {\n\tif (!options) return;\n\n\tif (options.type === 'Selection' || options.type === 'Target')\n\t\tthis.executeMethod('AddContextMenuItem', [aContextMenuItems]);\n});"
        ]
    },
    {
        "comment": "/**\n\t * Adds an item to the context menu.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @alias AddContextMenuItem\n\t * @param {ContextMenuItem[]} items - An array containing the context menu items.\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/AddContextMenuItem.js\n\t */",
        "meta": {
            "lineno": 1864,
            "columnno": 1
        },
        "kind": "function",
        "since": "7.4.0",
        "name": "AddContextMenuItem",
        "description": "Adds an item to the context menu.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.attachEvent('onContextMenuShow', function(options) {\n\tif (!options) return;\n\n\tif (options.type === 'Selection' || options.type === 'Target')\n\t\tthis.executeMethod('AddContextMenuItem', [getContextMenuItems()]);\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.attachEvent('onContextMenuShow', function(options) {\n\tif (!options) return;\n\n\tif (options.type === 'Selection' || options.type === 'Target')\n\t\tthis.executeMethod('AddContextMenuItem', [getContextMenuItems()]);\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.attachEvent('onContextMenuShow', function(options) {\n\tif (!options) return;\n\n\tif (options.type === 'Selection' || options.type === 'Target')\n\t\tthis.executeMethod('AddContextMenuItem', [getContextMenuItems()]);\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.attachEvent('onContextMenuShow', function(options) {\n\tif (!options) return;\n\n\tif (options.type === 'Selection' || options.type === 'Target')\n\t\tthis.executeMethod('AddContextMenuItem', [getContextMenuItems()]);\n});\n```",
        "memberof": "Api",
        "longname": "AddContextMenuItem",
        "alias": "AddContextMenuItem",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<ContextMenuItem>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ContextMenuItem",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "items",
                "description": "An array containing the context menu items."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/AddContextMenuItem.js"
        ],
        "examples": [
            "window.Asc.plugin.attachEvent('onContextMenuShow', function(options) {\n\tif (!options) return;\n\n\tif (options.type === 'Selection' || options.type === 'Target')\n\t\tthis.executeMethod('AddContextMenuItem', [getContextMenuItems()]);\n});"
        ]
    },
    {
        "comment": "/**\n\t * Updates an item in the context menu with the specified items.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @alias UpdateContextMenuItem\n\t * @param {ContextMenuItem[]} items - An array containing the context menu items for the current item.\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/UpdateContextMenuItem.js\n\t */",
        "meta": {
            "lineno": 1880,
            "columnno": 1
        },
        "kind": "function",
        "since": "7.4.0",
        "name": "UpdateContextMenuItem",
        "description": "Updates an item in the context menu with the specified items.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.attachEvent('onContextMenuShow', function(options) {\n\tif (!options) return;\n\n\tif (options.type === 'Selection' || options.type === 'Target')\n\t\tthis.executeMethod('UpdateContextMenuItem', [getContextMenuItems()]);\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.attachEvent('onContextMenuShow', function(options) {\n\tif (!options) return;\n\n\tif (options.type === 'Selection' || options.type === 'Target')\n\t\tthis.executeMethod('UpdateContextMenuItem', [getContextMenuItems()]);\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.attachEvent('onContextMenuShow', function(options) {\n\tif (!options) return;\n\n\tif (options.type === 'Selection' || options.type === 'Target')\n\t\tthis.executeMethod('UpdateContextMenuItem', [getContextMenuItems()]);\n});\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.attachEvent('onContextMenuShow', function(options) {\n\tif (!options) return;\n\n\tif (options.type === 'Selection' || options.type === 'Target')\n\t\tthis.executeMethod('UpdateContextMenuItem', [getContextMenuItems()]);\n});\n```",
        "memberof": "Api",
        "longname": "UpdateContextMenuItem",
        "alias": "UpdateContextMenuItem",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<ContextMenuItem>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ContextMenuItem",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "items",
                "description": "An array containing the context menu items for the current item."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/UpdateContextMenuItem.js"
        ],
        "examples": [
            "window.Asc.plugin.attachEvent('onContextMenuShow', function(options) {\n\tif (!options) return;\n\n\tif (options.type === 'Selection' || options.type === 'Target')\n\t\tthis.executeMethod('UpdateContextMenuItem', [getContextMenuItems()]);\n});"
        ]
    },
    {
        "comment": "/**\n\t * The possible values of the base which the relative vertical position of the toolbar menu item will be calculated from.\n\t * @typedef {(\"button\" | \"...\")} ToolbarMenuItemType\n\t * @see office-js-api/Examples/Plugins/{Editor}/Enumeration/ToolbarMenuItemType.js\n\t */",
        "meta": {
            "lineno": 1887,
            "columnno": 1
        },
        "kind": "typedef",
        "name": "ToolbarMenuItemType",
        "type": {
            "names": [
                "\"button\"",
                "\"...\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"button\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"...\""
                    }
                ]
            }
        },
        "description": "The possible values of the base which the relative vertical position of the toolbar menu item will be calculated from.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nvar sToolbarMenuItemType = \"button\";\nvar oToolbarMenuItem = {\n    \"id\": \"MeaningItem\",\n    \"type\": sToolbarMenuItemType,\n    \"text\": \"Meaning\",\n    \"hint\": \"Meaning\",\n    \"icons\": \"resources/light/icon.png\",\n    \"disabled\": false,\n    \"enableToggle\": false,\n    \"lockInViewMode\": false,\n    \"separator\": true,\n    \"split\": true,\n    \"items\": [\n        {\n            \"id\": \"onMeaningT\",\n            \"text\": \"Explain text in comment\"\n        },\n        {\n            \"id\": \"onFixSpelling\",\n            \"text\": \"Fix spelling & grammar\"\n        },\n        {\n            \"id\": \"onMakeLonger\",\n            \"text\": \"Make longer\"\n        },\n        {\n            \"id\": \"onMakeShorter\",\n            \"text\": \"Make shorter\"\n        }\n    ]\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nvar sToolbarMenuItemType = \"button\";\nvar oToolbarMenuItem = {\n    \"id\": \"MeaningItem\",\n    \"type\": sToolbarMenuItemType,\n    \"text\": \"Meaning\",\n    \"hint\": \"Meaning\",\n    \"icons\": \"resources/light/icon.png\",\n    \"disabled\": false,\n    \"enableToggle\": false,\n    \"lockInViewMode\": false,\n    \"separator\": true,\n    \"split\": true,\n    \"items\": [\n        {\n            \"id\": \"onMeaningT\",\n            \"text\": \"Explain text in comment\"\n        },\n        {\n            \"id\": \"onFixSpelling\",\n            \"text\": \"Fix spelling & grammar\"\n        },\n        {\n            \"id\": \"onMakeLonger\",\n            \"text\": \"Make longer\"\n        },\n        {\n            \"id\": \"onMakeShorter\",\n            \"text\": \"Make shorter\"\n        }\n    ]\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar sToolbarMenuItemType = \"button\";\nvar oToolbarMenuItem = {\n    \"id\": \"MeaningItem\",\n    \"type\": sToolbarMenuItemType,\n    \"text\": \"Meaning\",\n    \"hint\": \"Meaning\",\n    \"icons\": \"resources/light/icon.png\",\n    \"disabled\": false,\n    \"enableToggle\": false,\n    \"lockInViewMode\": false,\n    \"separator\": true,\n    \"split\": true,\n    \"items\": [\n        {\n            \"id\": \"onMeaningT\",\n            \"text\": \"Explain text in comment\"\n        },\n        {\n            \"id\": \"onFixSpelling\",\n            \"text\": \"Fix spelling & grammar\"\n        },\n        {\n            \"id\": \"onMakeLonger\",\n            \"text\": \"Make longer\"\n        },\n        {\n            \"id\": \"onMakeShorter\",\n            \"text\": \"Make shorter\"\n        }\n    ]\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nvar sToolbarMenuItemType = \"button\";\nvar oToolbarMenuItem = {\n    \"id\": \"MeaningItem\",\n    \"type\": sToolbarMenuItemType,\n    \"text\": \"Meaning\",\n    \"hint\": \"Meaning\",\n    \"icons\": \"resources/light/icon.png\",\n    \"disabled\": false,\n    \"enableToggle\": false,\n    \"lockInViewMode\": false,\n    \"separator\": true,\n    \"split\": true,\n    \"items\": [\n        {\n            \"id\": \"onMeaningT\",\n            \"text\": \"Explain text in comment\"\n        },\n        {\n            \"id\": \"onFixSpelling\",\n            \"text\": \"Fix spelling & grammar\"\n        },\n        {\n            \"id\": \"onMakeLonger\",\n            \"text\": \"Make longer\"\n        },\n        {\n            \"id\": \"onMakeShorter\",\n            \"text\": \"Make shorter\"\n        }\n    ]\n};\n```",
        "longname": "ToolbarMenuItemType",
        "scope": "global",
        "see": [
            "office-js-api/Examples/Plugins/Common/Enumeration/ToolbarMenuItemType.js"
        ],
        "examples": [
            "var sToolbarMenuItemType = \"button\";\nvar oToolbarMenuItem = {\n    \"id\": \"MeaningItem\",\n    \"type\": sToolbarMenuItemType,\n    \"text\": \"Meaning\",\n    \"hint\": \"Meaning\",\n    \"icons\": \"resources/light/icon.png\",\n    \"disabled\": false,\n    \"enableToggle\": false,\n    \"lockInViewMode\": false,\n    \"separator\": true,\n    \"split\": true,\n    \"items\": [\n        {\n            \"id\": \"onMeaningT\",\n            \"text\": \"Explain text in comment\"\n        },\n        {\n            \"id\": \"onFixSpelling\",\n            \"text\": \"Fix spelling & grammar\"\n        },\n        {\n            \"id\": \"onMakeLonger\",\n            \"text\": \"Make longer\"\n        },\n        {\n            \"id\": \"onMakeShorter\",\n            \"text\": \"Make shorter\"\n        }\n    ]\n};"
        ]
    },
    {
        "comment": "/**\n\t * @typedef {Object} ToolbarMenuItem\n\t * The toolbar menu item.\n\t * @property {string} id - The item ID.\n\t * @property {ToolbarMenuItemType} type - The item type.\n\t * @property {string} text - The item text.\n\t * @property {string} hint - The item hint.\n\t * @property {string} [icons] - The item icons (see the plugins {@link /plugin/config config} documentation).\n\t * @property {boolean} [disabled] - Specifies if the current item is disabled or not.\n\t * @property {boolean} [enableToggle] - Specifies if an item toggle is enabled or not.\n\t * @property {boolean} [lockInViewMode] - Specifies if the current item is locked in the view mode or not.\n\t * @property {boolean} [separator] - Specifies if a separator is used between the toolbar menu items or not.\n\t * @property {boolean} [split] - Specifies if the toolbar menu items are split or not.\n\t * @property {ContextMenuItem[]} [items] - An array containing the context menu items for the current item.\n\t * @see office-js-api/Examples/Plugins/{Editor}/Enumeration/ToolbarMenuItem.js\n\t */",
        "meta": {
            "lineno": 1893,
            "columnno": 1
        },
        "kind": "typedef",
        "name": "ToolbarMenuItem",
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        },
        "description": "The toolbar menu item.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nvar oToolbarMenuItem = {\n    \"id\": \"MeaningItem\",\n    \"type\": \"button\",\n    \"text\": \"Meaning\",\n    \"hint\": \"Meaning\",\n    \"icons\": \"resources/light/icon.png\",\n    \"disabled\": false,\n    \"enableToggle\": false,\n    \"lockInViewMode\": false,\n    \"separator\": true,\n    \"split\": true,\n    \"items\": [\n        {\n            \"id\": \"onMeaningT\",\n            \"text\": \"Explain text in comment\"\n        },\n        {\n            \"id\": \"onFixSpelling\",\n            \"text\": \"Fix spelling & grammar\"\n        },\n        {\n            \"id\": \"onMakeLonger\",\n            \"text\": \"Make longer\"\n        },\n        {\n            \"id\": \"onMakeShorter\",\n            \"text\": \"Make shorter\"\n        }\n    ]\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nvar oToolbarMenuItem = {\n    \"id\": \"MeaningItem\",\n    \"type\": \"button\",\n    \"text\": \"Meaning\",\n    \"hint\": \"Meaning\",\n    \"icons\": \"resources/light/icon.png\",\n    \"disabled\": false,\n    \"enableToggle\": false,\n    \"lockInViewMode\": false,\n    \"separator\": true,\n    \"split\": true,\n    \"items\": [\n        {\n            \"id\": \"onMeaningT\",\n            \"text\": \"Explain text in comment\"\n        },\n        {\n            \"id\": \"onFixSpelling\",\n            \"text\": \"Fix spelling & grammar\"\n        },\n        {\n            \"id\": \"onMakeLonger\",\n            \"text\": \"Make longer\"\n        },\n        {\n            \"id\": \"onMakeShorter\",\n            \"text\": \"Make shorter\"\n        }\n    ]\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oToolbarMenuItem = {\n    \"id\": \"MeaningItem\",\n    \"type\": \"button\",\n    \"text\": \"Meaning\",\n    \"hint\": \"Meaning\",\n    \"icons\": \"resources/light/icon.png\",\n    \"disabled\": false,\n    \"enableToggle\": false,\n    \"lockInViewMode\": false,\n    \"separator\": true,\n    \"split\": true,\n    \"items\": [\n        {\n            \"id\": \"onMeaningT\",\n            \"text\": \"Explain text in comment\"\n        },\n        {\n            \"id\": \"onFixSpelling\",\n            \"text\": \"Fix spelling & grammar\"\n        },\n        {\n            \"id\": \"onMakeLonger\",\n            \"text\": \"Make longer\"\n        },\n        {\n            \"id\": \"onMakeShorter\",\n            \"text\": \"Make shorter\"\n        }\n    ]\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nvar oToolbarMenuItem = {\n    \"id\": \"MeaningItem\",\n    \"type\": \"button\",\n    \"text\": \"Meaning\",\n    \"hint\": \"Meaning\",\n    \"icons\": \"resources/light/icon.png\",\n    \"disabled\": false,\n    \"enableToggle\": false,\n    \"lockInViewMode\": false,\n    \"separator\": true,\n    \"split\": true,\n    \"items\": [\n        {\n            \"id\": \"onMeaningT\",\n            \"text\": \"Explain text in comment\"\n        },\n        {\n            \"id\": \"onFixSpelling\",\n            \"text\": \"Fix spelling & grammar\"\n        },\n        {\n            \"id\": \"onMakeLonger\",\n            \"text\": \"Make longer\"\n        },\n        {\n            \"id\": \"onMakeShorter\",\n            \"text\": \"Make shorter\"\n        }\n    ]\n};\n```",
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "id",
                "description": "The item ID."
            },
            {
                "type": {
                    "names": [
                        "ToolbarMenuItemType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ToolbarMenuItemType"
                    }
                },
                "name": "type",
                "description": "The item type."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "text",
                "description": "The item text."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "hint",
                "description": "The item hint."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "icons",
                "description": "The item icons (see the plugins {@link /plugin/config config} documentation).",
                "optional": true
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "disabled",
                "description": "Specifies if the current item is disabled or not.",
                "optional": true
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "enableToggle",
                "description": "Specifies if an item toggle is enabled or not.",
                "optional": true
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "lockInViewMode",
                "description": "Specifies if the current item is locked in the view mode or not.",
                "optional": true
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "separator",
                "description": "Specifies if a separator is used between the toolbar menu items or not.",
                "optional": true
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "split",
                "description": "Specifies if the toolbar menu items are split or not.",
                "optional": true
            },
            {
                "type": {
                    "names": [
                        "Array.<ContextMenuItem>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ContextMenuItem",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "items",
                "description": "An array containing the context menu items for the current item.",
                "optional": true
            }
        ],
        "longname": "ToolbarMenuItem",
        "scope": "global",
        "see": [
            "office-js-api/Examples/Plugins/Common/Enumeration/ToolbarMenuItem.js"
        ],
        "examples": [
            "var oToolbarMenuItem = {\n    \"id\": \"MeaningItem\",\n    \"type\": \"button\",\n    \"text\": \"Meaning\",\n    \"hint\": \"Meaning\",\n    \"icons\": \"resources/light/icon.png\",\n    \"disabled\": false,\n    \"enableToggle\": false,\n    \"lockInViewMode\": false,\n    \"separator\": true,\n    \"split\": true,\n    \"items\": [\n        {\n            \"id\": \"onMeaningT\",\n            \"text\": \"Explain text in comment\"\n        },\n        {\n            \"id\": \"onFixSpelling\",\n            \"text\": \"Fix spelling & grammar\"\n        },\n        {\n            \"id\": \"onMakeLonger\",\n            \"text\": \"Make longer\"\n        },\n        {\n            \"id\": \"onMakeShorter\",\n            \"text\": \"Make shorter\"\n        }\n    ]\n};"
        ]
    },
    {
        "comment": "/**\n\t * @typedef {Object} ToolbarMenuTab\n\t * The toolbar menu tab.\n\t * @property {string} id - The tab ID.\n\t * @property {string} text - The tab text.\n\t * @property {ToolbarMenuItem[]} [items] - An array containing the toolbar menu items for the current tab.\n\t * @see office-js-api/Examples/Plugins/{Editor}/Enumeration/ToolbarMenuTab.js\n\t */",
        "meta": {
            "lineno": 1910,
            "columnno": 1
        },
        "kind": "typedef",
        "name": "ToolbarMenuTab",
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        },
        "description": "The toolbar menu tab.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nvar oToolbarMenuTab = {\n    \"id\": \"ChatGPT\",\n    \"text\": \"AI Assistant\",\n    \"items\": [oToolbarMenuItem]\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nvar oToolbarMenuTab = {\n    \"id\": \"ChatGPT\",\n    \"text\": \"AI Assistant\",\n    \"items\": [oToolbarMenuItem]\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oToolbarMenuTab = {\n    \"id\": \"ChatGPT\",\n    \"text\": \"AI Assistant\",\n    \"items\": [oToolbarMenuItem]\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nvar oToolbarMenuTab = {\n    \"id\": \"ChatGPT\",\n    \"text\": \"AI Assistant\",\n    \"items\": [oToolbarMenuItem]\n};\n```",
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "id",
                "description": "The tab ID."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "text",
                "description": "The tab text."
            },
            {
                "type": {
                    "names": [
                        "Array.<ToolbarMenuItem>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ToolbarMenuItem",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "items",
                "description": "An array containing the toolbar menu items for the current tab.",
                "optional": true
            }
        ],
        "longname": "ToolbarMenuTab",
        "scope": "global",
        "see": [
            "office-js-api/Examples/Plugins/Common/Enumeration/ToolbarMenuTab.js"
        ],
        "examples": [
            "var oToolbarMenuTab = {\n    \"id\": \"ChatGPT\",\n    \"text\": \"AI Assistant\",\n    \"items\": [oToolbarMenuItem]\n};"
        ]
    },
    {
        "comment": "/**\n\t * @typedef {Object} ToolbarMenuMainItem\n\t * The main toolbar menu item.\n\t * @property {string} guid - The plugin guid.\n\t * @property {ToolbarMenuTab[]} tabs - An array containing the toolbar menu tabs for the current item.\n\t * @see office-js-api/Examples/Plugins/{Editor}/Enumeration/ToolbarMenuMainItem.js\n\t */",
        "meta": {
            "lineno": 1919,
            "columnno": 1
        },
        "kind": "typedef",
        "name": "ToolbarMenuMainItem",
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        },
        "description": "The main toolbar menu item.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nvar oToolbarMenuMainItem = {\n    \"guid\": \"asc.{9DC93CDB-B576-4F0C-B55E-FCC9C48DD007}\",\n    \"tabs\": [oToolbarMenuTab]\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nvar oToolbarMenuMainItem = {\n    \"guid\": \"asc.{9DC93CDB-B576-4F0C-B55E-FCC9C48DD007}\",\n    \"tabs\": [oToolbarMenuTab]\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oToolbarMenuMainItem = {\n    \"guid\": \"asc.{9DC93CDB-B576-4F0C-B55E-FCC9C48DD007}\",\n    \"tabs\": [oToolbarMenuTab]\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nvar oToolbarMenuMainItem = {\n    \"guid\": \"asc.{9DC93CDB-B576-4F0C-B55E-FCC9C48DD007}\",\n    \"tabs\": [oToolbarMenuTab]\n};\n```",
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "guid",
                "description": "The plugin guid."
            },
            {
                "type": {
                    "names": [
                        "Array.<ToolbarMenuTab>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ToolbarMenuTab",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "tabs",
                "description": "An array containing the toolbar menu tabs for the current item."
            }
        ],
        "longname": "ToolbarMenuMainItem",
        "scope": "global",
        "see": [
            "office-js-api/Examples/Plugins/Common/Enumeration/ToolbarMenuMainItem.js"
        ],
        "examples": [
            "var oToolbarMenuMainItem = {\n    \"guid\": \"asc.{9DC93CDB-B576-4F0C-B55E-FCC9C48DD007}\",\n    \"tabs\": [oToolbarMenuTab]\n};"
        ]
    },
    {
        "comment": "/**\n\t * Adds an item to the toolbar menu.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @alias AddToolbarMenuItem\n\t * @param {ToolbarMenuMainItem[]} items - An array containing the main toolbar menu items.\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/AddToolbarMenuItem.js\n\t */",
        "meta": {
            "lineno": 1936,
            "columnno": 1
        },
        "kind": "function",
        "since": "8.1.0",
        "name": "AddToolbarMenuItem",
        "description": "Adds an item to the toolbar menu.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nvar oToolbarMenuItem = {\n    \"id\": \"MeaningItem\",\n    \"type\": \"button\",\n    \"text\": \"Meaning\",\n    \"hint\": \"Meaning\",\n    \"icons\": \"resources/light/icon.png\",\n    \"disabled\": false,\n    \"enableToggle\": false,\n    \"lockInViewMode\": false,\n    \"separator\": true,\n    \"split\": true,\n    \"items\": [\n        {\n            \"id\": \"onMeaningT\",\n            \"text\": \"Explain text in comment\"\n        },\n        {\n            \"id\": \"onFixSpelling\",\n            \"text\": \"Fix spelling & grammar\"\n        },\n        {\n            \"id\": \"onMakeLonger\",\n            \"text\": \"Make longer\"\n        },\n        {\n            \"id\": \"onMakeShorter\",\n            \"text\": \"Make shorter\"\n        }\n    ]\n};\nvar oToolbarMenuTab = {\n    \"id\": \"ChatGPT\",\n    \"text\": \"AI Assistant\",\n    \"items\": [oToolbarMenuItem]\n};\nvar oToolbarMenuMainItem = {\n    \"guid\": \"asc.{9DC93CDB-B576-4F0C-B55E-FCC9C48DD007}\",\n    \"tabs\": [oToolbarMenuTab]\n};\nwindow.Asc.plugin.executeMethod (\"AddToolbarMenuItem\", [[oToolbarMenuMainItem]]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nvar oToolbarMenuItem = {\n    \"id\": \"MeaningItem\",\n    \"type\": \"button\",\n    \"text\": \"Meaning\",\n    \"hint\": \"Meaning\",\n    \"icons\": \"resources/light/icon.png\",\n    \"disabled\": false,\n    \"enableToggle\": false,\n    \"lockInViewMode\": false,\n    \"separator\": true,\n    \"split\": true,\n    \"items\": [\n        {\n            \"id\": \"onMeaningT\",\n            \"text\": \"Explain text in comment\"\n        },\n        {\n            \"id\": \"onFixSpelling\",\n            \"text\": \"Fix spelling & grammar\"\n        },\n        {\n            \"id\": \"onMakeLonger\",\n            \"text\": \"Make longer\"\n        },\n        {\n            \"id\": \"onMakeShorter\",\n            \"text\": \"Make shorter\"\n        }\n    ]\n};\nvar oToolbarMenuTab = {\n    \"id\": \"ChatGPT\",\n    \"text\": \"AI Assistant\",\n    \"items\": [oToolbarMenuItem]\n};\nvar oToolbarMenuMainItem = {\n    \"guid\": \"asc.{9DC93CDB-B576-4F0C-B55E-FCC9C48DD007}\",\n    \"tabs\": [oToolbarMenuTab]\n};\nwindow.Asc.plugin.executeMethod (\"AddToolbarMenuItem\", [[oToolbarMenuMainItem]]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oToolbarMenuItem = {\n    \"id\": \"MeaningItem\",\n    \"type\": \"button\",\n    \"text\": \"Meaning\",\n    \"hint\": \"Meaning\",\n    \"icons\": \"resources/light/icon.png\",\n    \"disabled\": false,\n    \"enableToggle\": false,\n    \"lockInViewMode\": false,\n    \"separator\": true,\n    \"split\": true,\n    \"items\": [\n        {\n            \"id\": \"onMeaningT\",\n            \"text\": \"Explain text in comment\"\n        },\n        {\n            \"id\": \"onFixSpelling\",\n            \"text\": \"Fix spelling & grammar\"\n        },\n        {\n            \"id\": \"onMakeLonger\",\n            \"text\": \"Make longer\"\n        },\n        {\n            \"id\": \"onMakeShorter\",\n            \"text\": \"Make shorter\"\n        }\n    ]\n};\nvar oToolbarMenuTab = {\n    \"id\": \"ChatGPT\",\n    \"text\": \"AI Assistant\",\n    \"items\": [oToolbarMenuItem]\n};\nvar oToolbarMenuMainItem = {\n    \"guid\": \"asc.{9DC93CDB-B576-4F0C-B55E-FCC9C48DD007}\",\n    \"tabs\": [oToolbarMenuTab]\n};\nwindow.Asc.plugin.executeMethod (\"AddToolbarMenuItem\", [[oToolbarMenuMainItem]]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nvar oToolbarMenuItem = {\n    \"id\": \"MeaningItem\",\n    \"type\": \"button\",\n    \"text\": \"Meaning\",\n    \"hint\": \"Meaning\",\n    \"icons\": \"resources/light/icon.png\",\n    \"disabled\": false,\n    \"enableToggle\": false,\n    \"lockInViewMode\": false,\n    \"separator\": true,\n    \"split\": true,\n    \"items\": [\n        {\n            \"id\": \"onMeaningT\",\n            \"text\": \"Explain text in comment\"\n        },\n        {\n            \"id\": \"onFixSpelling\",\n            \"text\": \"Fix spelling & grammar\"\n        },\n        {\n            \"id\": \"onMakeLonger\",\n            \"text\": \"Make longer\"\n        },\n        {\n            \"id\": \"onMakeShorter\",\n            \"text\": \"Make shorter\"\n        }\n    ]\n};\nvar oToolbarMenuTab = {\n    \"id\": \"ChatGPT\",\n    \"text\": \"AI Assistant\",\n    \"items\": [oToolbarMenuItem]\n};\nvar oToolbarMenuMainItem = {\n    \"guid\": \"asc.{9DC93CDB-B576-4F0C-B55E-FCC9C48DD007}\",\n    \"tabs\": [oToolbarMenuTab]\n};\nwindow.Asc.plugin.executeMethod (\"AddToolbarMenuItem\", [[oToolbarMenuMainItem]]);\n```",
        "memberof": "Api",
        "longname": "AddToolbarMenuItem",
        "alias": "AddToolbarMenuItem",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<ToolbarMenuMainItem>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ToolbarMenuMainItem",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "items",
                "description": "An array containing the main toolbar menu items."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/AddToolbarMenuItem.js"
        ],
        "examples": [
            "var oToolbarMenuItem = {\n    \"id\": \"MeaningItem\",\n    \"type\": \"button\",\n    \"text\": \"Meaning\",\n    \"hint\": \"Meaning\",\n    \"icons\": \"resources/light/icon.png\",\n    \"disabled\": false,\n    \"enableToggle\": false,\n    \"lockInViewMode\": false,\n    \"separator\": true,\n    \"split\": true,\n    \"items\": [\n        {\n            \"id\": \"onMeaningT\",\n            \"text\": \"Explain text in comment\"\n        },\n        {\n            \"id\": \"onFixSpelling\",\n            \"text\": \"Fix spelling & grammar\"\n        },\n        {\n            \"id\": \"onMakeLonger\",\n            \"text\": \"Make longer\"\n        },\n        {\n            \"id\": \"onMakeShorter\",\n            \"text\": \"Make shorter\"\n        }\n    ]\n};\nvar oToolbarMenuTab = {\n    \"id\": \"ChatGPT\",\n    \"text\": \"AI Assistant\",\n    \"items\": [oToolbarMenuItem]\n};\nvar oToolbarMenuMainItem = {\n    \"guid\": \"asc.{9DC93CDB-B576-4F0C-B55E-FCC9C48DD007}\",\n    \"tabs\": [oToolbarMenuTab]\n};\nwindow.Asc.plugin.executeMethod (\"AddToolbarMenuItem\", [[oToolbarMenuMainItem]]);"
        ]
    },
    {
        "comment": "/**\n\t * Shows the plugin modal window.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {string} frameId - The frame ID.\n\t * @param {variation} variation - The plugin variation.\n\t * @alias ShowWindow \n\t * @since 7.4.0\n\t * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/ShowWindow.js\n\t */",
        "meta": {
            "lineno": 1958,
            "columnno": 1
        },
        "kind": "function",
        "since": "7.4.0",
        "name": "ShowWindow",
        "description": "Shows the plugin modal window.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nlet variation = {\n    url : location.href.replace(file, 'modal.html'),\n    description : window.Asc.plugin.tr('Warning'),\n    isVisual : true,\n    isModal : true,\n    EditorsSupport : ['word', 'cell', 'slide'],\n    size : [350, 100],\n    buttons : [\n        {\n            'text': window.Asc.plugin.tr('Yes'),\n            'primary': true\n        },\n        {\n            'text': window.Asc.plugin.tr('No'),\n            'primary': false\n        }\n    ]\n};\nwindow.Asc.plugin.executeMethod (\"ShowWindow\", [\"iframe_asc.{BE5CBF95-C0AD-4842-B157-AC40FEDD9841}\", variation]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet variation = {\n    url : location.href.replace(file, 'modal.html'),\n    description : window.Asc.plugin.tr('Warning'),\n    isVisual : true,\n    isModal : true,\n    EditorsSupport : ['word', 'cell', 'slide'],\n    size : [350, 100],\n    buttons : [\n        {\n            'text': window.Asc.plugin.tr('Yes'),\n            'primary': true\n        },\n        {\n            'text': window.Asc.plugin.tr('No'),\n            'primary': false\n        }\n    ]\n};\nwindow.Asc.plugin.executeMethod (\"ShowWindow\", [\"iframe_asc.{BE5CBF95-C0AD-4842-B157-AC40FEDD9841}\", variation]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nlet variation = {\n    url : location.href.replace(file, 'modal.html'),\n    description : window.Asc.plugin.tr('Warning'),\n    isVisual : true,\n    isModal : true,\n    EditorsSupport : ['word', 'cell', 'slide'],\n    size : [350, 100],\n    buttons : [\n        {\n            'text': window.Asc.plugin.tr('Yes'),\n            'primary': true\n        },\n        {\n            'text': window.Asc.plugin.tr('No'),\n            'primary': false\n        }\n    ]\n};\nwindow.Asc.plugin.executeMethod (\"ShowWindow\", [\"iframe_asc.{BE5CBF95-C0AD-4842-B157-AC40FEDD9841}\", variation]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet variation = {\n    url : location.href.replace(file, 'modal.html'),\n    description : window.Asc.plugin.tr('Warning'),\n    isVisual : true,\n    isModal : true,\n    EditorsSupport : ['word', 'cell', 'slide'],\n    size : [350, 100],\n    buttons : [\n        {\n            'text': window.Asc.plugin.tr('Yes'),\n            'primary': true\n        },\n        {\n            'text': window.Asc.plugin.tr('No'),\n            'primary': false\n        }\n    ]\n};\nwindow.Asc.plugin.executeMethod (\"ShowWindow\", [\"iframe_asc.{BE5CBF95-C0AD-4842-B157-AC40FEDD9841}\", variation]);\n```",
        "memberof": "Api",
        "longname": "ShowWindow",
        "alias": "ShowWindow",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "frameId",
                "description": "The frame ID."
            },
            {
                "type": {
                    "names": [
                        "variation"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "variation"
                    }
                },
                "name": "variation",
                "description": "The plugin variation."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/ShowWindow.js"
        ],
        "examples": [
            "let variation = {\n    url : location.href.replace(file, 'modal.html'),\n    description : window.Asc.plugin.tr('Warning'),\n    isVisual : true,\n    isModal : true,\n    EditorsSupport : ['word', 'cell', 'slide'],\n    size : [350, 100],\n    buttons : [\n        {\n            'text': window.Asc.plugin.tr('Yes'),\n            'primary': true\n        },\n        {\n            'text': window.Asc.plugin.tr('No'),\n            'primary': false\n        }\n    ]\n};\nwindow.Asc.plugin.executeMethod (\"ShowWindow\", [\"iframe_asc.{BE5CBF95-C0AD-4842-B157-AC40FEDD9841}\", variation]);"
        ]
    },
    {
        "comment": "/**\n\t * Activates (moves forward) the plugin window/panel.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {string} frameId - The frame ID.\n\t * @alias ActivateWindow\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/ActivateWindow.js\n\t */",
        "meta": {
            "lineno": 1978,
            "columnno": 1
        },
        "kind": "function",
        "since": "8.1.0",
        "name": "ActivateWindow",
        "description": "Activates (moves forward) the plugin window/panel.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.executeMethod (\"ActivateWindow\", [\"iframe_asc.{BE5CBF95-C0AD-4842-B157-AC40FEDD9841}\"]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.executeMethod (\"ActivateWindow\", [\"iframe_asc.{BE5CBF95-C0AD-4842-B157-AC40FEDD9841}\"]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.executeMethod (\"ActivateWindow\", [\"iframe_asc.{BE5CBF95-C0AD-4842-B157-AC40FEDD9841}\"]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.executeMethod (\"ActivateWindow\", [\"iframe_asc.{BE5CBF95-C0AD-4842-B157-AC40FEDD9841}\"]);\n```",
        "memberof": "Api",
        "longname": "ActivateWindow",
        "alias": "ActivateWindow",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "frameId",
                "description": "The frame ID."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/ActivateWindow.js"
        ],
        "examples": [
            "window.Asc.plugin.executeMethod (\"ActivateWindow\", [\"iframe_asc.{BE5CBF95-C0AD-4842-B157-AC40FEDD9841}\"]);"
        ]
    },
    {
        "comment": "/**\n\t * Closes the plugin modal window.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {string} frameId - The frame ID.\n\t * @alias CloseWindow\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/CloseWindow.js\n\t */",
        "meta": {
            "lineno": 1992,
            "columnno": 1
        },
        "kind": "function",
        "since": "7.4.0",
        "name": "CloseWindow",
        "description": "Closes the plugin modal window.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.button = function(id, windowId) {\n\tif (!modalWindow)\n\t\treturn;\n\n\tif (windowId) {\n\t\tswitch (id) {\n\t\t\tcase -1:\n\t\t\tdefault:\n\t\t\t\twindow.Asc.plugin.executeMethod('CloseWindow', [windowId]);\n\t\t}\n\t}\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.button = function(id, windowId) {\n\tif (!modalWindow)\n\t\treturn;\n\n\tif (windowId) {\n\t\tswitch (id) {\n\t\t\tcase -1:\n\t\t\tdefault:\n\t\t\t\twindow.Asc.plugin.executeMethod('CloseWindow', [windowId]);\n\t\t}\n\t}\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.button = function(id, windowId) {\n\tif (!modalWindow)\n\t\treturn;\n\n\tif (windowId) {\n\t\tswitch (id) {\n\t\t\tcase -1:\n\t\t\tdefault:\n\t\t\t\twindow.Asc.plugin.executeMethod('CloseWindow', [windowId]);\n\t\t}\n\t}\n};\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.button = function(id, windowId) {\n\tif (!modalWindow)\n\t\treturn;\n\n\tif (windowId) {\n\t\tswitch (id) {\n\t\t\tcase -1:\n\t\t\tdefault:\n\t\t\t\twindow.Asc.plugin.executeMethod('CloseWindow', [windowId]);\n\t\t}\n\t}\n};\n```",
        "memberof": "Api",
        "longname": "CloseWindow",
        "alias": "CloseWindow",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "frameId",
                "description": "The frame ID."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/CloseWindow.js"
        ],
        "examples": [
            "window.Asc.plugin.button = function(id, windowId) {\n\tif (!modalWindow)\n\t\treturn;\n\n\tif (windowId) {\n\t\tswitch (id) {\n\t\t\tcase -1:\n\t\t\tdefault:\n\t\t\t\twindow.Asc.plugin.executeMethod('CloseWindow', [windowId]);\n\t\t}\n\t}\n};"
        ]
    },
    {
        "comment": "/**\n\t * Sends a message to the plugin modal window.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {string} windowID - The frame ID.\n\t * @param {string} name - The event name.\n\t * @param {object} data - The event data.\n\t * @alias SendToWindow\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/SendToWindow.js\n\t */",
        "meta": {
            "lineno": 2008,
            "columnno": 1
        },
        "kind": "function",
        "since": "7.4.0",
        "name": "SendToWindow",
        "description": "Sends a message to the plugin modal window.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.executeMethod (\"SendToWindow\", [\"iframe_asc.{BE5CBF95-C0AD-4842-B157-AC40FEDD9841}\", \"onWindowMessage\", {config: oConfig}]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.executeMethod (\"SendToWindow\", [\"iframe_asc.{BE5CBF95-C0AD-4842-B157-AC40FEDD9841}\", \"onWindowMessage\", {config: oConfig}]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.executeMethod (\"SendToWindow\", [\"iframe_asc.{BE5CBF95-C0AD-4842-B157-AC40FEDD9841}\", \"onWindowMessage\", {config: oConfig}]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.executeMethod (\"SendToWindow\", [\"iframe_asc.{BE5CBF95-C0AD-4842-B157-AC40FEDD9841}\", \"onWindowMessage\", {config: oConfig}]);\n```",
        "memberof": "Api",
        "longname": "SendToWindow",
        "alias": "SendToWindow",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "windowID",
                "description": "The frame ID."
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "name",
                "description": "The event name."
            },
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "name": "data",
                "description": "The event data."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/SendToWindow.js"
        ],
        "examples": [
            "window.Asc.plugin.executeMethod (\"SendToWindow\", [\"iframe_asc.{BE5CBF95-C0AD-4842-B157-AC40FEDD9841}\", \"onWindowMessage\", {config: oConfig}]);"
        ]
    },
    {
        "comment": "/**\n\t * Resizes the plugin modal window.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {string} frameId - The frame ID.\n\t * @param {number} size - The frame size.\n\t * @param {number} minSize - The frame minimum size.\n\t * @param {number} maxSize - The frame maximum size.\n\t * @alias ResizeWindow\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/ResizeWindow.js\n\t */",
        "meta": {
            "lineno": 2025,
            "columnno": 1
        },
        "kind": "function",
        "since": "7.4.0",
        "name": "ResizeWindow",
        "description": "Resizes the plugin modal window.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.executeMethod (\"ResizeWindow\", [\"iframe_asc.{BE5CBF95-C0AD-4842-B157-AC40FEDD9841}\", 392, 392, 392]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.executeMethod (\"ResizeWindow\", [\"iframe_asc.{BE5CBF95-C0AD-4842-B157-AC40FEDD9841}\", 392, 392, 392]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.executeMethod (\"ResizeWindow\", [\"iframe_asc.{BE5CBF95-C0AD-4842-B157-AC40FEDD9841}\", 392, 392, 392]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.executeMethod (\"ResizeWindow\", [\"iframe_asc.{BE5CBF95-C0AD-4842-B157-AC40FEDD9841}\", 392, 392, 392]);\n```",
        "memberof": "Api",
        "longname": "ResizeWindow",
        "alias": "ResizeWindow",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "frameId",
                "description": "The frame ID."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "size",
                "description": "The frame size."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "minSize",
                "description": "The frame minimum size."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "maxSize",
                "description": "The frame maximum size."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/ResizeWindow.js"
        ],
        "examples": [
            "window.Asc.plugin.executeMethod (\"ResizeWindow\", [\"iframe_asc.{BE5CBF95-C0AD-4842-B157-AC40FEDD9841}\", 392, 392, 392]);"
        ]
    },
    {
        "comment": "/**\n\t * Sends an event to the plugin when the mouse button is released inside the plugin iframe.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {string} frameId - The frame ID.\n\t * @param {number} x - The X coordinate.\n\t * @param {number} y - The Y coordinate.\n\t * @alias MouseUpWindow\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/MouseUpWindow.js\n\t */",
        "meta": {
            "lineno": 2044,
            "columnno": 1
        },
        "kind": "function",
        "since": "7.4.0",
        "name": "MouseUpWindow",
        "description": "Sends an event to the plugin when the mouse button is released inside the plugin iframe.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.executeMethod (\"MouseUpWindow\", [\"iframe_asc.{BE5CBF95-C0AD-4842-B157-AC40FEDD9841}\", 70, 40]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.executeMethod (\"MouseUpWindow\", [\"iframe_asc.{BE5CBF95-C0AD-4842-B157-AC40FEDD9841}\", 70, 40]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.executeMethod (\"MouseUpWindow\", [\"iframe_asc.{BE5CBF95-C0AD-4842-B157-AC40FEDD9841}\", 70, 40]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.executeMethod (\"MouseUpWindow\", [\"iframe_asc.{BE5CBF95-C0AD-4842-B157-AC40FEDD9841}\", 70, 40]);\n```",
        "memberof": "Api",
        "longname": "MouseUpWindow",
        "alias": "MouseUpWindow",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "frameId",
                "description": "The frame ID."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "x",
                "description": "The X coordinate."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "y",
                "description": "The Y coordinate."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/MouseUpWindow.js"
        ],
        "examples": [
            "window.Asc.plugin.executeMethod (\"MouseUpWindow\", [\"iframe_asc.{BE5CBF95-C0AD-4842-B157-AC40FEDD9841}\", 70, 40]);"
        ]
    },
    {
        "comment": "/**\n\t * Sends an event to the plugin when the mouse button is moved inside the plugin iframe.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {string} frameId - The frame ID.\n \t * @param {number} x - The X coordinate.\n\t * @param {number} y - The Y coordinate.\n\t * @alias MouseMoveWindow\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/Plugins/{Editor}/Api/Methods/MouseMoveWindow.js\n\t */",
        "meta": {
            "lineno": 2060,
            "columnno": 1
        },
        "kind": "function",
        "since": "7.4.0",
        "name": "MouseMoveWindow",
        "description": "Sends an event to the plugin when the mouse button is moved inside the plugin iframe.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"word\"}\nwindow.Asc.plugin.executeMethod (\"MouseMoveWindow\", [\"iframe_asc.{BE5CBF95-C0AD-4842-B157-AC40FEDD9841}\", 70, 40]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwindow.Asc.plugin.executeMethod (\"MouseMoveWindow\", [\"iframe_asc.{BE5CBF95-C0AD-4842-B157-AC40FEDD9841}\", 70, 40]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nwindow.Asc.plugin.executeMethod (\"MouseMoveWindow\", [\"iframe_asc.{BE5CBF95-C0AD-4842-B157-AC40FEDD9841}\", 70, 40]);\n```\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwindow.Asc.plugin.executeMethod (\"MouseMoveWindow\", [\"iframe_asc.{BE5CBF95-C0AD-4842-B157-AC40FEDD9841}\", 70, 40]);\n```",
        "memberof": "Api",
        "longname": "MouseMoveWindow",
        "alias": "MouseMoveWindow",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "frameId",
                "description": "The frame ID."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "x",
                "description": "The X coordinate."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "y",
                "description": "The Y coordinate."
            }
        ],
        "see": [
            "office-js-api/Examples/Plugins/Common/Api/Methods/MouseMoveWindow.js"
        ],
        "examples": [
            "window.Asc.plugin.executeMethod (\"MouseMoveWindow\", [\"iframe_asc.{BE5CBF95-C0AD-4842-B157-AC40FEDD9841}\", 70, 40]);"
        ]
    },
    {
        "comment": "/**\n\t * Show an error/warning message.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\", \"PDF\"]\n\t * @param {string} error - error text.\n\t * @param {number} level - -1 or 0 for error or warning\n\t * @alias ShowError\n\t * @since 8.3.0\n\t */",
        "meta": {
            "lineno": 2074,
            "columnno": 1
        },
        "kind": "function",
        "since": "8.3.0",
        "name": "ShowError",
        "description": "Show an error/warning message.",
        "memberof": "Api",
        "longname": "ShowError",
        "alias": "ShowError",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "error",
                "description": "error text."
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "level",
                "description": "-1 or 0 for error or warning"
            }
        ]
    }
]