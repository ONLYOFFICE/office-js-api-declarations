[
    {
        "comment": "/**\r\n     * @global\r\n     * @class\r\n     * @name Api\r\n     */",
        "description": null,
        "name": "Api",
        "longname": "Api",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 36,
            "columnno": 4
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\r\n\t * Class representing a container for paragraphs and tables.\r\n\t * @param Document\r\n\t * @constructor\r\n\t */",
        "description": "Class representing a container for paragraphs and tables.",
        "name": "ApiDocumentContent",
        "longname": "ApiDocumentContent",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 218,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\r\n\t * Class representing the paragraph properties.\r\n\t * @constructor\r\n\t */",
        "description": "Class representing the paragraph properties.",
        "name": "ApiParaPr",
        "longname": "ApiParaPr",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 3236,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\r\n\t * Class representing a paragraph bullet.\r\n\t * @constructor\r\n\t */",
        "description": "Class representing a paragraph bullet.",
        "name": "ApiBullet",
        "longname": "ApiBullet",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 3247,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\r\n\t * Class representing a paragraph.\r\n\t * @constructor\r\n\t * @extends {ApiParaPr}\r\n\t */",
        "description": "Class representing a paragraph.",
        "name": "ApiParagraph",
        "longname": "ApiParagraph",
        "kind": "class",
        "scope": "global",
        "augments": [
            "ApiParaPr"
        ],
        "meta": {
            "lineno": 3257,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\r\n     * Class representing a table.\r\n     * @param oGraphicFrame\r\n     * @constructor\r\n     */",
        "description": "Class representing a table.",
        "name": "ApiTable",
        "longname": "ApiTable",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 172,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\r\n\t * Class representing the text properties.\r\n\t * @constructor\r\n\t */",
        "description": "Class representing the text properties.",
        "name": "ApiTextPr",
        "longname": "ApiTextPr",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 3292,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\r\n\t * Class representing a small text block called 'run'.\r\n\t * @constructor\r\n\t * @extends {ApiTextPr}\r\n\t */",
        "description": "Class representing a small text block called 'run'.",
        "name": "ApiRun",
        "longname": "ApiRun",
        "kind": "class",
        "scope": "global",
        "augments": [
            "ApiTextPr"
        ],
        "meta": {
            "lineno": 3303,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\r\n\t * Class representing a comment.\r\n\t * @constructor\r\n\t */",
        "description": "Class representing a comment.",
        "name": "ApiComment",
        "longname": "ApiComment",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 3315,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\r\n     * Class representing a table row.\r\n     * @param oTableRow\r\n     * @constructor\r\n     */",
        "description": "Class representing a table row.",
        "name": "ApiTableRow",
        "longname": "ApiTableRow",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 189,
            "columnno": 4
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\r\n     * Class representing a table cell.\r\n     * @param oCell\r\n     * @constructor\r\n     */",
        "description": "Class representing a table cell.",
        "name": "ApiTableCell",
        "longname": "ApiTableCell",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 199,
            "columnno": 4
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\r\n     * Class representing a graphical object.\r\n     * @constructor\r\n     */",
        "description": "Class representing a graphical object.",
        "name": "ApiDrawing",
        "longname": "ApiDrawing",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 119,
            "columnno": 4
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\r\n     * Class representing an image.\r\n     * @constructor\r\n     */",
        "description": "Class representing an image.",
        "name": "ApiImage",
        "longname": "ApiImage",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 139,
            "columnno": 4
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\r\n\t * Class representing an OLE object.\r\n\t * @constructor\r\n\t */",
        "description": "Class representing an OLE object.",
        "name": "ApiOleObject",
        "longname": "ApiOleObject",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 160,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\r\n     * Class representing a shape.\r\n     * @constructor\r\n     */",
        "description": "Class representing a shape.",
        "name": "ApiShape",
        "longname": "ApiShape",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 128,
            "columnno": 4
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\r\n\t * Class representing a chart.\r\n\t * @constructor\r\n\t *\r\n\t */",
        "description": "Class representing a chart.",
        "name": "ApiChart",
        "longname": "ApiChart",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 3817,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\r\n\t * Class representing a chart series.\r\n\t * @constructor\r\n\t *\r\n\t */",
        "description": "Class representing a chart series.",
        "name": "ApiChartSeries",
        "longname": "ApiChartSeries",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 3830,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\r\n\t * Class representing a base class for color types.\r\n\t * @constructor\r\n\t */",
        "description": "Class representing a base class for color types.",
        "name": "ApiUniColor",
        "longname": "ApiUniColor",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 3840,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\r\n\t * Class representing an RGB Color.\r\n\t * @constructor\r\n\t */",
        "description": "Class representing an RGB Color.",
        "name": "ApiRGBColor",
        "longname": "ApiRGBColor",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 3848,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\r\n\t * Class representing a Scheme Color.\r\n\t * @constructor\r\n\t */",
        "description": "Class representing a Scheme Color.",
        "name": "ApiSchemeColor",
        "longname": "ApiSchemeColor",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 3859,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\r\n\t * Class representing a Preset Color.\r\n\t * @constructor\r\n\t */",
        "description": "Class representing a Preset Color.",
        "name": "ApiPresetColor",
        "longname": "ApiPresetColor",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 3890,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\r\n\t * Class representing a base class for fill.\r\n\t * @constructor\r\n\t */",
        "description": "Class representing a base class for fill.",
        "name": "ApiFill",
        "longname": "ApiFill",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 3904,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\r\n\t * Class representing a stroke.\r\n\t * @constructor\r\n\t */",
        "description": "Class representing a stroke.",
        "name": "ApiStroke",
        "longname": "ApiStroke",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 3914,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\r\n\t * Class representing gradient stop.\r\n\t * @constructor\r\n\t */",
        "description": "Class representing gradient stop.",
        "name": "ApiGradientStop",
        "longname": "ApiGradientStop",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 3924,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\r\n     * Twentieths of a point (equivalent to 1/1440th of an inch).\r\n     * @typedef {number} twips\r\n     * @see office-js-api/Examples/Enumerations/twips.js\r\n\t */",
        "description": "Twentieths of a point (equivalent to 1/1440th of an inch).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\noParagraph.SetEqualColumns(2, 720);\n```",
        "name": "twips",
        "longname": "twips",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 204,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/twips.js"
        ],
        "type": {
            "names": [
                "number"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "number"
            }
        }
    },
    {
        "comment": "/**\r\n     * Any valid element which can be added to the document structure.\r\n\t * @typedef {(ApiParagraph | ApiTable | ApiBlockLvlSdt)} DocumentElement\r\n\t * @see office-js-api/Examples/Enumerations/DocumentElement.js\r\n\t */",
        "description": "Any valid element which can be added to the document structure.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\noDocument.AddElement(oParagraph);\n```",
        "name": "DocumentElement",
        "longname": "DocumentElement",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 3987,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/DocumentElement.js"
        ],
        "type": {
            "names": [
                "ApiParagraph",
                "ApiTable",
                "ApiBlockLvlSdt"
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "ApiParagraph"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiTable"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiBlockLvlSdt"
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n     * The style type used for the document element.\r\n\t * @typedef {(\"paragraph\" | \"table\" | \"run\" | \"numbering\")} StyleType\r\n\t * @see office-js-api/Examples/Enumerations/StyleType.js\r\n\t */",
        "description": "The style type used for the document element.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oNormalStyle = oDocument.GetDefaultStyle(\"paragraph\");\n```",
        "name": "StyleType",
        "longname": "StyleType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 3993,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/StyleType.js"
        ],
        "type": {
            "names": [
                "\"paragraph\"",
                "\"table\"",
                "\"run\"",
                "\"numbering\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"paragraph\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"table\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"run\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"numbering\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n     * 240ths of a line.\r\n     * @typedef {number} line240\r\n     * @see office-js-api/Examples/Enumerations/line240.js\r\n\t */",
        "description": "240ths of a line.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\noParaPr.SetSpacingLine(240, \"auto\");\n```",
        "name": "line240",
        "longname": "line240",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 210,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/line240.js"
        ],
        "type": {
            "names": [
                "number"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "number"
            }
        }
    },
    {
        "comment": "/**\r\n     * Half-points (2 half-points = 1 point).\r\n     * @typedef {number} hps\r\n     * @see office-js-api/Examples/Enumerations/hps.js\r\n\t */",
        "description": "Half-points (2 half-points = 1 point).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\noTextPr.SetFontSize(22);\n```",
        "name": "hps",
        "longname": "hps",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 216,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/hps.js"
        ],
        "type": {
            "names": [
                "number"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "number"
            }
        }
    },
    {
        "comment": "/**\r\n     * A numeric value from 0 to 255.\r\n     * @typedef {number} byte\r\n     * @see office-js-api/Examples/Enumerations/byte.js\r\n\t */",
        "description": "A numeric value from 0 to 255.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\n// The resulting color is green, the bytes are measured in decimal numbers:\nvar oRGBColorGreen = Api.CreateRGBColor(0, 255, 0);\n// The resulting color is red, the bytes are measured in hexadecimal numbers:\nvar oRGBColorRed = Api.CreateRGBColor(0xff, 0, 0);\n```",
        "name": "byte",
        "longname": "byte",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 222,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/byte.js"
        ],
        "type": {
            "names": [
                "number"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "number"
            }
        }
    },
    {
        "comment": "/**\r\n     * 60000th of a degree (5400000 = 90 degrees).\r\n     * @typedef {number} PositiveFixedAngle\r\n     * @see office-js-api/Examples/Enumerations/PositiveFixedAngle.js\r\n\t */",
        "description": "60000th of a degree (5400000 = 90 degrees).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oFill = Api.CreateLinearGradientFill([oGs1, oGs2], 5400000);\n```",
        "name": "PositiveFixedAngle",
        "longname": "PositiveFixedAngle",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 228,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/PositiveFixedAngle.js"
        ],
        "type": {
            "names": [
                "number"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "number"
            }
        }
    },
    {
        "comment": "/**\r\n     * A border type.\r\n     * @typedef {(\"none\" | \"single\")} BorderType\r\n     * @see office-js-api/Examples/Enumerations/BorderType.js\r\n\t */",
        "description": "A border type.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\noParaPr.SetBottomBorder(\"single\", 24, 0, 0, 255, 0);\n```",
        "name": "BorderType",
        "longname": "BorderType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 234,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/BorderType.js"
        ],
        "type": {
            "names": [
                "\"none\"",
                "\"single\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"none\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"single\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n\t * A shade type which can be added to the document element.\r\n\t * @typedef {(\"nil\" | \"clear\")} ShdType\r\n\t * @see office-js-api/Examples/Enumerations/ShdType.js\r\n\t */",
        "description": "A shade type which can be added to the document element.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\noTablePr.SetShd(\"clear\", 0, 255, 0, false);\n```",
        "name": "ShdType",
        "longname": "ShdType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4031,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/ShdType.js"
        ],
        "type": {
            "names": [
                "\"nil\"",
                "\"clear\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"nil\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"clear\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n     * Types of custom tab.\r\n     * @typedef {(\"clear\" | \"left\" | \"right\" | \"center\")} TabJc\r\n     * @see office-js-api/Examples/Enumerations/TabJc.js\r\n\t */",
        "description": "Types of custom tab.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\noParaPr.SetTabs([1000, 1500, 3000], [\"center\", \"left\", \"right\"]);\n```",
        "name": "TabJc",
        "longname": "TabJc",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 240,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/TabJc.js"
        ],
        "type": {
            "names": [
                "\"clear\"",
                "\"left\"",
                "\"right\"",
                "\"center\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"clear\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"left\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"right\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"center\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n     * Eighths of a point (24 eighths of a point = 3 points).\r\n     * @typedef {number} pt_8\r\n     * @see office-js-api/Examples/Enumerations/pt_8.js\r\n\t */",
        "description": "Eighths of a point (24 eighths of a point = 3 points).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\noParaPr.SetBottomBorder(\"single\", 48, 0, 0, 255, 0);\n```",
        "name": "pt_8",
        "longname": "pt_8",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 246,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/pt_8.js"
        ],
        "type": {
            "names": [
                "number"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "number"
            }
        }
    },
    {
        "comment": "/**\r\n     * A point.\r\n     * @typedef {number} pt\r\n     * @see office-js-api/Examples/Enumerations/pt.js\r\n\t */",
        "description": "A point.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\noParaPr.SetBottomBorder(\"single\", 24, 1, 0, 255, 0);\n```",
        "name": "pt",
        "longname": "pt",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 252,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/pt.js"
        ],
        "type": {
            "names": [
                "number"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "number"
            }
        }
    },
    {
        "comment": "/**\r\n\t * Header and footer types which can be applied to the document sections.\r\n     * <b>\"default\"</b> - a header or footer which can be applied to any default page.\r\n     * <b>\"title\"</b> - a header or footer which is applied to the title page.\r\n     * <b>\"even\"</b> - a header or footer which can be applied to even pages to distinguish them from the odd ones (which will be considered default).\r\n\t * @typedef {(\"default\" | \"title\" | \"even\")} HdrFtrType\r\n\t * @see office-js-api/Examples/Enumerations/HdrFtrType.js\r\n\t */",
        "description": "Header and footer types which can be applied to the document sections.\r<b>\"default\"</b> - a header or footer which can be applied to any default page.\r<b>\"title\"</b> - a header or footer which is applied to the title page.\r<b>\"even\"</b> - a header or footer which can be applied to even pages to distinguish them from the odd ones (which will be considered default).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oDocContent = oFinalSection.RemoveHeader(\"title\");\n```",
        "name": "HdrFtrType",
        "longname": "HdrFtrType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4055,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/HdrFtrType.js"
        ],
        "type": {
            "names": [
                "\"default\"",
                "\"title\"",
                "\"even\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"default\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"title\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"even\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n\t * The possible values for the units of the width property are defined by a specific table or table cell width property.\r\n     * <b>\"auto\"</b> - sets the table or table cell width to auto width.\r\n     * <b>\"twips\"</b> - sets the table or table cell width to be measured in twentieths of a point.\r\n     * <b>\"nul\"</b> - sets the table or table cell width to be of a zero value.\r\n     * <b>\"percent\"</b> - sets the table or table cell width to be measured in percent to the parent container.\r\n\t * @typedef {(\"auto\" | \"twips\" | \"nul\" | \"percent\")} TableWidth\r\n\t * @see office-js-api/Examples/Enumerations/TableWidth.js\r\n\t */",
        "description": "The possible values for the units of the width property are defined by a specific table or table cell width property.\r<b>\"auto\"</b> - sets the table or table cell width to auto width.\r<b>\"twips\"</b> - sets the table or table cell width to be measured in twentieths of a point.\r<b>\"nul\"</b> - sets the table or table cell width to be of a zero value.\r<b>\"percent\"</b> - sets the table or table cell width to be measured in percent to the parent container.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\noTableCell.SetWidth(\"twips\", 2000);\n```",
        "name": "TableWidth",
        "longname": "TableWidth",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4064,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/TableWidth.js"
        ],
        "type": {
            "names": [
                "\"auto\"",
                "\"twips\"",
                "\"nul\"",
                "\"percent\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"auto\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"twips\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"nul\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"percent\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n\t * This simple type specifies possible values for the table sections to which the current conditional formatting properties will be applied when this selected table style is used.\r\n\t * <b>\"topLeftCell\"</b> - specifies that the table formatting is applied to the top left cell.\r\n\t * <b>\"topRightCell\"</b> - specifies that the table formatting is applied to the top right cell.\r\n\t * <b>\"bottomLeftCell\"</b> - specifies that the table formatting is applied to the bottom left cell.\r\n\t * <b>\"bottomRightCell\"</b> - specifies that the table formatting is applied to the bottom right cell.\r\n\t * <b>\"firstRow\"</b> - specifies that the table formatting is applied to the first row.\r\n\t * <b>\"lastRow\"</b> - specifies that the table formatting is applied to the last row.\r\n\t * <b>\"firstColumn\"</b> - specifies that the table formatting is applied to the first column. Any subsequent row which is in *table header* ({@link ApiTableRowPr#SetTableHeader}) will also use this conditional format.\r\n\t * <b>\"lastColumn\"</b> - specifies that the table formatting is applied to the last column.\r\n\t * <b>\"bandedColumn\"</b> - specifies that the table formatting is applied to odd numbered groupings of rows.\r\n\t * <b>\"bandedColumnEven\"</b> - specifies that the table formatting is applied to even numbered groupings of rows.\r\n\t * <b>\"bandedRow\"</b> - specifies that the table formatting is applied to odd numbered groupings of columns.\r\n\t * <b>\"bandedRowEven\"</b> - specifies that the table formatting is applied to even numbered groupings of columns.\r\n\t * <b>\"wholeTable\"</b> - specifies that the conditional formatting is applied to the whole table.\r\n\t * @typedef {(\"topLeftCell\" | \"topRightCell\" | \"bottomLeftCell\" | \"bottomRightCell\" | \"firstRow\" | \"lastRow\" |\r\n\t *     \"firstColumn\" | \"lastColumn\" | \"bandedColumn\" | \"bandedColumnEven\" | \"bandedRow\" | \"bandedRowEven\" |\r\n\t *     \"wholeTable\")} TableStyleOverrideType\r\n\t * @see office-js-api/Examples/Enumerations/TableStyleOverrideType.js\r\n\t */",
        "description": "This simple type specifies possible values for the table sections to which the current conditional formatting properties will be applied when this selected table style is used.\r<b>\"topLeftCell\"</b> - specifies that the table formatting is applied to the top left cell.\r<b>\"topRightCell\"</b> - specifies that the table formatting is applied to the top right cell.\r<b>\"bottomLeftCell\"</b> - specifies that the table formatting is applied to the bottom left cell.\r<b>\"bottomRightCell\"</b> - specifies that the table formatting is applied to the bottom right cell.\r<b>\"firstRow\"</b> - specifies that the table formatting is applied to the first row.\r<b>\"lastRow\"</b> - specifies that the table formatting is applied to the last row.\r<b>\"firstColumn\"</b> - specifies that the table formatting is applied to the first column. Any subsequent row which is in *table header* ({@link ApiTableRowPr#SetTableHeader}) will also use this conditional format.\r<b>\"lastColumn\"</b> - specifies that the table formatting is applied to the last column.\r<b>\"bandedColumn\"</b> - specifies that the table formatting is applied to odd numbered groupings of rows.\r<b>\"bandedColumnEven\"</b> - specifies that the table formatting is applied to even numbered groupings of rows.\r<b>\"bandedRow\"</b> - specifies that the table formatting is applied to odd numbered groupings of columns.\r<b>\"bandedRowEven\"</b> - specifies that the table formatting is applied to even numbered groupings of columns.\r<b>\"wholeTable\"</b> - specifies that the conditional formatting is applied to the whole table.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\noTableStyle.GetConditionalTableStyle(\"topLeftCell\").GetTableCellPr().SetShd(\"clear\", 255, 0, 0);\n```",
        "name": "TableStyleOverrideType",
        "longname": "TableStyleOverrideType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4074,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/TableStyleOverrideType.js"
        ],
        "type": {
            "names": [
                "\"topLeftCell\"",
                "\"topRightCell\"",
                "\"bottomLeftCell\"",
                "\"bottomRightCell\"",
                "\"firstRow\"",
                "\"lastRow\"",
                "\"firstColumn\"",
                "\"lastColumn\"",
                "\"bandedColumn\"",
                "\"bandedColumnEven\"",
                "\"bandedRow\"",
                "\"bandedRowEven\"",
                "\"wholeTable\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"topLeftCell\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"topRightCell\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bottomLeftCell\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bottomRightCell\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"firstRow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lastRow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"firstColumn\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lastColumn\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bandedColumn\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bandedColumnEven\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bandedRow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bandedRowEven\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"wholeTable\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n\t * The types of elements that can be added to the paragraph structure.\r\n\t * @typedef {(ApiUnsupported | ApiRun | ApiInlineLvlSdt | ApiHyperlink | ApiFormBase)} ParagraphContent\r\n\t * @see office-js-api/Examples/Enumerations/ParagraphContent.js\r\n\t */",
        "description": "The types of elements that can be added to the paragraph structure.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\noParagraph.AddElement(oRun, 0);\n```",
        "name": "ParagraphContent",
        "longname": "ParagraphContent",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4095,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/ParagraphContent.js"
        ],
        "type": {
            "names": [
                "ApiUnsupported",
                "ApiRun",
                "ApiInlineLvlSdt",
                "ApiHyperlink",
                "ApiFormBase"
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "ApiUnsupported"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiRun"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiInlineLvlSdt"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiHyperlink"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiFormBase"
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n\t * The possible values for the base which the relative horizontal positioning of an object will be calculated from.\r\n\t * @typedef {(\"character\" | \"column\" | \"leftMargin\" | \"rightMargin\" | \"margin\" | \"page\")} RelFromH\r\n\t * @see office-js-api/Examples/Enumerations/RelFromH.js\r\n\t */",
        "description": "The possible values for the base which the relative horizontal positioning of an object will be calculated from.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\noDrawing.SetHorAlign(\"page\", \"center\");\n```",
        "name": "RelFromH",
        "longname": "RelFromH",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4101,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/RelFromH.js"
        ],
        "type": {
            "names": [
                "\"character\"",
                "\"column\"",
                "\"leftMargin\"",
                "\"rightMargin\"",
                "\"margin\"",
                "\"page\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"character\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"column\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"leftMargin\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"rightMargin\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"margin\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"page\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n\t * The possible values for the base which the relative vertical positioning of an object will be calculated from.\r\n\t * @typedef {(\"bottomMargin\" | \"topMargin\" | \"margin\" | \"page\" | \"line\" | \"paragraph\")} RelFromV\r\n\t * @see office-js-api/Examples/Enumerations/RelFromV.js\r\n\t */",
        "description": "The possible values for the base which the relative vertical positioning of an object will be calculated from.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\noDrawing.SetVerAlign(\"page\", \"center\");\n```",
        "name": "RelFromV",
        "longname": "RelFromV",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4107,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/RelFromV.js"
        ],
        "type": {
            "names": [
                "\"bottomMargin\"",
                "\"topMargin\"",
                "\"margin\"",
                "\"page\"",
                "\"line\"",
                "\"paragraph\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"bottomMargin\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"topMargin\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"margin\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"page\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"line\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"paragraph\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n     * English measure unit. 1 mm = 36000 EMUs, 1 inch = 914400 EMUs.\r\n     * @typedef {number} EMU\r\n     * @see office-js-api/Examples/Enumerations/EMU.js\r\n\t */",
        "description": "English measure unit. 1 mm = 36000 EMUs, 1 inch = 914400 EMUs.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\noDrawing.SetSize(100 * 36000, 100 * 36000);\n```",
        "name": "EMU",
        "longname": "EMU",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 259,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/EMU.js"
        ],
        "type": {
            "names": [
                "number"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "number"
            }
        }
    },
    {
        "comment": "/**\r\n     * This type specifies the preset shape geometry that will be used for a shape.\r\n     * @typedef {(\"accentBorderCallout1\" | \"accentBorderCallout2\" | \"accentBorderCallout3\" | \"accentCallout1\" | \"accentCallout2\" | \"accentCallout3\" | \"actionButtonBackPrevious\" | \"actionButtonBeginning\" | \"actionButtonBlank\" | \"actionButtonDocument\" | \"actionButtonEnd\" | \"actionButtonForwardNext\" | \"actionButtonHelp\" | \"actionButtonHome\" | \"actionButtonInformation\" | \"actionButtonMovie\" | \"actionButtonReturn\" | \"actionButtonSound\" | \"arc\" | \"bentArrow\" | \"bentConnector2\" | \"bentConnector3\" | \"bentConnector4\" | \"bentConnector5\" | \"bentUpArrow\" | \"bevel\" | \"blockArc\" | \"borderCallout1\" | \"borderCallout2\" | \"borderCallout3\" | \"bracePair\" | \"bracketPair\" | \"callout1\" | \"callout2\" | \"callout3\" | \"can\" | \"chartPlus\" | \"chartStar\" | \"chartX\" | \"chevron\" | \"chord\" | \"circularArrow\" | \"cloud\" | \"cloudCallout\" | \"corner\" | \"cornerTabs\" | \"cube\" | \"curvedConnector2\" | \"curvedConnector3\" | \"curvedConnector4\" | \"curvedConnector5\" | \"curvedDownArrow\" | \"curvedLeftArrow\" | \"curvedRightArrow\" | \"curvedUpArrow\" | \"decagon\" | \"diagStripe\" | \"diamond\" | \"dodecagon\" | \"donut\" | \"doubleWave\" | \"downArrow\" | \"downArrowCallout\" | \"ellipse\" | \"ellipseRibbon\" | \"ellipseRibbon2\" | \"flowChartAlternateProcess\" | \"flowChartCollate\" | \"flowChartConnector\" | \"flowChartDecision\" | \"flowChartDelay\" | \"flowChartDisplay\" | \"flowChartDocument\" | \"flowChartExtract\" | \"flowChartInputOutput\" | \"flowChartInternalStorage\" | \"flowChartMagneticDisk\" | \"flowChartMagneticDrum\" | \"flowChartMagneticTape\" | \"flowChartManualInput\" | \"flowChartManualOperation\" | \"flowChartMerge\" | \"flowChartMultidocument\" | \"flowChartOfflineStorage\" | \"flowChartOffpageConnector\" | \"flowChartOnlineStorage\" | \"flowChartOr\" | \"flowChartPredefinedProcess\" | \"flowChartPreparation\" | \"flowChartProcess\" | \"flowChartPunchedCard\" | \"flowChartPunchedTape\" | \"flowChartSort\" | \"flowChartSummingJunction\" | \"flowChartTerminator\" | \"foldedCorner\" | \"frame\" | \"funnel\" | \"gear6\" | \"gear9\" | \"halfFrame\" | \"heart\" | \"heptagon\" | \"hexagon\" | \"homePlate\" | \"horizontalScroll\" | \"irregularSeal1\" | \"irregularSeal2\" | \"leftArrow\" | \"leftArrowCallout\" | \"leftBrace\" | \"leftBracket\" | \"leftCircularArrow\" | \"leftRightArrow\" | \"leftRightArrowCallout\" | \"leftRightCircularArrow\" | \"leftRightRibbon\" | \"leftRightUpArrow\" | \"leftUpArrow\" | \"lightningBolt\" | \"line\" | \"lineInv\" | \"mathDivide\" | \"mathEqual\" | \"mathMinus\" | \"mathMultiply\" | \"mathNotEqual\" | \"mathPlus\" | \"moon\" | \"nonIsoscelesTrapezoid\" | \"noSmoking\" | \"notchedRightArrow\" | \"octagon\" | \"parallelogram\" | \"pentagon\" | \"pie\" | \"pieWedge\" | \"plaque\" | \"plaqueTabs\" | \"plus\" | \"quadArrow\" | \"quadArrowCallout\" | \"rect\" | \"ribbon\" | \"ribbon2\" | \"rightArrow\" | \"rightArrowCallout\" | \"rightBrace\" | \"rightBracket\" | \"round1Rect\" | \"round2DiagRect\" | \"round2SameRect\" | \"roundRect\" | \"rtTriangle\" | \"smileyFace\" | \"snip1Rect\" | \"snip2DiagRect\" | \"snip2SameRect\" | \"snipRoundRect\" | \"squareTabs\" | \"star10\" | \"star12\" | \"star16\" | \"star24\" | \"star32\" | \"star4\" | \"star5\" | \"star6\" | \"star7\" | \"star8\" | \"straightConnector1\" | \"stripedRightArrow\" | \"sun\" | \"swooshArrow\" | \"teardrop\" | \"trapezoid\" | \"triangle\" | \"upArrowCallout\" | \"upDownArrow\" | \"upDownArrow\" | \"upDownArrowCallout\" | \"uturnArrow\" | \"verticalScroll\" | \"wave\" | \"wedgeEllipseCallout\" | \"wedgeRectCallout\" | \"wedgeRoundRectCallout\")} ShapeType\r\n     * @see office-js-api/Examples/Enumerations/ShapeType.js\r\n\t */",
        "description": "This type specifies the preset shape geometry that will be used for a shape.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oDrawing = Api.CreateShape(\"diamond\", 100 * 36000, 100 * 36000, oFill, oStroke);\n```",
        "name": "ShapeType",
        "longname": "ShapeType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 265,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/ShapeType.js"
        ],
        "type": {
            "names": [
                "\"accentBorderCallout1\"",
                "\"accentBorderCallout2\"",
                "\"accentBorderCallout3\"",
                "\"accentCallout1\"",
                "\"accentCallout2\"",
                "\"accentCallout3\"",
                "\"actionButtonBackPrevious\"",
                "\"actionButtonBeginning\"",
                "\"actionButtonBlank\"",
                "\"actionButtonDocument\"",
                "\"actionButtonEnd\"",
                "\"actionButtonForwardNext\"",
                "\"actionButtonHelp\"",
                "\"actionButtonHome\"",
                "\"actionButtonInformation\"",
                "\"actionButtonMovie\"",
                "\"actionButtonReturn\"",
                "\"actionButtonSound\"",
                "\"arc\"",
                "\"bentArrow\"",
                "\"bentConnector2\"",
                "\"bentConnector3\"",
                "\"bentConnector4\"",
                "\"bentConnector5\"",
                "\"bentUpArrow\"",
                "\"bevel\"",
                "\"blockArc\"",
                "\"borderCallout1\"",
                "\"borderCallout2\"",
                "\"borderCallout3\"",
                "\"bracePair\"",
                "\"bracketPair\"",
                "\"callout1\"",
                "\"callout2\"",
                "\"callout3\"",
                "\"can\"",
                "\"chartPlus\"",
                "\"chartStar\"",
                "\"chartX\"",
                "\"chevron\"",
                "\"chord\"",
                "\"circularArrow\"",
                "\"cloud\"",
                "\"cloudCallout\"",
                "\"corner\"",
                "\"cornerTabs\"",
                "\"cube\"",
                "\"curvedConnector2\"",
                "\"curvedConnector3\"",
                "\"curvedConnector4\"",
                "\"curvedConnector5\"",
                "\"curvedDownArrow\"",
                "\"curvedLeftArrow\"",
                "\"curvedRightArrow\"",
                "\"curvedUpArrow\"",
                "\"decagon\"",
                "\"diagStripe\"",
                "\"diamond\"",
                "\"dodecagon\"",
                "\"donut\"",
                "\"doubleWave\"",
                "\"downArrow\"",
                "\"downArrowCallout\"",
                "\"ellipse\"",
                "\"ellipseRibbon\"",
                "\"ellipseRibbon2\"",
                "\"flowChartAlternateProcess\"",
                "\"flowChartCollate\"",
                "\"flowChartConnector\"",
                "\"flowChartDecision\"",
                "\"flowChartDelay\"",
                "\"flowChartDisplay\"",
                "\"flowChartDocument\"",
                "\"flowChartExtract\"",
                "\"flowChartInputOutput\"",
                "\"flowChartInternalStorage\"",
                "\"flowChartMagneticDisk\"",
                "\"flowChartMagneticDrum\"",
                "\"flowChartMagneticTape\"",
                "\"flowChartManualInput\"",
                "\"flowChartManualOperation\"",
                "\"flowChartMerge\"",
                "\"flowChartMultidocument\"",
                "\"flowChartOfflineStorage\"",
                "\"flowChartOffpageConnector\"",
                "\"flowChartOnlineStorage\"",
                "\"flowChartOr\"",
                "\"flowChartPredefinedProcess\"",
                "\"flowChartPreparation\"",
                "\"flowChartProcess\"",
                "\"flowChartPunchedCard\"",
                "\"flowChartPunchedTape\"",
                "\"flowChartSort\"",
                "\"flowChartSummingJunction\"",
                "\"flowChartTerminator\"",
                "\"foldedCorner\"",
                "\"frame\"",
                "\"funnel\"",
                "\"gear6\"",
                "\"gear9\"",
                "\"halfFrame\"",
                "\"heart\"",
                "\"heptagon\"",
                "\"hexagon\"",
                "\"homePlate\"",
                "\"horizontalScroll\"",
                "\"irregularSeal1\"",
                "\"irregularSeal2\"",
                "\"leftArrow\"",
                "\"leftArrowCallout\"",
                "\"leftBrace\"",
                "\"leftBracket\"",
                "\"leftCircularArrow\"",
                "\"leftRightArrow\"",
                "\"leftRightArrowCallout\"",
                "\"leftRightCircularArrow\"",
                "\"leftRightRibbon\"",
                "\"leftRightUpArrow\"",
                "\"leftUpArrow\"",
                "\"lightningBolt\"",
                "\"line\"",
                "\"lineInv\"",
                "\"mathDivide\"",
                "\"mathEqual\"",
                "\"mathMinus\"",
                "\"mathMultiply\"",
                "\"mathNotEqual\"",
                "\"mathPlus\"",
                "\"moon\"",
                "\"nonIsoscelesTrapezoid\"",
                "\"noSmoking\"",
                "\"notchedRightArrow\"",
                "\"octagon\"",
                "\"parallelogram\"",
                "\"pentagon\"",
                "\"pie\"",
                "\"pieWedge\"",
                "\"plaque\"",
                "\"plaqueTabs\"",
                "\"plus\"",
                "\"quadArrow\"",
                "\"quadArrowCallout\"",
                "\"rect\"",
                "\"ribbon\"",
                "\"ribbon2\"",
                "\"rightArrow\"",
                "\"rightArrowCallout\"",
                "\"rightBrace\"",
                "\"rightBracket\"",
                "\"round1Rect\"",
                "\"round2DiagRect\"",
                "\"round2SameRect\"",
                "\"roundRect\"",
                "\"rtTriangle\"",
                "\"smileyFace\"",
                "\"snip1Rect\"",
                "\"snip2DiagRect\"",
                "\"snip2SameRect\"",
                "\"snipRoundRect\"",
                "\"squareTabs\"",
                "\"star10\"",
                "\"star12\"",
                "\"star16\"",
                "\"star24\"",
                "\"star32\"",
                "\"star4\"",
                "\"star5\"",
                "\"star6\"",
                "\"star7\"",
                "\"star8\"",
                "\"straightConnector1\"",
                "\"stripedRightArrow\"",
                "\"sun\"",
                "\"swooshArrow\"",
                "\"teardrop\"",
                "\"trapezoid\"",
                "\"triangle\"",
                "\"upArrowCallout\"",
                "\"upDownArrow\"",
                "\"upDownArrow\"",
                "\"upDownArrowCallout\"",
                "\"uturnArrow\"",
                "\"verticalScroll\"",
                "\"wave\"",
                "\"wedgeEllipseCallout\"",
                "\"wedgeRectCallout\"",
                "\"wedgeRoundRectCallout\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"accentBorderCallout1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"accentBorderCallout2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"accentBorderCallout3\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"accentCallout1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"accentCallout2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"accentCallout3\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"actionButtonBackPrevious\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"actionButtonBeginning\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"actionButtonBlank\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"actionButtonDocument\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"actionButtonEnd\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"actionButtonForwardNext\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"actionButtonHelp\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"actionButtonHome\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"actionButtonInformation\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"actionButtonMovie\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"actionButtonReturn\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"actionButtonSound\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"arc\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bentArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bentConnector2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bentConnector3\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bentConnector4\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bentConnector5\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bentUpArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bevel\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"blockArc\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"borderCallout1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"borderCallout2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"borderCallout3\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bracePair\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bracketPair\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"callout1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"callout2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"callout3\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"can\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"chartPlus\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"chartStar\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"chartX\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"chevron\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"chord\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"circularArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"cloud\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"cloudCallout\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"corner\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"cornerTabs\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"cube\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"curvedConnector2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"curvedConnector3\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"curvedConnector4\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"curvedConnector5\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"curvedDownArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"curvedLeftArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"curvedRightArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"curvedUpArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"decagon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"diagStripe\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"diamond\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dodecagon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"donut\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"doubleWave\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"downArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"downArrowCallout\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ellipse\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ellipseRibbon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ellipseRibbon2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartAlternateProcess\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartCollate\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartConnector\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartDecision\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartDelay\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartDisplay\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartDocument\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartExtract\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartInputOutput\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartInternalStorage\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartMagneticDisk\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartMagneticDrum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartMagneticTape\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartManualInput\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartManualOperation\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartMerge\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartMultidocument\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartOfflineStorage\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartOffpageConnector\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartOnlineStorage\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartOr\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartPredefinedProcess\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartPreparation\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartProcess\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartPunchedCard\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartPunchedTape\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartSort\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartSummingJunction\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartTerminator\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"foldedCorner\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"frame\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"funnel\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"gear6\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"gear9\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"halfFrame\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"heart\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"heptagon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"hexagon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"homePlate\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"horizontalScroll\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"irregularSeal1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"irregularSeal2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"leftArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"leftArrowCallout\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"leftBrace\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"leftBracket\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"leftCircularArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"leftRightArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"leftRightArrowCallout\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"leftRightCircularArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"leftRightRibbon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"leftRightUpArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"leftUpArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightningBolt\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"line\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lineInv\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mathDivide\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mathEqual\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mathMinus\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mathMultiply\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mathNotEqual\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mathPlus\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"moon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"nonIsoscelesTrapezoid\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noSmoking\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"notchedRightArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"octagon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"parallelogram\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pentagon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pie\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pieWedge\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"plaque\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"plaqueTabs\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"plus\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"quadArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"quadArrowCallout\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"rect\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ribbon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ribbon2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"rightArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"rightArrowCallout\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"rightBrace\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"rightBracket\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"round1Rect\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"round2DiagRect\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"round2SameRect\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"roundRect\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"rtTriangle\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"smileyFace\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"snip1Rect\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"snip2DiagRect\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"snip2SameRect\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"snipRoundRect\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"squareTabs\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"star10\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"star12\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"star16\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"star24\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"star32\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"star4\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"star5\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"star6\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"star7\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"star8\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"straightConnector1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"stripedRightArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"sun\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"swooshArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"teardrop\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"trapezoid\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"triangle\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"upArrowCallout\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"upDownArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"upDownArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"upDownArrowCallout\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"uturnArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"verticalScroll\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"wave\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"wedgeEllipseCallout\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"wedgeRectCallout\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"wedgeRoundRectCallout\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n\t * This type specifies the available chart types which can be used to create a new chart.\r\n\t * @typedef {(\"bar\" | \"barStacked\" | \"barStackedPercent\" | \"bar3D\" | \"barStacked3D\" | \"barStackedPercent3D\" |\r\n\t *     \"barStackedPercent3DPerspective\" | \"horizontalBar\" | \"horizontalBarStacked\" | \"horizontalBarStackedPercent\"\r\n\t *     | \"horizontalBar3D\" | \"horizontalBarStacked3D\" | \"horizontalBarStackedPercent3D\" | \"lineNormal\" |\r\n\t *     \"lineStacked\" | \"lineStackedPercent\" | \"line3D\" | \"pie\" | \"pie3D\" | \"doughnut\" | \"scatter\" | \"stock\" |\r\n\t *     \"area\" | \"areaStacked\" | \"areaStackedPercent\" | \"comboBarLine\" | \"comboBarLineSecondary\" | \"comboCustom\" | \"unknown\")} ChartType\r\n\t * @see office-js-api/Examples/Enumerations/ChartType.js\r\n\t */",
        "description": "This type specifies the available chart types which can be used to create a new chart.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\n// ChartType used in text documents\n// The resulting chart will have a 'bar3D' type:\nvar oChart = Api.CreateChart(\"bar3D\", [[200, 240, 280],[250, 260, 280]], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\n\n// ChartType used in spreadsheets\n// The resulting chart will have a 'bar3D' type:\nvar oChart = oWorksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);\n```",
        "name": "ChartType",
        "longname": "ChartType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4135,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/ChartType.js"
        ],
        "type": {
            "names": [
                "\"bar\"",
                "\"barStacked\"",
                "\"barStackedPercent\"",
                "\"bar3D\"",
                "\"barStacked3D\"",
                "\"barStackedPercent3D\"",
                "\"barStackedPercent3DPerspective\"",
                "\"horizontalBar\"",
                "\"horizontalBarStacked\"",
                "\"horizontalBarStackedPercent\"",
                "\"horizontalBar3D\"",
                "\"horizontalBarStacked3D\"",
                "\"horizontalBarStackedPercent3D\"",
                "\"lineNormal\"",
                "\"lineStacked\"",
                "\"lineStackedPercent\"",
                "\"line3D\"",
                "\"pie\"",
                "\"pie3D\"",
                "\"doughnut\"",
                "\"scatter\"",
                "\"stock\"",
                "\"area\"",
                "\"areaStacked\"",
                "\"areaStackedPercent\"",
                "\"comboBarLine\"",
                "\"comboBarLineSecondary\"",
                "\"comboCustom\"",
                "\"unknown\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"bar\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"barStacked\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"barStackedPercent\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bar3D\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"barStacked3D\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"barStackedPercent3D\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"barStackedPercent3DPerspective\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"horizontalBar\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"horizontalBarStacked\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"horizontalBarStackedPercent\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"horizontalBar3D\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"horizontalBarStacked3D\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"horizontalBarStackedPercent3D\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lineNormal\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lineStacked\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lineStackedPercent\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"line3D\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pie\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pie3D\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"doughnut\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"scatter\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"stock\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"area\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"areaStacked\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"areaStackedPercent\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"comboBarLine\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"comboBarLineSecondary\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"comboCustom\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"unknown\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n\t * This type specifies the type of drawing lock.\r\n\t * @typedef {(\"noGrp\" | \"noUngrp\" | \"noSelect\" | \"noRot\" | \"noChangeAspect\" | \"noMove\" | \"noResize\" | \"noEditPoints\" | \"noAdjustHandles\"\r\n\t * \t| \"noChangeArrowheads\" | \"noChangeShapeType\" | \"noDrilldown\" | \"noTextEdit\" | \"noCrop\" | \"txBox\")} DrawingLockType\r\n\t * @see office-js-api/Examples/Enumerations/DrawingLockType.js\r\n\t */",
        "description": "This type specifies the type of drawing lock.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar bLockValue = oDrawing.GetLockValue(\"noSelect\");\n```",
        "name": "DrawingLockType",
        "longname": "DrawingLockType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4145,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/DrawingLockType.js"
        ],
        "type": {
            "names": [
                "\"noGrp\"",
                "\"noUngrp\"",
                "\"noSelect\"",
                "\"noRot\"",
                "\"noChangeAspect\"",
                "\"noMove\"",
                "\"noResize\"",
                "\"noEditPoints\"",
                "\"noAdjustHandles\"",
                "\"noChangeArrowheads\"",
                "\"noChangeShapeType\"",
                "\"noDrilldown\"",
                "\"noTextEdit\"",
                "\"noCrop\"",
                "\"txBox\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"noGrp\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noUngrp\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noSelect\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noRot\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noChangeAspect\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noMove\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noResize\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noEditPoints\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noAdjustHandles\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noChangeArrowheads\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noChangeShapeType\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noDrilldown\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noTextEdit\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noCrop\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"txBox\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n     * The available text vertical alignment (used to align text in a shape with a placement for text inside it).\r\n     * @typedef {(\"top\" | \"center\" | \"bottom\")} VerticalTextAlign\r\n     * @see office-js-api/Examples/Enumerations/VerticalTextAlign.js\r\n\t */",
        "description": "The available text vertical alignment (used to align text in a shape with a placement for text inside it).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\noDrawing.SetVerticalTextAlign(\"top\");\n```",
        "name": "VerticalTextAlign",
        "longname": "VerticalTextAlign",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 278,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/VerticalTextAlign.js"
        ],
        "type": {
            "names": [
                "\"top\"",
                "\"center\"",
                "\"bottom\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"top\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"center\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bottom\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n     * The available color scheme identifiers.\r\n     * @typedef {(\"accent1\" | \"accent2\" | \"accent3\" | \"accent4\" | \"accent5\" | \"accent6\" | \"bg1\" | \"bg2\" | \"dk1\" | \"dk2\" | \"lt1\" | \"lt2\" | \"tx1\" | \"tx2\")} SchemeColorId\r\n     * @see office-js-api/Examples/Enumerations/SchemeColorId.js\r\n\t */",
        "description": "The available color scheme identifiers.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oSchemeColor = Api.CreateSchemeColor(\"accent2\");\n```",
        "name": "SchemeColorId",
        "longname": "SchemeColorId",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 284,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/SchemeColorId.js"
        ],
        "type": {
            "names": [
                "\"accent1\"",
                "\"accent2\"",
                "\"accent3\"",
                "\"accent4\"",
                "\"accent5\"",
                "\"accent6\"",
                "\"bg1\"",
                "\"bg2\"",
                "\"dk1\"",
                "\"dk2\"",
                "\"lt1\"",
                "\"lt2\"",
                "\"tx1\"",
                "\"tx2\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"accent1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"accent2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"accent3\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"accent4\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"accent5\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"accent6\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bg1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bg2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dk1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dk2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lt1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lt2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"tx1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"tx2\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n     * The available preset color names.\r\n     * @typedef {(\"aliceBlue\" | \"antiqueWhite\" | \"aqua\" | \"aquamarine\" | \"azure\" | \"beige\" | \"bisque\" | \"black\" | \"blanchedAlmond\" | \"blue\" | \"blueViolet\" | \"brown\" | \"burlyWood\" | \"cadetBlue\" | \"chartreuse\" | \"chocolate\" | \"coral\" | \"cornflowerBlue\" | \"cornsilk\" | \"crimson\" | \"cyan\" | \"darkBlue\" | \"darkCyan\" | \"darkGoldenrod\" | \"darkGray\" | \"darkGreen\" | \"darkGrey\" | \"darkKhaki\" | \"darkMagenta\" | \"darkOliveGreen\" | \"darkOrange\" | \"darkOrchid\" | \"darkRed\" | \"darkSalmon\" | \"darkSeaGreen\" | \"darkSlateBlue\" | \"darkSlateGray\" | \"darkSlateGrey\" | \"darkTurquoise\" | \"darkViolet\" | \"deepPink\" | \"deepSkyBlue\" | \"dimGray\" | \"dimGrey\" | \"dkBlue\" | \"dkCyan\" | \"dkGoldenrod\" | \"dkGray\" | \"dkGreen\" | \"dkGrey\" | \"dkKhaki\" | \"dkMagenta\" | \"dkOliveGreen\" | \"dkOrange\" | \"dkOrchid\" | \"dkRed\" | \"dkSalmon\" | \"dkSeaGreen\" | \"dkSlateBlue\" | \"dkSlateGray\" | \"dkSlateGrey\" | \"dkTurquoise\" | \"dkViolet\" | \"dodgerBlue\" | \"firebrick\" | \"floralWhite\" | \"forestGreen\" | \"fuchsia\" | \"gainsboro\" | \"ghostWhite\" | \"gold\" | \"goldenrod\" | \"gray\" | \"green\" | \"greenYellow\" | \"grey\" | \"honeydew\" | \"hotPink\" | \"indianRed\" | \"indigo\" | \"ivory\" | \"khaki\" | \"lavender\" | \"lavenderBlush\" | \"lawnGreen\" | \"lemonChiffon\" | \"lightBlue\" | \"lightCoral\" | \"lightCyan\" | \"lightGoldenrodYellow\" | \"lightGray\" | \"lightGreen\" | \"lightGrey\" | \"lightPink\" | \"lightSalmon\" | \"lightSeaGreen\" | \"lightSkyBlue\" | \"lightSlateGray\" | \"lightSlateGrey\" | \"lightSteelBlue\" | \"lightYellow\" | \"lime\" | \"limeGreen\" | \"linen\" | \"ltBlue\" | \"ltCoral\" | \"ltCyan\" | \"ltGoldenrodYellow\" | \"ltGray\" | \"ltGreen\" | \"ltGrey\" | \"ltPink\" | \"ltSalmon\" | \"ltSeaGreen\" | \"ltSkyBlue\" | \"ltSlateGray\" | \"ltSlateGrey\" | \"ltSteelBlue\" | \"ltYellow\" | \"magenta\" | \"maroon\" | \"medAquamarine\" | \"medBlue\" | \"mediumAquamarine\" | \"mediumBlue\" | \"mediumOrchid\" | \"mediumPurple\" | \"mediumSeaGreen\" | \"mediumSlateBlue\" | \"mediumSpringGreen\" | \"mediumTurquoise\" | \"mediumVioletRed\" | \"medOrchid\" | \"medPurple\" | \"medSeaGreen\" | \"medSlateBlue\" | \"medSpringGreen\" | \"medTurquoise\" | \"medVioletRed\" | \"midnightBlue\" | \"mintCream\" | \"mistyRose\" | \"moccasin\" | \"navajoWhite\" | \"navy\" | \"oldLace\" | \"olive\" | \"oliveDrab\" | \"orange\" | \"orangeRed\" | \"orchid\" | \"paleGoldenrod\" | \"paleGreen\" | \"paleTurquoise\" | \"paleVioletRed\" | \"papayaWhip\" | \"peachPuff\" | \"peru\" | \"pink\" | \"plum\" | \"powderBlue\" | \"purple\" | \"red\" | \"rosyBrown\" | \"royalBlue\" | \"saddleBrown\" | \"salmon\" | \"sandyBrown\" | \"seaGreen\" | \"seaShell\" | \"sienna\" | \"silver\" | \"skyBlue\" | \"slateBlue\" | \"slateGray\" | \"slateGrey\" | \"snow\" | \"springGreen\" | \"steelBlue\" | \"tan\" | \"teal\" | \"thistle\" | \"tomato\" | \"turquoise\" | \"violet\" | \"wheat\" | \"white\" | \"whiteSmoke\" | \"yellow\" | \"yellowGreen\")} PresetColor\r\n     * @see office-js-api/Examples/Enumerations/PresetColor.js\r\n\t */",
        "description": "The available preset color names.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oSchemeColor = Api.CreatePresetColor(\"lightYellow\");\n```",
        "name": "PresetColor",
        "longname": "PresetColor",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 290,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/PresetColor.js"
        ],
        "type": {
            "names": [
                "\"aliceBlue\"",
                "\"antiqueWhite\"",
                "\"aqua\"",
                "\"aquamarine\"",
                "\"azure\"",
                "\"beige\"",
                "\"bisque\"",
                "\"black\"",
                "\"blanchedAlmond\"",
                "\"blue\"",
                "\"blueViolet\"",
                "\"brown\"",
                "\"burlyWood\"",
                "\"cadetBlue\"",
                "\"chartreuse\"",
                "\"chocolate\"",
                "\"coral\"",
                "\"cornflowerBlue\"",
                "\"cornsilk\"",
                "\"crimson\"",
                "\"cyan\"",
                "\"darkBlue\"",
                "\"darkCyan\"",
                "\"darkGoldenrod\"",
                "\"darkGray\"",
                "\"darkGreen\"",
                "\"darkGrey\"",
                "\"darkKhaki\"",
                "\"darkMagenta\"",
                "\"darkOliveGreen\"",
                "\"darkOrange\"",
                "\"darkOrchid\"",
                "\"darkRed\"",
                "\"darkSalmon\"",
                "\"darkSeaGreen\"",
                "\"darkSlateBlue\"",
                "\"darkSlateGray\"",
                "\"darkSlateGrey\"",
                "\"darkTurquoise\"",
                "\"darkViolet\"",
                "\"deepPink\"",
                "\"deepSkyBlue\"",
                "\"dimGray\"",
                "\"dimGrey\"",
                "\"dkBlue\"",
                "\"dkCyan\"",
                "\"dkGoldenrod\"",
                "\"dkGray\"",
                "\"dkGreen\"",
                "\"dkGrey\"",
                "\"dkKhaki\"",
                "\"dkMagenta\"",
                "\"dkOliveGreen\"",
                "\"dkOrange\"",
                "\"dkOrchid\"",
                "\"dkRed\"",
                "\"dkSalmon\"",
                "\"dkSeaGreen\"",
                "\"dkSlateBlue\"",
                "\"dkSlateGray\"",
                "\"dkSlateGrey\"",
                "\"dkTurquoise\"",
                "\"dkViolet\"",
                "\"dodgerBlue\"",
                "\"firebrick\"",
                "\"floralWhite\"",
                "\"forestGreen\"",
                "\"fuchsia\"",
                "\"gainsboro\"",
                "\"ghostWhite\"",
                "\"gold\"",
                "\"goldenrod\"",
                "\"gray\"",
                "\"green\"",
                "\"greenYellow\"",
                "\"grey\"",
                "\"honeydew\"",
                "\"hotPink\"",
                "\"indianRed\"",
                "\"indigo\"",
                "\"ivory\"",
                "\"khaki\"",
                "\"lavender\"",
                "\"lavenderBlush\"",
                "\"lawnGreen\"",
                "\"lemonChiffon\"",
                "\"lightBlue\"",
                "\"lightCoral\"",
                "\"lightCyan\"",
                "\"lightGoldenrodYellow\"",
                "\"lightGray\"",
                "\"lightGreen\"",
                "\"lightGrey\"",
                "\"lightPink\"",
                "\"lightSalmon\"",
                "\"lightSeaGreen\"",
                "\"lightSkyBlue\"",
                "\"lightSlateGray\"",
                "\"lightSlateGrey\"",
                "\"lightSteelBlue\"",
                "\"lightYellow\"",
                "\"lime\"",
                "\"limeGreen\"",
                "\"linen\"",
                "\"ltBlue\"",
                "\"ltCoral\"",
                "\"ltCyan\"",
                "\"ltGoldenrodYellow\"",
                "\"ltGray\"",
                "\"ltGreen\"",
                "\"ltGrey\"",
                "\"ltPink\"",
                "\"ltSalmon\"",
                "\"ltSeaGreen\"",
                "\"ltSkyBlue\"",
                "\"ltSlateGray\"",
                "\"ltSlateGrey\"",
                "\"ltSteelBlue\"",
                "\"ltYellow\"",
                "\"magenta\"",
                "\"maroon\"",
                "\"medAquamarine\"",
                "\"medBlue\"",
                "\"mediumAquamarine\"",
                "\"mediumBlue\"",
                "\"mediumOrchid\"",
                "\"mediumPurple\"",
                "\"mediumSeaGreen\"",
                "\"mediumSlateBlue\"",
                "\"mediumSpringGreen\"",
                "\"mediumTurquoise\"",
                "\"mediumVioletRed\"",
                "\"medOrchid\"",
                "\"medPurple\"",
                "\"medSeaGreen\"",
                "\"medSlateBlue\"",
                "\"medSpringGreen\"",
                "\"medTurquoise\"",
                "\"medVioletRed\"",
                "\"midnightBlue\"",
                "\"mintCream\"",
                "\"mistyRose\"",
                "\"moccasin\"",
                "\"navajoWhite\"",
                "\"navy\"",
                "\"oldLace\"",
                "\"olive\"",
                "\"oliveDrab\"",
                "\"orange\"",
                "\"orangeRed\"",
                "\"orchid\"",
                "\"paleGoldenrod\"",
                "\"paleGreen\"",
                "\"paleTurquoise\"",
                "\"paleVioletRed\"",
                "\"papayaWhip\"",
                "\"peachPuff\"",
                "\"peru\"",
                "\"pink\"",
                "\"plum\"",
                "\"powderBlue\"",
                "\"purple\"",
                "\"red\"",
                "\"rosyBrown\"",
                "\"royalBlue\"",
                "\"saddleBrown\"",
                "\"salmon\"",
                "\"sandyBrown\"",
                "\"seaGreen\"",
                "\"seaShell\"",
                "\"sienna\"",
                "\"silver\"",
                "\"skyBlue\"",
                "\"slateBlue\"",
                "\"slateGray\"",
                "\"slateGrey\"",
                "\"snow\"",
                "\"springGreen\"",
                "\"steelBlue\"",
                "\"tan\"",
                "\"teal\"",
                "\"thistle\"",
                "\"tomato\"",
                "\"turquoise\"",
                "\"violet\"",
                "\"wheat\"",
                "\"white\"",
                "\"whiteSmoke\"",
                "\"yellow\"",
                "\"yellowGreen\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"aliceBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"antiqueWhite\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"aqua\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"aquamarine\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"azure\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"beige\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bisque\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"black\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"blanchedAlmond\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"blue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"blueViolet\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"brown\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"burlyWood\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"cadetBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"chartreuse\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"chocolate\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"coral\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"cornflowerBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"cornsilk\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"crimson\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"cyan\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkCyan\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkGoldenrod\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkGray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkGrey\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkKhaki\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkMagenta\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkOliveGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkOrange\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkOrchid\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkRed\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkSalmon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkSeaGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkSlateBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkSlateGray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkSlateGrey\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkTurquoise\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkViolet\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"deepPink\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"deepSkyBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dimGray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dimGrey\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkCyan\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkGoldenrod\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkGray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkGrey\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkKhaki\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkMagenta\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkOliveGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkOrange\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkOrchid\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkRed\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkSalmon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkSeaGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkSlateBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkSlateGray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkSlateGrey\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkTurquoise\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkViolet\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dodgerBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"firebrick\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"floralWhite\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"forestGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"fuchsia\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"gainsboro\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ghostWhite\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"gold\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"goldenrod\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"gray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"green\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"greenYellow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"grey\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"honeydew\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"hotPink\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"indianRed\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"indigo\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ivory\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"khaki\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lavender\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lavenderBlush\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lawnGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lemonChiffon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightCoral\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightCyan\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightGoldenrodYellow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightGray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightGrey\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightPink\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightSalmon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightSeaGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightSkyBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightSlateGray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightSlateGrey\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightSteelBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightYellow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lime\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"limeGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"linen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltCoral\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltCyan\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltGoldenrodYellow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltGray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltGrey\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltPink\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltSalmon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltSeaGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltSkyBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltSlateGray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltSlateGrey\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltSteelBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltYellow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"magenta\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"maroon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"medAquamarine\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"medBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mediumAquamarine\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mediumBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mediumOrchid\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mediumPurple\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mediumSeaGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mediumSlateBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mediumSpringGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mediumTurquoise\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mediumVioletRed\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"medOrchid\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"medPurple\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"medSeaGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"medSlateBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"medSpringGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"medTurquoise\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"medVioletRed\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"midnightBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mintCream\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mistyRose\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"moccasin\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"navajoWhite\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"navy\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"oldLace\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"olive\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"oliveDrab\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"orange\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"orangeRed\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"orchid\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"paleGoldenrod\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"paleGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"paleTurquoise\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"paleVioletRed\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"papayaWhip\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"peachPuff\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"peru\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pink\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"plum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"powderBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"purple\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"red\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"rosyBrown\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"royalBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"saddleBrown\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"salmon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"sandyBrown\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"seaGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"seaShell\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"sienna\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"silver\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"skyBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"slateBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"slateGray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"slateGrey\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"snow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"springGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"steelBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"tan\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"teal\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"thistle\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"tomato\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"turquoise\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"violet\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"wheat\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"white\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"whiteSmoke\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"yellow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"yellowGreen\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n     * Possible values for the position of chart tick labels (either horizontal or vertical).\r\n     * <b>\"none\"</b> - not display the selected tick labels.\r\n     * <b>\"nextTo\"</b> - set the position of the selected tick labels next to the main label.\r\n     * <b>\"low\"</b> - set the position of the selected tick labels in the part of the chart with lower values.\r\n     * <b>\"high\"</b> - set the position of the selected tick labels in the part of the chart with higher values.\r\n     * @typedef {(\"none\" | \"nextTo\" | \"low\" | \"high\")} TickLabelPosition\r\n     * @see office-js-api/Examples/Enumerations/TickLabelPosition.js\r\n\t */",
        "description": "Possible values for the position of chart tick labels (either horizontal or vertical).\r<b>\"none\"</b> - not display the selected tick labels.\r<b>\"nextTo\"</b> - set the position of the selected tick labels next to the main label.\r<b>\"low\"</b> - set the position of the selected tick labels in the part of the chart with lower values.\r<b>\"high\"</b> - set the position of the selected tick labels in the part of the chart with higher values.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\noChart.SetVertAxisTickLabelPosition(\"nextTo\");\n```",
        "name": "TickLabelPosition",
        "longname": "TickLabelPosition",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 297,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/TickLabelPosition.js"
        ],
        "type": {
            "names": [
                "\"none\"",
                "\"nextTo\"",
                "\"low\"",
                "\"high\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"none\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"nextTo\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"low\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"high\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n     * The type of a fill which uses an image as a background.\r\n     * <b>\"tile\"</b> - if the image is smaller than the shape which is filled, the image will be tiled all over the created shape surface.\r\n     * <b>\"stretch\"</b> - if the image is smaller than the shape which is filled, the image will be stretched to fit the created shape surface.\r\n     * @typedef {\"tile\" | \"stretch\"} BlipFillType\r\n     * @see office-js-api/Examples/Enumerations/BlipFillType.js\r\n\t */",
        "description": "The type of a fill which uses an image as a background.\r<b>\"tile\"</b> - if the image is smaller than the shape which is filled, the image will be tiled all over the created shape surface.\r<b>\"stretch\"</b> - if the image is smaller than the shape which is filled, the image will be stretched to fit the created shape surface.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oFill = Api.CreateBlipFill(\"https://example.com/myimage.png\", \"tile\");\n```",
        "name": "BlipFillType",
        "longname": "BlipFillType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 307,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/BlipFillType.js"
        ],
        "type": {
            "names": [
                "\"tile\"",
                "\"stretch\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"tile\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"stretch\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n     * The available preset patterns which can be used for the fill.\r\n     * @typedef {\"cross\" | \"dashDnDiag\" | \"dashHorz\" | \"dashUpDiag\" | \"dashVert\" | \"diagBrick\" | \"diagCross\" | \"divot\" | \"dkDnDiag\" | \"dkHorz\" | \"dkUpDiag\" | \"dkVert\" | \"dnDiag\" | \"dotDmnd\" | \"dotGrid\" | \"horz\" | \"horzBrick\" | \"lgCheck\" | \"lgConfetti\" | \"lgGrid\" | \"ltDnDiag\" | \"ltHorz\" | \"ltUpDiag\" | \"ltVert\" | \"narHorz\" | \"narVert\" | \"openDmnd\" | \"pct10\" | \"pct20\" | \"pct25\" | \"pct30\" | \"pct40\" | \"pct5\" | \"pct50\" | \"pct60\" | \"pct70\" | \"pct75\" | \"pct80\" | \"pct90\" | \"plaid\" | \"shingle\" | \"smCheck\" | \"smConfetti\" | \"smGrid\" | \"solidDmnd\" | \"sphere\" | \"trellis\" | \"upDiag\" | \"vert\" | \"wave\" | \"wdDnDiag\" | \"wdUpDiag\" | \"weave\" | \"zigZag\"} PatternType\r\n     * @see office-js-api/Examples/Enumerations/PatternType.js\r\n\t */",
        "description": "The available preset patterns which can be used for the fill.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oFill = Api.CreatePatternFill(\"dashDnDiag\", Api.CreateRGBColor(0, 225, 0), Api.CreateRGBColor(255, 0, 0));\n```",
        "name": "PatternType",
        "longname": "PatternType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 315,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/PatternType.js"
        ],
        "type": {
            "names": [
                "\"cross\"",
                "\"dashDnDiag\"",
                "\"dashHorz\"",
                "\"dashUpDiag\"",
                "\"dashVert\"",
                "\"diagBrick\"",
                "\"diagCross\"",
                "\"divot\"",
                "\"dkDnDiag\"",
                "\"dkHorz\"",
                "\"dkUpDiag\"",
                "\"dkVert\"",
                "\"dnDiag\"",
                "\"dotDmnd\"",
                "\"dotGrid\"",
                "\"horz\"",
                "\"horzBrick\"",
                "\"lgCheck\"",
                "\"lgConfetti\"",
                "\"lgGrid\"",
                "\"ltDnDiag\"",
                "\"ltHorz\"",
                "\"ltUpDiag\"",
                "\"ltVert\"",
                "\"narHorz\"",
                "\"narVert\"",
                "\"openDmnd\"",
                "\"pct10\"",
                "\"pct20\"",
                "\"pct25\"",
                "\"pct30\"",
                "\"pct40\"",
                "\"pct5\"",
                "\"pct50\"",
                "\"pct60\"",
                "\"pct70\"",
                "\"pct75\"",
                "\"pct80\"",
                "\"pct90\"",
                "\"plaid\"",
                "\"shingle\"",
                "\"smCheck\"",
                "\"smConfetti\"",
                "\"smGrid\"",
                "\"solidDmnd\"",
                "\"sphere\"",
                "\"trellis\"",
                "\"upDiag\"",
                "\"vert\"",
                "\"wave\"",
                "\"wdDnDiag\"",
                "\"wdUpDiag\"",
                "\"weave\"",
                "\"zigZag\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"cross\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dashDnDiag\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dashHorz\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dashUpDiag\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dashVert\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"diagBrick\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"diagCross\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"divot\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkDnDiag\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkHorz\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkUpDiag\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkVert\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dnDiag\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dotDmnd\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dotGrid\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"horz\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"horzBrick\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lgCheck\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lgConfetti\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lgGrid\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltDnDiag\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltHorz\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltUpDiag\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltVert\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"narHorz\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"narVert\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"openDmnd\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pct10\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pct20\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pct25\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pct30\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pct40\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pct5\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pct50\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pct60\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pct70\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pct75\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pct80\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pct90\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"plaid\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"shingle\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"smCheck\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"smConfetti\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"smGrid\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"solidDmnd\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"sphere\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"trellis\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"upDiag\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"vert\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"wave\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"wdDnDiag\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"wdUpDiag\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"weave\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"zigZag\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n\t *\r\n\t * The lock type of the content control.\r\n\t * @typedef {\"unlocked\" | \"contentLocked\" | \"sdtContentLocked\" | \"sdtLocked\"} SdtLock\r\n\t * @see office-js-api/Examples/Enumerations/SdtLock.js\r\n\t */",
        "description": "The lock type of the content control.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\noInlineLvlSdt.SetLock(\"sdtContentLocked\");\n```",
        "name": "SdtLock",
        "longname": "SdtLock",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4214,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/SdtLock.js"
        ],
        "type": {
            "names": [
                "\"unlocked\"",
                "\"contentLocked\"",
                "\"sdtContentLocked\"",
                "\"sdtLocked\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"unlocked\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"contentLocked\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"sdtContentLocked\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"sdtLocked\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n     * Text transform type.\r\n\t * @typedef {(\"textArchDown\" | \"textArchDownPour\" | \"textArchUp\" | \"textArchUpPour\" | \"textButton\" | \"textButtonPour\" | \"textCanDown\"\r\n\t * | \"textCanUp\" | \"textCascadeDown\" | \"textCascadeUp\" | \"textChevron\" | \"textChevronInverted\" | \"textCircle\" | \"textCirclePour\"\r\n\t * | \"textCurveDown\" | \"textCurveUp\" | \"textDeflate\" | \"textDeflateBottom\" | \"textDeflateInflate\" | \"textDeflateInflateDeflate\" | \"textDeflateTop\"\r\n\t * | \"textDoubleWave1\" | \"textFadeDown\" | \"textFadeLeft\" | \"textFadeRight\" | \"textFadeUp\" | \"textInflate\" | \"textInflateBottom\" | \"textInflateTop\"\r\n\t * | \"textPlain\" | \"textRingInside\" | \"textRingOutside\" | \"textSlantDown\" | \"textSlantUp\" | \"textStop\" | \"textTriangle\" | \"textTriangleInverted\"\r\n\t * | \"textWave1\" | \"textWave2\" | \"textWave4\" | \"textNoShape\")} TextTransform\r\n\t * @see office-js-api/Examples/Enumerations/TextTransform.js\r\n\t */",
        "description": "Text transform type.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oTextArt = Api.CreateWordArt(oTextPr, \"onlyoffice\", \"textArchUp\", oFill, oStroke, 0, 150 * 36000, 50 * 36000);\n```",
        "name": "TextTransform",
        "longname": "TextTransform",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 329,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/TextTransform.js"
        ],
        "type": {
            "names": [
                "\"textArchDown\"",
                "\"textArchDownPour\"",
                "\"textArchUp\"",
                "\"textArchUpPour\"",
                "\"textButton\"",
                "\"textButtonPour\"",
                "\"textCanDown\"",
                "\"textCanUp\"",
                "\"textCascadeDown\"",
                "\"textCascadeUp\"",
                "\"textChevron\"",
                "\"textChevronInverted\"",
                "\"textCircle\"",
                "\"textCirclePour\"",
                "\"textCurveDown\"",
                "\"textCurveUp\"",
                "\"textDeflate\"",
                "\"textDeflateBottom\"",
                "\"textDeflateInflate\"",
                "\"textDeflateInflateDeflate\"",
                "\"textDeflateTop\"",
                "\"textDoubleWave1\"",
                "\"textFadeDown\"",
                "\"textFadeLeft\"",
                "\"textFadeRight\"",
                "\"textFadeUp\"",
                "\"textInflate\"",
                "\"textInflateBottom\"",
                "\"textInflateTop\"",
                "\"textPlain\"",
                "\"textRingInside\"",
                "\"textRingOutside\"",
                "\"textSlantDown\"",
                "\"textSlantUp\"",
                "\"textStop\"",
                "\"textTriangle\"",
                "\"textTriangleInverted\"",
                "\"textWave1\"",
                "\"textWave2\"",
                "\"textWave4\"",
                "\"textNoShape\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"textArchDown\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textArchDownPour\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textArchUp\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textArchUpPour\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textButton\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textButtonPour\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textCanDown\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textCanUp\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textCascadeDown\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textCascadeUp\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textChevron\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textChevronInverted\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textCircle\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textCirclePour\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textCurveDown\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textCurveUp\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textDeflate\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textDeflateBottom\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textDeflateInflate\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textDeflateInflateDeflate\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textDeflateTop\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textDoubleWave1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textFadeDown\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textFadeLeft\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textFadeRight\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textFadeUp\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textInflate\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textInflateBottom\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textInflateTop\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textPlain\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textRingInside\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textRingOutside\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textSlantDown\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textSlantUp\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textStop\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textTriangle\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textTriangleInverted\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textWave1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textWave2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textWave4\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textNoShape\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n\t * Form type.\r\n\t * The available form types.\r\n\t * @typedef {\"textForm\" | \"comboBoxForm\" | \"dropDownForm\" | \"checkBoxForm\" | \"radioButtonForm\" | \"pictureForm\"} FormType\r\n\t * @see office-js-api/Examples/Enumerations/FormType.js\r\n\t */",
        "description": "Form type.\rThe available form types.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar sFormType = oTextForm.GetFormType();\n```",
        "name": "FormType",
        "longname": "FormType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4232,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/FormType.js"
        ],
        "type": {
            "names": [
                "\"textForm\"",
                "\"comboBoxForm\"",
                "\"dropDownForm\"",
                "\"checkBoxForm\"",
                "\"radioButtonForm\"",
                "\"pictureForm\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"textForm\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"comboBoxForm\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dropDownForm\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"checkBoxForm\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"radioButtonForm\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pictureForm\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n\t * 1 millimetre equals 1/10th of a centimetre.\r\n\t * @typedef {number} mm\r\n\t * @see office-js-api/Examples/Enumerations/mm.js\r\n\t */",
        "description": "1 millimetre equals 1/10th of a centimetre.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\noTextForm.SetCellWidth(7);\n```",
        "name": "mm",
        "longname": "mm",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4239,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/mm.js"
        ],
        "type": {
            "names": [
                "number"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "number"
            }
        }
    },
    {
        "comment": "/**\r\n\t * The condition to scale an image in the picture form.\r\n\t * @typedef {\"always\" | \"never\" | \"tooBig\" | \"tooSmall\"} ScaleFlag\r\n\t * @see office-js-api/Examples/Enumerations/ScaleFlag.js\r\n\t */",
        "description": "The condition to scale an image in the picture form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\noPictureForm.SetScaleFlag(\"tooBig\");\n```",
        "name": "ScaleFlag",
        "longname": "ScaleFlag",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4245,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/ScaleFlag.js"
        ],
        "type": {
            "names": [
                "\"always\"",
                "\"never\"",
                "\"tooBig\"",
                "\"tooSmall\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"always\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"never\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"tooBig\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"tooSmall\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n\t * Value from 0 to 100.\r\n\t * @typedef {number} percentage\r\n\t * @see office-js-api/Examples/Enumerations/percentage.js\r\n\t */",
        "description": "Value from 0 to 100.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\noPictureForm.SetPicturePosition(70, 70);\n```",
        "name": "percentage",
        "longname": "percentage",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4251,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/percentage.js"
        ],
        "type": {
            "names": [
                "number"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "number"
            }
        }
    },
    {
        "comment": "/**\r\n\t * Available highlight colors.\r\n\t * @typedef {\"black\" | \"blue\" | \"cyan\" | \"green\" | \"magenta\" | \"red\" | \"yellow\" | \"white\" | \"darkBlue\" |\r\n\t * \"darkCyan\" | \"darkGreen\" | \"darkMagenta\" | \"darkRed\" | \"darkYellow\" | \"darkGray\" | \"lightGray\" | \"none\"} highlightColor\r\n\t * @see office-js-api/Examples/Enumerations/highlightColor.js\r\n\t */",
        "description": "Available highlight colors.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\noParagraph.SetHighlight(\"green\");\n```",
        "name": "highlightColor",
        "longname": "highlightColor",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4257,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/highlightColor.js"
        ],
        "type": {
            "names": [
                "\"black\"",
                "\"blue\"",
                "\"cyan\"",
                "\"green\"",
                "\"magenta\"",
                "\"red\"",
                "\"yellow\"",
                "\"white\"",
                "\"darkBlue\"",
                "\"darkCyan\"",
                "\"darkGreen\"",
                "\"darkMagenta\"",
                "\"darkRed\"",
                "\"darkYellow\"",
                "\"darkGray\"",
                "\"lightGray\"",
                "\"none\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"black\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"blue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"cyan\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"green\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"magenta\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"red\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"yellow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"white\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkCyan\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkMagenta\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkRed\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkYellow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkGray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightGray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"none\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n\t * Available values of the \"numbered\" reference type:\r\n\t * <b>\"pageNum\"</b> - the numbered item page number;\r\n     * <b>\"paraNum\"</b> - the numbered item paragraph number;\r\n\t * <b>\"noCtxParaNum\"</b> - the abbreviated paragraph number (the specific item only, e.g. instead of \"4.1.1\" you refer to \"1\" only);\r\n     * <b>\"fullCtxParaNum\"</b> - the full paragraph number, e.g. \"4.1.1\";\r\n\t * <b>\"text\"</b> - the paragraph text value, e.g. if you have \"4.1.1. Terms and Conditions\", you refer to \"Terms and Conditions\" only;\r\n     * <b>\"aboveBelow\"</b> - the words \"above\" or \"below\" depending on the item position.\r\n\t * @typedef {\"pageNum\" | \"paraNum\" | \"noCtxParaNum\" | \"fullCtxParaNum\" | \"text\" | \"aboveBelow\"} numberedRefTo\r\n\t * @see office-js-api/Examples/Enumerations/numberedRefTo.js\r\n\t */",
        "description": "Available values of the \"numbered\" reference type:\r<b>\"pageNum\"</b> - the numbered item page number;\r<b>\"paraNum\"</b> - the numbered item paragraph number;\r<b>\"noCtxParaNum\"</b> - the abbreviated paragraph number (the specific item only, e.g. instead of \"4.1.1\" you refer to \"1\" only);\r<b>\"fullCtxParaNum\"</b> - the full paragraph number, e.g. \"4.1.1\";\r<b>\"text\"</b> - the paragraph text value, e.g. if you have \"4.1.1. Terms and Conditions\", you refer to \"Terms and Conditions\" only;\r<b>\"aboveBelow\"</b> - the words \"above\" or \"below\" depending on the item position.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\noParagraph.AddNumberedCrossRef(\"pageNum\", oNumberedParagraph, true, true);\n```",
        "name": "numberedRefTo",
        "longname": "numberedRefTo",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4270,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/numberedRefTo.js"
        ],
        "type": {
            "names": [
                "\"pageNum\"",
                "\"paraNum\"",
                "\"noCtxParaNum\"",
                "\"fullCtxParaNum\"",
                "\"text\"",
                "\"aboveBelow\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"pageNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"paraNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noCtxParaNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"fullCtxParaNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"text\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"aboveBelow\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n\t * Available values of the \"heading\" reference type:\r\n\t * <b>\"text\"</b> - the entire heading text;\r\n\t * <b>\"pageNum\"</b> - the heading page number;\r\n     * <b>\"headingNum\"</b> - the heading sequence number;\r\n\t * <b>\"noCtxHeadingNum\"</b> - the abbreviated heading number. Make sure the cursor pointer is in the section you are referencing to, e.g. you are in section 4 and you wish to refer to heading 4.B, so instead of \"4.B\" you receive \"B\" only;\r\n     * <b>\"fullCtxHeadingNum\"</b> - the full heading number even if the cursor pointer is in the same section;\r\n     * <b>\"aboveBelow\"</b> - the words \"above\" or \"below\" depending on the item position.\r\n\t * @typedef {\"text\" | \"pageNum\" | \"headingNum\" | \"noCtxHeadingNum\" | \"fullCtxHeadingNum\" | \"aboveBelow\"} headingRefTo\r\n\t * @see office-js-api/Examples/Enumerations/headingRefTo.js\r\n\t */",
        "description": "Available values of the \"heading\" reference type:\r<b>\"text\"</b> - the entire heading text;\r<b>\"pageNum\"</b> - the heading page number;\r<b>\"headingNum\"</b> - the heading sequence number;\r<b>\"noCtxHeadingNum\"</b> - the abbreviated heading number. Make sure the cursor pointer is in the section you are referencing to, e.g. you are in section 4 and you wish to refer to heading 4.B, so instead of \"4.B\" you receive \"B\" only;\r<b>\"fullCtxHeadingNum\"</b> - the full heading number even if the cursor pointer is in the same section;\r<b>\"aboveBelow\"</b> - the words \"above\" or \"below\" depending on the item position.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\noParagraph.AddHeadingCrossRef(\"pageNum\", oHeadingParagraph);\n```",
        "name": "headingRefTo",
        "longname": "headingRefTo",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4282,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/headingRefTo.js"
        ],
        "type": {
            "names": [
                "\"text\"",
                "\"pageNum\"",
                "\"headingNum\"",
                "\"noCtxHeadingNum\"",
                "\"fullCtxHeadingNum\"",
                "\"aboveBelow\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"text\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pageNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"headingNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noCtxHeadingNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"fullCtxHeadingNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"aboveBelow\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n\t * Available values of the \"bookmark\" reference type:\r\n\t * <b>\"text\"</b> - the entire bookmark text;\r\n\t * <b>\"pageNum\"</b> - the bookmark page number;\r\n     * <b>\"paraNum\"</b> - the bookmark paragraph number;\r\n\t * <b>\"noCtxParaNum\"</b> - the abbreviated paragraph number (the specific item only, e.g. instead of \"4.1.1\" you refer to \"1\" only);\r\n     * <b>\"fullCtxParaNum</b> - the full paragraph number, e.g. \"4.1.1\";\r\n     * <b>\"aboveBelow\"</b> - the words \"above\" or \"below\" depending on the item position.\r\n\t * @typedef {\"text\" | \"pageNum\" | \"paraNum\" | \"noCtxParaNum\" | \"fullCtxParaNum\" | \"aboveBelow\"} bookmarkRefTo\r\n\t * @see office-js-api/Examples/Enumerations/bookmarkRefTo.js\r\n\t */",
        "description": "Available values of the \"bookmark\" reference type:\r<b>\"text\"</b> - the entire bookmark text;\r<b>\"pageNum\"</b> - the bookmark page number;\r<b>\"paraNum\"</b> - the bookmark paragraph number;\r<b>\"noCtxParaNum\"</b> - the abbreviated paragraph number (the specific item only, e.g. instead of \"4.1.1\" you refer to \"1\" only);\r<b>\"fullCtxParaNum</b> - the full paragraph number, e.g. \"4.1.1\";\r<b>\"aboveBelow\"</b> - the words \"above\" or \"below\" depending on the item position.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\noParagraph.AddBookmarkCrossRef(\"pageNum\", sBookmark);\n```",
        "name": "bookmarkRefTo",
        "longname": "bookmarkRefTo",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4294,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/bookmarkRefTo.js"
        ],
        "type": {
            "names": [
                "\"text\"",
                "\"pageNum\"",
                "\"paraNum\"",
                "\"noCtxParaNum\"",
                "\"fullCtxParaNum\"",
                "\"aboveBelow\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"text\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pageNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"paraNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noCtxParaNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"fullCtxParaNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"aboveBelow\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n\t * Available values of the \"footnote\" reference type:\r\n\t * <b>\"footnoteNum\"</b> - the footnote number;\r\n\t * <b>\"pageNum\"</b> - the page number of the footnote;\r\n     * <b>\"aboveBelow\"</b> - the words \"above\" or \"below\" depending on the position of the item;\r\n\t * <b>\"formFootnoteNum\"</b> - the form number formatted as a footnote. The numbering of the actual footnotes is not affected.\r\n\t * @typedef {\"footnoteNum\" | \"pageNum\" | \"aboveBelow\" | \"formFootnoteNum\"} footnoteRefTo\r\n\t * @see office-js-api/Examples/Enumerations/footnoteRefTo.js\r\n\t */",
        "description": "Available values of the \"footnote\" reference type:\r<b>\"footnoteNum\"</b> - the footnote number;\r<b>\"pageNum\"</b> - the page number of the footnote;\r<b>\"aboveBelow\"</b> - the words \"above\" or \"below\" depending on the position of the item;\r<b>\"formFootnoteNum\"</b> - the form number formatted as a footnote. The numbering of the actual footnotes is not affected.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\noParagraph.AddFootnoteCrossRef(\"pageNum\", oFootnoteParagraph);\n```",
        "name": "footnoteRefTo",
        "longname": "footnoteRefTo",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4306,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/footnoteRefTo.js"
        ],
        "type": {
            "names": [
                "\"footnoteNum\"",
                "\"pageNum\"",
                "\"aboveBelow\"",
                "\"formFootnoteNum\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"footnoteNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pageNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"aboveBelow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"formFootnoteNum\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n\t * Available values of the \"endnote\" reference type:\r\n\t * <b>\"endnoteNum\"</b> - the endnote number;\r\n\t * <b>\"pageNum\"</b> - the endnote page number;\r\n     * <b>\"aboveBelow\"</b> - the words \"above\" or \"below\" depending on the item position;\r\n\t * <b>\"formEndnoteNum\"</b> - the form number formatted as an endnote. The numbering of the actual endnotes is not affected.\r\n\t * @typedef {\"endnoteNum\" | \"pageNum\" | \"aboveBelow\" | \"formEndnoteNum\"} endnoteRefTo\r\n\t * @see office-js-api/Examples/Enumerations/endnoteRefTo.js\r\n\t */",
        "description": "Available values of the \"endnote\" reference type:\r<b>\"endnoteNum\"</b> - the endnote number;\r<b>\"pageNum\"</b> - the endnote page number;\r<b>\"aboveBelow\"</b> - the words \"above\" or \"below\" depending on the item position;\r<b>\"formEndnoteNum\"</b> - the form number formatted as an endnote. The numbering of the actual endnotes is not affected.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\noParagraph.AddEndnoteCrossRef(\"pageNum\", oEndnoteParagraph);\n```",
        "name": "endnoteRefTo",
        "longname": "endnoteRefTo",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4316,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/endnoteRefTo.js"
        ],
        "type": {
            "names": [
                "\"endnoteNum\"",
                "\"pageNum\"",
                "\"aboveBelow\"",
                "\"formEndnoteNum\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"endnoteNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pageNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"aboveBelow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"formEndnoteNum\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n\t * Available values of the \"equation\"/\"figure\"/\"table\" reference type:\r\n\t * <b>\"entireCaption\"</b>- the entire caption text;\r\n\t * <b>\"labelNumber\"</b> - the label and object number only, e.g. \"Table 1.1\";\r\n     * <b>\"captionText\"</b> - the caption text only;\r\n\t * <b>\"pageNum\"</b> - the page number containing the referenced object;\r\n\t * <b>\"aboveBelow\"</b> - the words \"above\" or \"below\" depending on the item position.\r\n\t * @typedef {\"entireCaption\" | \"labelNumber\" | \"captionText\" | \"pageNum\" | \"aboveBelow\"} captionRefTo\r\n\t * @see office-js-api/Examples/Enumerations/captionRefTo.js\r\n\t */",
        "description": "Available values of the \"equation\"/\"figure\"/\"table\" reference type:\r<b>\"entireCaption\"</b>- the entire caption text;\r<b>\"labelNumber\"</b> - the label and object number only, e.g. \"Table 1.1\";\r<b>\"captionText\"</b> - the caption text only;\r<b>\"pageNum\"</b> - the page number containing the referenced object;\r<b>\"aboveBelow\"</b> - the words \"above\" or \"below\" depending on the item position.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\noParagraph.AddCaptionCrossRef(\"table\", \"pageNum\", oCaptionParagraph);\n```",
        "name": "captionRefTo",
        "longname": "captionRefTo",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4326,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/captionRefTo.js"
        ],
        "type": {
            "names": [
                "\"entireCaption\"",
                "\"labelNumber\"",
                "\"captionText\"",
                "\"pageNum\"",
                "\"aboveBelow\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"entireCaption\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"labelNumber\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"captionText\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pageNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"aboveBelow\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n\t * Axis position in the chart.\r\n\t * @typedef {(\"top\" | \"bottom\" | \"right\" | \"left\")} AxisPos\r\n\t * @see office-js-api/Examples/Enumerations/AxisPos.js\r\n\t */",
        "description": "Axis position in the chart.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\noChart.SetAxieNumFormat(\"top\", \"0.00\");\n```",
        "name": "AxisPos",
        "longname": "AxisPos",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 340,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/AxisPos.js"
        ],
        "type": {
            "names": [
                "\"top\"",
                "\"bottom\"",
                "\"right\"",
                "\"left\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"top\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bottom\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"right\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"left\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n\t * Standard numeric format.\r\n\t * @typedef {(\"General\" | \"0\" | \"0.00\" | \"#,##0\" | \"#,##0.00\" | \"0%\" | \"0.00%\" |\r\n\t * \"0.00E+00\" | \"# ?/?\" | \"# ??/??\" | \"m/d/yyyy\" | \"d-mmm-yy\" | \"d-mmm\" | \"mmm-yy\" | \"h:mm AM/PM\" |\r\n\t * \"h:mm:ss AM/PM\" | \"h:mm\" | \"h:mm:ss\" | \"m/d/yyyy h:mm\" | \"#,##0_);(#,##0)\" | \"#,##0_);[Red](#,##0)\" | \r\n\t * \"#,##0.00_);(#,##0.00)\" | \"#,##0.00_);[Red](#,##0.00)\" | \"mm:ss\" | \"[h]:mm:ss\" | \"mm:ss.0\" | \"##0.0E+0\" | \"@\")} NumFormat\r\n\t * @see office-js-api/Examples/Enumerations/NumFormat.js\r\n\t */",
        "description": "Standard numeric format.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\noWorksheet.GetRange(\"A1\").SetOrientation(\"xlUpward\");\n```",
        "name": "NumFormat",
        "longname": "NumFormat",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 346,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/NumFormat.js"
        ],
        "type": {
            "names": [
                "\"General\"",
                "\"0\"",
                "\"0.00\"",
                "\"#,##0\"",
                "\"#,##0.00\"",
                "\"0%\"",
                "\"0.00%\"",
                "\"0.00E+00\"",
                "\"# ?/?\"",
                "\"# ??/??\"",
                "\"m/d/yyyy\"",
                "\"d-mmm-yy\"",
                "\"d-mmm\"",
                "\"mmm-yy\"",
                "\"h:mm AM/PM\"",
                "\"h:mm:ss AM/PM\"",
                "\"h:mm\"",
                "\"h:mm:ss\"",
                "\"m/d/yyyy h:mm\"",
                "\"#,##0_);(#,##0)\"",
                "\"#,##0_);[Red](#,##0)\"",
                "\"#,##0.00_);(#,##0.00)\"",
                "\"#,##0.00_);[Red](#,##0.00)\"",
                "\"mm:ss\"",
                "\"[h]:mm:ss\"",
                "\"mm:ss.0\"",
                "\"##0.0E+0\"",
                "\"@\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"General\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"0\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"0.00\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"#,##0\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"#,##0.00\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"0%\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"0.00%\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"0.00E+00\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"# ?/?\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"# ??/??\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"m/d/yyyy\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"d-mmm-yy\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"d-mmm\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mmm-yy\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"h:mm AM/PM\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"h:mm:ss AM/PM\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"h:mm\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"h:mm:ss\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"m/d/yyyy h:mm\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"#,##0_);(#,##0)\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"#,##0_);[Red](#,##0)\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"#,##0.00_);(#,##0.00)\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"#,##0.00_);[Red](#,##0.00)\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mm:ss\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"[h]:mm:ss\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mm:ss.0\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"##0.0E+0\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"@\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n\t * Types of all supported forms.\r\n\t * @typedef {ApiTextForm | ApiComboBoxForm | ApiCheckBoxForm | ApiPictureForm | ApiDateForm | ApiComplexForm} ApiForm\r\n\t * @see office-js-api/Examples/Enumerations/ApiForm.js\r\n\t */",
        "description": "Types of all supported forms.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oCopyTextForm = oTextForm.Copy();\n```",
        "name": "ApiForm",
        "longname": "ApiForm",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4354,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/ApiForm.js"
        ],
        "type": {
            "names": [
                "ApiTextForm",
                "ApiComboBoxForm",
                "ApiCheckBoxForm",
                "ApiPictureForm",
                "ApiDateForm",
                "ApiComplexForm"
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "ApiTextForm"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiComboBoxForm"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiCheckBoxForm"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiPictureForm"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiDateForm"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiComplexForm"
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n     * Possible values for the caption numbering format.\r\n     * <b>\"ALPHABETIC\"</b> - upper letter.\r\n     * <b>\"alphabetic\"</b> - lower letter.\r\n     * <b>\"Roman\"</b> - upper Roman.\r\n     * <b>\"roman\"</b> - lower Roman.\r\n\t * <b>\"Arabic\"</b> - arabic.\r\n\t * @typedef {(\"ALPHABETIC\" | \"alphabetic\" | \"Roman\" | \"roman\" | \"Arabic\")} CaptionNumberingFormat\r\n\t * @see office-js-api/Examples/Enumerations/CaptionNumberingFormat.js\r\n\t */",
        "description": "Possible values for the caption numbering format.\r<b>\"ALPHABETIC\"</b> - upper letter.\r<b>\"alphabetic\"</b> - lower letter.\r<b>\"Roman\"</b> - upper Roman.\r<b>\"roman\"</b> - lower Roman.\r<b>\"Arabic\"</b> - arabic.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\noParagraph.AddCaption(\"\", \"Figure\", false, \"Arabic\", false, undefined, \"hyphen\");\n```",
        "name": "CaptionNumberingFormat",
        "longname": "CaptionNumberingFormat",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4360,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/CaptionNumberingFormat.js"
        ],
        "type": {
            "names": [
                "\"ALPHABETIC\"",
                "\"alphabetic\"",
                "\"Roman\"",
                "\"roman\"",
                "\"Arabic\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"ALPHABETIC\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"alphabetic\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Roman\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"roman\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Arabic\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n     * Possible values for the caption separator.\r\n     * <b>\"hyphen\"</b> - the \"-\" punctuation mark.\r\n     * <b>\"period\"</b> - the \".\" punctuation mark.\r\n     * <b>\"colon\"</b> - the \":\" punctuation mark.\r\n     * <b>\"longDash\"</b> - the \"—\" punctuation mark.\r\n\t * <b>\"dash\"</b> - the \"-\" punctuation mark.\r\n\t * @typedef {(\"hyphen\" | \"period\" | \"colon\" | \"longDash\" | \"dash\")} CaptionSep\r\n\t * @see office-js-api/Examples/Enumerations/CaptionSep.js\r\n\t */",
        "description": "Possible values for the caption separator.\r<b>\"hyphen\"</b> - the \"-\" punctuation mark.\r<b>\"period\"</b> - the \".\" punctuation mark.\r<b>\"colon\"</b> - the \":\" punctuation mark.\r<b>\"longDash\"</b> - the \"—\" punctuation mark.\r<b>\"dash\"</b> - the \"-\" punctuation mark.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\noParagraph.AddCaption(\"\", \"Figure\", false, \"Arabic\", false, undefined, \"hyphen\");\n```",
        "name": "CaptionSep",
        "longname": "CaptionSep",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4371,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/CaptionSep.js"
        ],
        "type": {
            "names": [
                "\"hyphen\"",
                "\"period\"",
                "\"colon\"",
                "\"longDash\"",
                "\"dash\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"hyphen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"period\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"colon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"longDash\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dash\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n     * Possible values for the caption label.\r\n     * @typedef {(\"Table\" | \"Equation\" | \"Figure\")} CaptionLabel\r\n\t * @see office-js-api/Examples/Enumerations/CaptionLabel.js\r\n\t */",
        "description": "Possible values for the caption label.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\noParagraph.AddCaptionCrossRef(\"Table\", \"pageNum\", oCaptionParagraph);\n```",
        "name": "CaptionLabel",
        "longname": "CaptionLabel",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4382,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/CaptionLabel.js"
        ],
        "type": {
            "names": [
                "\"Table\"",
                "\"Equation\"",
                "\"Figure\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"Table\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Equation\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Figure\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n\t * Table of contents properties.\r\n\t * @typedef {Object} TocPr\r\n\t * @property {boolean} [ShowPageNums=true] - Specifies whether to show page numbers in the table of contents.\r\n\t * @property {boolean} [RightAlgn=true] - Specifies whether to right-align page numbers in the table of contents.\r\n\t * @property {TocLeader} [LeaderType=\"dot\"] - The leader type in the table of contents.\r\n\t * @property {boolean} [FormatAsLinks=true] - Specifies whether to format the table of contents as links.\r\n\t * @property {TocBuildFromPr} [BuildFrom={OutlineLvls=9}] - Specifies whether to generate the table of contents from the outline levels or the specified styles.\r\n\t * @property {TocStyle} [TocStyle=\"standard\"] - The table of contents style type.\r\n\t * @see office-js-api/Examples/Enumerations/TocPr.js\r\n\t */",
        "description": "Table of contents properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oTocPr = {\"ShowPageNums\": true, \"RightAlgn\": true, \"LeaderType\": \"dot\", \"FormatAsLinks\": true, \"BuildFrom\": {\"OutlineLvls\": 9}, \"TocStyle\": \"standard\"};\noDocument.AddTableOfContents(oTocPr);\n```",
        "name": "TocPr",
        "longname": "TocPr",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4388,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "ShowPageNums",
                "description": "Specifies whether to show page numbers in the table of contents.",
                "optional": true,
                "defaultvalue": true
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "RightAlgn",
                "description": "Specifies whether to right-align page numbers in the table of contents.",
                "optional": true,
                "defaultvalue": true
            },
            {
                "type": {
                    "names": [
                        "TocLeader"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "TocLeader"
                    }
                },
                "name": "LeaderType",
                "description": "The leader type in the table of contents.",
                "optional": true,
                "defaultvalue": "\"dot\""
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "FormatAsLinks",
                "description": "Specifies whether to format the table of contents as links.",
                "optional": true,
                "defaultvalue": true
            },
            {
                "type": {
                    "names": [
                        "TocBuildFromPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "TocBuildFromPr"
                    }
                },
                "name": "BuildFrom",
                "description": "Specifies whether to generate the table of contents from the outline levels or the specified styles.",
                "optional": true,
                "defaultvalue": "{OutlineLvls=9}"
            },
            {
                "type": {
                    "names": [
                        "TocStyle"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "TocStyle"
                    }
                },
                "name": "TocStyle",
                "description": "The table of contents style type.",
                "optional": true,
                "defaultvalue": "\"standard\""
            }
        ],
        "see": [
            "office-js-api/Examples/Enumerations/TocPr.js"
        ],
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        }
    },
    {
        "comment": "/**\r\n\t * Table of figures properties.\r\n\t * @typedef {Object} TofPr\r\n\t * @property {boolean} [ShowPageNums=true] - Specifies whether to show page numbers in the table of figures.\r\n\t * @property {boolean} [RightAlgn=true] - Specifies whether to right-align page numbers in the table of figures.\r\n\t * @property {TocLeader} [LeaderType=\"dot\"] - The leader type in the table of figures.\r\n\t * @property {boolean} [FormatAsLinks=true] - Specifies whether to format the table of figures as links.\r\n\t * @property {CaptionLabel | string} [BuildFrom=\"Figure\"] - Specifies whether to generate the table of figures based on the specified caption label or the paragraph style name used (for example, \"Heading 1\").\r\n\t * @property {boolean} [LabelNumber=true] - Specifies whether to include the label and number in the table of figures.\r\n\t * @property {TofStyle} [TofStyle=\"distinctive\"] - The table of figures style type.\r\n\t * @see office-js-api/Examples/Enumerations/TofPr.js\r\n\t */",
        "description": "Table of figures properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oTofPr = {\"ShowPageNums\": true, \"RightAlgn\": true, \"LeaderType\": \"dot\", \"FormatAsLinks\": true, \"BuildFrom\": \"Figure\", \"LabelNumber\": true, \"TofStyle\": \"distinctive\"};\noDocument.AddTableOfFigures(oTofPr);\n```",
        "name": "TofPr",
        "longname": "TofPr",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4400,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "ShowPageNums",
                "description": "Specifies whether to show page numbers in the table of figures.",
                "optional": true,
                "defaultvalue": true
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "RightAlgn",
                "description": "Specifies whether to right-align page numbers in the table of figures.",
                "optional": true,
                "defaultvalue": true
            },
            {
                "type": {
                    "names": [
                        "TocLeader"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "TocLeader"
                    }
                },
                "name": "LeaderType",
                "description": "The leader type in the table of figures.",
                "optional": true,
                "defaultvalue": "\"dot\""
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "FormatAsLinks",
                "description": "Specifies whether to format the table of figures as links.",
                "optional": true,
                "defaultvalue": true
            },
            {
                "type": {
                    "names": [
                        "CaptionLabel",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "CaptionLabel"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "BuildFrom",
                "description": "Specifies whether to generate the table of figures based on the specified caption label or the paragraph style name used (for example, \"Heading 1\").",
                "optional": true,
                "defaultvalue": "\"Figure\""
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "LabelNumber",
                "description": "Specifies whether to include the label and number in the table of figures.",
                "optional": true,
                "defaultvalue": true
            },
            {
                "type": {
                    "names": [
                        "TofStyle"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "TofStyle"
                    }
                },
                "name": "TofStyle",
                "description": "The table of figures style type.",
                "optional": true,
                "defaultvalue": "\"distinctive\""
            }
        ],
        "see": [
            "office-js-api/Examples/Enumerations/TofPr.js"
        ],
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        }
    },
    {
        "comment": "/**\r\n\t * Table of contents properties which specify whether to generate the table of contents from the outline levels or the specified styles.\r\n\t * @typedef {Object} TocBuildFromPr\r\n\t * @property {number} [OutlineLvls=9] - Maximum number of levels in the table of contents.\r\n\t * @property {TocStyleLvl[]} StylesLvls - Style levels (for example, [{Name: \"Heading 1\", Lvl: 2}, {Name: \"Heading 2\", Lvl: 3}]).\r\n\t * <note>If StylesLvls.length > 0, then the OutlineLvls property will be ignored.</note>\r\n\t * @see office-js-api/Examples/Enumerations/TocBuildFromPr.js\r\n\t */",
        "description": "Table of contents properties which specify whether to generate the table of contents from the outline levels or the specified styles.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oTocBuildFromPr = {\"OutlineLvls\": 9};\nvar oTocPr = {\"ShowPageNums\": true, \"RightAlgn\": true, \"LeaderType\": \"dot\", \"FormatAsLinks\": true, \"BuildFrom\": oTocBuildFromPr, \"TocStyle\": \"standard\"};\noDocument.AddTableOfContents(oTocPr);\n```",
        "name": "TocBuildFromPr",
        "longname": "TocBuildFromPr",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4413,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "OutlineLvls",
                "description": "Maximum number of levels in the table of contents.",
                "optional": true,
                "defaultvalue": 9
            },
            {
                "type": {
                    "names": [
                        "Array.<TocStyleLvl>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "TocStyleLvl",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "StylesLvls",
                "description": "Style levels (for example, [{Name: \"Heading 1\", Lvl: 2}, {Name: \"Heading 2\", Lvl: 3}]).\r<note>If StylesLvls.length > 0, then the OutlineLvls property will be ignored.</note>",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "see": [
            "office-js-api/Examples/Enumerations/TocBuildFromPr.js"
        ],
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        }
    },
    {
        "comment": "/**\r\n\t * Table of contents style levels.\r\n\t * @typedef {Object} TocStyleLvl\r\n\t * @property {string} Name - Style name (for example, \"Heading 1\").\r\n\t * @property {number} Lvl - Level which will be applied to the specified style in the table of contents.\r\n\t * @see office-js-api/Examples/Enumerations/TocStyleLvl.js\r\n\t */",
        "description": "Table of contents style levels.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar aTocStyleLvl = [{Name: \"Heading 1\", Lvl: 2}, {Name: \"Heading 2\", Lvl: 3}];\nvar oTocPr = {\"ShowPageNums\": true, \"RightAlgn\": true, \"LeaderType\": \"dot\", \"FormatAsLinks\": true, \"BuildFrom\": {\"StylesLvls\": aTocStyleLvl}, \"TocStyle\": \"standard\"};\noDocument.AddTableOfContents(oTocPr);\n```",
        "name": "TocStyleLvl",
        "longname": "TocStyleLvl",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4422,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Name",
                "description": "Style name (for example, \"Heading 1\").",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "Lvl",
                "description": "Level which will be applied to the specified style in the table of contents.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "see": [
            "office-js-api/Examples/Enumerations/TocStyleLvl.js"
        ],
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        }
    },
    {
        "comment": "/**\r\n\t * Possible values for the table of contents leader:\r\n\t * <b>\"dot\"</b> - \".......\"\r\n\t * <b>\"dash\"</b> - \"-------\"\r\n\t * <b>\"underline\"</b> - \"_______\"\r\n     * @typedef {(\"dot\" | \"dash\" | \"underline\" | \"none\")} TocLeader\r\n\t * @see office-js-api/Examples/Enumerations/TocLeader.js\r\n\t */",
        "description": "Possible values for the table of contents leader:\r<b>\"dot\"</b> - \".......\"\r<b>\"dash\"</b> - \"-------\"\r<b>\"underline\"</b> - \"_______\"\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar sTocLeader = \"dot\";\nvar oTocPr = {\"ShowPageNums\": true, \"RightAlgn\": true, \"LeaderType\": sTocLeader, \"FormatAsLinks\": true, \"BuildFrom\": {\"OutlineLvls\": 9}, \"TocStyle\": \"standard\"};\noDocument.AddTableOfContents(oTocPr);\n```",
        "name": "TocLeader",
        "longname": "TocLeader",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4430,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/TocLeader.js"
        ],
        "type": {
            "names": [
                "\"dot\"",
                "\"dash\"",
                "\"underline\"",
                "\"none\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"dot\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dash\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"underline\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"none\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n     * Possible values for the table of contents style.\r\n     * @typedef {(\"simple\" | \"online\" | \"standard\" | \"modern\" | \"classic\")} TocStyle\r\n\t * @see office-js-api/Examples/Enumerations/TocStyle.js\r\n\t */",
        "description": "Possible values for the table of contents style.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar sTocStyle = \"standard\";\nvar oTocPr = {\"ShowPageNums\": true, \"RightAlgn\": true, \"LeaderType\": \"dot\", \"FormatAsLinks\": true, \"BuildFrom\": {\"OutlineLvls\": 9}, \"TocStyle\": sTocStyle};\noDocument.AddTableOfContents(oTocPr);\n```",
        "name": "TocStyle",
        "longname": "TocStyle",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4439,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/TocStyle.js"
        ],
        "type": {
            "names": [
                "\"simple\"",
                "\"online\"",
                "\"standard\"",
                "\"modern\"",
                "\"classic\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"simple\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"online\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"standard\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"modern\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"classic\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n     * Possible values for the table of figures style.\r\n     * @typedef {(\"simple\" | \"online\" | \"classic\" | \"distinctive\" | \"centered\" | \"formal\")} TofStyle\r\n\t * @see office-js-api/Examples/Enumerations/TofStyle.js\r\n\t */",
        "description": "Possible values for the table of figures style.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar sTofStyle = \"distinctive\";\nvar oTofPr = {\"ShowPageNums\": true, \"RightAlgn\": true, \"LeaderType\": \"dot\", \"FormatAsLinks\": true, \"BuildFrom\": \"Figure\", \"LabelNumber\": true, \"TofStyle\": sTofStyle};\noDocument.AddTableOfFigures(oTofPr);\n```",
        "name": "TofStyle",
        "longname": "TofStyle",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4445,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/TofStyle.js"
        ],
        "type": {
            "names": [
                "\"simple\"",
                "\"online\"",
                "\"classic\"",
                "\"distinctive\"",
                "\"centered\"",
                "\"formal\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"simple\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"online\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"classic\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"distinctive\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"centered\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"formal\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n     * The 1000th of a percent (100000 = 100%).\r\n     * @typedef {number} PositivePercentage\r\n     * @see office-js-api/Examples/Enumerations/PositivePercentage.js\r\n\t */",
        "description": "The 1000th of a percent (100000 = 100%).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 164, 101), 100000);\n```",
        "name": "PositivePercentage",
        "longname": "PositivePercentage",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 370,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/PositivePercentage.js"
        ],
        "type": {
            "names": [
                "number"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "number"
            }
        }
    },
    {
        "comment": "/**\r\n     * The available types of tick mark appearance.\r\n     * @typedef {(\"cross\" | \"in\" | \"none\" | \"out\")} TickMark\r\n     * @see office-js-api/Examples/Enumerations/TickMark.js\r\n\t */",
        "description": "The available types of tick mark appearance.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\noChart.SetVertAxisMajorTickMark(\"cross\");\n```",
        "name": "TickMark",
        "longname": "TickMark",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 323,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/TickMark.js"
        ],
        "type": {
            "names": [
                "\"cross\"",
                "\"in\"",
                "\"none\"",
                "\"out\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"cross\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"in\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"none\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"out\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n\t * The watermark type.\r\n\t * @typedef {(\"none\" | \"text\" | \"image\")} WatermarkType\r\n\t * @see office-js-api/Examples/Enumerations/WatermarkType.js\r\n\t */",
        "description": "The watermark type.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\noWatermarkSettings.SetType(\"text\");\n```",
        "name": "WatermarkType",
        "longname": "WatermarkType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4469,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/WatermarkType.js"
        ],
        "type": {
            "names": [
                "\"none\"",
                "\"text\"",
                "\"image\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"none\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"text\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"image\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n\t * The watermark direction.\r\n\t * @typedef {(\"horizontal\" | \"clockwise45\" | \"counterclockwise45\")} WatermarkDirection\r\n\t * @see office-js-api/Examples/Enumerations/WatermarkDirection.js\r\n\t */",
        "description": "The watermark direction.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\noWatermarkSettings.SetDirection(\"clockwise45\");\n```",
        "name": "WatermarkDirection",
        "longname": "WatermarkDirection",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4475,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/WatermarkDirection.js"
        ],
        "type": {
            "names": [
                "\"horizontal\"",
                "\"clockwise45\"",
                "\"counterclockwise45\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"horizontal\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"clockwise45\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"counterclockwise45\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n\t * Creates a new smaller text block to be inserted to the current paragraph or table.\r\n\t * @memberof Api\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {ApiRun}\r\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/CreateRun.js\r\n\t */",
        "description": "Creates a new smaller text block to be inserted to the current paragraph or table.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.SetFontSize(60);\noRun.AddText(\"This is just a sample text. \");\noParagraph.AddElement(oRun);\noRun = Api.CreateRun();\noRun.SetFontSize(60);\noRun.SetFontFamily(\"Comic Sans MS\");\noRun.AddText(\"This is a text run with the font family set to 'Comic Sans MS'.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "Api",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRun"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRun"
                    }
                }
            }
        ],
        "name": "CreateRun",
        "longname": "Api#CreateRun",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4563,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/Api/Methods/CreateRun.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Creates an RGB color setting the appropriate values for the red, green and blue color components.\r\n\t * @memberof Api\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {byte} r - Red color component value.\r\n\t * @param {byte} g - Green color component value.\r\n\t * @param {byte} b - Blue color component value.\r\n\t * @returns {ApiRGBColor}\r\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/CreateRGBColor.js\r\n\t */",
        "description": "Creates an RGB color setting the appropriate values for the red, green and blue color components.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oRGBColor = Api.CreateRGBColor(255, 111, 61);\nvar oGs1 = Api.CreateGradientStop(Api.CreatePresetColor(\"peachPuff\"), 0);\nvar oGs2 = Api.CreateGradientStop(oRGBColor, 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oDrawing = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noSlide.AddObject(oDrawing);\noDrawing.SetPosition(608400, 1267200);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "byte"
                    }
                },
                "name": "r",
                "description": "Red color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "byte"
                    }
                },
                "name": "g",
                "description": "Green color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "byte"
                    }
                },
                "name": "b",
                "description": "Blue color component value.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRGBColor"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRGBColor"
                    }
                }
            }
        ],
        "name": "CreateRGBColor",
        "longname": "Api#CreateRGBColor",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4719,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/Api/Methods/CreateRGBColor.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Creates a complex color scheme selecting from one of the available schemes.\r\n\t * @memberof Api\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {SchemeColorId} sSchemeColorId - The color scheme identifier.\r\n\t * @returns {ApiSchemeColor}\r\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/CreateSchemeColor.js\r\n\t */",
        "description": "Creates a complex color scheme selecting from one of the available schemes.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oSchemeColor = Api.CreateSchemeColor(\"dk1\");\nvar oFill = Api.CreateSolidFill(oSchemeColor);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oDrawing = Api.CreateShape(\"curvedUpArrow\", 300 * 36000, 130 * 36000, oFill, oStroke);\noSlide.AddObject(oDrawing);\noDrawing.SetPosition(608400, 1267200);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "SchemeColorId"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "SchemeColorId"
                    }
                },
                "name": "sSchemeColorId",
                "description": "The color scheme identifier.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiSchemeColor"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiSchemeColor"
                    }
                }
            }
        ],
        "name": "CreateSchemeColor",
        "longname": "Api#CreateSchemeColor",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4732,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/Api/Methods/CreateSchemeColor.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Creates a color selecting it from one of the available color presets.\r\n\t * @memberof Api\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {PresetColor} sPresetColor - A preset selected from the list of the available color preset names.\r\n\t * @returns {ApiPresetColor};\r\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/CreatePresetColor.js\r\n\t */",
        "description": "Creates a color selecting it from one of the available color presets.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreatePresetColor(\"peachPuff\"), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oDrawing = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noSlide.AddObject(oDrawing);\noDrawing.SetPosition(608400, 1267200);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "PresetColor"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PresetColor"
                    }
                },
                "name": "sPresetColor",
                "description": "A preset selected from the list of the available color preset names.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiPresetColor"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiPresetColor"
                    }
                }
            }
        ],
        "name": "CreatePresetColor",
        "longname": "Api#CreatePresetColor",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4745,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/Api/Methods/CreatePresetColor.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Creates a solid fill to apply to the object using a selected solid color as the object background.\r\n\t * @memberof Api\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {ApiUniColor} oUniColor - The color used for the element fill.\r\n\t * @returns {ApiFill}\r\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/CreateSolidFill.js\r\n\t */",
        "description": "Creates a solid fill to apply to the object using a selected solid color as the object background.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oRGBColor = Api.CreateRGBColor(255, 111, 61);\nvar oFill = Api.CreateSolidFill(oRGBColor);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oDrawing = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noSlide.AddObject(oDrawing);\noDrawing.SetPosition(608400, 1267200);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiUniColor"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiUniColor"
                    }
                },
                "name": "oUniColor",
                "description": "The color used for the element fill.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                }
            }
        ],
        "name": "CreateSolidFill",
        "longname": "Api#CreateSolidFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4758,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/Api/Methods/CreateSolidFill.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Creates a linear gradient fill to apply to the object using the selected linear gradient as the object background.\r\n\t * @memberof Api\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {Array} aGradientStop - The array of gradient color stops measured in 1000th of percent.\r\n\t * @param {PositiveFixedAngle} Angle - The angle measured in 60000th of a degree that will define the gradient direction.\r\n\t * @returns {ApiFill}\r\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/CreateLinearGradientFill.js\r\n\t */",
        "description": "Creates a linear gradient fill to apply to the object using the selected linear gradient as the object background.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateLinearGradientFill([oGs1, oGs2], 5400000);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oDrawing = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noSlide.AddObject(oDrawing);\noDrawing.SetPosition(608400, 1267200);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Array"
                    }
                },
                "name": "aGradientStop",
                "description": "The array of gradient color stops measured in 1000th of percent.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "PositiveFixedAngle"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PositiveFixedAngle"
                    }
                },
                "name": "Angle",
                "description": "The angle measured in 60000th of a degree that will define the gradient direction.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                }
            }
        ],
        "name": "CreateLinearGradientFill",
        "longname": "Api#CreateLinearGradientFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4772,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/Api/Methods/CreateLinearGradientFill.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Creates a radial gradient fill to apply to the object using the selected radial gradient as the object background.\r\n\t * @memberof Api\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {Array} aGradientStop - The array of gradient color stops measured in 1000th of percent.\r\n\t * @returns {ApiFill}\r\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/CreateRadialGradientFill.js\r\n\t */",
        "description": "Creates a radial gradient fill to apply to the object using the selected radial gradient as the object background.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreatePresetColor(\"peachPuff\"), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oDrawing = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noSlide.AddObject(oDrawing);\noDrawing.SetPosition(608400, 1267200);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Array"
                    }
                },
                "name": "aGradientStop",
                "description": "The array of gradient color stops measured in 1000th of percent.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                }
            }
        ],
        "name": "CreateRadialGradientFill",
        "longname": "Api#CreateRadialGradientFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4786,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/Api/Methods/CreateRadialGradientFill.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Creates a pattern fill to apply to the object using the selected pattern as the object background.\r\n\t * @memberof Api\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {PatternType} sPatternType - The pattern type used for the fill selected from one of the available pattern types.\r\n\t * @param {ApiUniColor} BgColor - The background color used for the pattern creation.\r\n\t * @param {ApiUniColor} FgColor - The foreground color used for the pattern creation.\r\n\t * @returns {ApiFill}\r\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/CreatePatternFill.js\r\n\t */",
        "description": "Creates a pattern fill to apply to the object using the selected pattern as the object background.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreatePatternFill(\"dashDnDiag\", Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oDrawing = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noSlide.AddObject(oDrawing);\noDrawing.SetPosition(608400, 1267200);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "PatternType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PatternType"
                    }
                },
                "name": "sPatternType",
                "description": "The pattern type used for the fill selected from one of the available pattern types.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiUniColor"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiUniColor"
                    }
                },
                "name": "BgColor",
                "description": "The background color used for the pattern creation.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiUniColor"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiUniColor"
                    }
                },
                "name": "FgColor",
                "description": "The foreground color used for the pattern creation.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                }
            }
        ],
        "name": "CreatePatternFill",
        "longname": "Api#CreatePatternFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4800,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/Api/Methods/CreatePatternFill.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Creates a blip fill to apply to the object using the selected image as the object background.\r\n\t * @memberof Api\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {string} sImageUrl - The path to the image used for the blip fill (currently only internet URL or Base64 encoded images are supported).\r\n\t * @param {BlipFillType} sBlipFillType - The type of the fill used for the blip fill (tile or stretch).\r\n\t * @returns {ApiFill}\r\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/CreateBlipFill.js\r\n\t */",
        "description": "Creates a blip fill to apply to the object using the selected image as the object background.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateBlipFill(\"https://api.onlyoffice.com/content/img/docbuilder/examples/icon_DocumentEditors.png\", \"tile\");\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oDrawing = Api.CreateShape(\"star10\", 300 * 36000, 130 * 36000, oFill, oStroke);\noDrawing.SetPosition(608400, 1267200);\noSlide.AddObject(oDrawing);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sImageUrl",
                "description": "The path to the image used for the blip fill (currently only internet URL or Base64 encoded images are supported).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "BlipFillType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "BlipFillType"
                    }
                },
                "name": "sBlipFillType",
                "description": "The type of the fill used for the blip fill (tile or stretch).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                }
            }
        ],
        "name": "CreateBlipFill",
        "longname": "Api#CreateBlipFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4814,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/Api/Methods/CreateBlipFill.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Creates no fill and removes the fill from the element.\r\n\t * @memberof Api\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {ApiFill}\r\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/CreateNoFill.js\r\n\t */",
        "description": "Creates no fill and removes the fill from the element.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.AddText(\"The stroke of this shape is transparent.\");\noSlide.AddObject(oShape);\n```",
        "memberof": "Api",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                }
            }
        ],
        "name": "CreateNoFill",
        "longname": "Api#CreateNoFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4826,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/Api/Methods/CreateNoFill.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Creates a stroke adding shadows to the element.\r\n\t * @memberof Api\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {EMU} nWidth - The width of the shadow measured in English measure units.\r\n\t * @param {ApiFill} oFill - The fill type used to create the shadow.\r\n\t * @returns {ApiStroke}\r\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/CreateStroke.js\r\n\t */",
        "description": "Creates a stroke adding shadows to the element.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateLinearGradientFill([oGs1, oGs2], 5400000);\nvar oFill1 = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nvar oStroke = Api.CreateStroke(3 * 36000, oFill1);\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noSlide.AddObject(oShape);\noShape.SetPosition(608400, 1267200);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nWidth",
                "description": "The width of the shadow measured in English measure units.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                },
                "name": "oFill",
                "description": "The fill type used to create the shadow.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiStroke"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiStroke"
                    }
                }
            }
        ],
        "name": "CreateStroke",
        "longname": "Api#CreateStroke",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4840,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/Api/Methods/CreateStroke.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Creates a gradient stop used for different types of gradients.\r\n\t * @memberof Api\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {ApiUniColor} oUniColor - The color used for the gradient stop.\r\n\t * @param {PositivePercentage} nPos - The position of the gradient stop measured in 1000th of percent.\r\n\t * @returns {ApiGradientStop}\r\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/CreateGradientStop.js\r\n\t */",
        "description": "Creates a gradient stop used for different types of gradients.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oDrawing = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noSlide.AddObject(oDrawing);\noDrawing.SetPosition(608400, 1267200);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiUniColor"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiUniColor"
                    }
                },
                "name": "oUniColor",
                "description": "The color used for the gradient stop.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "PositivePercentage"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PositivePercentage"
                    }
                },
                "name": "nPos",
                "description": "The position of the gradient stop measured in 1000th of percent.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiGradientStop"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiGradientStop"
                    }
                }
            }
        ],
        "name": "CreateGradientStop",
        "longname": "Api#CreateGradientStop",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4854,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/Api/Methods/CreateGradientStop.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Creates a bullet for a paragraph with the character or symbol specified with the sSymbol parameter.\r\n\t * @memberof Api\r\n\t * @typeofeditors [\"CSE\", \"CPE\"]\r\n\t * @param {string} sSymbol - The character or symbol which will be used to create the bullet for the paragraph.\r\n\t * @returns {ApiBullet}\r\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/CreateBullet.js\r\n\t */",
        "description": "Creates a bullet for a paragraph with the character or symbol specified with the sSymbol parameter.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oBullet = Api.CreateBullet(\"-\");\noParagraph.SetBullet(oBullet);\noParagraph.AddText(\" This is an example of the bulleted paragraph.\");\noSlide.AddObject(oShape);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sSymbol",
                "description": "The character or symbol which will be used to create the bullet for the paragraph.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiBullet"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiBullet"
                    }
                }
            }
        ],
        "name": "CreateBullet",
        "longname": "Api#CreateBullet",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4867,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/Api/Methods/CreateBullet.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns a type of the ApiDocumentContent class. \r\n\t * @memberof ApiDocumentContent\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {\"documentContent\"}\r\n\t * @see office-js-api/Examples/{Editor}/ApiDocumentContent/Methods/GetClassType.js\r\n\t */",
        "description": "Returns a type of the ApiDocumentContent class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar sClassType = oDocContent.GetClassType();\noParagraph.AddText(\"Class Type: \" + sClassType);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiDocumentContent",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"documentContent\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"documentContent\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiDocumentContent#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5523,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiDocumentContent/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns a number of elements in the current document.\r\n\t * @memberof ApiDocumentContent\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {number}\r\n\t * @see office-js-api/Examples/{Editor}/ApiDocumentContent/Methods/GetElementsCount.js\r\n\t */",
        "description": "Returns a number of elements in the current document.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.AddText(\"We got the first paragraph inside the shape.\");\noParagraph.AddLineBreak();\noParagraph.AddText(\"Number of elements inside the shape: \" + oDocContent.GetElementsCount());\noParagraph.AddLineBreak();\noParagraph.AddText(\"Line breaks are NOT counted into the number of elements.\");\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiDocumentContent",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GetElementsCount",
        "longname": "ApiDocumentContent#GetElementsCount",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5534,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiDocumentContent/Methods/GetElementsCount.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns an element by its position in the document.\r\n\t * @memberof ApiDocumentContent\r\n\t * @param {number} nPos - The element position that will be taken from the document.\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {?DocumentElement}\r\n\t * @see office-js-api/Examples/{Editor}/ApiDocumentContent/Methods/GetElement.js\r\n\t */",
        "description": "Returns an element by its position in the document.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oBullet = Api.CreateNumbering(\"ArabicParenR\", 1);\noParagraph.SetBullet(oBullet);\noParagraph.AddText(\" This is an example of the numbered paragraph.\");\noParagraph = Api.CreateParagraph();\noParagraph.SetBullet(oBullet);\noParagraph.AddText(\" This is an example of the numbered paragraph.\");\noDocContent.Push(oParagraph);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiDocumentContent",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nPos",
                "description": "The element position that will be taken from the document.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "DocumentElement"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "DocumentElement",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetElement",
        "longname": "ApiDocumentContent#GetElement",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5546,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiDocumentContent/Methods/GetElement.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Adds a paragraph or a table or a blockLvl content control using its position in the document content.\r\n\t * @memberof ApiDocumentContent\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {number} nPos - The position where the current element will be added.\r\n\t * @param {DocumentElement} oElement - The document element which will be added at the current position.\r\n\t * @see office-js-api/Examples/{Editor}/ApiDocumentContent/Methods/AddElement.js\r\n\t */",
        "description": "Adds a paragraph or a table or a blockLvl content control using its position in the document content.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\noDocContent.RemoveAllElements();\nvar oParagraph = Api.CreateParagraph();\noParagraph.AddText(\"We removed all elements from the shape and added a new paragraph inside it.\");\noDocContent.AddElement(oParagraph);\noDocContent.Push(oParagraph);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiDocumentContent",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nPos",
                "description": "The position where the current element will be added.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "DocumentElement"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "DocumentElement"
                    }
                },
                "name": "oElement",
                "description": "The document element which will be added at the current position.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "AddElement",
        "longname": "ApiDocumentContent#AddElement",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5569,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiDocumentContent/Methods/AddElement.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Pushes a paragraph or a table to actually add it to the document.\r\n\t * @memberof ApiDocumentContent\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {DocumentElement} oElement - The element type which will be pushed to the document.\r\n\t * @returns {boolean} - returns false if oElement is unsupported.\r\n\t * @see office-js-api/Examples/{Editor}/ApiDocumentContent/Methods/Push.js\r\n\t */",
        "description": "Pushes a paragraph or a table to actually add it to the document.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\noDocContent.RemoveAllElements();\nvar oParagraph = Api.CreateParagraph();\noParagraph.AddText(\"We removed all elements from the shape and added a new paragraph inside it.\");\noDocContent.AddElement(oParagraph);\noDocContent.Push(oParagraph);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiDocumentContent",
        "params": [
            {
                "type": {
                    "names": [
                        "DocumentElement"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "DocumentElement"
                    }
                },
                "name": "oElement",
                "description": "The element type which will be pushed to the document.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "Push",
        "longname": "ApiDocumentContent#Push",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5587,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiDocumentContent/Methods/Push.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Removes all the elements from the current document or from the current document element.\r\n\t * <note>When all elements are removed, a new empty paragraph is automatically created. If you want to add\r\n\t * content to this paragraph, use the {@link ApiDocumentContent#GetElement} method.</note>\r\n\t * @memberof ApiDocumentContent\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @see office-js-api/Examples/{Editor}/ApiDocumentContent/Methods/RemoveAllElements.js\r\n\t */",
        "description": "Removes all the elements from the current document or from the current document element.\r<note>When all elements are removed, a new empty paragraph is automatically created. If you want to add\rcontent to this paragraph, use the {@link ApiDocumentContent#GetElement} method.</note>\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.AddText(\"This is just a sample paragraph.\");\noDocContent.RemoveAllElements();\noParagraph = Api.CreateParagraph();\noParagraph.AddText(\"We removed all elements from the shape and added a new paragraph inside it.\");\noDocContent.Push(oParagraph);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiDocumentContent",
        "params": null,
        "returns": null,
        "name": "RemoveAllElements",
        "longname": "ApiDocumentContent#RemoveAllElements",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5609,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiDocumentContent/Methods/RemoveAllElements.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Removes an element using the position specified.\r\n\t * @memberof ApiDocumentContent\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {number} nPos - The element number (position) in the document or inside other element.\r\n\t * @see office-js-api/Examples/{Editor}/ApiDocumentContent/Methods/RemoveElement.js\r\n\t */",
        "description": "Removes an element using the position specified.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.AddText(\"This is the first paragraph.\");\noDocContent.RemoveElement(0);\noParagraph = Api.CreateParagraph();\noParagraph.AddText(\"This is the second paragraph. The first paragraph was removed from the document content.\");\noDocContent.Push(oParagraph);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiDocumentContent",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nPos",
                "description": "The element number (position) in the document or inside other element.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "RemoveElement",
        "longname": "ApiDocumentContent#RemoveElement",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5620,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiDocumentContent/Methods/RemoveElement.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Record of one comment.\r\n\t * @typedef {Object} CommentReportRecord\r\n\t * @property {boolean} [IsAnswer=false] - Specifies whether this is an initial comment or a reply to another comment.\r\n\t * @property {string} CommentMessage - The text of the current comment.\r\n\t * @property {number} Date - The time when this change was made in local time.\r\n\t * @property {number} DateUTC - The time when this change was made in UTC.\r\n\t * @property {string} [QuoteText=undefined] - The text to which this comment is related.\r\n\t * @see office-js-api/Examples/Enumerations/CommentReportRecord.js\r\n\t */",
        "description": "Record of one comment.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oCommentsReport = oDocument.GetCommentsReport();\n```",
        "name": "CommentReportRecord",
        "longname": "CommentReportRecord",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 6078,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "IsAnswer",
                "description": "Specifies whether this is an initial comment or a reply to another comment.",
                "optional": true,
                "defaultvalue": false
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "CommentMessage",
                "description": "The text of the current comment.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "Date",
                "description": "The time when this change was made in local time.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "DateUTC",
                "description": "The time when this change was made in UTC.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "QuoteText",
                "description": "The text to which this comment is related.",
                "optional": true,
                "defaultvalue": null
            }
        ],
        "see": [
            "office-js-api/Examples/Enumerations/CommentReportRecord.js"
        ],
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        }
    },
    {
        "comment": "/**\r\n\t * Report on all comments.\r\n\t * This is a dictionary where the keys are usernames.\r\n\t * @typedef {Object.<string, Array.<CommentReportRecord>>} CommentReport\r\n\t * @example\r\n\t *  {\r\n\t *    \"John Smith\" : [{IsAnswer: false, CommentMessage: 'Good text', Date: 1688588002698, DateUTC: 1688570002698, QuoteText: 'Some text'},\r\n\t *      {IsAnswer: true, CommentMessage: \"I don't think so\", Date: 1688588012661, DateUTC: 1688570012661}],\r\n\t *\r\n\t *    \"Mark Pottato\" : [{IsAnswer: false, CommentMessage: 'Need to change this part', Date: 1688587967245, DateUTC: 1688569967245, QuoteText: 'The quick brown fox jumps over the lazy dog'},\r\n\t *      {IsAnswer: false, CommentMessage: 'We need to add a link', Date: 1688587967245, DateUTC: 1688569967245, QuoteText: 'OnlyOffice'}]\r\n\t *  }\r\n\t * @see office-js-api/Examples/Enumerations/CommentReport.js\r\n\t */",
        "description": "Report on all comments.\rThis is a dictionary where the keys are usernames.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oCommentsReport = oDocument.GetCommentsReport();\n```",
        "name": "CommentReport",
        "longname": "CommentReport",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 6089,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/CommentReport.js"
        ],
        "type": {
            "names": [
                "Object.<string, Array.<CommentReportRecord>>"
            ],
            "parsedType": {
                "type": "TypeApplication",
                "expression": {
                    "type": "NameExpression",
                    "name": "Object"
                },
                "applications": [
                    {
                        "type": "NameExpression",
                        "name": "string"
                    },
                    {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "type": "NameExpression",
                                "name": "CommentReportRecord"
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n\t * Review record type.\r\n\t * @typedef {(\"TextAdd\" | \"TextRem\" | \"ParaAdd\" | \"ParaRem\" | \"TextPr\" | \"ParaPr\" | \"Unknown\")} ReviewReportRecordType\r\n\t * @see office-js-api/Examples/Enumerations/ReviewReportRecordType.js\r\n\t */",
        "description": "Review record type.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oReviewReportRecord1 = {Type: \"TextRem\", Value: \"Hello, Mark!\", Date: 1679941734161};\nvar oReviewReportRecord2 = {Type: \"TextAdd\", Value: \"Dear Mr. Pottato.\", Date: 1679941736189};\nvar oReviewReportRecord3 = {Type: \"ParaRem\", Date: 1679941755942};\nvar oReviewReportRecord4 = {Type: \"TextPr\", Date: 1679941757832};\nvar oReviewRecord = {\n\t\"John Smith\" : [oReviewReportRecord1, oReviewReportRecord2],\n\t\"Mark Pottato\" : [oReviewReportRecord3, oReviewReportRecord4]\n};\n```",
        "name": "ReviewReportRecordType",
        "longname": "ReviewReportRecordType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 6156,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/ReviewReportRecordType.js"
        ],
        "type": {
            "names": [
                "\"TextAdd\"",
                "\"TextRem\"",
                "\"ParaAdd\"",
                "\"ParaRem\"",
                "\"TextPr\"",
                "\"ParaPr\"",
                "\"Unknown\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"TextAdd\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"TextRem\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ParaAdd\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ParaRem\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"TextPr\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ParaPr\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Unknown\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n\t * Record of one review change.\r\n\t * @typedef {Object} ReviewReportRecord\r\n\t * @property {ReviewReportRecordType} Type - Review record type.\r\n\t * @property {string} [Value=undefined] - Review change value that is set for the \"TextAdd\" and \"TextRem\" types only.\r\n\t * @property {number} Date - The time when this change was made.\r\n\t * @property {ApiParagraph | ApiTable} ReviewedElement - Element that has been reviewed\r\n\t * @see office-js-api/Examples/Enumerations/ReviewReportRecord.js\r\n\t */",
        "description": "Record of one review change.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oReviewReportRecord1 = {Type: \"TextRem\", Value: \"Hello, Mark!\", Date: 1679941734161};\nvar oReviewReportRecord2 = {Type: \"TextAdd\", Value: \"Dear Mr. Pottato.\", Date: 1679941736189};\nvar oReviewReportRecord3 = {Type: \"ParaRem\", Date: 1679941755942};\nvar oReviewReportRecord4 = {Type: \"TextPr\", Date: 1679941757832};\nvar oReviewRecord = {\n\t\"John Smith\" : [oReviewReportRecord1, oReviewReportRecord2],\n\t\"Mark Pottato\" : [oReviewReportRecord3, oReviewReportRecord4]\n};\n```",
        "name": "ReviewReportRecord",
        "longname": "ReviewReportRecord",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 6162,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "ReviewReportRecordType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ReviewReportRecordType"
                    }
                },
                "name": "Type",
                "description": "Review record type.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Value",
                "description": "Review change value that is set for the \"TextAdd\" and \"TextRem\" types only.",
                "optional": true,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "Date",
                "description": "The time when this change was made.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiParagraph",
                        "ApiTable"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiParagraph"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiTable"
                            }
                        ]
                    }
                },
                "name": "ReviewedElement",
                "description": "Element that has been reviewed",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "see": [
            "office-js-api/Examples/Enumerations/ReviewReportRecord.js"
        ],
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        }
    },
    {
        "comment": "/**\r\n\t * Report on all review changes.\r\n\t * This is a dictionary where the keys are usernames.\r\n\t * @typedef {Object.<string, Array.<ReviewReportRecord>>} ReviewReport\r\n\t * @example\r\n\t * \t{\r\n\t * \t  \"John Smith\" : [{Type: 'TextRem', Value: 'Hello, Mark!', Date: 1679941734161, Element: ApiParagraph},\r\n\t * \t                {Type: 'TextAdd', Value: 'Dear Mr. Pottato.', Date: 1679941736189, Element: ApiParagraph}],\r\n\t * \t  \"Mark Pottato\" : [{Type: 'ParaRem', Date: 1679941755942, ReviewedElement: ApiParagraph},\r\n\t * \t                  {Type: 'TextPr', Date: 1679941757832, ReviewedElement: ApiParagraph}]\r\n\t * \t}\r\n\t * @see office-js-api/Examples/Enumerations/ReviewReport.js\r\n\t */",
        "description": "Report on all review changes.\rThis is a dictionary where the keys are usernames.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oReviewRecord = {\n\t\"John Smith\" : [{Type: \"TextRem\", Value: \"Hello, Mark!\", Date: 1679941734161},\n\t\t\t\t\t{Type: \"TextAdd\", Value: \"Dear Mr. Pottato.\", Date: 1679941736189}],\n\t\"Mark Pottato\" : [{Type: \"ParaRem\", Date: 1679941755942},\n\t\t\t\t\t{Type: \"TextPr\", Date: 1679941757832}]\n}\n```",
        "name": "ReviewReport",
        "longname": "ReviewReport",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 6172,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/ReviewReport.js"
        ],
        "type": {
            "names": [
                "Object.<string, Array.<ReviewReportRecord>>"
            ],
            "parsedType": {
                "type": "TypeApplication",
                "expression": {
                    "type": "NameExpression",
                    "name": "Object"
                },
                "applications": [
                    {
                        "type": "NameExpression",
                        "name": "string"
                    },
                    {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "type": "NameExpression",
                                "name": "ReviewReportRecord"
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n\t * The specific form type.\r\n\t * @typedef {(\"text\" | \"checkBox\" | \"picture\" | \"comboBox\" | \"dropDownList\" | \"dateTime\" | \"radio\")} FormSpecificType\r\n\t * @see office-js-api/Examples/Enumerations/FormSpecificType.js\r\n\t */",
        "description": "The specific form type.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar arrFormData = oDocument.GetFormsData();\n```",
        "name": "FormSpecificType",
        "longname": "FormSpecificType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 6438,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/FormSpecificType.js"
        ],
        "type": {
            "names": [
                "\"text\"",
                "\"checkBox\"",
                "\"picture\"",
                "\"comboBox\"",
                "\"dropDownList\"",
                "\"dateTime\"",
                "\"radio\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"text\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"checkBox\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"picture\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"comboBox\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dropDownList\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dateTime\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"radio\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n\t * Form data.\r\n\t * @typedef {Object} FormData\r\n\t * @property {string} key - The form key. If the current form is a radio button, then this field contains the group key.\r\n\t * @property {string | boolean} value - The current field value.\r\n\t * @property {string} tag - The form tag.\r\n\t * @property {FormSpecificType} type - The form type.\r\n\t * @example\r\n\t * \t{\r\n\t * \t  \"key\" : \"CompanyName\",\r\n\t * \t  \"tag\" : \"companyName\",\r\n\t * \t  \"value\" : \"ONLYOFFICE\",\r\n\t * \t  \"type\" : \"text\"\r\n\t * \t}\r\n\t * @see office-js-api/Examples/Enumerations/FormData.js\r\n\t */",
        "description": "Form data.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oFormData = {key: \"CompanyName\", value: \"OnlyOffice\", type: \"text\"};\n```",
        "name": "FormData",
        "longname": "FormData",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 6443,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "key",
                "description": "The form key. If the current form is a radio button, then this field contains the group key.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                },
                "name": "value",
                "description": "The current field value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "tag",
                "description": "The form tag.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "FormSpecificType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "FormSpecificType"
                    }
                },
                "name": "type",
                "description": "The form type.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "see": [
            "office-js-api/Examples/Enumerations/FormData.js"
        ],
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        }
    },
    {
        "comment": "/**\r\n\t * Returns a type of the ApiParagraph class.\r\n\t * @memberof ApiParagraph\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {\"paragraph\"}\r\n\t * @see office-js-api/Examples/{Editor}/ApiParagraph/Methods/GetClassType.js\r\n\t */",
        "description": "Returns a type of the ApiParagraph class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar sClassType = oParagraph.GetClassType();\noParagraph.AddText(\"Class Type = \" + sClassType);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"paragraph\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"paragraph\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiParagraph#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7961,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParagraph/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Adds some text to the current paragraph.\r\n\t * @memberof ApiParagraph\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {string} [sText=\"\"] - The text that we want to insert into the current document element.\r\n\t * @returns {ApiRun}\r\n\t * @see office-js-api/Examples/{Editor}/ApiParagraph/Methods/AddText.js\r\n\t */",
        "description": "Adds some text to the current paragraph.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"This is a text inside the shape aligned left.\");\noParagraph.AddLineBreak();\noParagraph.AddText(\"This is a text after the line break.\");\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiParagraph",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sText",
                "description": "The text that we want to insert into the current document element.",
                "optional": true,
                "defaultvalue": "\"\""
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRun"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRun"
                    }
                }
            }
        ],
        "name": "AddText",
        "longname": "ApiParagraph#AddText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7973,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParagraph/Methods/AddText.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Adds a line break to the current position and starts the next element from a new line.\r\n\t * @memberof ApiParagraph\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {ApiRun}\r\n\t * @see office-js-api/Examples/{Editor}/ApiParagraph/Methods/AddLineBreak.js\r\n\t */",
        "description": "Adds a line break to the current position and starts the next element from a new line.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"This is a text inside the shape aligned left.\");\noParagraph.AddLineBreak();\noParagraph.AddText(\"This is a text after the line break.\");\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRun"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRun"
                    }
                }
            }
        ],
        "name": "AddLineBreak",
        "longname": "ApiParagraph#AddLineBreak",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8006,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParagraph/Methods/AddLineBreak.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns the paragraph properties.\r\n\t * @memberof ApiParagraph\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {ApiParaPr}\r\n\t * @see office-js-api/Examples/{Editor}/ApiParagraph/Methods/GetParaPr.js\r\n\t */",
        "description": "Returns the paragraph properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\noParaPr.SetSpacingAfter(1440);\noParagraph.AddText(\"This is an example of setting a space after a paragraph. \");\noParagraph.AddText(\"The second paragraph will have an offset of one inch from the top. \");\noParagraph.AddText(\"This is due to the fact that the first paragraph has this offset enabled.\");\noParagraph = Api.CreateParagraph();\noParagraph.AddText(\"This is the second paragraph and it is one inch away from the first paragraph.\");\noDocContent.Push(oParagraph);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiParaPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiParaPr"
                    }
                }
            }
        ],
        "name": "GetParaPr",
        "longname": "ApiParagraph#GetParaPr",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8075,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParagraph/Methods/GetParaPr.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns a number of elements in the current paragraph.\r\n\t * @memberof ApiParagraph\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {number}\r\n\t * @see office-js-api/Examples/{Editor}/ApiParagraph/Methods/GetElementsCount.js\r\n\t */",
        "description": "Returns a number of elements in the current paragraph.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.RemoveAllElements();\nvar oRun = Api.CreateRun();\noRun.AddText(\"Number of paragraph elements at this point: \");\noRun.AddTabStop();\noRun.AddText(\"\" + oParagraph.GetElementsCount());\noRun.AddLineBreak();\noParagraph.AddElement(oRun);\noRun.AddText(\"Number of paragraph elements after we added a text run: \");\noRun.AddTabStop();\noRun.AddText(\"\" + oParagraph.GetElementsCount());\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GetElementsCount",
        "longname": "ApiParagraph#GetElementsCount",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8122,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParagraph/Methods/GetElementsCount.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns a paragraph element using the position specified.\r\n\t * @memberof ApiParagraph\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {number} nPos - The position where the element which content we want to get must be located.\r\n\t * @returns {?ParagraphContent}\r\n\t * @see office-js-api/Examples/{Editor}/ApiParagraph/Methods/GetElement.js\r\n\t */",
        "description": "Returns a paragraph element using the position specified.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.RemoveAllElements();\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is the text for the first text run. Do not forget a space at its end to separate from the second one. \");\noParagraph.AddElement(oRun);\noRun = Api.CreateRun();\noRun.AddText(\"This is the text for the second run. We will set it bold afterwards. It also needs space at its end. \");\noParagraph.AddElement(oRun);\noRun = Api.CreateRun();\noRun.AddText(\"This is the text for the third run. It ends the paragraph.\");\noParagraph.AddElement(oRun);\noRun = oParagraph.GetElement(2);\noRun.SetBold(true);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiParagraph",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nPos",
                "description": "The position where the element which content we want to get must be located.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ParagraphContent"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ParagraphContent",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetElement",
        "longname": "ApiParagraph#GetElement",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8135,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParagraph/Methods/GetElement.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Removes an element using the position specified.\r\n\t * <note>If the element you remove is the last paragraph element (i.e. all the elements are removed from the paragraph),\r\n     * a new empty run is automatically created. If you want to add\r\n\t * content to this run, use the {@link ApiParagraph#GetElement} method.</note>\r\n\t * @memberof ApiParagraph\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {number} nPos - The element position which we want to remove from the paragraph.\r\n\t * @see office-js-api/Examples/{Editor}/ApiParagraph/Methods/RemoveElement.js\r\n\t */",
        "description": "Removes an element using the position specified.\r<note>If the element you remove is the last paragraph element (i.e. all the elements are removed from the paragraph),\ra new empty run is automatically created. If you want to add\rcontent to this run, use the {@link ApiParagraph#GetElement} method.</note>\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph = oDocContent.GetElement(0);\noParagraph.RemoveAllElements();\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is the first paragraph element. \");\noParagraph.AddElement(oRun);\noRun = Api.CreateRun();\noRun.AddText(\"This is the second paragraph element. \");\noParagraph.AddElement(oRun);\noRun = Api.CreateRun();\noRun.AddText(\"This is the third paragraph element (it will be removed from the paragraph and we will not see it). \");\noParagraph.AddElement(oRun);\noParagraph.AddLineBreak();\noRun = Api.CreateRun();\noRun.AddText(\"This is the fourth paragraph element - it became the third, because we removed the previous run from the paragraph. \");\noParagraph.AddElement(oRun);\noParagraph.AddLineBreak();\noRun = Api.CreateRun();\noRun.AddText(\"Please note that line breaks are not counted into paragraph elements!\");\noParagraph.AddElement(oRun);\noParagraph.RemoveElement(3);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiParagraph",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nPos",
                "description": "The element position which we want to remove from the paragraph.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "RemoveElement",
        "longname": "ApiParagraph#RemoveElement",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8153,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParagraph/Methods/RemoveElement.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Removes all the elements from the current paragraph.\r\n\t * <note>When all the elements are removed from the paragraph, a new empty run is automatically created. If you want to add\r\n\t * content to this run, use the {@link ApiParagraph#GetElement} method.</note>\r\n\t * @memberof ApiParagraph\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @see office-js-api/Examples/{Editor}/ApiParagraph/Methods/RemoveAllElements.js\r\n\t */",
        "description": "Removes all the elements from the current paragraph.\r<note>When all the elements are removed from the paragraph, a new empty run is automatically created. If you want to add\rcontent to this run, use the {@link ApiParagraph#GetElement} method.</note>\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.AddText(\"This is the first text run in the current paragraph.\");\noParagraph.RemoveAllElements();\noParagraph.AddText(\"We removed all the paragraph elements and added a new text run inside it.\");\noDocContent.Push(oParagraph);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": null,
        "name": "RemoveAllElements",
        "longname": "ApiParagraph#RemoveAllElements",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8169,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParagraph/Methods/RemoveAllElements.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Deletes the current paragraph.\r\n\t * @memberof ApiParagraph\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {boolean} - returns false if paragraph haven't parent.\r\n\t * @see office-js-api/Examples/{Editor}/ApiParagraph/Methods/Delete.js\r\n\t */",
        "description": "Deletes the current paragraph.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\noDocContent.RemoveAllElements();\nvar oParagraph = Api.CreateParagraph();\noParagraph.AddText(\"This is just a sample text.\");\noDocContent.Push(oParagraph);\noParagraph.Delete();\noParagraph = Api.CreateParagraph();\noParagraph.AddText(\"This is the second paragraph. The first paragraph was removed from the shape content.\");\noDocContent.Push(oParagraph);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "Delete",
        "longname": "ApiParagraph#Delete",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8184,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParagraph/Methods/Delete.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns the next paragraph.\r\n\t * @memberof ApiParagraph\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {ApiParagraph | null} - returns null if paragraph is last.\r\n\t * @see office-js-api/Examples/{Editor}/ApiParagraph/Methods/GetNext.js\r\n\t */",
        "description": "Returns the next paragraph.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\noDocContent.RemoveAllElements();\nvar oParagraph1 = Api.CreateParagraph();\noParagraph1.AddText(\"This is the first paragraph.\");\noDocContent.Push(oParagraph1);\nvar oParagraph2 = Api.CreateParagraph();\noParagraph2.AddText(\"This is the second paragraph.\");\noDocContent.Push(oParagraph2);\noSlide.AddObject(oShape);\nvar oNextParagraph = oParagraph1.GetNext();\noNextParagraph.SetBold(true);\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiParagraph",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiParagraph"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetNext",
        "longname": "ApiParagraph#GetNext",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8206,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParagraph/Methods/GetNext.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns the previous paragraph.\r\n\t * @memberof ApiParagraph\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {ApiParagraph} - returns null if paragraph is first.\r\n\t * @see office-js-api/Examples/{Editor}/ApiParagraph/Methods/GetPrevious.js\r\n\t */",
        "description": "Returns the previous paragraph.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\noDocContent.RemoveAllElements();\nvar oParagraph1 = Api.CreateParagraph();\noParagraph1.AddText(\"This is the first paragraph.\");\noDocContent.Push(oParagraph1);\nvar oParagraph2 = Api.CreateParagraph();\noParagraph2.AddText(\"This is the second paragraph.\");\noDocContent.Push(oParagraph2);\noSlide.AddObject(oShape);\nvar oPreviousParagraph = oParagraph2.GetPrevious();\noPreviousParagraph.SetBold(true);\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiParagraph"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiParagraph"
                    }
                }
            }
        ],
        "name": "GetPrevious",
        "longname": "ApiParagraph#GetPrevious",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8221,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParagraph/Methods/GetPrevious.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Creates a paragraph copy. Ingnore comments, footnote references, complex fields.\r\n\t * @memberof ApiParagraph\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {ApiParagraph}\r\n\t * @see office-js-api/Examples/{Editor}/ApiParagraph/Methods/Copy.js\r\n\t */",
        "description": "Creates a paragraph copy. Ingnore comments, footnote references, complex fields.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\noDocContent.RemoveAllElements();\nvar oParagraph = Api.CreateParagraph();\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"This is just a sample text that was copied.\");\noDocContent.Push(oParagraph);\nvar oCopyParagraph = oParagraph.Copy();\noDocContent.Push(oCopyParagraph);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiParagraph"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiParagraph"
                    }
                }
            }
        ],
        "name": "Copy",
        "longname": "ApiParagraph#Copy",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8236,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParagraph/Methods/Copy.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Adds an element to the current paragraph.\r\n\t * @memberof ApiParagraph\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {ParagraphContent} oElement - The document element which will be added at the current position. Returns false if the\r\n\t * oElement type is not supported by a paragraph.\r\n\t * @param {number} [nPos] - The position where the current element will be added. If this value is not\r\n\t * specified, then the element will be added at the end of the current paragraph.\r\n\t * @returns {boolean} Returns <code>false</code> if the type of <code>oElement</code> is not supported by paragraph\r\n\t * content.\r\n\t * @see office-js-api/Examples/{Editor}/ApiParagraph/Methods/AddElement.js\r\n\t */",
        "description": "Adds an element to the current paragraph.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is the text for a text run. Nothing special.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiParagraph",
        "params": [
            {
                "type": {
                    "names": [
                        "ParagraphContent"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ParagraphContent"
                    }
                },
                "name": "oElement",
                "description": "The document element which will be added at the current position. Returns false if the\roElement type is not supported by a paragraph.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nPos",
                "description": "The position where the current element will be added. If this value is not\rspecified, then the element will be added at the end of the current paragraph.",
                "optional": true,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "AddElement",
        "longname": "ApiParagraph#AddElement",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8258,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParagraph/Methods/AddElement.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Adds a tab stop to the current paragraph.\r\n\t * @memberof ApiParagraph\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {ApiRun}\r\n\t * @see office-js-api/Examples/{Editor}/ApiParagraph/Methods/AddTabStop.js\r\n\t */",
        "description": "Adds a tab stop to the current paragraph.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.AddText(\"This is just a sample text. After it three tab stops will be added.\");\noParagraph.AddTabStop();\noParagraph.AddTabStop();\noParagraph.AddTabStop();\noParagraph.AddText(\"This is the text which starts after the tab stops.\");\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRun"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRun"
                    }
                }
            }
        ],
        "name": "AddTabStop",
        "longname": "ApiParagraph#AddTabStop",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8286,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParagraph/Methods/AddTabStop.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies a highlighting color which is applied as a background to the contents of the current paragraph.\r\n\t * @memberof ApiParagraph\r\n\t * @typeofeditors [\"CDE\", \"CPE\"]\r\n\t * @param {highlightColor} sColor - Available highlight color.\r\n\t * @returns {ApiParagraph} this\r\n\t * @see office-js-api/Examples/{Editor}/ApiParagraph/Methods/SetHighlight.js\r\n\t */",
        "description": "Specifies a highlighting color which is applied as a background to the contents of the current paragraph.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.AddText(\"This is just a sample text. \");\noParagraph.SetHighlight(\"lightGray\");\noDocContent.Push(oParagraph);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiParagraph",
        "params": [
            {
                "type": {
                    "names": [
                        "highlightColor"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "highlightColor"
                    }
                },
                "name": "sColor",
                "description": "Available highlight color.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiParagraph"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiParagraph"
                    }
                }
            }
        ],
        "name": "SetHighlight",
        "longname": "ApiParagraph#SetHighlight",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8662,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParagraph/Methods/SetHighlight.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns a type of the ApiRun class.\r\n\t * @memberof ApiRun\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {\"run\"}\r\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/GetClassType.js\r\n\t */",
        "description": "Returns a type of the ApiRun class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\nvar sClassType = oRun.GetClassType();\noRun.SetFontSize(30);\noRun.AddText(\"Class Type = \" + sClassType);\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"run\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"run\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiRun#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9843,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiRun/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns the text properties of the current run.\r\n\t * @memberof ApiRun\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {ApiTextPr}\r\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/GetTextPr.js\r\n\t */",
        "description": "Returns the text properties of the current run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontSize(30);\noParagraph.SetJc(\"left\");\noRun.AddText(\"This is a sample text inside the shape with the font size set to 15 points using the text properties.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "GetTextPr",
        "longname": "ApiRun#GetTextPr",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9854,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiRun/Methods/GetTextPr.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Clears the content from the current run.\r\n\t * @memberof ApiRun\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/ClearContent.js\r\n\t */",
        "description": "Clears the content from the current run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.SetFontSize(30);\noRun.AddText(\"This is just a sample text. \");\noRun.AddText(\"But you will not see it in the resulting document, as it will be cleared.\");\noParagraph.AddElement(oRun);\noRun.ClearContent();\noParagraph = Api.CreateParagraph();\noRun = Api.CreateRun();\noRun.AddText(\"The text in the previous paragraph cannot be seen, as it has been cleared.\");\noParagraph.AddElement(oRun);\noDocContent.Push(oParagraph);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": null,
        "name": "ClearContent",
        "longname": "ApiRun#ClearContent",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9864,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiRun/Methods/ClearContent.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Removes all the elements from the current run.\r\n\t * @memberof ApiRun\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/RemoveAllElements.js\r\n\t */",
        "description": "Removes all the elements from the current run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text.\");\noRun.RemoveAllElements();\noRun.AddText(\"All elements from this run were removed before adding this text.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": null,
        "name": "RemoveAllElements",
        "longname": "ApiRun#RemoveAllElements",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9874,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiRun/Methods/RemoveAllElements.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Deletes the current run.\r\n\t * @memberof ApiRun\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/Delete.js\r\n\t */",
        "description": "Deletes the current run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noParagraph.AddElement(oRun);\noRun.Delete();\noRun = Api.CreateRun();\noRun.AddText(\"This is the second run. The first run was removed from the paragraph.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": null,
        "name": "Delete",
        "longname": "ApiRun#Delete",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9884,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiRun/Methods/Delete.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Adds some text to the current run.\r\n\t * @memberof ApiRun\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {string} sText - The text which will be added to the current run.\r\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/AddText.js\r\n\t */",
        "description": "Adds some text to the current run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.SetFontSize(30);\noRun.AddText(\"This is just a sample text. Nothing special.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sText",
                "description": "The text which will be added to the current run.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "AddText",
        "longname": "ApiRun#AddText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9904,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiRun/Methods/AddText.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Adds a line break to the current run position and starts the next element from a new line.\r\n\t * @memberof ApiRun\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/AddLineBreak.js\r\n\t */",
        "description": "Adds a line break to the current run position and starts the next element from a new line.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is the text for the first line. Nothing special.\");\noRun.AddLineBreak();\noRun.AddText(\"This is the text which starts from the beginning of the second line. \");\noRun.AddText(\"It is written in two text runs, you need a space at the end of the first run sentence to separate them.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": null,
        "name": "AddLineBreak",
        "longname": "ApiRun#AddLineBreak",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9927,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiRun/Methods/AddLineBreak.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Adds a tab stop to the current run.\r\n\t * @memberof ApiRun\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/AddTabStop.js\r\n\t */",
        "description": "Adds a tab stop to the current run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.SetFontSize(30);\noRun.AddText(\"This is just a sample text. After it three tab stops will be added.\");\noRun.AddTabStop();\noRun.AddTabStop();\noRun.AddTabStop();\noRun.AddText(\"This is the text which starts after the tab stops.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": null,
        "name": "AddTabStop",
        "longname": "ApiRun#AddTabStop",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9947,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiRun/Methods/AddTabStop.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Creates a copy of the current run.\r\n\t * @memberof ApiRun\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {ApiRun}\r\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/Copy.js\r\n\t */",
        "description": "Creates a copy of the current run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text that was copied. \");\noParagraph.AddElement(oRun);\nvar oCopyRun = oRun.Copy();\noParagraph.AddElement(oCopyRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRun"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRun"
                    }
                }
            }
        ],
        "name": "Copy",
        "longname": "ApiRun#Copy",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10084,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiRun/Methods/Copy.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the text properties to the current run.\r\n\t * @memberof ApiRun\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {ApiTextPr} oTextPr - The text properties that will be set to the current run.\r\n\t * @return {ApiTextPr}  \r\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetTextPr.js\r\n\t */",
        "description": "Sets the text properties to the current run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is a sample text with the font size set to 15 points and the font weight set to bold.\");\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontSize(30);\noTextPr.SetBold(true);\noRun.SetTextPr(oTextPr);\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                },
                "name": "oTextPr",
                "description": "The text properties that will be set to the current run.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetTextPr",
        "longname": "ApiRun#SetTextPr",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10181,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiRun/Methods/SetTextPr.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the bold property to the text character.\r\n\t * @memberof ApiRun\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {boolean} isBold - Specifies that the contents of the current run are displayed bold.\r\n\t * @returns {ApiTextPr}\r\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetBold.js\r\n\t */",
        "description": "Sets the bold property to the text character.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noParagraph.AddElement(oRun);\noRun = Api.CreateRun();\noRun.SetBold(true);\noRun.AddText(\"This is a text run with the font set to bold.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isBold",
                "description": "Specifies that the contents of the current run are displayed bold.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetBold",
        "longname": "ApiRun#SetBold",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10197,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiRun/Methods/SetBold.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies that any lowercase characters in the current text run are formatted for display only as their capital letter character equivalents.\r\n\t * @memberof ApiRun\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {boolean} isCaps - Specifies that the contents of the current run are displayed capitalized.\r\n\t * @returns {ApiTextPr}\r\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetCaps.js\r\n\t */",
        "description": "Specifies that any lowercase characters in the current text run are formatted for display only as their capital letter character equivalents.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noParagraph.AddElement(oRun);\noRun = Api.CreateRun();\noRun.SetCaps(true);\noRun.AddText(\"This is a text run with the font set to capitalized letters.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isCaps",
                "description": "Specifies that the contents of the current run are displayed capitalized.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetCaps",
        "longname": "ApiRun#SetCaps",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10212,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiRun/Methods/SetCaps.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the text color for the current text run in the RGB format.\r\n\t * @memberof ApiRun\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {byte} r - Red color component value.\r\n\t * @param {byte} g - Green color component value.\r\n\t * @param {byte} b - Blue color component value.\r\n\t * @param {boolean} [isAuto=false] - If this parameter is set to \"true\", then r,g,b parameters will be ignored.\r\n\t * @returns {ApiTextPr}\r\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetColor.js\r\n\t */",
        "description": "Sets the text color for the current text run in the RGB format.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is a text run with the font color set to black.\");\noParagraph.AddElement(oRun);\noRun.SetColor(51, 51, 51);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "byte"
                    }
                },
                "name": "r",
                "description": "Red color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "byte"
                    }
                },
                "name": "g",
                "description": "Green color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "byte"
                    }
                },
                "name": "b",
                "description": "Blue color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isAuto",
                "description": "If this parameter is set to \"true\", then r,g,b parameters will be ignored.",
                "optional": true,
                "defaultvalue": false
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetColor",
        "longname": "ApiRun#SetColor",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10230,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiRun/Methods/SetColor.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies that the contents of the current run are displayed with two horizontal lines through each character displayed on the line.\r\n\t * @memberof ApiRun\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {boolean} isDoubleStrikeout - Specifies that the contents of the current run are displayed double struck through.\r\n\t * @returns {ApiTextPr}\r\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetDoubleStrikeout.js\r\n\t */",
        "description": "Specifies that the contents of the current run are displayed with two horizontal lines through each character displayed on the line.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noParagraph.AddElement(oRun);\noRun = Api.CreateRun();\noRun.SetDoubleStrikeout(true);\noRun.AddText(\"This is a text run with the text struck out with two lines.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isDoubleStrikeout",
                "description": "Specifies that the contents of the current run are displayed double struck through.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetDoubleStrikeout",
        "longname": "ApiRun#SetDoubleStrikeout",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10245,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiRun/Methods/SetDoubleStrikeout.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the text color to the current text run.\r\n\t * @memberof ApiRun\r\n\t * @typeofeditors [\"CSE\", \"CPE\"]\r\n\t * @param {ApiFill} oApiFill - The color or pattern used to fill the text color.\r\n\t * @returns {ApiTextPr}\r\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetFill.js\r\n\t */",
        "description": "Sets the text color to the current text run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noParagraph.AddElement(oRun);\noRun = Api.CreateRun();\noFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noRun.SetFill(oFill);\noRun.AddText(\"This is a text run with the font color set to black.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                },
                "name": "oApiFill",
                "description": "The color or pattern used to fill the text color.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetFill",
        "longname": "ApiRun#SetFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10260,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiRun/Methods/SetFill.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets all 4 font slots with the specified font family.\r\n\t * @memberof ApiRun\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {string} sFontFamily - The font family or families used for the current text run.\r\n\t * @returns {ApiTextPr}\r\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetFontFamily.js\r\n\t */",
        "description": "Sets all 4 font slots with the specified font family.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noParagraph.AddElement(oRun);\noRun = Api.CreateRun();\noRun.SetFontFamily(\"Comic Sans MS\");\noRun.AddText(\"This is a text run with the font family set to 'Comic Sans MS'.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sFontFamily",
                "description": "The font family or families used for the current text run.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetFontFamily",
        "longname": "ApiRun#SetFontFamily",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10275,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiRun/Methods/SetFontFamily.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns all font names from all elements inside the current run.\r\n\t * @memberof ApiRun\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {string[]} - The font names used for the current run.\r\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/GetFontNames.js\r\n\t */",
        "description": "Returns all font names from all elements inside the current run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noParagraph.AddElement(oRun);\noRun = Api.CreateRun();\noRun.SetFontFamily(\"Comic Sans MS\");\noRun.AddText(\"This is a text run with the font family set to 'Comic Sans MS'.\");\noParagraph.AddElement(oRun);\noParagraph.AddLineBreak();\nvar aFontNames = oRun.GetFontNames();\noParagraph = Api.CreateParagraph();\noParagraph.AddText(\"Run font names: \");\noParagraph.AddLineBreak();\nfor (let i = 0; i < aFontNames.length; i++ ){\n\toParagraph.AddText(aFontNames[i]);\n\toParagraph.AddLineBreak();\n}\noDocContent.Push(oParagraph);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "string",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetFontNames",
        "longname": "ApiRun#GetFontNames",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10289,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiRun/Methods/GetFontNames.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the font size to the characters of the current text run.\r\n\t * @memberof ApiRun\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {hps} nSize - The text size value measured in half-points (1/144 of an inch).\r\n\t * @returns {ApiTextPr}\r\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetFontSize.js\r\n\t */",
        "description": "Sets the font size to the characters of the current text run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noParagraph.AddElement(oRun);\noRun = Api.CreateRun();\noRun.SetFontSize(50);\noRun.AddText(\"This is a text run with the font size set to 25 points (50 half-points).\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "hps"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "hps"
                    }
                },
                "name": "nSize",
                "description": "The text size value measured in half-points (1/144 of an inch).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetFontSize",
        "longname": "ApiRun#SetFontSize",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10309,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiRun/Methods/SetFontSize.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies a highlighting color which is applied as a background to the contents of the current run.\r\n\t * @memberof ApiRun\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {highlightColor} sColor - Available highlight color.\r\n\t * @returns {ApiTextPr}\r\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetHighlight.js\r\n\t */",
        "description": "Specifies a highlighting color which is applied as a background to the contents of the current run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is a text run with the text highlighted with light gray color.\");\noParagraph.AddElement(oRun);\noRun.SetHighlight(\"lightGray\");\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "highlightColor"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "highlightColor"
                    }
                },
                "name": "sColor",
                "description": "Available highlight color.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetHighlight",
        "longname": "ApiRun#SetHighlight",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10324,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiRun/Methods/SetHighlight.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the italic property to the text character.\r\n\t * @memberof ApiRun\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {boolean} isItalic - Specifies that the contents of the current run are displayed italicized.\r\n\t * @returns {ApiTextPr}\r\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetItalic.js\r\n\t */",
        "description": "Sets the italic property to the text character.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noParagraph.AddElement(oRun);\noRun = Api.CreateRun();\noRun.SetItalic(true);\noRun.AddText(\"This is a text run with the font set to italicized letters.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isItalic",
                "description": "Specifies that the contents of the current run are displayed italicized.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetItalic",
        "longname": "ApiRun#SetItalic",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10339,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiRun/Methods/SetItalic.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies the languages which will be used to check spelling and grammar (if requested) when processing\r\n\t * the contents of this text run.\r\n\t * @memberof ApiRun\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {string} sLangId - The possible value for this parameter is a language identifier as defined by\r\n\t * RFC 4646/BCP 47. Example: \"en-CA\".\r\n\t * @returns {ApiTextPr}\r\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetLanguage.js\r\n\t */",
        "description": "Specifies the languages which will be used to check spelling and grammar (if requested) when processing\rthe contents of this text run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is a text run with the text language set to English (Canada).\");\noParagraph.AddElement(oRun);\noRun.SetLanguage(\"en-CA\");\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sLangId",
                "description": "The possible value for this parameter is a language identifier as defined by\rRFC 4646/BCP 47. Example: \"en-CA\".",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetLanguage",
        "longname": "ApiRun#SetLanguage",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10356,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiRun/Methods/SetLanguage.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies an amount by which text is raised or lowered for this run in relation to the default\r\n\t * baseline of the surrounding non-positioned text.\r\n\t * @memberof ApiRun\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {hps} nPosition - Specifies a positive (raised text) or negative (lowered text)\r\n\t * measurement in half-points (1/144 of an inch).\r\n\t * @returns {ApiTextPr}\r\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetPosition.js\r\n\t */",
        "description": "Specifies an amount by which text is raised or lowered for this run in relation to the default\rbaseline of the surrounding non-positioned text.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"rect\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is a text run with the text raised 10 half-points.\");\noParagraph.AddElement(oRun);\noRun.SetPosition(10);\noRun = Api.CreateRun();\noRun.AddText(\"This is a text run with the text lowered 16 half-points.\");\noParagraph.AddElement(oRun);\noRun.SetPosition(-16);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "hps"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "hps"
                    }
                },
                "name": "nPosition",
                "description": "Specifies a positive (raised text) or negative (lowered text)\rmeasurement in half-points (1/144 of an inch).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetPosition",
        "longname": "ApiRun#SetPosition",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10373,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiRun/Methods/SetPosition.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies the shading applied to the contents of the current text run.\r\n\t * @memberof ApiRun\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {ShdType} sType - The shading type applied to the contents of the current text run.\r\n\t * @param {byte} r - Red color component value.\r\n\t * @param {byte} g - Green color component value.\r\n\t * @param {byte} b - Blue color component value.\r\n\t * @returns {ApiTextPr}\r\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetShd.js\r\n\t */",
        "description": "Specifies the shading applied to the contents of the current text run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is a text run with the text shading set to black.\");\noParagraph.AddElement(oRun);\noRun.SetShd(\"clear\", 51, 51, 51);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "ShdType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ShdType"
                    }
                },
                "name": "sType",
                "description": "The shading type applied to the contents of the current text run.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "byte"
                    }
                },
                "name": "r",
                "description": "Red color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "byte"
                    }
                },
                "name": "g",
                "description": "Green color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "byte"
                    }
                },
                "name": "b",
                "description": "Blue color component value.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetShd",
        "longname": "ApiRun#SetShd",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10391,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiRun/Methods/SetShd.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies that all the small letter characters in this text run are formatted for display only as their capital\r\n\t * letter character equivalents which are two points smaller than the actual font size specified for this text.\r\n\t * @memberof ApiRun\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {boolean} isSmallCaps - Specifies if the contents of the current run are displayed capitalized two points smaller or not.\r\n\t * @returns {ApiTextPr}\r\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetSmallCaps.js\r\n\t */",
        "description": "Specifies that all the small letter characters in this text run are formatted for display only as their capital\rletter character equivalents which are two points smaller than the actual font size specified for this text.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noParagraph.AddElement(oRun);\noRun = Api.CreateRun();\noRun.SetSmallCaps(true);\noRun.AddText(\"This is a text run with the font set to small capitalized letters.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isSmallCaps",
                "description": "Specifies if the contents of the current run are displayed capitalized two points smaller or not.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetSmallCaps",
        "longname": "ApiRun#SetSmallCaps",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10407,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiRun/Methods/SetSmallCaps.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the text spacing measured in twentieths of a point.\r\n\t * @memberof ApiRun\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {twips} nSpacing - The value of the text spacing measured in twentieths of a point (1/1440 of an inch).\r\n\t * @returns {ApiTextPr}\r\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetSpacing.js\r\n\t */",
        "description": "Sets the text spacing measured in twentieths of a point.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noParagraph.AddElement(oRun);\noRun = Api.CreateRun();\noRun.SetSpacing(80);\noRun.AddText(\"This is a text run with the text spacing set to 4 points (20 twentieths of a point).\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "twips"
                    }
                },
                "name": "nSpacing",
                "description": "The value of the text spacing measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetSpacing",
        "longname": "ApiRun#SetSpacing",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10422,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiRun/Methods/SetSpacing.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies that the contents of the current run are displayed with a single horizontal line through the center of the line.\r\n\t * @memberof ApiRun\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {boolean} isStrikeout - Specifies that the contents of the current run are displayed struck through.\r\n\t * @returns {ApiTextPr}\r\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetStrikeout.js\r\n\t */",
        "description": "Specifies that the contents of the current run are displayed with a single horizontal line through the center of the line.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noParagraph.AddElement(oRun);\noRun = Api.CreateRun();\noRun.SetStrikeout(true);\noRun.AddText(\"This is a text run with the text struck out with a single line.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isStrikeout",
                "description": "Specifies that the contents of the current run are displayed struck through.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetStrikeout",
        "longname": "ApiRun#SetStrikeout",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10437,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiRun/Methods/SetStrikeout.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets a style to the current run.\r\n\t * @memberof ApiRun\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {ApiStyle} oStyle - The style which must be applied to the text run.\r\n\t * @returns {ApiTextPr}\r\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetStyle.js\r\n\t */",
        "description": "Sets a style to the current run.",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiStyle"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiStyle"
                    }
                },
                "name": "oStyle",
                "description": "The style which must be applied to the text run.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetStyle",
        "longname": "ApiRun#SetStyle",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10452,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiRun/Methods/SetStyle.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies that the contents of the current run are displayed along with a line appearing directly below the character\r\n\t * (less than all the spacing above and below the characters on the line).\r\n\t * @memberof ApiRun\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {boolean} isUnderline - Specifies that the contents of the current run are displayed underlined.\r\n\t * @returns {ApiTextPr}\r\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetUnderline.js\r\n\t */",
        "description": "Specifies that the contents of the current run are displayed along with a line appearing directly below the character\r(less than all the spacing above and below the characters on the line).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noParagraph.AddElement(oRun);\noRun = Api.CreateRun();\noRun.SetUnderline(true);\noRun.AddText(\"This is a text run with the text underlined with a single line.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isUnderline",
                "description": "Specifies that the contents of the current run are displayed underlined.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetUnderline",
        "longname": "ApiRun#SetUnderline",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10468,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiRun/Methods/SetUnderline.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies the alignment which will be applied to the contents of the current run in relation to the default appearance of the text run:\r\n\t * <b>\"baseline\"</b> - the characters in the current text run will be aligned by the default text baseline.\r\n\t * <b>\"subscript\"</b> - the characters in the current text run will be aligned below the default text baseline.\r\n\t * <b>\"superscript\"</b> - the characters in the current text run will be aligned above the default text baseline.\r\n\t * @memberof ApiRun\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {(\"baseline\" | \"subscript\" | \"superscript\")} sType - The vertical alignment type applied to the text contents.\r\n\t * @returns {ApiTextPr}\r\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetVertAlign.js\r\n\t */",
        "description": "Specifies the alignment which will be applied to the contents of the current run in relation to the default appearance of the text run:\r<b>\"baseline\"</b> - the characters in the current text run will be aligned by the default text baseline.\r<b>\"subscript\"</b> - the characters in the current text run will be aligned below the default text baseline.\r<b>\"superscript\"</b> - the characters in the current text run will be aligned above the default text baseline.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noParagraph.AddElement(oRun);\noRun = Api.CreateRun();\noRun.SetVertAlign(\"subscript\");\noRun.AddText(\"This is a text run with the text aligned below the baseline vertically. \");\noParagraph.AddElement(oRun);\noRun = Api.CreateRun();\noRun.SetVertAlign(\"baseline\");\noRun.AddText(\"This is a text run with the text aligned by the baseline vertically. \");\noParagraph.AddElement(oRun);\noRun = Api.CreateRun();\noRun.SetVertAlign(\"superscript\");\noRun.AddText(\"This is a text run with the text aligned above the baseline vertically.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "\"baseline\"",
                        "\"subscript\"",
                        "\"superscript\""
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "\"baseline\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"subscript\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"superscript\""
                            }
                        ]
                    }
                },
                "name": "sType",
                "description": "The vertical alignment type applied to the text contents.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetVertAlign",
        "longname": "ApiRun#SetVertAlign",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10486,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiRun/Methods/SetVertAlign.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Adds a paragraph or a table or a blockLvl content control using its position in the cell.\r\n\t * @memberof ApiTable\r\n\t * @typeofeditors [\"CDE\", \"CPE\"]\r\n\t * @param {ApiTableCell} oCell - The cell where the specified element will be added.\r\n\t * @param {number} nPos - The position in the cell where the specified element will be added.\r\n\t * @param {DocumentElement} oElement - The document element which will be added at the current position.\r\n\t * @see office-js-api/Examples/{Editor}/ApiTable/Methods/AddElement.js\r\n\t */",
        "description": "Adds a paragraph or a table or a blockLvl content control using its position in the cell.",
        "memberof": "ApiTable",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiTableCell"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTableCell"
                    }
                },
                "name": "oCell",
                "description": "The cell where the specified element will be added.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nPos",
                "description": "The position in the cell where the specified element will be added.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "DocumentElement"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "DocumentElement"
                    }
                },
                "name": "oElement",
                "description": "The document element which will be added at the current position.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "AddElement",
        "longname": "ApiTable#AddElement",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 11347,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTable/Methods/AddElement.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Creates a copy of the current table.\r\n\t * @memberof ApiTable\r\n\t * @typeofeditors [\"CDE\", \"CPE\"]\r\n\t * @returns {ApiTable}\r\n\t * @see office-js-api/Examples/{Editor}/ApiTable/Methods/Copy.js\r\n\t */",
        "description": "Creates a copy of the current table.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oTable = Api.CreateTable(2, 4);\noTable.AddRow(1, true);\nvar oRow = oTable.GetRow(1);\nvar oCell = oRow.GetCell(0);\nvar oContent = oCell.GetContent();\nvar oParagraph = Api.CreateParagraph();\noParagraph.AddText(\"New row was added here.\");\noContent.Push(oParagraph);\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\noSlide.AddObject(oTable);\nvar oCopyTable = oTable.Copy();\nvar newSlide = Api.CreateSlide();\noPresentation.AddSlide(newSlide);\nnewSlide.AddObject(oCopyTable);\n```",
        "memberof": "ApiTable",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTable"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTable"
                    }
                }
            }
        ],
        "name": "Copy",
        "longname": "ApiTable#Copy",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 11419,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTable/Methods/Copy.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns a type of the ApiTextPr class.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {\"textPr\"}\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetClassType.js\r\n\t */",
        "description": "Returns a type of the ApiTextPr class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontSize(50);\noParagraph.SetJc(\"left\");\nvar sClassType = oTextPr.GetClassType();\noRun.AddText(\"Class Type = \" + sClassType);\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiTextPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"textPr\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"textPr\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiTextPr#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12933,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the bold property to the text character.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {boolean} isBold - Specifies that the contents of the run are displayed bold.\r\n\t * @return {ApiTextPr} - this text properties.\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetBold.js\r\n\t */",
        "description": "Sets the bold property to the text character.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontSize(50);\noTextPr.SetBold(true);\noParagraph.SetJc(\"left\");\noRun.AddText(\"This is a sample text inside the shape with the font weight set to bold using the text properties.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiTextPr",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isBold",
                "description": "Specifies that the contents of the run are displayed bold.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetBold",
        "longname": "ApiTextPr#SetBold",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12986,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/SetBold.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Gets the bold property from the current text properties.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @return {?boolean}\r\n\t * @since 8.1.0\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetBold.js\r\n\t */",
        "description": "Gets the bold property from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noRun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\noRun.AddLineBreak();\noParagraph.AddElement(oRun);\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetBold(true);\noSlide.AddObject(oShape);\noParagraph = Api.CreateParagraph();\nvar bBold = oTextPr.GetBold();\noParagraph.AddText(\"Bold property: \" + bBold);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiTextPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetBold",
        "longname": "ApiTextPr#GetBold",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13001,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/GetBold.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the italic property to the text character.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {boolean} isItalic - Specifies that the contents of the current run are displayed italicized.\r\n\t * @return {ApiTextPr} - this text properties.\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetItalic.js\r\n\t */",
        "description": "Sets the italic property to the text character.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontSize(50);\noTextPr.SetItalic(true);\noParagraph.SetJc(\"left\");\noRun.AddText(\"This is a sample text inside the shape with the font set to italicized letters using the text properties.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiTextPr",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isItalic",
                "description": "Specifies that the contents of the current run are displayed italicized.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetItalic",
        "longname": "ApiTextPr#SetItalic",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13014,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/SetItalic.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Gets the italic property from the current text properties.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @return {?boolean}\r\n\t * @since 8.1.0\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetItalic.js\r\n\t */",
        "description": "Gets the italic property from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noRun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\noRun.AddLineBreak();\noParagraph.AddElement(oRun);\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetItalic(true);\noSlide.AddObject(oShape);\noParagraph = Api.CreateParagraph();\nvar bItalic = oTextPr.GetItalic();\noParagraph.AddText(\"Italic property: \" + bItalic);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiTextPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetItalic",
        "longname": "ApiTextPr#GetItalic",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13029,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/GetItalic.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies that the contents of the run are displayed with a single horizontal line through the center of the line.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {boolean} isStrikeout - Specifies that the contents of the current run are displayed struck through.\r\n\t * @return {ApiTextPr} - this text properties.\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetStrikeout.js\r\n\t */",
        "description": "Specifies that the contents of the run are displayed with a single horizontal line through the center of the line.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontSize(50);\noTextPr.SetStrikeout(true);\noParagraph.SetJc(\"left\");\noRun.AddText(\"This is a struck out text inside the shape.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiTextPr",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isStrikeout",
                "description": "Specifies that the contents of the current run are displayed struck through.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetStrikeout",
        "longname": "ApiTextPr#SetStrikeout",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13042,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/SetStrikeout.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Gets the strikeout property from the current text properties.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @return {?boolean}\r\n\t * @since 8.1.0\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetStrikeout.js\r\n\t */",
        "description": "Gets the strikeout property from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noRun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\noRun.AddLineBreak();\noParagraph.AddElement(oRun);\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetStrikeout(true);\noSlide.AddObject(oShape);\noParagraph = Api.CreateParagraph();\nvar bStrikeout = oTextPr.GetStrikeout();\noParagraph.AddText(\"Strikeout property: \" + bStrikeout);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiTextPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetStrikeout",
        "longname": "ApiTextPr#GetStrikeout",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13057,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/GetStrikeout.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies that the contents of the run are displayed along with a line appearing directly below the character\r\n\t * (less than all the spacing above and below the characters on the line).\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {boolean} isUnderline - Specifies that the contents of the current run are displayed underlined.\r\n\t * @return {ApiTextPr} - this text properties.\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetUnderline.js\r\n\t */",
        "description": "Specifies that the contents of the run are displayed along with a line appearing directly below the character\r(less than all the spacing above and below the characters on the line).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontSize(50);\noTextPr.SetUnderline(true);\noParagraph.SetJc(\"left\");\noRun.AddText(\"This is an underlined text inside the shape.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiTextPr",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isUnderline",
                "description": "Specifies that the contents of the current run are displayed underlined.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetUnderline",
        "longname": "ApiTextPr#SetUnderline",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13071,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/SetUnderline.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Gets the underline property from the current text properties.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @return {?boolean}\r\n\t * @since 8.1.0\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetUnderline.js\r\n\t */",
        "description": "Gets the underline property from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noRun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\noRun.AddLineBreak();\noParagraph.AddElement(oRun);\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetUnderline(true);\noSlide.AddObject(oShape);\noParagraph = Api.CreateParagraph();\nvar bUnderline = oTextPr.GetUnderline();\noParagraph.AddText(\"Underline property: \" + bUnderline);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiTextPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetUnderline",
        "longname": "ApiTextPr#GetUnderline",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13086,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/GetUnderline.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets all 4 font slots with the specified font family.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {string} sFontFamily - The font family or families used for the current text run.\r\n\t * @return {ApiTextPr} - this text properties.\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetFontFamily.js\r\n\t */",
        "description": "Sets all 4 font slots with the specified font family.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontSize(50);\noTextPr.SetFontFamily(\"Comic Sans MS\");\noParagraph.SetJc(\"left\");\noRun.AddText(\"This is a sample text inside the shape with the font family set to 'Comic Sans MS' using the text properties.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiTextPr",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sFontFamily",
                "description": "The font family or families used for the current text run.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetFontFamily",
        "longname": "ApiTextPr#SetFontFamily",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13099,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/SetFontFamily.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Gets the font family from the current text properties.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @return {?string}\r\n\t * @since 8.1.0\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetFontFamily.js\r\n\t */",
        "description": "Gets the font family from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noRun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\noRun.AddLineBreak();\noParagraph.AddElement(oRun);\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontFamily(\"Arial\");\noSlide.AddObject(oShape);\noParagraph = Api.CreateParagraph();\nvar sFontFamily = oTextPr.GetFontFamily();\noParagraph.AddText(\"Font family: \" + sFontFamily);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiTextPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetFontFamily",
        "longname": "ApiTextPr#GetFontFamily",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13115,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/GetFontFamily.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the font size to the characters of the current text run.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {hps} nSize - The text size value measured in half-points (1/144 of an inch).\r\n\t * @return {ApiTextPr} - this text properties.\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetFontSize.js\r\n\t */",
        "description": "Sets the font size to the characters of the current text run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontSize(30);\noParagraph.SetJc(\"left\");\noRun.AddText(\"This is a sample text inside the shape with the font size set to 15 points using the text properties.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiTextPr",
        "params": [
            {
                "type": {
                    "names": [
                        "hps"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "hps"
                    }
                },
                "name": "nSize",
                "description": "The text size value measured in half-points (1/144 of an inch).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetFontSize",
        "longname": "ApiTextPr#SetFontSize",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13128,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/SetFontSize.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Gets the font size from the current text properties.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @return {?hps}\r\n\t * @since 8.1.0\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetFontSize.js\r\n\t */",
        "description": "Gets the font size from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noRun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\noRun.AddLineBreak();\noParagraph.AddElement(oRun);\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontSize(60);\noSlide.AddObject(oShape);\noParagraph = Api.CreateParagraph();\nvar nFontSize = oTextPr.GetFontSize();\noParagraph.AddText(\"Font size: \" + nFontSize);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiTextPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "hps"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "hps",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetFontSize",
        "longname": "ApiTextPr#GetFontSize",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13143,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/GetFontSize.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies the alignment which will be applied to the contents of the run in relation to the default appearance of the run text:\r\n\t * <b>\"baseline\"</b> - the characters in the current text run will be aligned by the default text baseline.\r\n\t * <b>\"subscript\"</b> - the characters in the current text run will be aligned below the default text baseline.\r\n\t * <b>\"superscript\"</b> - the characters in the current text run will be aligned above the default text baseline.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {(\"baseline\" | \"subscript\" | \"superscript\")} sType - The vertical alignment type applied to the text contents.\r\n\t * @return {ApiTextPr} - this text properties.\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetVertAlign.js\r\n\t */",
        "description": "Specifies the alignment which will be applied to the contents of the run in relation to the default appearance of the run text:\r<b>\"baseline\"</b> - the characters in the current text run will be aligned by the default text baseline.\r<b>\"subscript\"</b> - the characters in the current text run will be aligned below the default text baseline.\r<b>\"superscript\"</b> - the characters in the current text run will be aligned above the default text baseline.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontSize(50);\noTextPr.SetVertAlign(\"superscript\");\noParagraph.SetJc(\"left\");\noRun.AddText(\"This is a text inside the shape with vertical alignment set to 'superscript'.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiTextPr",
        "params": [
            {
                "type": {
                    "names": [
                        "\"baseline\"",
                        "\"subscript\"",
                        "\"superscript\""
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "\"baseline\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"subscript\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"superscript\""
                            }
                        ]
                    }
                },
                "name": "sType",
                "description": "The vertical alignment type applied to the text contents.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetVertAlign",
        "longname": "ApiTextPr#SetVertAlign",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13199,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/SetVertAlign.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies a highlighting color which is added to the text properties and applied as a background to the contents of the current run/range/paragraph.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CPE\"]\r\n\t * @param {highlightColor} sColor - Available highlight color.\r\n\t * @returns {ApiTextPr}\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetHighlight.js\r\n\t */",
        "description": "Specifies a highlighting color which is added to the text properties and applied as a background to the contents of the current run/range/paragraph.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontSize(50);\noTextPr.SetHighlight(\"lightGray\");\noParagraph.SetJc(\"left\");\noRun.AddText(\"This is a sample text inside the shape with the text highlighted with light gray color using the text properties.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiTextPr",
        "params": [
            {
                "type": {
                    "names": [
                        "highlightColor"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "highlightColor"
                    }
                },
                "name": "sColor",
                "description": "Available highlight color.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetHighlight",
        "longname": "ApiTextPr#SetHighlight",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13243,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/SetHighlight.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Gets the highlight property from the current text properties.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CPE\"]\r\n\t * @return {?string}\r\n\t * @since 8.1.0\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetHighlight.js\r\n\t */",
        "description": "Gets the highlight property from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noRun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\noRun.AddLineBreak();\noParagraph.AddElement(oRun);\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetHighlight(\"lightGray\");\noSlide.AddObject(oShape);\noParagraph = Api.CreateParagraph();\nvar sHighlight = oTextPr.GetHighlight();\noParagraph.AddText(\"Highlight property: \" + sHighlight);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiTextPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetHighlight",
        "longname": "ApiTextPr#GetHighlight",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13276,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/GetHighlight.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the text spacing measured in twentieths of a point.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {twips} nSpacing - The value of the text spacing measured in twentieths of a point (1/1440 of an inch).\r\n\t * @return {ApiTextPr} - this text properties.\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetSpacing.js\r\n\t */",
        "description": "Sets the text spacing measured in twentieths of a point.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontSize(50);\noTextPr.SetSpacing(80);\noParagraph.SetJc(\"left\");\noRun.AddText(\"This is a sample text inside the shape with the spacing set to 4 points (80 twentieths of a point) using the text properties.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiTextPr",
        "params": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "twips"
                    }
                },
                "name": "nSpacing",
                "description": "The value of the text spacing measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetSpacing",
        "longname": "ApiTextPr#SetSpacing",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13295,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/SetSpacing.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Gets the text spacing from the current text properties measured in twentieths of a point.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @return {?twips}\r\n\t * @since 8.1.0\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetSpacing.js\r\n\t */",
        "description": "Gets the text spacing from the current text properties measured in twentieths of a point.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noRun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\noRun.AddLineBreak();\noParagraph.AddElement(oRun);\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetSpacing(80);\noSlide.AddObject(oShape);\noParagraph = Api.CreateParagraph();\nvar nSpacing = oTextPr.GetSpacing();\noParagraph.AddText(\"Text spacing: \" + nSpacing);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiTextPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "twips",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetSpacing",
        "longname": "ApiTextPr#GetSpacing",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13310,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/GetSpacing.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies that the contents of the run are displayed with two horizontal lines through each character displayed on the line.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {boolean} isDoubleStrikeout - Specifies that the contents of the current run are displayed double struck through.\r\n\t * @return {ApiTextPr} - this text properties.\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetDoubleStrikeout.js\r\n\t */",
        "description": "Specifies that the contents of the run are displayed with two horizontal lines through each character displayed on the line.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontSize(50);\noTextPr.SetDoubleStrikeout(true);\noParagraph.SetJc(\"left\");\noRun.AddText(\"This is a sample text inside the shape struck out with two lines using the text properties.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiTextPr",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isDoubleStrikeout",
                "description": "Specifies that the contents of the current run are displayed double struck through.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetDoubleStrikeout",
        "longname": "ApiTextPr#SetDoubleStrikeout",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13328,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/SetDoubleStrikeout.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Gets the double strikeout property from the current text properties.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @return {?boolean}\r\n\t * @since 8.1.0\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetDoubleStrikeout.js\r\n\t */",
        "description": "Gets the double strikeout property from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noRun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\noRun.AddLineBreak();\noParagraph.AddElement(oRun);\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetDoubleStrikeout(true);\noSlide.AddObject(oShape);\noParagraph = Api.CreateParagraph();\nvar bDoubleStrikeout = oTextPr.GetDoubleStrikeout();\noParagraph.AddText(\"Double strikeout property: \" + bDoubleStrikeout);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiTextPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetDoubleStrikeout",
        "longname": "ApiTextPr#GetDoubleStrikeout",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13343,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/GetDoubleStrikeout.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies that any lowercase characters in the text run are formatted for display only as their capital letter character equivalents.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {boolean} isCaps - Specifies that the contents of the current run are displayed capitalized.\r\n\t * @return {ApiTextPr} - this text properties.\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetCaps.js\r\n\t */",
        "description": "Specifies that any lowercase characters in the text run are formatted for display only as their capital letter character equivalents.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontSize(50);\noTextPr.SetCaps(true);\noParagraph.SetJc(\"left\");\noRun.AddText(\"This is a sample text inside the shape set to capital letters using the text properties.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiTextPr",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isCaps",
                "description": "Specifies that the contents of the current run are displayed capitalized.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetCaps",
        "longname": "ApiTextPr#SetCaps",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13356,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/SetCaps.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies whether the text with the current text properties are capitalized.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @return {?boolean}\r\n\t * @since 8.1.0\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetCaps.js\r\n\t */",
        "description": "Specifies whether the text with the current text properties are capitalized.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noRun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\noRun.AddLineBreak();\noParagraph.AddElement(oRun);\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetCaps(true);\noSlide.AddObject(oShape);\noParagraph = Api.CreateParagraph();\nvar bCaps = oTextPr.GetCaps();\noParagraph.AddText(\"Property of the capitalized letters: \" + bCaps);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiTextPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetCaps",
        "longname": "ApiTextPr#GetCaps",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13371,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/GetCaps.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies that all the small letter characters in the text run are formatted for display only as their capital\r\n\t * letter character equivalents which are two points smaller than the actual font size specified for this text.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {boolean} isSmallCaps - Specifies if the contents of the current run are displayed capitalized two points smaller or not.\r\n\t * @return {ApiTextPr} - this text properties.\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetSmallCaps.js\r\n\t */",
        "description": "Specifies that all the small letter characters in the text run are formatted for display only as their capital\rletter character equivalents which are two points smaller than the actual font size specified for this text.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontSize(50);\noTextPr.SetSmallCaps(true);\noParagraph.SetJc(\"left\");\noRun.AddText(\"This is a sample text inside the shape with the font set to small capitalized letters using the text properties.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiTextPr",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isSmallCaps",
                "description": "Specifies if the contents of the current run are displayed capitalized two points smaller or not.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetSmallCaps",
        "longname": "ApiTextPr#SetSmallCaps",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13385,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/SetSmallCaps.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies whether the text with the current text properties are displayed capitalized two points smaller than the actual font size.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @return {?boolean}\r\n\t * @since 8.1.0\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetSmallCaps.js\r\n\t */",
        "description": "Specifies whether the text with the current text properties are displayed capitalized two points smaller than the actual font size.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noRun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\noRun.AddLineBreak();\noParagraph.AddElement(oRun);\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetSmallCaps(true);\noSlide.AddObject(oShape);\noParagraph = Api.CreateParagraph();\nvar bSmallCaps = oTextPr.GetSmallCaps();\noParagraph.AddText(\"Property of the small capitalized letters: \" + bSmallCaps);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiTextPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetSmallCaps",
        "longname": "ApiTextPr#GetSmallCaps",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13400,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/GetSmallCaps.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the text color to the current text run.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CSE\", \"CPE\"]\r\n\t * @param {ApiFill} oApiFill - The color or pattern used to fill the text color.\r\n\t * @return {ApiTextPr} - this text properties.\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetFill.js\r\n\t */",
        "description": "Sets the text color to the current text run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontSize(50);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noTextPr.SetFill(oFill);\noRun.AddText(\"This is a text run with the font color set to black using the text properties.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiTextPr",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                },
                "name": "oApiFill",
                "description": "The color or pattern used to fill the text color.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetFill",
        "longname": "ApiTextPr#SetFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13526,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/SetFill.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Gets the text color from the current text properties.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CSE\", \"CPE\"]\r\n\t * @return {ApiFill}\r\n\t * @since 8.1.0\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetFill.js\r\n\t */",
        "description": "Gets the text color from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noRun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\noRun.AddLineBreak();\noParagraph.AddElement(oRun);\nvar oTextPr = oRun.GetTextPr();\noFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noTextPr.SetFill(oFill);\noSlide.AddObject(oShape);\noParagraph = Api.CreateParagraph();\noFill = oTextPr.GetFill();\nvar sType = oFill.GetClassType();\noParagraph.AddText(\"Text color type: \" + sType);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiTextPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                }
            }
        ],
        "name": "GetFill",
        "longname": "ApiTextPr#GetFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13541,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/GetFill.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the text fill to the current text run.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\r\n\t * @param {ApiFill} oApiFill - The color or pattern used to fill the text color.\r\n\t * @return {ApiTextPr} - this text properties.\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetTextFill.js\r\n\t */",
        "description": "Sets the text fill to the current text run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontSize(50);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noTextPr.SetTextFill(oFill);\noParagraph.SetJc(\"left\");\noRun.AddText(\"This is a sample text inside the shape with the black text fill set using the text properties.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiTextPr",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                },
                "name": "oApiFill",
                "description": "The color or pattern used to fill the text color.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetTextFill",
        "longname": "ApiTextPr#SetTextFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13559,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/SetTextFill.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Gets the text fill from the current text properties.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @return {ApiFill}\r\n\t * @since 8.1.0\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetTextFill.js\r\n\t */",
        "description": "Gets the text fill from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noRun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\noRun.AddLineBreak();\noParagraph.AddElement(oRun);\nvar oTextPr = oRun.GetTextPr();\noFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noTextPr.SetTextFill(oFill);\noSlide.AddObject(oShape);\noParagraph = Api.CreateParagraph();\noFill = oTextPr.GetTextFill();\nvar sType = oFill.GetClassType();\noParagraph.AddText(\"Text fill type: \" + sType);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiTextPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                }
            }
        ],
        "name": "GetTextFill",
        "longname": "ApiTextPr#GetTextFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13574,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/GetTextFill.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the text outline to the current text run.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\r\n\t * @param {ApiStroke} oStroke - The stroke used to create the text outline.\r\n\t * @return {ApiTextPr} - this text properties.\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetOutLine.js\r\n\t */",
        "description": "Sets the text outline to the current text run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontSize(50);\noStroke = Api.CreateStroke(0.2 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\noTextPr.SetOutLine(oStroke);\noParagraph.SetJc(\"left\");\noRun.AddText(\"This is a text run with the black text outline set using the text properties.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiTextPr",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiStroke"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiStroke"
                    }
                },
                "name": "oStroke",
                "description": "The stroke used to create the text outline.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetOutLine",
        "longname": "ApiTextPr#SetOutLine",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13592,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/SetOutLine.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Gets the text outline from the current text properties.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @return {ApiStroke}\r\n\t * @since 8.1.0\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetOutLine.js\r\n\t */",
        "description": "Gets the text outline from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noRun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\noRun.AddLineBreak();\noParagraph.AddElement(oRun);\nvar oTextPr = oRun.GetTextPr();\noStroke = Api.CreateStroke(0.2 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\noTextPr.SetOutLine(oStroke);\noSlide.AddObject(oShape);\noParagraph = Api.CreateParagraph();\noStroke = oTextPr.GetOutLine();\nvar sType = oStroke.GetClassType();\noParagraph.AddText(\"Text outline type: \" + sType);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiTextPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiStroke"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiStroke"
                    }
                }
            }
        ],
        "name": "GetOutLine",
        "longname": "ApiTextPr#GetOutLine",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13607,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/GetOutLine.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns a type of the ApiParaPr class.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {\"paraPr\"}\r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetClassType.js\r\n\t */",
        "description": "Returns a type of the ApiParaPr class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\nvar sClassType = oParaPr.GetClassType();\noParaPr.SetIndFirstLine(1440);\noParagraph.AddText(\"This is the first paragraph with the indent of 1 inch set to the first line. \");\noParagraph.AddText(\"This indent is set by the paragraph style. No paragraph inline style is applied. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\noParagraph = Api.CreateParagraph();\noParagraph.AddText(\"Class Type = \" + sClassType);\noDocContent.Push(oParagraph);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiParaPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"paraPr\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"paraPr\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiParaPr#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13655,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the paragraph left side indentation.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {twips} nValue - The paragraph left side indentation value measured in twentieths of a point (1/1440 of an inch).\r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetIndLeft.js\r\n\t */",
        "description": "Sets the paragraph left side indentation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\noParaPr.SetIndLeft(2880);\noParagraph.AddText(\"This is the first paragraph with the indent of 2 inches set to it. \");\noParagraph.AddText(\"This indent is set by the paragraph style. No paragraph inline style is applied. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiParaPr",
        "params": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "twips"
                    }
                },
                "name": "nValue",
                "description": "The paragraph left side indentation value measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetIndLeft",
        "longname": "ApiParaPr#SetIndLeft",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13724,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/SetIndLeft.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns the paragraph left side indentation.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {twips | undefined} - The paragraph left side indentation value measured in twentieths of a point (1/1440 of an inch).\r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetIndLeft.js\r\n\t */",
        "description": "Returns the paragraph left side indentation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noSlide.AddObject(oShape);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\noParaPr.SetIndLeft(2880);\noParagraph.AddText(\"This is the first paragraph with the indent of 2 inches set to it. \");\noParagraph.AddText(\"This indent is set by the paragraph style. No paragraph inline style is applied. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\nvar nIndLeft = oParaPr.GetIndLeft();\noParagraph = Api.CreateParagraph();\noParagraph.AddText(\"Left indent: \" + nIndLeft);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiParaPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "twips",
                        "undefined"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "twips"
                            },
                            {
                                "type": "UndefinedLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetIndLeft",
        "longname": "ApiParaPr#GetIndLeft",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13736,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/GetIndLeft.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the paragraph right side indentation.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {twips} nValue - The paragraph right side indentation value measured in twentieths of a point (1/1440 of an inch).\r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetIndRight.js\r\n\t */",
        "description": "Sets the paragraph right side indentation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\noParaPr.SetIndRight(2880);\noParagraph.AddText(\"This is the first paragraph with the right offset of 2 inches set to it. \");\noParagraph.AddText(\"This offset is set by the paragraph style. No paragraph inline style is applied. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiParaPr",
        "params": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "twips"
                    }
                },
                "name": "nValue",
                "description": "The paragraph right side indentation value measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetIndRight",
        "longname": "ApiParaPr#SetIndRight",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13753,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/SetIndRight.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns the paragraph right side indentation.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {twips | undefined} - The paragraph right side indentation value measured in twentieths of a point (1/1440 of an inch).\r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetIndRight.js\r\n\t */",
        "description": "Returns the paragraph right side indentation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noSlide.AddObject(oShape);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\noParaPr.SetIndRight(2880);\noParaPr.SetJc(\"right\");\noParagraph.AddText(\"This is the first paragraph with the right offset of 2 inches set to it. \");\noParagraph.AddText(\"This indent is set by the paragraph style. No paragraph inline style is applied. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\nvar nIndRight = oParaPr.GetIndRight();\noParagraph = Api.CreateParagraph();\noParagraph.AddText(\"Right indent: \" + nIndRight);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiParaPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "twips",
                        "undefined"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "twips"
                            },
                            {
                                "type": "UndefinedLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetIndRight",
        "longname": "ApiParaPr#GetIndRight",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13765,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/GetIndRight.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the paragraph first line indentation.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {twips} nValue - The paragraph first line indentation value measured in twentieths of a point (1/1440 of an inch).\r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetIndFirstLine.js\r\n\t */",
        "description": "Sets the paragraph first line indentation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\noParaPr.SetIndFirstLine(1440);\noParagraph.AddText(\"This is the first paragraph with the indent of 1 inch set to the first line. \");\noParagraph.AddText(\"This indent is set by the paragraph style. No paragraph inline style is applied. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiParaPr",
        "params": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "twips"
                    }
                },
                "name": "nValue",
                "description": "The paragraph first line indentation value measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetIndFirstLine",
        "longname": "ApiParaPr#SetIndFirstLine",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13783,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/SetIndFirstLine.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns the paragraph first line indentation.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {twips | undefined} - The paragraph first line indentation value measured in twentieths of a point (1/1440 of an inch).\r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetIndFirstLine.js\r\n\t */",
        "description": "Returns the paragraph first line indentation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noSlide.AddObject(oShape);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\noParaPr.SetIndFirstLine(1440);\noParagraph.AddText(\"This is the first paragraph with the indent of 1 inch set to the first line. \");\noParagraph.AddText(\"This indent is set by the paragraph style. No paragraph inline style is applied. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\nvar nIndFirstLine = oParaPr.GetIndFirstLine();\noParagraph = Api.CreateParagraph();\noParagraph.AddText(\"First line indent: \" + nIndFirstLine);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiParaPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "twips",
                        "undefined"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "twips"
                            },
                            {
                                "type": "UndefinedLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetIndFirstLine",
        "longname": "ApiParaPr#GetIndFirstLine",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13795,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/GetIndFirstLine.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the paragraph contents justification.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {(\"left\" | \"right\" | \"both\" | \"center\")} sJc - The justification type that\r\n\t * will be applied to the paragraph contents.\r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetJc.js\r\n\t */",
        "description": "Sets the paragraph contents justification.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\noParaPr.SetJc(\"center\");\noParagraph.AddText(\"This is a paragraph with the text in it aligned by the center. \");\noParagraph.AddText(\"The justification is specified in the paragraph style. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiParaPr",
        "params": [
            {
                "type": {
                    "names": [
                        "\"left\"",
                        "\"right\"",
                        "\"both\"",
                        "\"center\""
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "\"left\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"right\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"both\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"center\""
                            }
                        ]
                    }
                },
                "name": "sJc",
                "description": "The justification type that\rwill be applied to the paragraph contents.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetJc",
        "longname": "ApiParaPr#SetJc",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13815,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/SetJc.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns the paragraph contents justification.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {(\"left\" | \"right\" | \"both\" | \"center\" | undefined)} \r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetJc.js\r\n\t */",
        "description": "Returns the paragraph contents justification.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noSlide.AddObject(oShape);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\noParaPr.SetJc(\"center\");\noParagraph.AddText(\"This is a paragraph with the text in it aligned by the center. \");\noParagraph.AddText(\"The justification is specified in the paragraph style. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\nvar sJc = oParaPr.GetJc();\noParagraph = Api.CreateParagraph();\noParagraph.AddText(\"Justification: \" + sJc);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiParaPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"left\"",
                        "\"right\"",
                        "\"both\"",
                        "\"center\"",
                        "undefined"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "\"left\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"right\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"both\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"center\""
                            },
                            {
                                "type": "UndefinedLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetJc",
        "longname": "ApiParaPr#GetJc",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13827,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/GetJc.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the paragraph line spacing. If the value of the sLineRule parameter is either \r\n\t * \"atLeast\" or \"exact\", then the value of nLine will be interpreted as twentieths of a point. If \r\n\t * the value of the sLineRule parameter is \"auto\", then the value of the \r\n\t * nLine parameter will be interpreted as 240ths of a line.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {(twips | line240)} nLine - The line spacing value measured either in twentieths of a point (1/1440 of an inch) or in 240ths of a line.\r\n\t * @param {(\"auto\" | \"atLeast\" | \"exact\")} sLineRule - The rule that determines the measuring units of the line spacing.\r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetSpacingLine.js\r\n\t */",
        "description": "Sets the paragraph line spacing. If the value of the sLineRule parameter is either \r\"atLeast\" or \"exact\", then the value of nLine will be interpreted as twentieths of a point. If \rthe value of the sLineRule parameter is \"auto\", then the value of the \rnLine parameter will be interpreted as 240ths of a line.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\noParaPr.SetSpacingLine(3 * 240, \"auto\");\noParagraph.AddText(\"Paragraph 1. Spacing: 3 times of a common paragraph line spacing.\");\noParagraph.AddLineBreak();\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiParaPr",
        "params": [
            {
                "type": {
                    "names": [
                        "twips",
                        "line240"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "twips"
                            },
                            {
                                "type": "NameExpression",
                                "name": "line240"
                            }
                        ]
                    }
                },
                "name": "nLine",
                "description": "The line spacing value measured either in twentieths of a point (1/1440 of an inch) or in 240ths of a line.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "\"auto\"",
                        "\"atLeast\"",
                        "\"exact\""
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "\"auto\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"atLeast\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"exact\""
                            }
                        ]
                    }
                },
                "name": "sLineRule",
                "description": "The rule that determines the measuring units of the line spacing.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetSpacingLine",
        "longname": "ApiParaPr#SetSpacingLine",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13907,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/SetSpacingLine.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns the paragraph line spacing value.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {twips | line240 | undefined} - to know is twips or line240 use ApiParaPr.prototype.GetSpacingLineRule().\r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetSpacingLineValue.js\r\n\t */",
        "description": "Returns the paragraph line spacing value.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noSlide.AddObject(oShape);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\noParaPr.SetSpacingLine(3 * 240, \"auto\");\noParagraph.AddText(\"Paragraph 1. Spacing: 3 times of a common paragraph line spacing.\");\noParagraph.AddLineBreak();\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\nvar nSpacingLineValue = oParaPr.GetSpacingLineValue();\noParagraph = Api.CreateParagraph();\noParagraph.AddText(\"Spacing line value : \" + nSpacingLineValue);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiParaPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "twips",
                        "line240",
                        "undefined"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "twips"
                            },
                            {
                                "type": "NameExpression",
                                "name": "line240"
                            },
                            {
                                "type": "UndefinedLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetSpacingLineValue",
        "longname": "ApiParaPr#GetSpacingLineValue",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13938,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/GetSpacingLineValue.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns the paragraph line spacing rule.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {\"auto\" | \"atLeast\" | \"exact\" | undefined} \r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetSpacingLineRule.js\r\n\t */",
        "description": "Returns the paragraph line spacing rule.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noSlide.AddObject(oShape);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\noParaPr.SetSpacingLine(3 * 240, \"auto\");\noParagraph.AddText(\"Paragraph 1. Spacing: 3 times of a common paragraph line spacing.\");\noParagraph.AddLineBreak();\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\nvar sSpacingLineRule = oParaPr.GetSpacingLineRule();\noParagraph = Api.CreateParagraph();\noParagraph.AddText(\"Spacing line rule : \" + sSpacingLineRule);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiParaPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"auto\"",
                        "\"atLeast\"",
                        "\"exact\"",
                        "undefined"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "\"auto\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"atLeast\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"exact\""
                            },
                            {
                                "type": "UndefinedLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetSpacingLineRule",
        "longname": "ApiParaPr#GetSpacingLineRule",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13971,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/GetSpacingLineRule.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the spacing before the current paragraph. If the value of the isBeforeAuto parameter is true, then \r\n\t * any value of the nBefore is ignored. If isBeforeAuto parameter is not specified, then \r\n\t * it will be interpreted as false.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {twips} nBefore - The value of the spacing before the current paragraph measured in twentieths of a point (1/1440 of an inch).\r\n\t * @param {boolean} [isBeforeAuto=false] - The true value disables the spacing before the current paragraph.\r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetSpacingBefore.js\r\n\t */",
        "description": "Sets the spacing before the current paragraph. If the value of the isBeforeAuto parameter is true, then \rany value of the nBefore is ignored. If isBeforeAuto parameter is not specified, then \rit will be interpreted as false.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\noParagraph.AddText(\"This is an example of setting a space before a paragraph. \");\noParagraph.AddText(\"The second paragraph will have an offset of one inch from the top. \");\noParagraph.AddText(\"This is due to the fact that the second paragraph has this offset enabled.\");\noParagraph = Api.CreateParagraph();\noParaPr = oParagraph.GetParaPr();\noParaPr.SetSpacingBefore(1440);\noParagraph.AddText(\"This is the second paragraph and it is one inch away from the first paragraph.\");\noDocContent.Push(oParagraph);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiParaPr",
        "params": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "twips"
                    }
                },
                "name": "nBefore",
                "description": "The value of the spacing before the current paragraph measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isBeforeAuto",
                "description": "The true value disables the spacing before the current paragraph.",
                "optional": true,
                "defaultvalue": false
            }
        ],
        "returns": null,
        "name": "SetSpacingBefore",
        "longname": "ApiParaPr#SetSpacingBefore",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14009,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/SetSpacingBefore.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns the spacing before value of the current paragraph.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {twips} - The value of the spacing before the current paragraph measured in twentieths of a point (1/1440 of an inch).\r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetSpacingBefore.js\r\n\t */",
        "description": "Returns the spacing before value of the current paragraph.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noSlide.AddObject(oShape);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.AddText(\"This is an example of setting a space before a paragraph. \");\noParagraph.AddText(\"The second paragraph will have an offset of one inch from the top. \");\noParagraph.AddText(\"This is due to the fact that the second paragraph has this offset enabled.\");\nvar oParagraph2 = Api.CreateParagraph();\noParagraph2.AddText(\"This is the second paragraph and it is one inch away from the first paragraph.\");\nvar oParaPr = oParagraph2.GetParaPr();\noParaPr.SetSpacingBefore(1440);\noDocContent.Push(oParagraph2);\nvar nSpacingBefore = oParaPr.GetSpacingBefore();\noParagraph = Api.CreateParagraph();\noParagraph.AddText(\"Spacing before: \" + nSpacingBefore);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiParaPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "twips"
                    }
                }
            }
        ],
        "name": "GetSpacingBefore",
        "longname": "ApiParaPr#GetSpacingBefore",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14026,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/GetSpacingBefore.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the spacing after the current paragraph. If the value of the isAfterAuto parameter is true, then \r\n\t * any value of the nAfter is ignored. If isAfterAuto parameter is not specified, then it \r\n\t * will be interpreted as false.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {twips} nAfter - The value of the spacing after the current paragraph measured in twentieths of a point (1/1440 of an inch).\r\n\t * @param {boolean} [isAfterAuto=false] - The true value disables the spacing after the current paragraph.\r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetSpacingAfter.js\r\n\t */",
        "description": "Sets the spacing after the current paragraph. If the value of the isAfterAuto parameter is true, then \rany value of the nAfter is ignored. If isAfterAuto parameter is not specified, then it \rwill be interpreted as false.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\noParaPr.SetSpacingAfter(1440);\noParagraph.AddText(\"This is an example of setting a space after a paragraph. \");\noParagraph.AddText(\"The second paragraph will have an offset of one inch from the top. \");\noParagraph.AddText(\"This is due to the fact that the first paragraph has this offset enabled.\");\noParagraph = Api.CreateParagraph();\noParagraph.AddText(\"This is the second paragraph and it is one inch away from the first paragraph.\");\noDocContent.Push(oParagraph);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiParaPr",
        "params": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "twips"
                    }
                },
                "name": "nAfter",
                "description": "The value of the spacing after the current paragraph measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isAfterAuto",
                "description": "The true value disables the spacing after the current paragraph.",
                "optional": true,
                "defaultvalue": false
            }
        ],
        "returns": null,
        "name": "SetSpacingAfter",
        "longname": "ApiParaPr#SetSpacingAfter",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14048,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/SetSpacingAfter.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns the spacing after value of the current paragraph. \r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {twips} - The value of the spacing after the current paragraph measured in twentieths of a point (1/1440 of an inch).\r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetSpacingAfter.js\r\n\t */",
        "description": "Returns the spacing after value of the current paragraph.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noSlide.AddObject(oShape);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\noParaPr.SetSpacingAfter(1440);\noParagraph.AddText(\"This is an example of setting a space after a paragraph. \");\noParagraph.AddText(\"The second paragraph will have an offset of one inch from the top. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\nvar nSpacingAfter = oParaPr.GetSpacingAfter();\noParagraph = Api.CreateParagraph();\noParagraph.AddText(\"Spacing after : \" + nSpacingAfter);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiParaPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "twips"
                    }
                }
            }
        ],
        "name": "GetSpacingAfter",
        "longname": "ApiParaPr#GetSpacingAfter",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14065,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/GetSpacingAfter.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies a sequence of custom tab stops which will be used for any tab characters in the current paragraph.\r\n\t * <b>Warning</b>: The lengths of aPos array and aVal array <b>MUST BE</b> equal to each other.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {twips[]} aPos - An array of the positions of custom tab stops with respect to the current page margins\r\n\t * measured in twentieths of a point (1/1440 of an inch).\r\n\t * @param {TabJc[]} aVal - An array of the styles of custom tab stops, which determines the behavior of the tab\r\n\t * stop and the alignment which will be applied to text entered at the current custom tab stop.\r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetTabs.js\r\n\t */",
        "description": "Specifies a sequence of custom tab stops which will be used for any tab characters in the current paragraph.\r<b>Warning</b>: The lengths of aPos array and aVal array <b>MUST BE</b> equal to each other.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\noParaPr.SetTabs([1440, 4320, 7200], [\"left\", \"center\", \"right\"]);\noParagraph.AddTabStop();\noParagraph.AddText(\"Custom tab - 1 inch left\");\noParagraph.AddLineBreak();\noParagraph.AddTabStop();\noParagraph.AddTabStop();\noParagraph.AddText(\"Custom tab - 3 inches center\");\noParagraph.AddLineBreak();\noParagraph.AddTabStop();\noParagraph.AddTabStop();\noParagraph.AddTabStop();\noParagraph.AddText(\"Custom tab - 5 inches right\");\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiParaPr",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<twips>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "twips",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "aPos",
                "description": "An array of the positions of custom tab stops with respect to the current page margins\rmeasured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "Array.<TabJc>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "TabJc",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "aVal",
                "description": "An array of the styles of custom tab stops, which determines the behavior of the tab\rstop and the alignment which will be applied to text entered at the current custom tab stop.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetTabs",
        "longname": "ApiParaPr#SetTabs",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14238,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/SetTabs.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the bullet or numbering to the current paragraph.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CSE\", \"CPE\"]\r\n\t * @param {?ApiBullet} oBullet - The bullet object created with the {@link Api#CreateBullet} or {@link Api#CreateNumbering} method.\r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetBullet.js\r\n\t */",
        "description": "Sets the bullet or numbering to the current paragraph.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\nvar oBullet = Api.CreateBullet(\"-\");\noParaPr.SetBullet(oBullet);\noParagraph.AddText(\" This is an example of the bulleted paragraph.\");\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiParaPr",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiBullet"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiBullet",
                        "nullable": true
                    }
                },
                "name": "oBullet",
                "description": "The bullet object created with the {@link Api#CreateBullet} or {@link Api#CreateNumbering} method.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetBullet",
        "longname": "ApiParaPr#SetBullet",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14282,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/SetBullet.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the outline level for the specified properties.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {Number?} [nLvl=undefined] - 0 - based outline level. Possible values are: 0-8.\r\n\t * Note: to set no outline level use this method without parameter.\r\n\t * @returns {boolean}\r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetOutlineLvl.js\r\n\t */",
        "description": "Sets the outline level for the specified properties.",
        "memberof": "ApiParaPr",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Number",
                        "nullable": true
                    }
                },
                "name": "nLvl",
                "description": "0 - based outline level. Possible values are: 0-8.\rNote: to set no outline level use this method without parameter.",
                "optional": true,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetOutlineLvl",
        "longname": "ApiParaPr#SetOutlineLvl",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14301,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/SetOutlineLvl.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Gets the outline level of the specified properties.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {Number?}\r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetOutlineLvl.js\r\n\t */",
        "description": "Gets the outline level of the specified properties.",
        "memberof": "ApiParaPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Number",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetOutlineLvl",
        "longname": "ApiParaPr#GetOutlineLvl",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14324,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/GetOutlineLvl.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns a type of the ApiDrawing class.\r\n\t * @memberof ApiDrawing\r\n\t * @typeofeditors [\"CDE\", \"CPE\"]\r\n\t * @returns {\"drawing\"}\r\n\t * @see office-js-api/Examples/{Editor}/ApiDrawing/Methods/GetClassType.js\r\n\t */",
        "description": "Returns a type of the ApiDrawing class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oDrawing = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noDrawing.SetPosition(608400, 1267200);\noDrawing.SetSize(300 * 36000, 130 * 36000);\noSlide.AddObject(oDrawing);\nvar aDrawings = oSlide.GetAllDrawings();\nvar sType = aDrawings[0].GetClassType();\nvar oDocContent = oDrawing.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Class Type = \" + sType);\n```",
        "memberof": "ApiDrawing",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"drawing\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"drawing\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiDrawing#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15406,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiDrawing/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns the width of the current drawing.\r\n\t * @memberof ApiDrawing\r\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\r\n\t * @returns {EMU}\r\n\t * @see office-js-api/Examples/{Editor}/ApiDrawing/Methods/GetWidth.js\r\n\t */",
        "description": "Returns the width of the current drawing.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar nWidth = oShape.GetWidth();\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.AddText(\"Drawing width: \" + nWidth);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiDrawing",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                }
            }
        ],
        "name": "GetWidth",
        "longname": "ApiDrawing#GetWidth",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3562,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiDrawing/Methods/GetWidth.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns the height of the current drawing.\r\n\t * @memberof ApiDrawing\r\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\r\n\t * @returns {EMU}\r\n\t * @see office-js-api/Examples/{Editor}/ApiDrawing/Methods/GetHeight.js\r\n\t */",
        "description": "Returns the height of the current drawing.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar nHeight = oShape.GetHeight();\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.AddText(\"Drawing height: \" + nHeight);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiDrawing",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                }
            }
        ],
        "name": "GetHeight",
        "longname": "ApiDrawing#GetHeight",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3573,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiDrawing/Methods/GetHeight.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns a type of the ApiImage class.\r\n\t * @memberof ApiImage\r\n\t * @typeofeditors [\"CDE\", \"CPE\"]\r\n\t * @returns {\"image\"}\r\n\t * @see office-js-api/Examples/{Editor}/ApiImage/Methods/GetClassType.js\r\n\t */",
        "description": "Returns a type of the ApiImage class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oImage = Api.CreateImage(\"https://api.onlyoffice.com/content/img/docbuilder/examples/step2_1.png\", 100 * 36000, 50 * 36000);\noSlide.AddObject(oImage);\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar sClassType = oImage.GetClassType();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Class Type = \" + sClassType);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiImage",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"image\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"image\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiImage#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16064,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiImage/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns a type of the ApiOleObject class.\r\n\t * @memberof ApiOleObject\r\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\r\n\t * @returns {\"oleObject\"}\r\n\t * @see office-js-api/Examples/{Editor}/ApiOleObject/Methods/GetClassType.js\r\n\t */",
        "description": "Returns a type of the ApiOleObject class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oOleObject = Api.CreateOleObject(\"https://api.onlyoffice.com/content/img/docbuilder/examples/ole-object-image.png\", 130 * 36000, 90 * 36000, \"https://youtu.be/SKGz4pmnpgY\", \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\");\noOleObject.SetSize(200 * 36000, 130 * 36000);\noOleObject.SetPosition(70 * 36000, 30 * 36000);\noSlide.AddObject(oOleObject);\nvar sType = oOleObject.GetClassType();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateLinearGradientFill([oGs1, oGs2], 5400000);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oDrawing = Api.CreateShape(\"rect\", 300 * 36000, 15 * 36000, oFill, oStroke);\noDrawing.SetPosition(20 * 36000, 170 * 36000);\nvar oDocContent = oDrawing.GetContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.AddText(\"Class type: \" + sType);\noSlide.AddObject(oDrawing);\n```",
        "memberof": "ApiOleObject",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"oleObject\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"oleObject\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiOleObject#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3770,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiOleObject/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the data to the current OLE object.\r\n\t * @memberof ApiOleObject\r\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\r\n\t * @param {string} sData - The OLE object string data.\r\n\t * @returns {boolean}\r\n\t * @see office-js-api/Examples/{Editor}/ApiOleObject/Methods/SetData.js\r\n\t */",
        "description": "Sets the data to the current OLE object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oOleObject = Api.CreateOleObject(\"https://api.onlyoffice.com/content/img/docbuilder/examples/ole-object-image.png\", 130 * 36000, 90 * 36000, \"https://youtu.be/SKGz4pmnpgY\", \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\");\noOleObject.SetSize(200 * 36000, 130 * 36000);\noOleObject.SetPosition(70 * 36000, 30 * 36000);\noSlide.AddObject(oOleObject);\noOleObject.SetData(\"https://youtu.be/eJxpkjQG6Ew\");\n```",
        "memberof": "ApiOleObject",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sData",
                "description": "The OLE object string data.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetData",
        "longname": "ApiOleObject#SetData",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3783,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiOleObject/Methods/SetData.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns the string data from the current OLE object.\r\n\t * @memberof ApiOleObject\r\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\r\n\t * @returns {string}\r\n\t * @see office-js-api/Examples/{Editor}/ApiOleObject/Methods/GetData.js\r\n\t */",
        "description": "Returns the string data from the current OLE object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oOleObject = Api.CreateOleObject(\"https://api.onlyoffice.com/content/img/docbuilder/examples/ole-object-image.png\", 130 * 36000, 90 * 36000, \"https://youtu.be/SKGz4pmnpgY\", \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\");\noOleObject.SetSize(200 * 36000, 130 * 36000);\noOleObject.SetPosition(70 * 36000, 30 * 36000);\noSlide.AddObject(oOleObject);\nvar sData = oOleObject.GetData();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateLinearGradientFill([oGs1, oGs2], 5400000);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oDrawing = Api.CreateShape(\"rect\", 300 * 36000, 15 * 36000, oFill, oStroke);\noDrawing.SetPosition(20 * 36000, 170 * 36000);\nvar oDocContent = oDrawing.GetContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.AddText(\"The OLE object data: \" + sData);\noSlide.AddObject(oDrawing);\n```",
        "memberof": "ApiOleObject",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetData",
        "longname": "ApiOleObject#GetData",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3799,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiOleObject/Methods/GetData.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the application ID to the current OLE object.\r\n\t * @memberof ApiOleObject\r\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\r\n\t * @param {string} sAppId - The application ID associated with the current OLE object.\r\n\t * @returns {boolean}\r\n\t * @see office-js-api/Examples/{Editor}/ApiOleObject/Methods/SetApplicationId.js\r\n\t */",
        "description": "Sets the application ID to the current OLE object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oOleObject = Api.CreateOleObject(\"https://api.onlyoffice.com/content/img/docbuilder/examples/ole-object-image.png\", 130 * 36000, 90 * 36000, \"https://youtu.be/SKGz4pmnpgY\", \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\");\noOleObject.SetSize(200 * 36000, 130 * 36000);\noOleObject.SetPosition(70 * 36000, 30 * 36000);\noSlide.AddObject(oOleObject);\noOleObject.SetApplicationId(\"asc.{E5773A43-F9B3-4E81-81D9-CE0A132470E7}\");\n```",
        "memberof": "ApiOleObject",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sAppId",
                "description": "The application ID associated with the current OLE object.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetApplicationId",
        "longname": "ApiOleObject#SetApplicationId",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3815,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiOleObject/Methods/SetApplicationId.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns the application ID from the current OLE object.\r\n\t * @memberof ApiOleObject\r\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\r\n\t * @returns {string}\r\n\t * @see office-js-api/Examples/{Editor}/ApiOleObject/Methods/GetApplicationId.js\r\n\t */",
        "description": "Returns the application ID from the current OLE object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oOleObject = Api.CreateOleObject(\"https://api.onlyoffice.com/content/img/docbuilder/examples/ole-object-image.png\", 130 * 36000, 90 * 36000, \"https://youtu.be/SKGz4pmnpgY\", \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\");\noOleObject.SetSize(200 * 36000, 130 * 36000);\noOleObject.SetPosition(70 * 36000, 30 * 36000);\noSlide.AddObject(oOleObject);\nvar sAppId = oOleObject.GetApplicationId();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateLinearGradientFill([oGs1, oGs2], 5400000);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oDrawing = Api.CreateShape(\"rect\", 300 * 36000, 15 * 36000, oFill, oStroke);\noDrawing.SetPosition(20 * 36000, 170 * 36000);\nvar oDocContent = oDrawing.GetContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.AddText(\"The application ID for the current OLE object: \" + sAppId);\noSlide.AddObject(oDrawing);\n```",
        "memberof": "ApiOleObject",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetApplicationId",
        "longname": "ApiOleObject#GetApplicationId",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3831,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiOleObject/Methods/GetApplicationId.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns a type of the ApiChart class.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {\"chart\"}\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/GetClassType.js\r\n\t */",
        "description": "Returns a type of the ApiChart class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\nvar sClassType = oChart.GetClassType();\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetLegendPos(\"bottom\");\noChart.SetShowDataLabels(false, false, true, false);\noChart.SetTitle(\"Financial Overview: Class Type = \" + sClassType, 20);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"chart\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"chart\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiChart#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16373,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns a type of the chart object.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {ChartType}\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/GetChartType.js\r\n\t */",
        "description": "Returns a type of the chart object.",
        "memberof": "ApiChart",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ChartType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ChartType"
                    }
                }
            }
        ],
        "name": "GetChartType",
        "longname": "ApiChart#GetChartType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16385,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/GetChartType.js"
        ]
    },
    {
        "comment": "/**\r\n\t *  Specifies the chart title.\r\n\t *  @memberof ApiChart\r\n\t *  @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t *  @param {string} sTitle - The title which will be displayed for the current chart.\r\n\t *  @param {pt} nFontSize - The text size value measured in points.\r\n\t *  @param {?bool} bIsBold - Specifies if the chart title is written in bold font or not.\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetTitle.js\r\n\t */",
        "description": "Specifies the chart title.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetLegendPos(\"bottom\");\noChart.SetShowDataLabels(false, false, true, false);\noChart.SetTitle(\"Financial Overview\", 13);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sTitle",
                "description": "The title which will be displayed for the current chart.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "pt"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "pt"
                    }
                },
                "name": "nFontSize",
                "description": "The text size value measured in points.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "bool"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "bool",
                        "nullable": true
                    }
                },
                "name": "bIsBold",
                "description": "Specifies if the chart title is written in bold font or not.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetTitle",
        "longname": "ApiChart#SetTitle",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16404,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetTitle.js"
        ]
    },
    {
        "comment": "/**\r\n\t *  Specifies the chart horizontal axis title.\r\n\t *  @memberof ApiChart\r\n\t *  @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t *  @param {string} sTitle - The title which will be displayed for the horizontal axis of the current chart.\r\n\t *  @param {pt} nFontSize - The text size value measured in points.\r\n\t *  @param {?bool} bIsBold - Specifies if the horizontal axis title is written in bold font or not.\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetHorAxisTitle.js\r\n\t */",
        "description": "Specifies the chart horizontal axis title.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetLegendPos(\"bottom\");\noChart.SetShowDataLabels(false, false, true, false);\noChart.SetTitle(\"Financial Overview\", 13);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sTitle",
                "description": "The title which will be displayed for the horizontal axis of the current chart.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "pt"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "pt"
                    }
                },
                "name": "nFontSize",
                "description": "The text size value measured in points.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "bool"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "bool",
                        "nullable": true
                    }
                },
                "name": "bIsBold",
                "description": "Specifies if the horizontal axis title is written in bold font or not.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetHorAxisTitle",
        "longname": "ApiChart#SetHorAxisTitle",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16418,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetHorAxisTitle.js"
        ]
    },
    {
        "comment": "/**\r\n\t *  Specifies the chart vertical axis title.\r\n\t *  @memberof ApiChart\r\n\t *  @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t *  @param {string} sTitle - The title which will be displayed for the vertical axis of the current chart.\r\n\t *  @param {pt} nFontSize - The text size value measured in points.\r\n\t *  @param {?bool} bIsBold - Specifies if the vertical axis title is written in bold font or not.\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetVerAxisTitle.js\r\n\t */",
        "description": "Specifies the chart vertical axis title.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetLegendPos(\"bottom\");\noChart.SetShowDataLabels(false, false, true, false);\noChart.SetTitle(\"Financial Overview\", 13);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sTitle",
                "description": "The title which will be displayed for the vertical axis of the current chart.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "pt"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "pt"
                    }
                },
                "name": "nFontSize",
                "description": "The text size value measured in points.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "bool"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "bool",
                        "nullable": true
                    }
                },
                "name": "bIsBold",
                "description": "Specifies if the vertical axis title is written in bold font or not.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetVerAxisTitle",
        "longname": "ApiChart#SetVerAxisTitle",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16432,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetVerAxisTitle.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies the vertical axis orientation.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {boolean} bIsMinMax - The <code>true</code> value will set the normal data direction for the vertical axis (from minimum to maximum).\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetVerAxisOrientation.js\r\n\t */",
        "description": "Specifies the vertical axis orientation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\noChart.SetTitle(\"Financial Overview\", 13);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\nvar oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\noChart.SetTitleOutLine(oStroke);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bIsMinMax",
                "description": "The <code>true</code> value will set the normal data direction for the vertical axis (from minimum to maximum).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetVerAxisOrientation",
        "longname": "ApiChart#SetVerAxisOrientation",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16444,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetVerAxisOrientation.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies the horizontal axis orientation.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {boolean} bIsMinMax - The <code>true</code> value will set the normal data direction for the horizontal axis (from minimum to maximum).\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetHorAxisOrientation.js\r\n\t */",
        "description": "Specifies the horizontal axis orientation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetTitle(\"Financial Overview\", 13);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetHorAxisOrientation(false);\noChart.SetPosition(608400, 1267200);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bIsMinMax",
                "description": "The <code>true</code> value will set the normal data direction for the horizontal axis (from minimum to maximum).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetHorAxisOrientation",
        "longname": "ApiChart#SetHorAxisOrientation",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16455,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetHorAxisOrientation.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies the chart legend position.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {\"left\" | \"top\" | \"right\" | \"bottom\" | \"none\"} sLegendPos - The position of the chart legend inside the chart window.\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetLegendPos.js\r\n\t */",
        "description": "Specifies the chart legend position.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetLegendPos(\"bottom\");\noChart.SetShowDataLabels(false, false, true, false);\noChart.SetTitle(\"Financial Overview\", 13);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "\"left\"",
                        "\"top\"",
                        "\"right\"",
                        "\"bottom\"",
                        "\"none\""
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "\"left\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"top\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"right\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"bottom\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"none\""
                            }
                        ]
                    }
                },
                "name": "sLegendPos",
                "description": "The position of the chart legend inside the chart window.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetLegendPos",
        "longname": "ApiChart#SetLegendPos",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16466,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetLegendPos.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies the legend font size.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {pt} nFontSize - The text size value measured in points.\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetLegendFontSize.js\r\n\t */",
        "description": "Specifies the legend font size.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetTitle(\"Financial Overview\", 13);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetLegendFontSize(16);\noChart.SetPosition(608400, 1267200);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "pt"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "pt"
                    }
                },
                "name": "nFontSize",
                "description": "The text size value measured in points.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetLegendFontSize",
        "longname": "ApiChart#SetLegendFontSize",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16527,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetLegendFontSize.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies which chart data labels are shown for the chart.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {boolean} bShowSerName - Whether to show or hide the source table column names used for the data which the chart will be build from.\r\n\t * @param {boolean} bShowCatName - Whether to show or hide the source table row names used for the data which the chart will be build from.\r\n\t * @param {boolean} bShowVal - Whether to show or hide the chart data values.\r\n\t * @param {boolean} bShowPercent - Whether to show or hide the percent for the data values (works with stacked chart types).\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetShowDataLabels.js\r\n\t */",
        "description": "Specifies which chart data labels are shown for the chart.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetLegendPos(\"bottom\");\noChart.SetShowDataLabels(false, false, true, false);\noChart.SetTitle(\"Financial Overview\", 13);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bShowSerName",
                "description": "Whether to show or hide the source table column names used for the data which the chart will be build from.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bShowCatName",
                "description": "Whether to show or hide the source table row names used for the data which the chart will be build from.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bShowVal",
                "description": "Whether to show or hide the chart data values.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bShowPercent",
                "description": "Whether to show or hide the percent for the data values (works with stacked chart types).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetShowDataLabels",
        "longname": "ApiChart#SetShowDataLabels",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16542,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetShowDataLabels.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Spicifies the show options for data labels.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {number} nSeriesIndex - The series index from the array of the data used to build the chart from.\r\n\t * @param {number} nPointIndex - The point index from this series.\r\n\t * @param {boolean} bShowSerName - Whether to show or hide the source table column names used for the data which the chart will be build from.\r\n\t * @param {boolean} bShowCatName - Whether to show or hide the source table row names used for the data which the chart will be build from.\r\n\t * @param {boolean} bShowVal - Whether to show or hide the chart data values.\r\n\t * @param {boolean} bShowPercent - Whether to show or hide the percent for the data values (works with stacked chart types).\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetShowPointDataLabel.js\r\n\t */",
        "description": "Spicifies the show options for data labels.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetTitle(\"Financial Overview\", 13);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetShowPointDataLabel(1, 0, false, false, true, false);\noChart.SetPosition(608400, 1267200);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nSeriesIndex",
                "description": "The series index from the array of the data used to build the chart from.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nPointIndex",
                "description": "The point index from this series.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bShowSerName",
                "description": "Whether to show or hide the source table column names used for the data which the chart will be build from.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bShowCatName",
                "description": "Whether to show or hide the source table row names used for the data which the chart will be build from.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bShowVal",
                "description": "Whether to show or hide the chart data values.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bShowPercent",
                "description": "Whether to show or hide the percent for the data values (works with stacked chart types).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetShowPointDataLabel",
        "longname": "ApiChart#SetShowPointDataLabel",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16560,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetShowPointDataLabel.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Spicifies tick labels position for the vertical axis.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {TickLabelPosition} sTickLabelPosition - The type for the position of chart vertical tick labels.\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetVertAxisTickLabelPosition.js\r\n\t */",
        "description": "Spicifies tick labels position for the vertical axis.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetTitle(\"Financial Overview\", 13);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetVertAxisTickLabelPosition(\"high\");\noChart.SetPosition(608400, 1267200);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "TickLabelPosition"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "TickLabelPosition"
                    }
                },
                "name": "sTickLabelPosition",
                "description": "The type for the position of chart vertical tick labels.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetVertAxisTickLabelPosition",
        "longname": "ApiChart#SetVertAxisTickLabelPosition",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16572,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetVertAxisTickLabelPosition.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Spicifies tick labels position for the horizontal axis.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {TickLabelPosition} sTickLabelPosition - The type for the position of chart horizontal tick labels.\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetHorAxisTickLabelPosition.js\r\n\t */",
        "description": "Spicifies tick labels position for the horizontal axis.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetTitle(\"Financial Overview\", 13);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetHorAxisTickLabelPosition(\"high\");\noChart.SetPosition(608400, 1267200);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "TickLabelPosition"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "TickLabelPosition"
                    }
                },
                "name": "sTickLabelPosition",
                "description": "The type for the position of chart horizontal tick labels.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetHorAxisTickLabelPosition",
        "longname": "ApiChart#SetHorAxisTickLabelPosition",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16584,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetHorAxisTickLabelPosition.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies major tick mark for the horizontal axis.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {TickMark} sTickMark - The type of tick mark appearance.\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetHorAxisMajorTickMark.js\r\n\t */",
        "description": "Specifies major tick mark for the horizontal axis.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"scatter\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetTitle(\"Financial Overview\", 13);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetHorAxisMajorTickMark(\"cross\");\noChart.SetPosition(608400, 1267200);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nvar oStroke = Api.CreateStroke(1 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\noChart.SetMarkerFill(oFill, 0, 0, true);\noChart.SetMarkerOutLine(oStroke, 0, 0, true);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noStroke = Api.CreateStroke(1 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\noChart.SetMarkerFill(oFill, 1, 0, true);\noChart.SetMarkerOutLine(oStroke, 1, 0, true);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "TickMark"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "TickMark"
                    }
                },
                "name": "sTickMark",
                "description": "The type of tick mark appearance.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetHorAxisMajorTickMark",
        "longname": "ApiChart#SetHorAxisMajorTickMark",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16596,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetHorAxisMajorTickMark.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies minor tick mark for the horizontal axis.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {TickMark} sTickMark - The type of tick mark appearance.\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetHorAxisMinorTickMark.js\r\n\t */",
        "description": "Specifies minor tick mark for the horizontal axis.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"scatter\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetTitle(\"Financial Overview\", 13);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetHorAxisMinorTickMark(\"in\");\noChart.SetPosition(608400, 1267200);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nvar oStroke = Api.CreateStroke(1 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\noChart.SetMarkerFill(oFill, 0, 0, true);\noChart.SetMarkerOutLine(oStroke, 0, 0, true);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noStroke = Api.CreateStroke(1 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\noChart.SetMarkerFill(oFill, 1, 0, true);\noChart.SetMarkerOutLine(oStroke, 1, 0, true);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "TickMark"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "TickMark"
                    }
                },
                "name": "sTickMark",
                "description": "The type of tick mark appearance.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetHorAxisMinorTickMark",
        "longname": "ApiChart#SetHorAxisMinorTickMark",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16607,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetHorAxisMinorTickMark.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies major tick mark for the vertical axis.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {TickMark} sTickMark - The type of tick mark appearance.\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetVertAxisMajorTickMark.js\r\n\t */",
        "description": "Specifies major tick mark for the vertical axis.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"scatter\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetTitle(\"Financial Overview\", 13);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetVertAxisMajorTickMark(\"cross\");\noChart.SetPosition(608400, 1267200);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nvar oStroke = Api.CreateStroke(1 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\noChart.SetMarkerFill(oFill, 0, 0, true);\noChart.SetMarkerOutLine(oStroke, 0, 0, true);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noStroke = Api.CreateStroke(1 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\noChart.SetMarkerFill(oFill, 1, 0, true);\noChart.SetMarkerOutLine(oStroke, 1, 0, true);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "TickMark"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "TickMark"
                    }
                },
                "name": "sTickMark",
                "description": "The type of tick mark appearance.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetVertAxisMajorTickMark",
        "longname": "ApiChart#SetVertAxisMajorTickMark",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16619,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetVertAxisMajorTickMark.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies minor tick mark for the vertical axis.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {TickMark} sTickMark - The type of tick mark appearance.\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetVertAxisMinorTickMark.js\r\n\t */",
        "description": "Specifies minor tick mark for the vertical axis.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"scatter\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetTitle(\"Financial Overview\", 13);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetVertAxisMinorTickMark(\"out\");\noChart.SetPosition(608400, 1267200);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nvar oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\noChart.SetMarkerFill(oFill, 0, 0, true);\noChart.SetMarkerOutLine(oStroke, 0, 0, true);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetMarkerFill(oFill, 1, 0, true);\noChart.SetMarkerOutLine(oStroke, 1, 0, true);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "TickMark"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "TickMark"
                    }
                },
                "name": "sTickMark",
                "description": "The type of tick mark appearance.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetVertAxisMinorTickMark",
        "longname": "ApiChart#SetVertAxisMinorTickMark",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16630,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetVertAxisMinorTickMark.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies major vertical gridline visual properties.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {?ApiStroke} oStroke - The stroke used to create the element shadow.\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetMajorVerticalGridlines.js\r\n\t */",
        "description": "Specifies major vertical gridline visual properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetTitle(\"Financial Overview\", 13);\noChart.SetSize(300 * 36000, 130 * 36000);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\nvar oStroke = Api.CreateStroke(1 * 15000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\noChart.SetMajorVerticalGridlines(oStroke);\noChart.SetPosition(608400, 1267200);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiStroke"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiStroke",
                        "nullable": true
                    }
                },
                "name": "oStroke",
                "description": "The stroke used to create the element shadow.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetMajorVerticalGridlines",
        "longname": "ApiChart#SetMajorVerticalGridlines",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16641,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetMajorVerticalGridlines.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies minor vertical gridline visual properties.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {?ApiStroke} oStroke - The stroke used to create the element shadow.\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetMinorVerticalGridlines.js\r\n\t */",
        "description": "Specifies minor vertical gridline visual properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetTitle(\"Financial Overview\", 13);\noChart.SetSize(300 * 36000, 130 * 36000);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\nvar oStroke = Api.CreateStroke(1 * 10000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\noChart.SetMinorVerticalGridlines(oStroke);\noChart.SetPosition(608400, 1267200);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiStroke"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiStroke",
                        "nullable": true
                    }
                },
                "name": "oStroke",
                "description": "The stroke used to create the element shadow.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetMinorVerticalGridlines",
        "longname": "ApiChart#SetMinorVerticalGridlines",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16653,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetMinorVerticalGridlines.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies major horizontal gridline visual properties.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {?ApiStroke} oStroke - The stroke used to create the element shadow.\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetMajorHorizontalGridlines.js\r\n\t */",
        "description": "Specifies major horizontal gridline visual properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetTitle(\"Financial Overview\", 13);\noChart.SetSize(300 * 36000, 130 * 36000);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\nvar oStroke = Api.CreateStroke(1 * 15000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\noChart.SetMajorHorizontalGridlines(oStroke);\noChart.SetPosition(608400, 1267200);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiStroke"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiStroke",
                        "nullable": true
                    }
                },
                "name": "oStroke",
                "description": "The stroke used to create the element shadow.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetMajorHorizontalGridlines",
        "longname": "ApiChart#SetMajorHorizontalGridlines",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16666,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetMajorHorizontalGridlines.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies minor horizontal gridline visual properties.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {?ApiStroke} oStroke - The stroke used to create the element shadow.\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetMinorHorizontalGridlines.js\r\n\t */",
        "description": "Specifies minor horizontal gridline visual properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetTitle(\"Financial Overview\", 13);\noChart.SetSize(300 * 36000, 130 * 36000);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\nvar oStroke = Api.CreateStroke(1 * 10000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\noChart.SetMinorHorizontalGridlines(oStroke);\noChart.SetPosition(608400, 1267200);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiStroke"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiStroke",
                        "nullable": true
                    }
                },
                "name": "oStroke",
                "description": "The stroke used to create the element shadow.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetMinorHorizontalGridlines",
        "longname": "ApiChart#SetMinorHorizontalGridlines",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16678,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetMinorHorizontalGridlines.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Removes the specified series from the current chart.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\r\n\t * @param {number} nSeria - The index of the chart series.\r\n\t * @returns {boolean}\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/RemoveSeria.js\r\n\t */",
        "description": "Removes the specified series from the current chart.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\noChart.RemoveSeria(1);\noChart.SetTitle(\"The Estimated Costs series was removed from the current chart.\");\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 0, false);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nSeria",
                "description": "The index of the chart series.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "RemoveSeria",
        "longname": "ApiChart#RemoveSeria",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16770,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/RemoveSeria.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets values to the specified chart series.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CPE\"]\r\n\t * @param {number[]} aValues - The array of the data which will be set to the specified chart series.\r\n\t * @param {number} nSeria - The index of the chart series.\r\n\t * @returns {boolean}\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetSeriaValues.js\r\n\t */",
        "description": "Sets values to the specified chart series.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\noChart.SetSeriaValues([260, 270, 300], 1);\noChart.SetShowPointDataLabel(1, 0, false, false, true, false);\noChart.SetShowPointDataLabel(1, 1, false, false, true, false);\noChart.SetShowPointDataLabel(1, 2, false, false, true, false);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "number",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "aValues",
                "description": "The array of the data which will be set to the specified chart series.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nSeria",
                "description": "The index of the chart series.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetSeriaValues",
        "longname": "ApiChart#SetSeriaValues",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16784,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetSeriaValues.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the x-axis values to all chart series. It is used with the scatter charts only.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CPE\"]\r\n\t * @param {string[]} aValues - The array of the data which will be set to the x-axis data points.\r\n\t * @returns {boolean}\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetXValues.js\r\n\t */",
        "description": "Sets the x-axis values to all chart series. It is used with the scatter charts only.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"scatter\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\noChart.SetXValues([\"2020\", \"2021\", \"2022\"]);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nvar oStroke = Api.CreateStroke(1 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\noChart.SetMarkerFill(oFill, 0, 0, true);\noChart.SetMarkerOutLine(oStroke, 0, 0, true);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noStroke = Api.CreateStroke(1 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\noChart.SetMarkerFill(oFill, 1, 0, true);\noChart.SetMarkerOutLine(oStroke, 1, 0, true);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "string",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "aValues",
                "description": "The array of the data which will be set to the x-axis data points.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetXValues",
        "longname": "ApiChart#SetXValues",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16797,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetXValues.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets a name to the specified chart series.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CPE\"]\r\n\t * @param {string} sName - The name which will be set to the specified chart series.\r\n\t * @param {number} nSeria - The index of the chart series.\r\n\t * @returns {boolean}\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetSeriaName.js\r\n\t */",
        "description": "Sets a name to the specified chart series.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\noChart.SetSeriaName(\"Projected Sales\", 0);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sName",
                "description": "The name which will be set to the specified chart series.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nSeria",
                "description": "The index of the chart series.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetSeriaName",
        "longname": "ApiChart#SetSeriaName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16813,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetSeriaName.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets a name to the specified chart category.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CPE\"]\r\n\t * @param {string} sName - The name which will be set to the specified chart category.\r\n\t * @param {number} nCategory - The index of the chart category.\r\n\t * @returns {boolean}\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetCategoryName.js\r\n\t */",
        "description": "Sets a name to the specified chart category.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\noChart.SetCategoryName(\"2013\", 0);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sName",
                "description": "The name which will be set to the specified chart category.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nCategory",
                "description": "The index of the chart category.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetCategoryName",
        "longname": "ApiChart#SetCategoryName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16827,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetCategoryName.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets a style to the current chart by style ID.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\r\n\t * @param nStyleId - One of the styles available in the editor.\r\n\t * @returns {boolean}\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/ApplyChartStyle.js\r\n\t */",
        "description": "Sets a style to the current chart by style ID.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\noChart.ApplyChartStyle(2);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nvar oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\noChart.SetSeriesFill(oFill, 0, false);\noChart.SetSeriesOutLine(oStroke, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\noChart.SetSeriesFill(oFill, 1, false);\noChart.SetSeriesOutLine(oStroke, 1, false);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": null,
                "name": "nStyleId",
                "description": "One of the styles available in the editor.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "ApplyChartStyle",
        "longname": "ApiChart#ApplyChartStyle",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16840,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/ApplyChartStyle.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the fill to the chart plot area.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\r\n\t * @param {ApiFill} oFill - The fill type used to fill the plot area.\r\n\t * @returns {boolean}\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetPlotAreaFill.js\r\n\t */",
        "description": "Sets the fill to the chart plot area.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(128, 128, 128));\noChart.SetPlotAreaFill(oFill);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                },
                "name": "oFill",
                "description": "The fill type used to fill the plot area.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetPlotAreaFill",
        "longname": "ApiChart#SetPlotAreaFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16865,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetPlotAreaFill.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the outline to the chart plot area.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\r\n\t * @param {ApiStroke} oStroke - The stroke used to create the plot area outline.\r\n\t * @returns {boolean}\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetPlotAreaOutLine.js\r\n\t */",
        "description": "Sets the outline to the chart plot area.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\nvar oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\noChart.SetPlotAreaOutLine(oStroke);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiStroke"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiStroke"
                    }
                },
                "name": "oStroke",
                "description": "The stroke used to create the plot area outline.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetPlotAreaOutLine",
        "longname": "ApiChart#SetPlotAreaOutLine",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16882,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetPlotAreaOutLine.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the fill to the specified chart series.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\r\n\t * @param {ApiFill} oFill - The fill type used to fill the series.\r\n\t * @param {number} nSeries - The index of the chart series.\r\n\t * @param {boolean} [bAll=false] - Specifies if the fill will be applied to all series.\r\n\t * @returns {boolean}\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetSeriesFill.js\r\n\t */",
        "description": "Sets the fill to the specified chart series.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                },
                "name": "oFill",
                "description": "The fill type used to fill the series.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nSeries",
                "description": "The index of the chart series.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bAll",
                "description": "Specifies if the fill will be applied to all series.",
                "optional": true,
                "defaultvalue": false
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetSeriesFill",
        "longname": "ApiChart#SetSeriesFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16901,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetSeriesFill.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the outline to the specified chart series.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\r\n\t * @param {ApiStroke} oStroke - The stroke used to create the series outline.\r\n\t * @param {number} nSeries - The index of the chart series.\r\n\t * @param {boolean} [bAll=false] - Specifies if the outline will be applied to all series.\r\n\t * @returns {boolean}\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetSeriesOutLine.js\r\n\t */",
        "description": "Sets the outline to the specified chart series.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nvar oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\noChart.SetSeriesFill(oFill, 0, false);\noChart.SetSeriesOutLine(oStroke, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\noChart.SetSeriesOutLine(oStroke, 1, false);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiStroke"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiStroke"
                    }
                },
                "name": "oStroke",
                "description": "The stroke used to create the series outline.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nSeries",
                "description": "The index of the chart series.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bAll",
                "description": "Specifies if the outline will be applied to all series.",
                "optional": true,
                "defaultvalue": false
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetSeriesOutLine",
        "longname": "ApiChart#SetSeriesOutLine",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16919,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetSeriesOutLine.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the fill to the data point in the specified chart series.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\r\n\t * @param {ApiFill} oFill - The fill type used to fill the data point.\r\n\t * @param {number} nSeries - The index of the chart series.\r\n\t * @param {number} nDataPoint - The index of the data point in the specified chart series.\r\n\t * @param {boolean} [bAllSeries=false] - Specifies if the fill will be applied to the specified data point in all series.\r\n\t * @returns {boolean}\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetDataPointFill.js\r\n\t */",
        "description": "Sets the fill to the data point in the specified chart series.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(128, 128, 128));\noChart.SetDataPointFill(oFill, 0, 0, false);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                },
                "name": "oFill",
                "description": "The fill type used to fill the data point.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nSeries",
                "description": "The index of the chart series.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nDataPoint",
                "description": "The index of the data point in the specified chart series.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bAllSeries",
                "description": "Specifies if the fill will be applied to the specified data point in all series.",
                "optional": true,
                "defaultvalue": false
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetDataPointFill",
        "longname": "ApiChart#SetDataPointFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16938,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetDataPointFill.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the outline to the data point in the specified chart series.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\r\n\t * @param {ApiStroke} oStroke - The stroke used to create the data point outline.\r\n\t * @param {number} nSeries - The index of the chart series.\r\n\t * @param {number} nDataPoint - The index of the data point in the specified chart series.\r\n\t * @param {boolean} bAllSeries - Specifies if the outline will be applied to the specified data point in all series.\r\n\t * @returns {boolean}\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetDataPointOutLine.js\r\n\t */",
        "description": "Sets the outline to the data point in the specified chart series.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\nvar oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\noChart.SetDataPointOutLine(oStroke, 0, 0, false);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiStroke"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiStroke"
                    }
                },
                "name": "oStroke",
                "description": "The stroke used to create the data point outline.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nSeries",
                "description": "The index of the chart series.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nDataPoint",
                "description": "The index of the data point in the specified chart series.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bAllSeries",
                "description": "Specifies if the outline will be applied to the specified data point in all series.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetDataPointOutLine",
        "longname": "ApiChart#SetDataPointOutLine",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16957,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetDataPointOutLine.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the fill to the marker in the specified chart series.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\r\n\t * @param {ApiFill} oFill - The fill type used to fill the marker.\r\n\t * @param {number} nSeries - The index of the chart series.\r\n\t * @param {number} nMarker - The index of the marker in the specified chart series.\r\n\t * @param {boolean} [bAllMarkers=false] - Specifies if the fill will be applied to all markers in the specified chart series.\r\n\t * @returns {boolean}\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetMarkerFill.js\r\n\t */",
        "description": "Sets the fill to the marker in the specified chart series.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"scatter\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nvar oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\noChart.SetMarkerFill(oFill, 0, 0, true);\noChart.SetMarkerOutLine(oStroke, 0, 0, true);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\noChart.SetMarkerFill(oFill, 1, 0, true);\noChart.SetMarkerOutLine(oStroke, 1, 0, true);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                },
                "name": "oFill",
                "description": "The fill type used to fill the marker.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nSeries",
                "description": "The index of the chart series.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nMarker",
                "description": "The index of the marker in the specified chart series.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bAllMarkers",
                "description": "Specifies if the fill will be applied to all markers in the specified chart series.",
                "optional": true,
                "defaultvalue": false
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetMarkerFill",
        "longname": "ApiChart#SetMarkerFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16976,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetMarkerFill.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the outline to the marker in the specified chart series.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\r\n\t * @param {ApiStroke} oStroke - The stroke used to create the marker outline.\r\n\t * @param {number} nSeries - The index of the chart series.\r\n\t * @param {number} nMarker - The index of the marker in the specified chart series.\r\n\t * @param {boolean} [bAllMarkers=false] - Specifies if the outline will be applied to all markers in the specified chart series.\r\n\t * @returns {boolean}\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetMarkerOutLine.js\r\n\t */",
        "description": "Sets the outline to the marker in the specified chart series.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"scatter\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nvar oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\noChart.SetMarkerFill(oFill, 0, 0, true);\noChart.SetMarkerOutLine(oStroke, 0, 0, true);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetMarkerFill(oFill, 1, 0, true);\noChart.SetMarkerOutLine(oStroke, 1, 0, true);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiStroke"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiStroke"
                    }
                },
                "name": "oStroke",
                "description": "The stroke used to create the marker outline.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nSeries",
                "description": "The index of the chart series.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nMarker",
                "description": "The index of the marker in the specified chart series.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bAllMarkers",
                "description": "Specifies if the outline will be applied to all markers in the specified chart series.",
                "optional": true,
                "defaultvalue": false
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetMarkerOutLine",
        "longname": "ApiChart#SetMarkerOutLine",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16995,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetMarkerOutLine.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the fill to the chart title.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\r\n\t * @param {ApiFill} oFill - The fill type used to fill the title.\r\n\t * @returns {boolean}\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetTitleFill.js\r\n\t */",
        "description": "Sets the fill to the chart title.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(128, 128, 128));\noChart.SetTitle(\"Financial Overview\", 13);\noChart.SetTitleFill(oFill);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                },
                "name": "oFill",
                "description": "The fill type used to fill the title.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetTitleFill",
        "longname": "ApiChart#SetTitleFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17011,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetTitleFill.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the outline to the chart title.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\r\n\t * @param {ApiStroke} oStroke - The stroke used to create the title outline.\r\n\t * @returns {boolean}\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetTitleOutLine.js\r\n\t */",
        "description": "Sets the outline to the chart title.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\noChart.SetTitle(\"Financial Overview\", 13);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\nvar oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\noChart.SetTitleOutLine(oStroke);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiStroke"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiStroke"
                    }
                },
                "name": "oStroke",
                "description": "The stroke used to create the title outline.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetTitleOutLine",
        "longname": "ApiChart#SetTitleOutLine",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17027,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetTitleOutLine.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the fill to the chart legend.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\r\n\t * @param {ApiFill} oFill - The fill type used to fill the legend.\r\n\t * @returns {boolean}\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetLegendFill.js\r\n\t */",
        "description": "Sets the fill to the chart legend.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(128, 128, 128));\noChart.SetLegendFill(oFill);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                },
                "name": "oFill",
                "description": "The fill type used to fill the legend.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetLegendFill",
        "longname": "ApiChart#SetLegendFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17043,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetLegendFill.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the outline to the chart legend.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\r\n\t * @param {ApiStroke} oStroke - The stroke used to create the legend outline.\r\n\t * @returns {boolean}\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetLegendOutLine.js\r\n\t */",
        "description": "Sets the outline to the chart legend.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\nvar oStroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\noChart.SetLegendOutLine(oStroke);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiStroke"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiStroke"
                    }
                },
                "name": "oStroke",
                "description": "The stroke used to create the legend outline.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetLegendOutLine",
        "longname": "ApiChart#SetLegendOutLine",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17059,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetLegendOutLine.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the specified numeric format to the axis values.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\r\n\t * @param {NumFormat | String} sFormat - Numeric format (can be custom format).\r\n\t * @param {AxisPos} - Axis position in the chart.\r\n\t * @returns {boolean}\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetAxieNumFormat.js\r\n\t */",
        "description": "Sets the specified numeric format to the axis values.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24, [\"0\", \"0.00\"]);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\noChart.SetAxieNumFormat(\"0.00\", \"left\");\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "NumFormat",
                        "String"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "NumFormat"
                            },
                            {
                                "type": "NameExpression",
                                "name": "String"
                            }
                        ]
                    }
                },
                "name": "sFormat",
                "description": "Numeric format (can be custom format).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "AxisPos"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "AxisPos"
                    }
                },
                "name": "sAxiePos",
                "description": "Axis position in the chart.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetAxieNumFormat",
        "longname": "ApiChart#SetAxieNumFormat",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17076,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetAxieNumFormat.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the specified numeric format to the chart series.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CPE\"]\r\n\t * @param {NumFormat | String} sFormat - Numeric format (can be custom format).\r\n\t * @param {Number} nSeria - Series index.\r\n\t * @returns {boolean}\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetSeriaNumFormat.js\r\n\t */",
        "description": "Sets the specified numeric format to the chart series.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24, [\"0\", \"0.00\"]);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\noChart.SetSeriaNumFormat(\"0.00\", 0);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "NumFormat",
                        "String"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "NumFormat"
                            },
                            {
                                "type": "NameExpression",
                                "name": "String"
                            }
                        ]
                    }
                },
                "name": "sFormat",
                "description": "Numeric format (can be custom format).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Number"
                    }
                },
                "name": "nSeria",
                "description": "Series index.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetSeriaNumFormat",
        "longname": "ApiChart#SetSeriaNumFormat",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17109,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetSeriaNumFormat.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the specified numeric format to the chart data point.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CPE\"]\r\n\t * @param {NumFormat | String} sFormat - Numeric format (can be custom format).\r\n\t * @param {Number} nSeria - Series index.\r\n\t * @param {number} nDataPoint - The index of the data point in the specified chart series.\r\n\t * @param {boolean} bAllSeries - Specifies if the numeric format will be applied to the specified data point in all series.\r\n\t * @returns {boolean}\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetDataPointNumFormat.js\r\n\t */",
        "description": "Sets the specified numeric format to the chart data point.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24, [\"0\", \"0.00\"]);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\noChart.SetShowPointDataLabel(1, 0, false, false, true, false);\noChart.SetDataPointNumFormat(\"0.00\", 0, 0, true);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "NumFormat",
                        "String"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "NumFormat"
                            },
                            {
                                "type": "NameExpression",
                                "name": "String"
                            }
                        ]
                    }
                },
                "name": "sFormat",
                "description": "Numeric format (can be custom format).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Number"
                    }
                },
                "name": "nSeria",
                "description": "Series index.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nDataPoint",
                "description": "The index of the data point in the specified chart series.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bAllSeries",
                "description": "Specifies if the numeric format will be applied to the specified data point in all series.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetDataPointNumFormat",
        "longname": "ApiChart#SetDataPointNumFormat",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17125,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/SetDataPointNumFormat.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns all series from the chart space.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\r\n\t * @returns {ApiChartSeries[]}\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/GetAllSeries.js\r\n\t */",
        "description": "Returns all series from the chart space.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"comboBarLine\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetLegendPos(\"bottom\");\noChart.SetShowDataLabels(false, false, true, false);\nvar aAllSeries = oChart.GetAllSeries();\nvar oSeries, sSeriesType, sTitle = \"\";\nfor(var nSeries = 0; nSeries < aAllSeries.length; ++nSeries) {\n\toSeries = aAllSeries[nSeries];\n\tsSeriesType = oSeries.GetChartType();\n\tsTitle += ((nSeries + 1) + \" Series Type = \" + sSeriesType + \"\\n\");\n}\noChart.SetTitle(sTitle, 20);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ApiChartSeries>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiChartSeries",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetAllSeries",
        "longname": "ApiChart#GetAllSeries",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17137,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/GetAllSeries.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns the series with specific index.\r\n\t * @memberof ApiChart\r\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\r\n\t * @param {number} nIdx - Series index.\r\n\t * @returns {?ApiChartSeries}\r\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/GetSeries.js\r\n\t */",
        "description": "Returns the series with specific index.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"comboBarLine\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetLegendPos(\"bottom\");\noChart.SetShowDataLabels(false, false, true, false);\nvar aAllSeries = oChart.GetAllSeries();\nvar oSeries, sSeriesType, sTitle = \"\";\noSeries = oChart.GetSeries(0);\nsSeriesType = oSeries.GetChartType();\nsTitle += (\"Series Type = \" + sSeriesType + \"\\n\");\noChart.SetTitle(sTitle, 20);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nIdx",
                "description": "Series index.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiChartSeries"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiChartSeries",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetSeries",
        "longname": "ApiChart#GetSeries",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17159,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChart/Methods/GetSeries.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns a type of the ApiChartSeries class.\r\n\t * @memberof ApiChartSeries\r\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\r\n\t * @returns {\"chartSeries\"}\r\n\t * @see office-js-api/Examples/{Editor}/ApiChartSeries/Methods/GetClassType.js\r\n\t */",
        "description": "Returns a type of the ApiChartSeries class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"comboBarLine\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetLegendPos(\"bottom\");\noChart.SetShowDataLabels(false, false, true, false);\nvar aAllSeries = oChart.GetAllSeries();\nvar oSeries, sClassType, sTitle = \"\";\noSeries = oChart.GetSeries(0);\nsClassType = oSeries.GetClassType();\nsTitle += \"Class Type = \" + sClassType + \"\\n\";\noChart.SetTitle(sTitle, 20);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChartSeries",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"chartSeries\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"chartSeries\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiChartSeries#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17186,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChartSeries/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Tries to change the type of the series. Returns true in case of success.\r\n\t * @memberof ApiChartSeries\r\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\r\n\t * @param {ChartType} sType - Chart type.\r\n\t * @returns {boolean}\r\n\t * @see office-js-api/Examples/{Editor}/ApiChartSeries/Methods/ChangeChartType.js\r\n\t */",
        "description": "Tries to change the type of the series. Returns true in case of success.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"comboBarLine\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetLegendPos(\"bottom\");\noChart.SetShowDataLabels(false, false, true, false);\nvar aAllSeries = oChart.GetAllSeries();\nvar oSeries, sSeriesType, sTitle = \"\";\noSeries = oChart.GetSeries(0);\nsSeriesType = oSeries.GetChartType();\nsTitle += \"Old Series Type = \" + sSeriesType + \"\\n\";\noSeries.ChangeChartType(\"area\");\nsSeriesType = oSeries.GetChartType();\nsTitle += \"New Series Type = \" + sSeriesType;\noChart.SetTitle(sTitle, 20);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChartSeries",
        "params": [
            {
                "type": {
                    "names": [
                        "ChartType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ChartType"
                    }
                },
                "name": "sType",
                "description": "Chart type.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "ChangeChartType",
        "longname": "ApiChartSeries#ChangeChartType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17199,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChartSeries/Methods/ChangeChartType.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns a chart type of the series.\r\n\t * @memberof ApiChartSeries\r\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\r\n\t * @returns {ChartType}\r\n\t * @see office-js-api/Examples/{Editor}/ApiChartSeries/Methods/GetChartType.js\r\n\t */",
        "description": "Returns a chart type of the series.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"comboBarLine\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetLegendPos(\"bottom\");\noChart.SetShowDataLabels(false, false, true, false);\nvar aAllSeries = oChart.GetAllSeries();\nvar oSeries, sSeriesType, sTitle = \"\";\noSeries = oChart.GetSeries(0);\nsSeriesType = oSeries.GetChartType();\nsTitle += \"Series Type = \" + sSeriesType + \"\\n\";\noChart.SetTitle(sTitle, 20);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiChartSeries",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ChartType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ChartType"
                    }
                }
            }
        ],
        "name": "GetChartType",
        "longname": "ApiChartSeries#GetChartType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17218,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiChartSeries/Methods/GetChartType.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns a type of the ApiFill class.\r\n\t * @memberof ApiFill\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {\"fill\"}\r\n\t * @see office-js-api/Examples/{Editor}/ApiFill/Methods/GetClassType.js\r\n\t */",
        "description": "Returns a type of the ApiFill class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar sClassType = oFill.GetClassType();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Class Type = \" + sClassType);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiFill",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"fill\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"fill\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiFill#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17242,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiFill/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns a type of the ApiStroke class.\r\n\t * @memberof ApiStroke\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {\"stroke\"}\r\n\t * @see office-js-api/Examples/{Editor}/ApiStroke/Methods/GetClassType.js\r\n\t */",
        "description": "Returns a type of the ApiStroke class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateLinearGradientFill([oGs1, oGs2], 5400000);\nvar oFill1 = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nvar oStroke = Api.CreateStroke(3 * 36000, oFill1);\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\nvar oDocContent = oShape.GetDocContent();\nvar sClassType = oStroke.GetClassType();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Class Type = \" + sClassType);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiStroke",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"stroke\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"stroke\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiStroke#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17272,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiStroke/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns a type of the ApiGradientStop class.\r\n\t * @memberof ApiGradientStop\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {\"gradientStop\"}\r\n\t * @see office-js-api/Examples/{Editor}/ApiGradientStop/Methods/GetClassType.js\r\n\t */",
        "description": "Returns a type of the ApiGradientStop class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar sClassType = oGs1.GetClassType();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Class Type = \" + sClassType);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiGradientStop",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"gradientStop\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"gradientStop\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiGradientStop#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17302,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiGradientStop/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns a type of the ApiUniColor class.\r\n\t * @memberof ApiUniColor\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {\"uniColor\"}\r\n\t * @see office-js-api/Examples/{Editor}/ApiUniColor/Methods/GetClassType.js\r\n\t */",
        "description": "Returns a type of the ApiUniColor class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oPresetColor = Api.CreatePresetColor(\"lightYellow\");\nvar oGs1 = Api.CreateGradientStop(oPresetColor, 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar sClassType = oPresetColor.GetClassType();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Class Type = \" + sClassType);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiUniColor",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"uniColor\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"uniColor\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiUniColor#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17332,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiUniColor/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns a type of the ApiRGBColor class.\r\n\t * @memberof ApiRGBColor\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {\"rgbColor\"}\r\n\t * @see office-js-api/Examples/{Editor}/ApiRGBColor/Methods/GetClassType.js\r\n\t */",
        "description": "Returns a type of the ApiRGBColor class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oRGBColor = Api.CreateRGBColor(255, 213, 191);\nvar oGs1 = Api.CreateGradientStop(oRGBColor, 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar sClassType = oRGBColor.GetClassType();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Class Type = \" + sClassType);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRGBColor",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"rgbColor\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"rgbColor\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiRGBColor#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17381,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiRGBColor/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns a type of the ApiSchemeColor class.\r\n\t * @memberof ApiSchemeColor\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {\"schemeColor\"}\r\n\t * @see office-js-api/Examples/{Editor}/ApiSchemeColor/Methods/GetClassType.js\r\n\t */",
        "description": "Returns a type of the ApiSchemeColor class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oSchemeColor = Api.CreateSchemeColor(\"dk1\");\nvar oFill = Api.CreateSolidFill(oSchemeColor);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar sClassType = oSchemeColor.GetClassType();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Class Type = \" + sClassType);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiSchemeColor",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"schemeColor\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"schemeColor\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiSchemeColor#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17411,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiSchemeColor/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns a type of the ApiPresetColor class.\r\n\t * @memberof ApiPresetColor\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {\"presetColor\"}\r\n\t * @see office-js-api/Examples/{Editor}/ApiPresetColor/Methods/GetClassType.js\r\n\t */",
        "description": "Returns a type of the ApiPresetColor class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oPresetColor = Api.CreatePresetColor(\"peachPuff\");\nvar oGs1 = Api.CreateGradientStop(oPresetColor, 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar sClassType = oPresetColor.GetClassType();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Class Type = \" + sClassType);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiPresetColor",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"presetColor\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"presetColor\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiPresetColor#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17441,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiPresetColor/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns a type of the ApiBullet class.\r\n\t * @memberof ApiBullet\r\n\t * @typeofeditors [\"CSE\", \"CPE\"]\r\n\t * @returns {\"bullet\"}\r\n\t * @see office-js-api/Examples/{Editor}/ApiBullet/Methods/GetClassType.js\r\n\t */",
        "description": "Returns a type of the ApiBullet class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oBullet = Api.CreateBullet(\"-\");\noParagraph.SetBullet(oBullet);\noParagraph.AddText(\" This is an example of the bulleted paragraph.\");\nvar sClassType = oBullet.GetClassType();\noParagraph = Api.CreateParagraph();\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Class Type = \" + sClassType);\noDocContent.Push(oParagraph);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiBullet",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"bullet\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"bullet\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiBullet#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17465,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiBullet/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Replaces each paragraph (or text in cell) in the select with the corresponding text from an array of strings.\r\n\t * @memberof Api\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {Array} arrString - An array of replacement strings.\r\n\t * @param {string} [sParaTab=\" \"] - A character which is used to specify the tab in the source text.\r\n\t * @param {string} [sParaNewLine=\" \"] - A character which is used to specify the line break character in the source text.\r\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/ReplaceTextSmart.js\r\n\t */",
        "description": "Replaces each paragraph (or text in cell) in the select with the corresponding text from an array of strings.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oFParagraph = oDocContent.GetElement(0);\noFParagraph.AddText(\"This is the text for the first line. The line break is added after it.\");\noFParagraph.AddLineBreak();\nvar oSParagraph = Api.CreateParagraph();\noSParagraph.AddTabStop();\noSParagraph.AddText(\"This is just a sample text with a tab stop before it.\");\noDocContent.AddElement(oSParagraph);\noSlide.AddObject(oShape);\n// todo_example problem (how to make select in slide)\n// var oRange1 = oFParagraph.GetRange();\n// var oRange2 = oSParagraph.GetRange();\n// var oRange3 = oRange1.ExpandTo(oRange2);\n// oRange3.Select();\nvar arr = [\"test_1\", \"test_2\"];\nApi.ReplaceTextSmart(arr, \"\", \"\");\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Array"
                    }
                },
                "name": "arrString",
                "description": "An array of replacement strings.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sParaTab",
                "description": "A character which is used to specify the tab in the source text.",
                "optional": true,
                "defaultvalue": "\" \""
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sParaNewLine",
                "description": "A character which is used to specify the line break character in the source text.",
                "optional": true,
                "defaultvalue": "\" \""
            }
        ],
        "returns": null,
        "name": "ReplaceTextSmart",
        "longname": "Api#ReplaceTextSmart",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 20443,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/Api/Methods/ReplaceTextSmart.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Creates the empty text properties.\r\n\t * @memberof Api\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {ApiTextPr}\r\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/CreateTextPr.js\r\n\t */",
        "description": "Creates the empty text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\noDocContent.RemoveAllElements();\nvar oTextPr = Api.CreateTextPr();\noTextPr.SetFontSize(50);\noTextPr.SetBold(true);\nvar oParagraph = Api.CreateParagraph();\noParagraph.SetJc(\"left\");\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is a sample text with the font size set to 25 points and the font weight set to bold.\");\noRun.SetTextPr(oTextPr);\noParagraph.AddElement(oRun);\noDocContent.Push(oParagraph);\noSlide.AddObject(oShape);\n```",
        "memberof": "Api",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "CreateTextPr",
        "longname": "Api#CreateTextPr",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 20896,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/Api/Methods/CreateTextPr.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns the full name of the currently opened file.\r\n\t * @memberof Api\r\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\r\n\t * @returns {string}\r\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/GetFullName.js\r\n\t */",
        "description": "Returns the full name of the currently opened file.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar sName = Api.GetFullName();\noParagraph.AddText(\"File name: \" + sName);\noSlide.AddObject(oShape);\n```",
        "memberof": "Api",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetFullName",
        "longname": "Api#GetFullName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 20939,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/Api/Methods/GetFullName.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns a type of the ApiComment class.\r\n\t * @memberof ApiComment\r\n\t * @typeofeditors [\"CDE\", \"CPE\"]\r\n\t * @returns {\"comment\"}\r\n\t * @see office-js-api/Examples/{Editor}/ApiComment/Methods/GetClassType.js\r\n\t */",
        "description": "Returns a type of the ApiComment class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nApi.pluginMethod_AddComment({\"UserName\": \"John Smith\", \"Text\": \"Comment 1\"});\nvar arrComments = oPresentation.GetAllComments();\nvar sType = arrComments[0].GetClassType();\nvar oSlide1 = oPresentation.GetSlideByIndex(0);\noSlide1.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Type: \" + sType);\noSlide1.AddObject(oShape);\n```",
        "memberof": "ApiComment",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"comment\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"comment\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiComment#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 20961,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiComment/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns the comment text.\r\n\t * @memberof ApiComment\r\n\t * @typeofeditors [\"CDE\", \"CPE\"]\r\n\t * @returns {string}\r\n\t * @see office-js-api/Examples/{Editor}/ApiComment/Methods/GetText.js\r\n\t */",
        "description": "Returns the comment text.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nApi.pluginMethod_AddComment({\"UserName\": \"John Smith\", \"Text\": \"Comment 1\"});\nvar arrComments = oPresentation.GetAllComments();\nvar oSlide1 = oPresentation.GetSlideByIndex(0);\noSlide1.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Comment: \" + arrComments[0].GetText());\noSlide1.AddObject(oShape);\n```",
        "memberof": "ApiComment",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetText",
        "longname": "ApiComment#GetText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 20989,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiComment/Methods/GetText.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the comment text.\r\n\t * @memberof ApiComment\r\n\t * @typeofeditors [\"CDE\", \"CPE\"]\r\n\t * @param {string} sText - The comment text.\r\n\t * @returns {ApiComment} - this\r\n\t * @see office-js-api/Examples/{Editor}/ApiComment/Methods/SetText.js\r\n\t */",
        "description": "Sets the comment text.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nApi.pluginMethod_AddComment({\"UserName\": \"John Smith\", \"Text\": \"Comment 1\"});\nvar arrComments = oPresentation.GetAllComments();\narrComments[0].SetText(\"New comment text\");\nvar oSlide1 = oPresentation.GetSlideByIndex(0);\noSlide1.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Comment text: \" + arrComments[0].GetText());\noSlide1.AddObject(oShape);\n```",
        "memberof": "ApiComment",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sText",
                "description": "The comment text.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiComment"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiComment"
                    }
                }
            }
        ],
        "name": "SetText",
        "longname": "ApiComment#SetText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 21001,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiComment/Methods/SetText.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns the comment author's name.\r\n\t * @memberof ApiComment\r\n\t * @typeofeditors [\"CDE\", \"CPE\"]\r\n\t * @returns {string}\r\n\t * @see office-js-api/Examples/{Editor}/ApiComment/Methods/GetAuthorName.js\r\n\t */",
        "description": "Returns the comment author's name.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nApi.pluginMethod_AddComment({\"UserName\": \"John Smith\", \"Text\": \"Comment 1\"});\nvar arrComments = oPresentation.GetAllComments();\nvar oSlide1 = oPresentation.GetSlideByIndex(0);\noSlide1.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Comment's author: \" + arrComments[0].GetAuthorName());\noSlide1.AddObject(oShape);\n```",
        "memberof": "ApiComment",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetAuthorName",
        "longname": "ApiComment#GetAuthorName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 21014,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiComment/Methods/GetAuthorName.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the comment author's name.\r\n\t * @memberof ApiComment\r\n\t * @typeofeditors [\"CDE\", \"CPE\"]\r\n\t * @param {string} sAuthorName - The comment author's name.\r\n\t * @returns {ApiComment} - this\r\n\t * @see office-js-api/Examples/{Editor}/ApiComment/Methods/SetAuthorName.js\r\n\t */",
        "description": "Sets the comment author's name.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nApi.pluginMethod_AddComment({\"UserName\": \"John Smith\", \"Text\": \"Comment 1\"});\nvar arrComments = oPresentation.GetAllComments();\narrComments[0].SetAuthorName(\"Mark Potato\");\nvar oSlide1 = oPresentation.GetSlideByIndex(0);\noSlide1.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Comment's author: \" + arrComments[0].GetAuthorName());\noSlide1.AddObject(oShape);\n```",
        "memberof": "ApiComment",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sAuthorName",
                "description": "The comment author's name.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiComment"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiComment"
                    }
                }
            }
        ],
        "name": "SetAuthorName",
        "longname": "ApiComment#SetAuthorName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 21026,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiComment/Methods/SetAuthorName.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the user ID to the comment author.\r\n\t * @memberof ApiComment\r\n\t * @typeofeditors [\"CDE\", \"CPE\"]\r\n\t * @param {string} sUserId - The user ID of the comment author.\r\n\t * @returns {ApiComment} - this\r\n\t * @see office-js-api/Examples/{Editor}/ApiComment/Methods/SetUserId.js\r\n\t */",
        "description": "Sets the user ID to the comment author.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nApi.pluginMethod_AddComment({\"UserName\": \"John Smith\", \"Text\": \"Comment 1\"});\nvar arrComments = oPresentation.GetAllComments();\narrComments[0].SetUserId(\"uid-2\");\nvar oSlide1 = oPresentation.GetSlideByIndex(0);\noSlide1.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"The ID of the user who commented on this presentation is uid-2.\");\noSlide1.AddObject(oShape);\n```",
        "memberof": "ApiComment",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sUserId",
                "description": "The user ID of the comment author.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiComment"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiComment"
                    }
                }
            }
        ],
        "name": "SetUserId",
        "longname": "ApiComment#SetUserId",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 21051,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiComment/Methods/SetUserId.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Checks if a comment is solved or not.\r\n\t * @memberof ApiComment\r\n\t * @typeofeditors [\"CDE\", \"CPE\"]\r\n\t * @returns {boolean}\r\n\t * @see office-js-api/Examples/{Editor}/ApiComment/Methods/IsSolved.js\r\n\t */",
        "description": "Checks if a comment is solved or not.",
        "memberof": "ApiComment",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "IsSolved",
        "longname": "ApiComment#IsSolved",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 21064,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiComment/Methods/IsSolved.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Marks a comment as solved.\r\n\t * @memberof ApiComment\r\n\t * @typeofeditors [\"CDE\", \"CPE\"]\r\n\t * @param {boolean} bSolved - Specifies if a comment is solved or not.\r\n\t * @returns {ApiComment} - this\r\n\t * @see office-js-api/Examples/{Editor}/ApiComment/Methods/SetSolved.js\r\n\t */",
        "description": "Marks a comment as solved.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nApi.pluginMethod_AddComment({\"UserName\": \"John Smith\", \"Text\": \"Comment 1\"});\nvar arrComments = oPresentation.GetAllComments();\narrComments[0].SetSolved(true);\nvar oSlide1 = oPresentation.GetSlideByIndex(0);\noSlide1.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"The comment is solved.\");\noSlide1.AddObject(oShape);\n```",
        "memberof": "ApiComment",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bSolved",
                "description": "Specifies if a comment is solved or not.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiComment"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiComment"
                    }
                }
            }
        ],
        "name": "SetSolved",
        "longname": "ApiComment#SetSolved",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 21076,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiComment/Methods/SetSolved.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns the timestamp of the comment creation in UTC format.\r\n\t * @memberof ApiComment\r\n\t * @typeofeditors [\"CDE\", \"CPE\"]\r\n\t * @returns {Number}\r\n\t * @see office-js-api/Examples/{Editor}/ApiComment/Methods/GetTimeUTC.js\r\n\t */",
        "description": "Returns the timestamp of the comment creation in UTC format.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nApi.pluginMethod_AddComment({\"UserName\": \"John Smith\", \"Text\": \"Comment 1\"});\nvar arrComments = oPresentation.GetAllComments();\nvar oSlide1 = oPresentation.GetSlideByIndex(0);\noSlide1.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Timestamp UTC: \" + arrComments[0].GetTimeUTC());\noSlide1.AddObject(oShape);\n```",
        "memberof": "ApiComment",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Number"
                    }
                }
            }
        ],
        "name": "GetTimeUTC",
        "longname": "ApiComment#GetTimeUTC",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 21089,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiComment/Methods/GetTimeUTC.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the timestamp of the comment creation in UTC format.\r\n\t * @memberof ApiComment\r\n\t * @typeofeditors [\"CDE\", \"CPE\"]\r\n\t * @param {Number | String} nTimeStamp - The timestamp of the comment creation in UTC format.\r\n\t * @returns {ApiComment} - this\r\n\t * @see office-js-api/Examples/{Editor}/ApiComment/Methods/SetTimeUTC.js\r\n\t */",
        "description": "Sets the timestamp of the comment creation in UTC format.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nApi.pluginMethod_AddComment({\"UserName\": \"John Smith\", \"Text\": \"Comment 1\"});\nvar arrComments = oPresentation.GetAllComments();\narrComments[0].SetTimeUTC(Date.now());\nvar oSlide1 = oPresentation.GetSlideByIndex(0);\noSlide1.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Timestamp UTC: \" + arrComments[0].GetTimeUTC());\noSlide1.AddObject(oShape);\n```",
        "memberof": "ApiComment",
        "params": [
            {
                "type": {
                    "names": [
                        "Number",
                        "String"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "Number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "String"
                            }
                        ]
                    }
                },
                "name": "nTimeStamp",
                "description": "The timestamp of the comment creation in UTC format.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiComment"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiComment"
                    }
                }
            }
        ],
        "name": "SetTimeUTC",
        "longname": "ApiComment#SetTimeUTC",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 21104,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiComment/Methods/SetTimeUTC.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns the timestamp of the comment creation in the current time zone format.\r\n\t * @memberof ApiComment\r\n\t * @typeofeditors [\"CDE\", \"CPE\"]\r\n\t * @returns {Number}\r\n\t * @see office-js-api/Examples/{Editor}/ApiComment/Methods/GetTime.js\r\n\t */",
        "description": "Returns the timestamp of the comment creation in the current time zone format.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nApi.pluginMethod_AddComment({\"UserName\": \"John Smith\", \"Text\": \"Comment 1\"});\nvar arrComments = oPresentation.GetAllComments();\nvar oSlide1 = oPresentation.GetSlideByIndex(0);\noSlide1.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Timestamp: \" + arrComments[0].GetTime());\noSlide1.AddObject(oShape);\n```",
        "memberof": "ApiComment",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Number"
                    }
                }
            }
        ],
        "name": "GetTime",
        "longname": "ApiComment#GetTime",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 21122,
            "columnno": 2
        },
        "see": [
            "office-js-api/Examples/Slide/ApiComment/Methods/GetTime.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the timestamp of the comment creation in the current time zone format.\r\n\t * @memberof ApiComment\r\n\t * @typeofeditors [\"CDE\", \"CPE\"]\r\n\t * @param {Number | String} nTimeStamp - The timestamp of the comment creation in the current time zone format.\r\n\t * @returns {ApiComment} - this\r\n\t * @see office-js-api/Examples/{Editor}/ApiComment/Methods/SetTime.js\r\n\t */",
        "description": "Sets the timestamp of the comment creation in the current time zone format.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nApi.pluginMethod_AddComment({\"UserName\": \"John Smith\", \"Text\": \"Comment 1\"});\nvar arrComments = oPresentation.GetAllComments();\narrComments[0].SetTime(Date.now());\nvar oSlide1 = oPresentation.GetSlideByIndex(0);\noSlide1.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Timestamp: \" + arrComments[0].GetTime());\noSlide1.AddObject(oShape);\n```",
        "memberof": "ApiComment",
        "params": [
            {
                "type": {
                    "names": [
                        "Number",
                        "String"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "Number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "String"
                            }
                        ]
                    }
                },
                "name": "nTimeStamp",
                "description": "The timestamp of the comment creation in the current time zone format.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiComment"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiComment"
                    }
                }
            }
        ],
        "name": "SetTime",
        "longname": "ApiComment#SetTime",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 21134,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiComment/Methods/SetTime.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns the quote text of the current comment.\r\n\t * @memberof ApiComment\r\n\t * @typeofeditors [\"CDE\", \"CPE\"]\r\n\t * @returns {Number?}\r\n\t * @see office-js-api/Examples/{Editor}/ApiComment/Methods/GetQuoteText.js\r\n\t */",
        "description": "Returns the quote text of the current comment.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nApi.pluginMethod_AddComment({\"UserName\": \"John Smith\", \"Text\": \"Comment 1\"});\nvar arrComments = oPresentation.GetAllComments();\nvar oSlide1 = oPresentation.GetSlideByIndex(0);\noSlide1.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Comment's quote text: \" + arrComments[0].GetQuoteText());\noSlide1.AddObject(oShape);\n```",
        "memberof": "ApiComment",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Number",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetQuoteText",
        "longname": "ApiComment#GetQuoteText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 21152,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiComment/Methods/GetQuoteText.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns a number of the comment replies.\r\n\t * @memberof ApiComment\r\n\t * @typeofeditors [\"CDE\", \"CPE\"]\r\n\t * @returns {Number?}\r\n\t * @see office-js-api/Examples/{Editor}/ApiComment/Methods/GetRepliesCount.js\r\n\t */",
        "description": "Returns a number of the comment replies.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nApi.pluginMethod_AddComment({\"UserName\": \"John Smith\", \"Text\": \"Comment 1\"});\nvar arrComments = oPresentation.GetAllComments();\narrComments[0].AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");\nvar oSlide1 = oPresentation.GetSlideByIndex(0);\noSlide1.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Comment replies count: \" + arrComments[0].GetRepliesCount());\noSlide1.AddObject(oShape);\n```",
        "memberof": "ApiComment",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Number",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetRepliesCount",
        "longname": "ApiComment#GetRepliesCount",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 21163,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiComment/Methods/GetRepliesCount.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Adds a reply to a comment.\r\n\t * @memberof ApiComment\r\n\t * @typeofeditors [\"CDE\", \"CPE\"]\r\n\t * @param {String} sText - The comment reply text (required).\r\n\t * @param {String} sAuthorName - The name of the comment reply author (optional).\r\n\t * @param {String} sUserId - The user ID of the comment reply author (optional).\r\n\t * @param {Number} [nPos=this.GetRepliesCount()] - The comment reply position.\r\n\t * @returns {ApiComment?} - this\r\n\t * @see office-js-api/Examples/{Editor}/ApiComment/Methods/AddReply.js\r\n\t */",
        "description": "Adds a reply to a comment.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nApi.pluginMethod_AddComment({\"UserName\": \"John Smith\", \"Text\": \"Comment 1\"});\nvar arrComments = oPresentation.GetAllComments();\narrComments[0].AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");\nvar oReply = arrComments[0].GetReply(0);\nvar oSlide1 = oPresentation.GetSlideByIndex(0);\noSlide1.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Comment's reply text: \" + oReply.GetText());\noSlide1.AddObject(oShape);\n```",
        "memberof": "ApiComment",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "String"
                    }
                },
                "name": "sText",
                "description": "The comment reply text (required).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "String"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "String"
                    }
                },
                "name": "sAuthorName",
                "description": "The name of the comment reply author (optional).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "String"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "String"
                    }
                },
                "name": "sUserId",
                "description": "The user ID of the comment reply author (optional).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Number"
                    }
                },
                "name": "nPos",
                "description": "The comment reply position.",
                "optional": true,
                "defaultvalue": "this.GetRepliesCount()"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiComment"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiComment",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "AddReply",
        "longname": "ApiComment#AddReply",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 21197,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiComment/Methods/AddReply.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Removes the specified comment replies.\r\n\t * @memberof ApiComment\r\n\t * @typeofeditors [\"CDE\", \"CPE\"]\r\n\t * @param {Number} [nPos = 0] - The position of the first comment reply to remove.\r\n\t * @param {Number} [nCount = 1] - A number of comment replies to remove.\r\n\t * @param {boolean} [bRemoveAll = false] - Specifies whether to remove all comment replies or not.\r\n\t * @returns {ApiComment?} - this\r\n\t * @see office-js-api/Examples/{Editor}/ApiComment/Methods/RemoveReplies.js\r\n\t */",
        "description": "Removes the specified comment replies.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nApi.pluginMethod_AddComment({\"UserName\": \"John Smith\", \"Text\": \"Comment 1\"});\nvar arrComments = oPresentation.GetAllComments();\narrComments[0].AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");\narrComments[0].AddReply(\"Reply 2\", \"John Smith\", \"uid-1\");\narrComments[0].RemoveReplies(0, 1, false);\nvar oReply = arrComments[0].GetReply(0);\nvar oSlide1 = oPresentation.GetSlideByIndex(0);\noSlide1.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Comment replies count: \" + arrComments[0].GetRepliesCount());\noSlide1.AddObject(oShape);\n```",
        "memberof": "ApiComment",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Number"
                    }
                },
                "name": "nPos",
                "description": "The position of the first comment reply to remove.",
                "optional": true,
                "defaultvalue": 0
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Number"
                    }
                },
                "name": "nCount",
                "description": "A number of comment replies to remove.",
                "optional": true,
                "defaultvalue": 1
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bRemoveAll",
                "description": "Specifies whether to remove all comment replies or not.",
                "optional": true,
                "defaultvalue": false
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiComment"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiComment",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "RemoveReplies",
        "longname": "ApiComment#RemoveReplies",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 21225,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiComment/Methods/RemoveReplies.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Deletes the current comment from the document.\r\n\t * @memberof ApiComment\r\n\t * @typeofeditors [\"CDE\", \"CPE\"]\r\n\t * @returns {boolean}\r\n\t * @see office-js-api/Examples/{Editor}/ApiComment/Methods/Delete.js\r\n\t */",
        "description": "Deletes the current comment from the document.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nApi.pluginMethod_AddComment({\"UserName\": \"John Smith\", \"Text\": \"Comment 1\"});\nvar arrComments = oPresentation.GetAllComments();\narrComments[0].Delete();\nvar oSlide1 = oPresentation.GetSlideByIndex(0);\noSlide1.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"The comment was just deleted from the current presentation.\");\noSlide1.AddObject(oShape);\n```",
        "memberof": "ApiComment",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "Delete",
        "longname": "ApiComment#Delete",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 21248,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiComment/Methods/Delete.js"
        ]
    },
    {
        "comment": "/**\r\n     * Class representing a presentation.\r\n     * @constructor\r\n     */",
        "description": "Class representing a presentation.",
        "name": "ApiPresentation",
        "longname": "ApiPresentation",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 47,
            "columnno": 4
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\r\n     * Class representing a slide master.\r\n     * @constructor\r\n     */",
        "description": "Class representing a slide master.",
        "name": "ApiMaster",
        "longname": "ApiMaster",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 55,
            "columnno": 4
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\r\n     * Class representing a slide layout.\r\n     * @constructor\r\n     */",
        "description": "Class representing a slide layout.",
        "name": "ApiLayout",
        "longname": "ApiLayout",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 63,
            "columnno": 4
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\r\n     * Class representing a placeholder.\r\n     * @constructor\r\n     */",
        "description": "Class representing a placeholder.",
        "name": "ApiPlaceholder",
        "longname": "ApiPlaceholder",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 71,
            "columnno": 4
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\r\n     * Class representing a presentation theme.\r\n     * @constructor\r\n     */",
        "description": "Class representing a presentation theme.",
        "name": "ApiTheme",
        "longname": "ApiTheme",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 79,
            "columnno": 4
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\r\n     * Class representing a theme color scheme.\r\n     * @constructor\r\n     */",
        "description": "Class representing a theme color scheme.",
        "name": "ApiThemeColorScheme",
        "longname": "ApiThemeColorScheme",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 87,
            "columnno": 4
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\r\n     * Class representing a theme format scheme.\r\n     * @constructor\r\n     */",
        "description": "Class representing a theme format scheme.",
        "name": "ApiThemeFormatScheme",
        "longname": "ApiThemeFormatScheme",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 95,
            "columnno": 4
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\r\n     * Class representing a theme font scheme.\r\n     * @constructor\r\n     */",
        "description": "Class representing a theme font scheme.",
        "name": "ApiThemeFontScheme",
        "longname": "ApiThemeFontScheme",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 103,
            "columnno": 4
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\r\n     * Class representing a slide.\r\n     * @constructor\r\n     */",
        "description": "Class representing a slide.",
        "name": "ApiSlide",
        "longname": "ApiSlide",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 111,
            "columnno": 4
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\r\n    * A bullet type which will be added to the paragraph in spreadsheet or presentation.\r\n    * @typedef {(\"None\" | \"ArabicPeriod\"  | \"ArabicParenR\"  | \"RomanUcPeriod\" | \"RomanLcPeriod\" | \"AlphaLcParenR\" | \"AlphaLcPeriod\" | \"AlphaUcParenR\" | \"AlphaUcPeriod\")} BulletType\r\n    * @see office-js-api/Examples/Enumerations/BulletType.js\r\n\t */",
        "description": "A bullet type which will be added to the paragraph in spreadsheet or presentation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\n// The paragraph will be starting with the Arabic numeral which has parenthesis\nvar oBullet = Api.CreateNumbering(\"ArabicParenR\");\n```",
        "name": "BulletType",
        "longname": "BulletType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 271,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/BulletType.js"
        ],
        "type": {
            "names": [
                "\"None\"",
                "\"ArabicPeriod\"",
                "\"ArabicParenR\"",
                "\"RomanUcPeriod\"",
                "\"RomanLcPeriod\"",
                "\"AlphaLcParenR\"",
                "\"AlphaLcPeriod\"",
                "\"AlphaUcParenR\"",
                "\"AlphaUcPeriod\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"None\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ArabicPeriod\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ArabicParenR\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"RomanUcPeriod\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"RomanLcPeriod\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"AlphaLcParenR\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"AlphaLcPeriod\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"AlphaUcParenR\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"AlphaUcPeriod\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n     * @typedef {(\"body\" | \"chart\" | \"clipArt\" | \"ctrTitle\" | \"diagram\" | \"date\" | \"footer\" | \"header\" | \"media\" | \"object\" | \"picture\" | \"sldImage\" | \"sldNumber\" | \"subTitle\" | \"table\" | \"title\")} PlaceholderType - Available placeholder types.\r\n     */",
        "description": "Available placeholder types.",
        "name": "PlaceholderType",
        "longname": "PlaceholderType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 355,
            "columnno": 4
        },
        "properties": null,
        "see": null,
        "type": {
            "names": [
                "\"body\"",
                "\"chart\"",
                "\"clipArt\"",
                "\"ctrTitle\"",
                "\"diagram\"",
                "\"date\"",
                "\"footer\"",
                "\"header\"",
                "\"media\"",
                "\"object\"",
                "\"picture\"",
                "\"sldImage\"",
                "\"sldNumber\"",
                "\"subTitle\"",
                "\"table\"",
                "\"title\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"body\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"chart\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"clipArt\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ctrTitle\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"diagram\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"date\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"footer\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"header\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"media\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"object\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"picture\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"sldImage\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"sldNumber\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"subTitle\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"table\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"title\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n     * Any valid drawing element\r\n     * @typedef {(ApiShape | ApiImage | ApiGroup | ApiOleObject | ApiTable )} Drawing\r\n\t */",
        "description": "Any valid drawing element",
        "name": "Drawing",
        "longname": "Drawing",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 359,
            "columnno": 4
        },
        "properties": null,
        "see": null,
        "type": {
            "names": [
                "ApiShape",
                "ApiImage",
                "ApiGroup",
                "ApiOleObject",
                "ApiTable"
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "ApiShape"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiImage"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiGroup"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiOleObject"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiTable"
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\r\n     * Returns the main presentation.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @memberof Api\r\n     * @returns {ApiPresentation}\r\n     * @see office-js-api/Examples/{Editor}/Api/Methods/GetPresentation.js\r\n\t */",
        "description": "Returns the main presentation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetLegendPos(\"bottom\");\noChart.SetShowDataLabels(false, false, true, false);\noChart.SetTitle(\"Financial Overview\", 13);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\noSlide.AddObject(oChart);\n```",
        "memberof": "Api",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiPresentation"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiPresentation"
                    }
                }
            }
        ],
        "name": "GetPresentation",
        "longname": "Api#GetPresentation",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 383,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/Api/Methods/GetPresentation.js"
        ]
    },
    {
        "comment": "/**\r\n     * Creates a new slide master.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @memberof Api\r\n     * @param {ApiTheme} [oTheme = ApiPresentation.GetMaster(0).GetTheme()] - The presentation theme object.\r\n     * @returns {?ApiMaster} - returns null if presentation theme doesn't exist.\r\n     * @see office-js-api/Examples/{Editor}/Api/Methods/CreateMaster.js\r\n\t */",
        "description": "Creates a new slide master.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = Api.CreateMaster();\nvar nCountBefore = oPresentation.GetMastersCount();\noPresentation.AddMaster(nCountBefore, oMaster);\nvar nCountAfter = oPresentation.GetMastersCount();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Number of masters before adding new master: \" + nCountBefore);\noParagraph.AddLineBreak();\noParagraph.AddText(\"Number of masters after adding new master: \" + nCountAfter);\noSlide.RemoveAllObjects();\noSlide.AddObject(oShape);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiTheme"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTheme"
                    }
                },
                "name": "oTheme",
                "description": "The presentation theme object.",
                "optional": true,
                "defaultvalue": "ApiPresentation.GetMaster(0).GetTheme()"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiMaster"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiMaster",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "CreateMaster",
        "longname": "Api#CreateMaster",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 398,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/Api/Methods/CreateMaster.js"
        ]
    },
    {
        "comment": "/**\r\n     * Creates a new slide layout and adds it to the slide master if it is specified.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @memberof Api\r\n     * @param {ApiMaster} [oMaster = null] - Parent slide master.\r\n     * @returns {ApiLayout}\r\n     * @see office-js-api/Examples/{Editor}/Api/Methods/CreateLayout.js\r\n\t */",
        "description": "Creates a new slide layout and adds it to the slide master if it is specified.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide1 = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oLayout = Api.CreateLayout(oMaster);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oPlaceholder = Api.CreatePlaceholder(\"picture\");\noShape.SetPlaceholder(oPlaceholder);\noLayout.AddObject(oShape);\noSlide1.ApplyLayout(oLayout);\nvar oSlide2 = Api.CreateSlide();\noPresentation.AddSlide(oSlide2);\noSlide2.ApplyLayout(oLayout);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiMaster"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiMaster"
                    }
                },
                "name": "oMaster",
                "description": "Parent slide master.",
                "optional": true,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiLayout"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiLayout"
                    }
                }
            }
        ],
        "name": "CreateLayout",
        "longname": "Api#CreateLayout",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 423,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/Api/Methods/CreateLayout.js"
        ]
    },
    {
        "comment": "/**\r\n     * Creates a new placeholder.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @memberof Api\r\n     * @param {string} sType - The placeholder type (\"body\", \"chart\", \"clipArt\", \"ctrTitle\", \"diagram\", \"date\", \"footer\", \"header\", \"media\", \"object\", \"picture\", \"sldImage\", \"sldNumber\", \"subTitle\", \"table\", \"title\").\r\n     * @returns {ApiPlaceholder}\r\n     * @see office-js-api/Examples/{Editor}/Api/Methods/CreatePlaceholder.js\r\n\t */",
        "description": "Creates a new placeholder.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oPlaceholder = Api.CreatePlaceholder(\"picture\");\noShape.SetPlaceholder(oPlaceholder);\noSlide.AddObject(oShape);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sType",
                "description": "The placeholder type (\"body\", \"chart\", \"clipArt\", \"ctrTitle\", \"diagram\", \"date\", \"footer\", \"header\", \"media\", \"object\", \"picture\", \"sldImage\", \"sldNumber\", \"subTitle\", \"table\", \"title\").",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiPlaceholder"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiPlaceholder"
                    }
                }
            }
        ],
        "name": "CreatePlaceholder",
        "longname": "Api#CreatePlaceholder",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 440,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/Api/Methods/CreatePlaceholder.js"
        ]
    },
    {
        "comment": "/**\r\n     * Creates a new presentation theme.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @memberof Api\r\n     * @param {string} sName - Theme name.\r\n     * @param {ApiMaster} oMaster - Slide master. Required parameter.\r\n     * @param {ApiThemeColorScheme} oClrScheme - Theme color scheme. Required parameter.\r\n     * @param {ApiThemeFormatScheme} oFormatScheme - Theme format scheme. Required parameter.\r\n     * @param {ApiThemeFontScheme} oFontScheme - Theme font scheme. Required parameter.\r\n     * @returns {ApiTheme | null} \r\n     * @see office-js-api/Examples/{Editor}/Api/Methods/CreateTheme.js\r\n\t */",
        "description": "Creates a new presentation theme.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oClrScheme = Api.CreateThemeColorScheme([Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51), Api.CreateRGBColor(230, 179, 117), Api.CreateRGBColor(235, 235, 235), Api.CreateRGBColor(163, 21, 21), \n\tApi.CreateRGBColor(128, 43, 43), Api.CreateRGBColor(0, 0, 0), Api.CreateRGBColor(128, 128, 128), Api.CreateRGBColor(176, 196, 222), Api.CreateRGBColor(65, 105, 225), Api.CreateRGBColor(255, 255, 255), Api.CreateRGBColor(255, 213, 191)], \"New color scheme\");\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill1 = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oBgFill1 = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke1 = Api.CreateStroke(1 * 36000, oFill1);\nvar oFill2 = Api.CreatePatternFill(\"dashDnDiag\", Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51));\nvar oBgFill2 = Api.CreatePatternFill(\"dashDnDiag\", Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51));\nvar oStroke2 = Api.CreateStroke(1 * 36000, oFill2);\nvar oFill3 = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oBgFill3 = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke3 = Api.CreateStroke(1 * 36000, oFill3);\nvar oFormatScheme = Api.CreateThemeFormatScheme([oFill1, oFill2, oFill3], [oBgFill1, oBgFill2, oBgFill3], [oStroke1, oStroke2, oStroke3], \"New format scheme\");\nvar oFontScheme = Api.CreateThemeFontScheme(\"Arial\", \"Noto Sans Simplified Chinese\", \"Arabic\", \"Times New Roman\", \"Noto Serif Simplified Chinese\", \"Arabic\", \"New font scheme\");\nvar oTheme = Api.CreateTheme(\"New theme\", oMaster, oClrScheme, oFormatScheme, oFontScheme);\noPresentation.ApplyTheme(oTheme);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sName",
                "description": "Theme name.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiMaster"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiMaster"
                    }
                },
                "name": "oMaster",
                "description": "Slide master. Required parameter.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiThemeColorScheme"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiThemeColorScheme"
                    }
                },
                "name": "oClrScheme",
                "description": "Theme color scheme. Required parameter.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiThemeFormatScheme"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiThemeFormatScheme"
                    }
                },
                "name": "oFormatScheme",
                "description": "Theme format scheme. Required parameter.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiThemeFontScheme"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiThemeFontScheme"
                    }
                },
                "name": "oFontScheme",
                "description": "Theme font scheme. Required parameter.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTheme",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiTheme"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "CreateTheme",
        "longname": "Api#CreateTheme",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 463,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/Api/Methods/CreateTheme.js"
        ]
    },
    {
        "comment": "/**\r\n     * Creates a new theme color scheme.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @memberof Api\r\n     * @param {(ApiUniColor[] | ApiRGBColor[])} arrColors - Set of colors which are referred to as a color scheme.\r\n     * The color scheme is responsible for defining a list of twelve colors.\r\n     * The array should contain a sequence of colors: 2 dark, 2 light, 6 primary, a color for a hyperlink and a color for the followed hyperlink.\r\n     * @param {string} sName - Theme color scheme name.\r\n     * @returns {?ApiThemeColorScheme}\r\n     * @see office-js-api/Examples/{Editor}/Api/Methods/CreateThemeColorScheme.js\r\n\t */",
        "description": "Creates a new theme color scheme.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oClrScheme = Api.CreateThemeColorScheme([Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51), Api.CreateRGBColor(230, 179, 117), Api.CreateRGBColor(235, 235, 235), Api.CreateRGBColor(163, 21, 21), \n\tApi.CreateRGBColor(128, 43, 43), Api.CreateRGBColor(0, 0, 0), Api.CreateRGBColor(128, 128, 128), Api.CreateRGBColor(176, 196, 222), Api.CreateRGBColor(65, 105, 225), Api.CreateRGBColor(255, 255, 255), Api.CreateRGBColor(255, 213, 191)], \"New color scheme\");\nvar oTheme = oSlide.GetTheme();\noTheme.SetColorScheme(oClrScheme);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n[200, 240, 280],\n[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetLegendPos(\"bottom\");\noChart.SetShowDataLabels(false, false, true, false);\noChart.SetTitle(\"Financial Overview\", 20);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\noSlide.AddObject(oChart);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<ApiUniColor>",
                        "Array.<ApiRGBColor>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "ApiUniColor",
                                        "type": "NameExpression"
                                    }
                                ]
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "ApiRGBColor",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "arrColors",
                "description": "Set of colors which are referred to as a color scheme.\rThe color scheme is responsible for defining a list of twelve colors.\rThe array should contain a sequence of colors: 2 dark, 2 light, 6 primary, a color for a hyperlink and a color for the followed hyperlink.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sName",
                "description": "Theme color scheme name.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiThemeColorScheme"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiThemeColorScheme",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "CreateThemeColorScheme",
        "longname": "Api#CreateThemeColorScheme",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 510,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/Api/Methods/CreateThemeColorScheme.js"
        ]
    },
    {
        "comment": "/**\r\n     * Creates a new theme format scheme.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @memberof Api\r\n     * @param {ApiFill[]} arrFill - This array contains the fill styles. It should be consist of subtle, moderate and intense fills.\r\n     * @param {ApiFill[]} arrBgFill - This array contains the background fill styles. It should be consist of subtle, moderate and intense fills.\r\n     * @param {ApiStroke[]} arrLine - This array contains the line styles. It should be consist of subtle, moderate and intense lines.\r\n     * @param {string} sName - Theme format scheme name.\r\n     * @returns {?ApiThemeFormatScheme} \r\n     * @see office-js-api/Examples/{Editor}/Api/Methods/CreateThemeFormatScheme.js\r\n\t */",
        "description": "Creates a new theme format scheme.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oClrScheme = Api.CreateThemeColorScheme([Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51), Api.CreateRGBColor(230, 179, 117), Api.CreateRGBColor(235, 235, 235), Api.CreateRGBColor(163, 21, 21), \n\tApi.CreateRGBColor(128, 43, 43), Api.CreateRGBColor(0, 0, 0), Api.CreateRGBColor(128, 128, 128), Api.CreateRGBColor(176, 196, 222), Api.CreateRGBColor(65, 105, 225), Api.CreateRGBColor(255, 255, 255), Api.CreateRGBColor(255, 213, 191)], \"New color scheme\");\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill1 = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oBgFill1 = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke1 = Api.CreateStroke(1 * 36000, oFill1);\nvar oFill2 = Api.CreatePatternFill(\"dashDnDiag\", Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51));\nvar oBgFill2 = Api.CreatePatternFill(\"dashDnDiag\", Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51));\nvar oStroke2 = Api.CreateStroke(1 * 36000, oFill2);\nvar oFill3 = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oBgFill3 = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke3 = Api.CreateStroke(1 * 36000, oFill3);\nvar oFormatScheme = Api.CreateThemeFormatScheme([oFill1, oFill2, oFill3], [oBgFill1, oBgFill2, oBgFill3], [oStroke1, oStroke2, oStroke3], \"New format scheme\");\nvar oFontScheme = Api.CreateThemeFontScheme(\"Arial\", \"Noto Sans Simplified Chinese\", \"Arabic\", \"Times New Roman\", \"Noto Serif Simplified Chinese\", \"Arabic\", \"New font scheme\");\nvar oTheme = Api.CreateTheme(\"New theme\", oMaster, oClrScheme, oFormatScheme, oFontScheme);\noPresentation.ApplyTheme(oTheme);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<ApiFill>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiFill",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "arrFill",
                "description": "This array contains the fill styles. It should be consist of subtle, moderate and intense fills.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "Array.<ApiFill>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiFill",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "arrBgFill",
                "description": "This array contains the background fill styles. It should be consist of subtle, moderate and intense fills.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "Array.<ApiStroke>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiStroke",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "arrLine",
                "description": "This array contains the line styles. It should be consist of subtle, moderate and intense lines.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sName",
                "description": "Theme format scheme name.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiThemeFormatScheme"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiThemeFormatScheme",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "CreateThemeFormatScheme",
        "longname": "Api#CreateThemeFormatScheme",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 545,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/Api/Methods/CreateThemeFormatScheme.js"
        ]
    },
    {
        "comment": "/**\r\n     * Creates a new theme font scheme.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @memberof Api\r\n     * @param {string} mjLatin - The major theme font applied to the latin text.\r\n     * @param {string} mjEa - The major theme font applied to the east asian text.\r\n     * @param {string} mjCs - The major theme font applied to the complex script text.\r\n     * @param {string} mnLatin - The minor theme font applied to the latin text.\r\n     * @param {string} mnEa - The minor theme font applied to the east asian text.\r\n     * @param {string} mnCs - The minor theme font applied to the complex script text.\r\n     * @param {string} sName - Theme font scheme name.\r\n     * @returns {ApiThemeFontScheme}\r\n     * @see office-js-api/Examples/{Editor}/Api/Methods/CreateThemeFontScheme.js\r\n\t */",
        "description": "Creates a new theme font scheme.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oClrScheme = Api.CreateThemeColorScheme([Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51), Api.CreateRGBColor(230, 179, 117), Api.CreateRGBColor(235, 235, 235), Api.CreateRGBColor(163, 21, 21), \n\tApi.CreateRGBColor(128, 43, 43), Api.CreateRGBColor(0, 0, 0), Api.CreateRGBColor(128, 128, 128), Api.CreateRGBColor(176, 196, 222), Api.CreateRGBColor(65, 105, 225), Api.CreateRGBColor(255, 255, 255), Api.CreateRGBColor(255, 213, 191)], \"New color scheme\");\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill1 = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oBgFill1 = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke1 = Api.CreateStroke(1 * 36000, oFill1);\nvar oFill2 = Api.CreatePatternFill(\"dashDnDiag\", Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51));\nvar oBgFill2 = Api.CreatePatternFill(\"dashDnDiag\", Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51));\nvar oStroke2 = Api.CreateStroke(1 * 36000, oFill2);\nvar oFill3 = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oBgFill3 = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke3 = Api.CreateStroke(1 * 36000, oFill3);\nvar oFormatScheme = Api.CreateThemeFormatScheme([oFill1, oFill2, oFill3], [oBgFill1, oBgFill2, oBgFill3], [oStroke1, oStroke2, oStroke3], \"New format scheme\");\nvar oFontScheme = Api.CreateThemeFontScheme(\"Arial\", \"Noto Sans Simplified Chinese\", \"Arabic\", \"Times New Roman\", \"Noto Serif Simplified Chinese\", \"Arabic\", \"New font scheme\");\nvar oTheme = Api.CreateTheme(\"New theme\", oMaster, oClrScheme, oFormatScheme, oFontScheme);\noPresentation.ApplyTheme(oTheme);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"This text is written in the Times New Roman font.\");\noSlide.AddObject(oShape);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "mjLatin",
                "description": "The major theme font applied to the latin text.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "mjEa",
                "description": "The major theme font applied to the east asian text.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "mjCs",
                "description": "The major theme font applied to the complex script text.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "mnLatin",
                "description": "The minor theme font applied to the latin text.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "mnEa",
                "description": "The minor theme font applied to the east asian text.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "mnCs",
                "description": "The minor theme font applied to the complex script text.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sName",
                "description": "Theme font scheme name.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiThemeFontScheme"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiThemeFontScheme"
                    }
                }
            }
        ],
        "name": "CreateThemeFontScheme",
        "longname": "Api#CreateThemeFontScheme",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 582,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/Api/Methods/CreateThemeFontScheme.js"
        ]
    },
    {
        "comment": "/**\r\n     * Creates a new slide.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @memberof Api\r\n     * @returns {ApiSlide}\r\n     * @see office-js-api/Examples/{Editor}/Api/Methods/CreateSlide.js\r\n\t */",
        "description": "Creates a new slide.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = Api.CreateSlide();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\noSlide.SetBackground(oFill);\noPresentation.AddSlide(oSlide);\n```",
        "memberof": "Api",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiSlide"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiSlide"
                    }
                }
            }
        ],
        "name": "CreateSlide",
        "longname": "Api#CreateSlide",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 614,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/Api/Methods/CreateSlide.js"
        ]
    },
    {
        "comment": "/**\r\n     * Creates an image with the parameters specified.\r\n     * @memberof Api\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {string} sImageSrc - The image source where the image to be inserted should be taken from (currently,\r\n     * only internet URL or Base64 encoded images are supported).\r\n     * @param {EMU} nWidth - The image width in English measure units.\r\n     * @param {EMU} nHeight - The image height in English measure units.\r\n     * @returns {ApiImage}\r\n     * @see office-js-api/Examples/{Editor}/Api/Methods/CreateImage.js\r\n\t */",
        "description": "Creates an image with the parameters specified.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oShape = Api.CreateImage(\"https://api.onlyoffice.com/content/img/docbuilder/examples/step2_1.png\", 300 * 36000, 150 * 36000);\noSlide.AddObject(oShape);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sImageSrc",
                "description": "The image source where the image to be inserted should be taken from (currently,\ronly internet URL or Base64 encoded images are supported).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nWidth",
                "description": "The image width in English measure units.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nHeight",
                "description": "The image height in English measure units.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiImage"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiImage"
                    }
                }
            }
        ],
        "name": "CreateImage",
        "longname": "Api#CreateImage",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 634,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/Api/Methods/CreateImage.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Creates an OLE object with the parameters specified.\r\n\t * @memberof Api\r\n\t * @typeofeditors [\"CPE\"]\r\n\t * @param {string} sImageSrc - The image source where the image to be inserted should be taken from (currently, only internet URL or Base64 encoded images are supported).\r\n\t * @param {EMU} nWidth - The OLE object width in English measure units.\r\n\t * @param {EMU} nHeight - The OLE object height in English measure units.\r\n\t * @param {string} sData - The OLE object string data.\r\n\t * @param {string} sAppId - The application ID associated with the current OLE object.\r\n\t * @returns {ApiOleObject}\r\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/CreateOleObject.js\r\n\t */",
        "description": "Creates an OLE object with the parameters specified.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oOleObject = Api.CreateOleObject(\"https://api.onlyoffice.com/content/img/docbuilder/examples/ole-object-image.png\", 130 * 36000, 90 * 36000, \"https://youtu.be/SKGz4pmnpgY\", \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\");\noOleObject.SetSize(200 * 36000, 130 * 36000);\noOleObject.SetPosition(70 * 36000, 30 * 36000);\noSlide.AddObject(oOleObject);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sImageSrc",
                "description": "The image source where the image to be inserted should be taken from (currently, only internet URL or Base64 encoded images are supported).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nWidth",
                "description": "The OLE object width in English measure units.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nHeight",
                "description": "The OLE object height in English measure units.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sData",
                "description": "The OLE object string data.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sAppId",
                "description": "The application ID associated with the current OLE object.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiOleObject"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiOleObject"
                    }
                }
            }
        ],
        "name": "CreateOleObject",
        "longname": "Api#CreateOleObject",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 652,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/Api/Methods/CreateOleObject.js"
        ]
    },
    {
        "comment": "/**\r\n     * Creates a shape with the parameters specified.\r\n     * @memberof Api\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {ShapeType} [sType=\"rect\"] - The shape type which specifies the preset shape geometry.\r\n     * @param {EMU} [nWidth = 914400] - The shape width in English measure units.\r\n\t * @param {EMU} [nHeight = 914400] - The shape height in English measure units.\r\n\t * @param {ApiFill} [oFill    = Api.CreateNoFill()] - The color or pattern used to fill the shape.\r\n\t * @param {ApiStroke} [oStroke    = Api.CreateStroke(0, Api.CreateNoFill())] - The stroke used to create the element shadow.\r\n     * @returns {ApiShape}\r\n     * @see office-js-api/Examples/{Editor}/Api/Methods/CreateShape.js\r\n\t */",
        "description": "Creates a shape with the parameters specified.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.SetFontSize(60);\noRun.AddText(\"This is just a sample text. \");\noParagraph.AddElement(oRun);\noRun = Api.CreateRun();\noRun.SetFontSize(60);\noRun.SetFontFamily(\"Comic Sans MS\");\noRun.AddText(\"This is a text run with the font family set to 'Comic Sans MS'.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "ShapeType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ShapeType"
                    }
                },
                "name": "sType",
                "description": "The shape type which specifies the preset shape geometry.",
                "optional": true,
                "defaultvalue": "\"rect\""
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nWidth",
                "description": "The shape width in English measure units.",
                "optional": true,
                "defaultvalue": 914400
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nHeight",
                "description": "The shape height in English measure units.",
                "optional": true,
                "defaultvalue": 914400
            },
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                },
                "name": "oFill",
                "description": "The color or pattern used to fill the shape.",
                "optional": true,
                "defaultvalue": "Api.CreateNoFill()"
            },
            {
                "type": {
                    "names": [
                        "ApiStroke"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiStroke"
                    }
                },
                "name": "oStroke",
                "description": "The stroke used to create the element shadow.",
                "optional": true,
                "defaultvalue": "Api.CreateStroke(0, Api.CreateNoFill())"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiShape"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiShape"
                    }
                }
            }
        ],
        "name": "CreateShape",
        "longname": "Api#CreateShape",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 679,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/Api/Methods/CreateShape.js"
        ]
    },
    {
        "comment": "/**\r\n     * Creates a chart with the parameters specified.\r\n     * @memberof Api\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {ChartType} [sType=\"bar\"] - The chart type used for the chart display.\r\n     * @param {Array} aSeries - The array of the data used to build the chart from.\r\n     * @param {Array} aSeriesNames - The array of the names (the source table column names) used for the data which the chart will be build from.\r\n     * @param {Array} aCatNames - The array of the names (the source table row names) used for the data which the chart will be build from.\r\n     * @param {EMU} nWidth - The chart width in English measure units.\r\n     * @param {EMU} nHeight - The chart height in English measure units.\r\n     * @param {number} nStyleIndex - The chart color style index (can be <b>1 - 48</b>, as described in OOXML specification).\r\n     * @param {NumFormat[] | String[]} aNumFormats - Numeric formats which will be applied to the series (can be custom formats).\r\n     * The default numeric format is \"General\".\r\n     * @returns {ApiChart}\r\n     * @see office-js-api/Examples/{Editor}/Api/Methods/CreateChart.js\r\n\t */",
        "description": "Creates a chart with the parameters specified.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24, [\"0\", \"0.00\"]);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\noChart.SetShowPointDataLabel(1, 0, false, false, true, false);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\noSlide.AddObject(oChart);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "ChartType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ChartType"
                    }
                },
                "name": "sType",
                "description": "The chart type used for the chart display.",
                "optional": true,
                "defaultvalue": "\"bar\""
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Array"
                    }
                },
                "name": "aSeries",
                "description": "The array of the data used to build the chart from.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Array"
                    }
                },
                "name": "aSeriesNames",
                "description": "The array of the names (the source table column names) used for the data which the chart will be build from.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Array"
                    }
                },
                "name": "aCatNames",
                "description": "The array of the names (the source table row names) used for the data which the chart will be build from.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nWidth",
                "description": "The chart width in English measure units.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nHeight",
                "description": "The chart height in English measure units.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nStyleIndex",
                "description": "The chart color style index (can be <b>1 - 48</b>, as described in OOXML specification).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "Array.<NumFormat>",
                        "Array.<String>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "NumFormat",
                                        "type": "NameExpression"
                                    }
                                ]
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "String",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "aNumFormats",
                "description": "Numeric formats which will be applied to the series (can be custom formats).\rThe default numeric format is \"General\".",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiChart"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiChart"
                    }
                }
            }
        ],
        "name": "CreateChart",
        "longname": "Api#CreateChart",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 707,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/Api/Methods/CreateChart.js"
        ]
    },
    {
        "comment": "/**\r\n     * Creates a group of drawings.\r\n     * @memberof Api\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {Array} aDrawings - The array of drawings.\r\n     * @returns {ApiGroup}\r\n     * @see office-js-api/Examples/{Editor}/Api/Methods/CreateGroup.js\r\n\t */",
        "description": "Creates a group of drawings.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill1 = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oFill2 = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape1 = Api.CreateShape(\"rect\", 300 * 36000, 130 * 36000, oFill1, oStroke);\nvar oShape2 = Api.CreateShape(\"rect\", 150 * 36000, 80 * 36000, oFill2, oStroke);\nvar oGroup = Api.CreateGroup([oShape1, oShape2]);\noShape1.SetPosition(608400, 1267200);\noShape2.SetPosition(3100000, 1867200);\noSlide.AddObject(oGroup);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Array"
                    }
                },
                "name": "aDrawings",
                "description": "The array of drawings.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiGroup"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiGroup"
                    }
                }
            }
        ],
        "name": "CreateGroup",
        "longname": "Api#CreateGroup",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 723,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/Api/Methods/CreateGroup.js"
        ]
    },
    {
        "comment": "/**\r\n     * Creates a table.\r\n     * @memberof Api\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param nCols - Number of columns.\r\n     * @param nRows - Number of rows.\r\n     * @returns {?ApiTable}\r\n     * @see office-js-api/Examples/{Editor}/Api/Methods/CreateTable.js\r\n\t */",
        "description": "Creates a table.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oTable = Api.CreateTable(2, 4);\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\noSlide.AddObject(oTable);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": null,
                "name": "nCols",
                "description": "Number of columns.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": null,
                "name": "nRows",
                "description": "Number of rows.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTable"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTable",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "CreateTable",
        "longname": "Api#CreateTable",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 744,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/Api/Methods/CreateTable.js"
        ]
    },
    {
        "comment": "/**\r\n     * Creates a new paragraph.\r\n     * @memberof Api\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {ApiParagraph}\r\n     * @see office-js-api/Examples/{Editor}/Api/Methods/CreateParagraph.js\r\n\t */",
        "description": "Creates a new paragraph.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\noDocContent.RemoveAllElements();\nvar oParagraph = Api.CreateParagraph();\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"This is an example of a paragraph inside a shape. Nothing special.\");\noDocContent.Push(oParagraph);\noSlide.AddObject(oShape);\n```",
        "memberof": "Api",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiParagraph"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiParagraph"
                    }
                }
            }
        ],
        "name": "CreateParagraph",
        "longname": "Api#CreateParagraph",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 766,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/Api/Methods/CreateParagraph.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Saves changes to the specified document.\r\n\t * @typeofeditors [\"CPE\"]\r\n\t * @memberof Api\r\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/Save.js\r\n\t */",
        "description": "Saves changes to the specified document.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\noDocContent.RemoveAllElements();\nvar oParagraph = Api.CreateParagraph();\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"This shape with paragraph in it is saved to the document.\");\noDocContent.Push(oParagraph);\noSlide.AddObject(oShape);\nApi.Save();\n```",
        "memberof": "Api",
        "params": null,
        "returns": null,
        "name": "Save",
        "longname": "Api#Save",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 777,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/Api/Methods/Save.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Creates a Text Art object with the parameters specified.\r\n\t * @memberof Api\r\n\t * @typeofeditors [\"CPE\"]\r\n\t * @param {ApiTextPr} [oTextPr=Api.CreateTextPr()] - The text properties.\r\n\t * @param {string} [sText=\"Your text here\"] - The text for the Text Art object.\r\n     * @param {TextTransform} [sTransform=\"textNoShape\"] - Text transform type.\r\n\t * @param {ApiFill} [oFill=Api.CreateNoFill()] - The color or pattern used to fill the Text Art object.\r\n\t * @param {ApiStroke} [oStroke=Api.CreateStroke(0, Api.CreateNoFill())] - The stroke used to create the Text Art object shadow.\r\n\t * @param {number} [nRotAngle=0] - Rotation angle.\r\n\t * @param {EMU} [nWidth=1828800] - The Text Art width measured in English measure units.\r\n\t * @param {EMU} [nHeight=1828800] - The Text Art heigth measured in English measure units.\r\n     * @param {EMU} [nIndLeft=ApiPresentation.GetWidth() / 2] - The Text Art left side indentation value measured in English measure units.\r\n\t * @param {EMU} [nIndTop=ApiPresentation.GetHeight() / 2] - The Text Art top side indentation value measured in English measure units.\r\n\t * @returns {ApiDrawing}\r\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/CreateWordArt.js\r\n\t */",
        "description": "Creates a Text Art object with the parameters specified.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oRun = Api.CreateRun();\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontSize(72);\noTextPr.SetBold(true);\noTextPr.SetCaps(true);\noTextPr.SetColor(51, 51, 51, false);\noTextPr.SetFontFamily(\"Comic Sans MS\");\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(1 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\nvar oTextArt = Api.CreateWordArt(oTextPr, \"onlyoffice\", \"textArchUp\", oFill, oStroke, 0, 100 * 36000, 30 * 36000);\noSlide.AddObject(oTextArt);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                },
                "name": "oTextPr",
                "description": "The text properties.",
                "optional": true,
                "defaultvalue": "Api.CreateTextPr()"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sText",
                "description": "The text for the Text Art object.",
                "optional": true,
                "defaultvalue": "\"Your text here\""
            },
            {
                "type": {
                    "names": [
                        "TextTransform"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "TextTransform"
                    }
                },
                "name": "sTransform",
                "description": "Text transform type.",
                "optional": true,
                "defaultvalue": "\"textNoShape\""
            },
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                },
                "name": "oFill",
                "description": "The color or pattern used to fill the Text Art object.",
                "optional": true,
                "defaultvalue": "Api.CreateNoFill()"
            },
            {
                "type": {
                    "names": [
                        "ApiStroke"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiStroke"
                    }
                },
                "name": "oStroke",
                "description": "The stroke used to create the Text Art object shadow.",
                "optional": true,
                "defaultvalue": "Api.CreateStroke(0, Api.CreateNoFill())"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nRotAngle",
                "description": "Rotation angle.",
                "optional": true,
                "defaultvalue": 0
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nWidth",
                "description": "The Text Art width measured in English measure units.",
                "optional": true,
                "defaultvalue": 1828800
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nHeight",
                "description": "The Text Art heigth measured in English measure units.",
                "optional": true,
                "defaultvalue": 1828800
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nIndLeft",
                "description": "The Text Art left side indentation value measured in English measure units.",
                "optional": true,
                "defaultvalue": "ApiPresentation.GetWidth() / 2"
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nIndTop",
                "description": "The Text Art top side indentation value measured in English measure units.",
                "optional": true,
                "defaultvalue": "ApiPresentation.GetHeight() / 2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiDrawing"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiDrawing"
                    }
                }
            }
        ],
        "name": "CreateWordArt",
        "longname": "Api#CreateWordArt",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 841,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/Api/Methods/CreateWordArt.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Converts the specified JSON object into the Document Builder object of the corresponding type.\r\n\t * @memberof Api\r\n\t * @param {JSON} sMessage - The JSON object to convert.\r\n\t * @typeofeditors [\"CPE\"]\r\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/FromJSON.js\r\n\t */",
        "description": "Converts the specified JSON object into the Document Builder object of the corresponding type.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oMaster = oPresentation.GetMaster(0);\nvar oThemeMaster = oMaster.GetTheme();\nvar oFontScheme = oThemeMaster.GetFontScheme();\noFontScheme.SetFonts(\"Arial\", \"Noto Sans Simplified Chinese\", \"Arabic\", \"Times New Roman\", \"Noto Serif Simplified Chinese\", \"Arabic\", \"New font scheme\");\noFontScheme.SetSchemeName(\"New font scheme name\");\nvar json = oFontScheme.ToJSON();\nvar oFontSchemeFromJSON = Api.FromJSON(json);\nvar oTheme = oSlide.GetTheme();\noTheme.SetFontScheme(oFontSchemeFromJSON);\nvar sType = oFontSchemeFromJSON.GetClassType();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Class type = \" + sType);\noSlide.AddObject(oShape);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "JSON"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "JSON"
                    }
                },
                "name": "sMessage",
                "description": "The JSON object to convert.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "FromJSON",
        "longname": "Api#FromJSON",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 869,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/Api/Methods/FromJSON.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Subscribes to the specified event and calls the callback function when the event fires.\r\n     * @function\r\n\t * @memberof Api\r\n\t * @typeofeditors [\"CPE\"]\r\n\t * @param {string} eventName - The event name.\r\n\t * @param {function} callback - Function to be called when the event fires.\r\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/attachEvent.js\r\n\t */",
        "description": "Subscribes to the specified event and calls the callback function when the event fires.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nApi.attachEvent(\"asc_onHyperlinkClick\", function() {\n\tconsole.log(\"HYPERLINK!!!\");\n});\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "eventName",
                "description": "The event name.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "function"
                    ],
                    "parsedType": {
                        "type": "FunctionType",
                        "params": []
                    }
                },
                "name": "callback",
                "description": "Function to be called when the event fires.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "attachEvent",
        "longname": "Api#attachEvent",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1023,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/Api/Methods/attachEvent.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Unsubscribes from the specified event.\r\n     * @function\r\n\t * @memberof Api\r\n\t * @typeofeditors [\"CPE\"]\r\n\t * @param {string} eventName - The event name.\r\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/detachEvent.js\r\n\t */",
        "description": "Unsubscribes from the specified event.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nApi.detachEvent(\"asc_onHyperlinkClick\");\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "eventName",
                "description": "The event name.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "detachEvent",
        "longname": "Api#detachEvent",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1033,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/Api/Methods/detachEvent.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns a type of the ApiPresentation class.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {\"presentation\"}\r\n     * @see office-js-api/Examples/{Editor}/ApiPresentation/Methods/GetClassType.js\r\n\t */",
        "description": "Returns a type of the ApiPresentation class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar sClassType = oPresentation.GetClassType();\noParagraph.AddText(\"Class Type = \" + sClassType);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiPresentation",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"presentation\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"presentation\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiPresentation#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1047,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiPresentation/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns the index for the current slide.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @memberof ApiPresentation\r\n     * @returns {number}\r\n     * @see office-js-api/Examples/{Editor}/ApiPresentation/Methods/GetCurSlideIndex.js\r\n\t */",
        "description": "Returns the index for the current slide.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar nCurrentSlideIndex = oPresentation.GetCurSlideIndex();\noParagraph.AddText(\"Current Slide Index = \" + nCurrentSlideIndex);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiPresentation",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GetCurSlideIndex",
        "longname": "ApiPresentation#GetCurSlideIndex",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1059,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiPresentation/Methods/GetCurSlideIndex.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns a slide by its position in the presentation.\r\n     * @memberof ApiPresentation\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {number} nIndex - The slide number (position) in the presentation.\r\n     * @returns {?ApiSlide}\r\n     * @see office-js-api/Examples/{Editor}/ApiPresentation/Methods/GetSlideByIndex.js\r\n\t */",
        "description": "Returns a slide by its position in the presentation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiPresentation",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nIndex",
                "description": "The slide number (position) in the presentation.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiSlide"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiSlide",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetSlideByIndex",
        "longname": "ApiPresentation#GetSlideByIndex",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1075,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiPresentation/Methods/GetSlideByIndex.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns the current slide.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @memberof ApiPresentation\r\n     * @returns {?ApiSlide}\r\n     * @see office-js-api/Examples/{Editor}/ApiPresentation/Methods/GetCurrentSlide.js\r\n\t */",
        "description": "Returns the current slide.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetCurrentSlide();\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiPresentation",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiSlide"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiSlide",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetCurrentSlide",
        "longname": "ApiPresentation#GetCurrentSlide",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1089,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiPresentation/Methods/GetCurrentSlide.js"
        ]
    },
    {
        "comment": "/**\r\n     * Appends a new slide to the end of the presentation.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @memberof ApiPresentation\r\n     * @param {ApiSlide} oSlide - The slide created using the {@link Api#CreateSlide} method.\r\n     * @see office-js-api/Examples/{Editor}/ApiPresentation/Methods/AddSlide.js\r\n\t */",
        "description": "Appends a new slide to the end of the presentation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = Api.CreateSlide();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\noSlide.SetBackground(oFill);\noPresentation.AddSlide(oSlide);\n```",
        "memberof": "ApiPresentation",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiSlide"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiSlide"
                    }
                },
                "name": "oSlide",
                "description": "The slide created using the {@link Api#CreateSlide} method.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "AddSlide",
        "longname": "ApiPresentation#AddSlide",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1101,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiPresentation/Methods/AddSlide.js"
        ]
    },
    {
        "comment": "/**\r\n     * Sets the size to the current presentation.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @memberof ApiPresentation\r\n     * @param {EMU} nWidth - The presentation width in English measure units.\r\n     * @param {EMU} nHeight - The presentation height in English measure units.\r\n     * @see office-js-api/Examples/{Editor}/ApiPresentation/Methods/SetSizes.js\r\n\t */",
        "description": "Sets the size to the current presentation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\noPresentation.SetSizes(254 * 36000, 190 * 36000);\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 200 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.AddText(\"The size of this presentation was changed: width - 254 mm, height - 190 mm.\");\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiPresentation",
        "params": [
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nWidth",
                "description": "The presentation width in English measure units.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nHeight",
                "description": "The presentation height in English measure units.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetSizes",
        "longname": "ApiPresentation#SetSizes",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1118,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiPresentation/Methods/SetSizes.js"
        ]
    },
    {
        "comment": "/**\r\n     * Creates a new history point.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @memberof ApiPresentation\r\n     * @see office-js-api/Examples/{Editor}/ApiPresentation/Methods/CreateNewHistoryPoint.js\r\n\t */",
        "description": "Creates a new history point.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.AddText(\"This is just a sample text.\");\noPresentation.CreateNewHistoryPoint();\noParagraph = Api.CreateParagraph();\noParagraph.AddText(\"New history point was just created.\");\noDocContent.Push(oParagraph);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiPresentation",
        "params": null,
        "returns": null,
        "name": "CreateNewHistoryPoint",
        "longname": "ApiPresentation#CreateNewHistoryPoint",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1130,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiPresentation/Methods/CreateNewHistoryPoint.js"
        ]
    },
    {
        "comment": "/**\r\n     * Replaces the current image with an image specified.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @memberof ApiPresentation\r\n     * @param {string} sImageUrl - The image source where the image to be inserted should be taken from (currently, only internet URL or Base64 encoded images are supported).\r\n     * @param {EMU} Width - The image width in English measure units.\r\n     * @param {EMU} Height - The image height in English measure units.\r\n     * @see office-js-api/Examples/{Editor}/ApiPresentation/Methods/ReplaceCurrentImage.js\r\n\t */",
        "description": "Replaces the current image with an image specified.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oDrawing = Api.CreateImage(\"https://api.onlyoffice.com/content/img/docbuilder/examples/coordinate_aspects.png\", 300 * 36000, 150 * 36000);\noSlide.AddObject(oDrawing);\noDrawing.Select();\noPresentation.ReplaceCurrentImage(\"https://helpcenter.onlyoffice.com/images/Help/GettingStarted/Documents/big/EditDocument.png\", 60 * 36000, 35 * 36000);\n```",
        "memberof": "ApiPresentation",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sImageUrl",
                "description": "The image source where the image to be inserted should be taken from (currently, only internet URL or Base64 encoded images are supported).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "Width",
                "description": "The image width in English measure units.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "Height",
                "description": "The image height in English measure units.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "ReplaceCurrentImage",
        "longname": "ApiPresentation#ReplaceCurrentImage",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1145,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiPresentation/Methods/ReplaceCurrentImage.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies the languages which will be used to check spelling and grammar (if requested).\r\n\t * @memberof ApiPresentation\r\n\t * @typeofeditors [\"CPE\"]\r\n\t * @param {string} sLangId - The possible value for this parameter is a language identifier as defined by\r\n\t * RFC 4646/BCP 47. Example: \"en-CA\".\r\n     * @returns {boolean}\r\n\t * @see office-js-api/Examples/{Editor}/ApiPresentation/Methods/SetLanguage.js\r\n\t */",
        "description": "Specifies the languages which will be used to check spelling and grammar (if requested).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\noPresentation.SetLanguage(\"en-CA\");\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.AddText(\"English (Canada) will be used to check spelling and grammar in this presentation (if requested).\");\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiPresentation",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sLangId",
                "description": "The possible value for this parameter is a language identifier as defined by\rRFC 4646/BCP 47. Example: \"en-CA\".",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetLanguage",
        "longname": "ApiPresentation#SetLanguage",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1165,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiPresentation/Methods/SetLanguage.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns a number of slides.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {number}\r\n     * @see office-js-api/Examples/{Editor}/ApiPresentation/Methods/GetSlidesCount.js\r\n\t */",
        "description": "Returns a number of slides.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide1 = oPresentation.GetSlideByIndex(0);\nvar oSlide2 = Api.CreateSlide();\noPresentation.AddSlide(oSlide2);\nvar nSlides = oPresentation.GetSlidesCount();\noSlide1.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Number of slides = \" + nSlides);\noSlide1.AddObject(oShape);\n```",
        "memberof": "ApiPresentation",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GetSlidesCount",
        "longname": "ApiPresentation#GetSlidesCount",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1180,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiPresentation/Methods/GetSlidesCount.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns a number of slide masters.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {number}\r\n     * @see office-js-api/Examples/{Editor}/ApiPresentation/Methods/GetMastersCount.js\r\n\t */",
        "description": "Returns a number of slide masters.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar nMasters = oPresentation.GetMastersCount();\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Number of masters = \" + nMasters);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiPresentation",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GetMastersCount",
        "longname": "ApiPresentation#GetMastersCount",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1191,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiPresentation/Methods/GetMastersCount.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns a slide master by its position in the presentation.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {number} nPos - Slide master position in the presentation\r\n     * @returns {ApiMaster | null} - returns null if position is invalid.\r\n     * @see office-js-api/Examples/{Editor}/ApiPresentation/Methods/GetMaster.js\r\n\t */",
        "description": "Returns a slide master by its position in the presentation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar sType = oMaster.GetClassType();\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Class type = \" + sType);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiPresentation",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nPos",
                "description": "Slide master position in the presentation",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiMaster",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiMaster"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetMaster",
        "longname": "ApiPresentation#GetMaster",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1203,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiPresentation/Methods/GetMaster.js"
        ]
    },
    {
        "comment": "/**\r\n     * Adds the slide master to the presentation slide masters collection.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {number} [nPos    = ApiPresentation.GetMastersCount()]\r\n     * @param {ApiMaster} oApiMaster - The slide master to be added.\r\n     * @returns {boolean} - return false if position is invalid or oApiMaster doesn't exist.\r\n     * @see office-js-api/Examples/{Editor}/ApiPresentation/Methods/AddMaster.js\r\n\t */",
        "description": "Adds the slide master to the presentation slide masters collection.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = Api.CreateMaster();\nvar nCountBefore = oPresentation.GetMastersCount();\noPresentation.AddMaster(nCountBefore, oMaster);\nvar nCountAfter = oPresentation.GetMastersCount();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Number of masters before adding new master: \" + nCountBefore);\noParagraph.AddLineBreak();\noParagraph.AddText(\"Number of masters after adding new master: \" + nCountAfter);\noSlide.RemoveAllObjects();\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiPresentation",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nPos",
                "description": null,
                "optional": true,
                "defaultvalue": "ApiPresentation.GetMastersCount()"
            },
            {
                "type": {
                    "names": [
                        "ApiMaster"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiMaster"
                    }
                },
                "name": "oApiMaster",
                "description": "The slide master to be added.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "AddMaster",
        "longname": "ApiPresentation#AddMaster",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1219,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiPresentation/Methods/AddMaster.js"
        ]
    },
    {
        "comment": "/**\r\n     * Applies a theme to all the slides in the presentation.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {ApiTheme} oApiTheme - The presentation theme.\r\n     * @returns {boolean} - returns false if param isn't theme or presentation doesn't exist.\r\n     * @see office-js-api/Examples/{Editor}/ApiPresentation/Methods/ApplyTheme.js\r\n\t */",
        "description": "Applies a theme to all the slides in the presentation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oClrScheme = Api.CreateThemeColorScheme([Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51), Api.CreateRGBColor(230, 179, 117), Api.CreateRGBColor(235, 235, 235), Api.CreateRGBColor(163, 21, 21), \n\tApi.CreateRGBColor(128, 43, 43), Api.CreateRGBColor(0, 0, 0), Api.CreateRGBColor(128, 128, 128), Api.CreateRGBColor(176, 196, 222), Api.CreateRGBColor(65, 105, 225), Api.CreateRGBColor(255, 255, 255), Api.CreateRGBColor(255, 213, 191)], \"New color scheme\");\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill1 = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oBgFill1 = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke1 = Api.CreateStroke(1 * 36000, oFill1);\nvar oFill2 = Api.CreatePatternFill(\"dashDnDiag\", Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51));\nvar oBgFill2 = Api.CreatePatternFill(\"dashDnDiag\", Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51));\nvar oStroke2 = Api.CreateStroke(1 * 36000, oFill2);\nvar oFill3 = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oBgFill3 = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke3 = Api.CreateStroke(1 * 36000, oFill3);\nvar oFormatScheme = Api.CreateThemeFormatScheme([oFill1, oFill2, oFill3], [oBgFill1, oBgFill2, oBgFill3], [oStroke1, oStroke2, oStroke3], \"New format scheme\");\nvar oFontScheme = Api.CreateThemeFontScheme(\"Arial\", \"Noto Sans Simplified Chinese\", \"Arabic\", \"Times New Roman\", \"Noto Serif Simplified Chinese\", \"Arabic\", \"New font scheme\");\nvar oTheme = Api.CreateTheme(\"New theme\", oMaster, oClrScheme, oFormatScheme, oFontScheme);\noPresentation.ApplyTheme(oTheme);\n```",
        "memberof": "ApiPresentation",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiTheme"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTheme"
                    }
                },
                "name": "oApiTheme",
                "description": "The presentation theme.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "ApplyTheme",
        "longname": "ApiPresentation#ApplyTheme",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1241,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiPresentation/Methods/ApplyTheme.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Removes a range of slides from the presentation.\r\n     * Deletes all the slides from the presentation if no parameters are specified.\r\n\t * @memberof ApiPresentation\r\n     * @param {Number} [nStart=0] - The starting position for the deletion range.\r\n     * @param {Number} [nCount=ApiPresentation.GetSlidesCount()] - The number of slides to delete.\r\n\t * @typeofeditors [\"CPE\"]\r\n\t * @returns {boolean}\r\n\t * @see office-js-api/Examples/{Editor}/ApiPresentation/Methods/RemoveSlides.js\r\n\t */",
        "description": "Removes a range of slides from the presentation.\rDeletes all the slides from the presentation if no parameters are specified.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = Api.CreateSlide();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\noSlide.SetBackground(oFill);\noPresentation.AddSlide(oSlide);\noPresentation.RemoveSlides(0, 1);\noSlide.RemoveAllObjects();\noFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar sClassType = oPresentation.GetClassType();\noParagraph.AddText(\"A slide with no background was removed from this presentation.\");\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiPresentation",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Number"
                    }
                },
                "name": "nStart",
                "description": "The starting position for the deletion range.",
                "optional": true,
                "defaultvalue": 0
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Number"
                    }
                },
                "name": "nCount",
                "description": "The number of slides to delete.",
                "optional": true,
                "defaultvalue": "ApiPresentation.GetSlidesCount()"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "RemoveSlides",
        "longname": "ApiPresentation#RemoveSlides",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1260,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiPresentation/Methods/RemoveSlides.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns the presentation width in English measure units.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @memberof ApiPresentation\r\n     * @returns {EMU}\r\n     * @see office-js-api/Examples/{Editor}/ApiPresentation/Methods/GetWidth.js\r\n\t */",
        "description": "Returns the presentation width in English measure units.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar nHeight = oPresentation.GetWidth();\noParagraph.AddText(\"Height = \" + nHeight);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiPresentation",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                }
            }
        ],
        "name": "GetWidth",
        "longname": "ApiPresentation#GetWidth",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1286,
            "columnno": 5
        },
        "see": [
            "office-js-api/Examples/Slide/ApiPresentation/Methods/GetWidth.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns the presentation height in English measure units.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @memberof ApiPresentation\r\n     * @returns {EMU}\r\n     * @see office-js-api/Examples/{Editor}/ApiPresentation/Methods/GetHeight.js\r\n\t */",
        "description": "Returns the presentation height in English measure units.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar nHeight = oPresentation.GetHeight();\noParagraph.AddText(\"Height = \" + nHeight);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiPresentation",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                }
            }
        ],
        "name": "GetHeight",
        "longname": "ApiPresentation#GetHeight",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1299,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiPresentation/Methods/GetHeight.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Converts the ApiPresentation object into the JSON object.\r\n\t * @memberof ApiPresentation\r\n\t * @typeofeditors [\"CPE\"]\r\n     * @param {bool} [bWriteTableStyles=false] - Specifies whether to write used table styles to the JSON object (true) or not (false).\r\n\t * @returns {JSON}\r\n\t * @see office-js-api/Examples/{Editor}/ApiPresentation/Methods/ToJSON.js\r\n\t */",
        "description": "Converts the ApiPresentation object into the JSON object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar json = oPresentation.ToJSON(true);\nvar oPresentationFromJSON = Api.FromJSON(json);\nvar oSlide = oPresentationFromJSON.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar sType = oPresentationFromJSON.GetClassType();\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.AddText(\"Class type = \" + sType);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiPresentation",
        "params": [
            {
                "type": {
                    "names": [
                        "bool"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "bool"
                    }
                },
                "name": "bWriteTableStyles",
                "description": "Specifies whether to write used table styles to the JSON object (true) or not (false).",
                "optional": true,
                "defaultvalue": false
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "JSON"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "JSON"
                    }
                }
            }
        ],
        "name": "ToJSON",
        "longname": "ApiPresentation#ToJSON",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1313,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiPresentation/Methods/ToJSON.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Converts the slides from the current ApiPresentation object into the JSON objects.\r\n\t * @memberof ApiPresentation\r\n\t * @typeofeditors [\"CPE\"]\r\n     * @param {bool} [nStart=0] - The index to the start slide.\r\n     * @param {bool} [nStart=ApiPresentation.GetSlidesCount() - 1] - The index to the end slide.\r\n     * @param {bool} [bWriteLayout=false] - Specifies if the slide layout will be written to the JSON object or not.\r\n     * @param {bool} [bWriteMaster=false] - Specifies if the slide master will be written to the JSON object or not (bWriteMaster is false if bWriteLayout === false).\r\n     * @param {bool} [bWriteAllMasLayouts=false] - Specifies if all child layouts from the slide master will be written to the JSON object or not.\r\n     * @param {bool} [bWriteTableStyles=false] - Specifies whether to write used table styles to the JSON object (true) or not (false).\r\n\t * @returns {JSON[]}\r\n\t * @see office-js-api/Examples/{Editor}/ApiPresentation/Methods/SlidesToJSON.js\r\n\t */",
        "description": "Converts the slides from the current ApiPresentation object into the JSON objects.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar json = oPresentation.SlidesToJSON(0, 0, true, true, true, true);\nvar aSlidesFromJSON = Api.FromJSON(json);\nvar oSlideFromJSON = aSlidesFromJSON[0];\noPresentation.AddSlide(oSlideFromJSON);\nvar sType = oSlideFromJSON.GetClassType();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oDrawing = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noDrawing.SetPosition(608400, 1267200);\noDrawing.SetSize(300 * 36000, 130 * 36000);\noSlide.AddObject(oDrawing);\nvar oDocContent = oDrawing.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.AddText(\"Class type = \" + sType);\n```",
        "memberof": "ApiPresentation",
        "params": [
            {
                "type": {
                    "names": [
                        "bool"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "bool"
                    }
                },
                "name": "nStart",
                "description": "The index to the start slide.",
                "optional": true,
                "defaultvalue": 0
            },
            {
                "type": {
                    "names": [
                        "bool"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "bool"
                    }
                },
                "name": "nStart",
                "description": "The index to the end slide.",
                "optional": true,
                "defaultvalue": "ApiPresentation.GetSlidesCount() - 1"
            },
            {
                "type": {
                    "names": [
                        "bool"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "bool"
                    }
                },
                "name": "bWriteLayout",
                "description": "Specifies if the slide layout will be written to the JSON object or not.",
                "optional": true,
                "defaultvalue": false
            },
            {
                "type": {
                    "names": [
                        "bool"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "bool"
                    }
                },
                "name": "bWriteMaster",
                "description": "Specifies if the slide master will be written to the JSON object or not (bWriteMaster is false if bWriteLayout === false).",
                "optional": true,
                "defaultvalue": false
            },
            {
                "type": {
                    "names": [
                        "bool"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "bool"
                    }
                },
                "name": "bWriteAllMasLayouts",
                "description": "Specifies if all child layouts from the slide master will be written to the JSON object or not.",
                "optional": true,
                "defaultvalue": false
            },
            {
                "type": {
                    "names": [
                        "bool"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "bool"
                    }
                },
                "name": "bWriteTableStyles",
                "description": "Specifies whether to write used table styles to the JSON object (true) or not (false).",
                "optional": true,
                "defaultvalue": false
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<JSON>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "JSON",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "SlidesToJSON",
        "longname": "ApiPresentation#SlidesToJSON",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1333,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiPresentation/Methods/SlidesToJSON.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns all comments from the current presentation.\r\n\t * @memberof ApiPresentation\r\n\t * @typeofeditors [\"CPE\"]\r\n\t * @returns {ApiComment[]}\r\n\t * @see office-js-api/Examples/{Editor}/ApiPresentation/Methods/GetAllComments.js\r\n\t */",
        "description": "Returns all comments from the current presentation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nApi.pluginMethod_AddComment({\"UserName\": \"John Smith\", \"Text\": \"Comment 1\"});\nvar arrComments = oPresentation.GetAllComments();\nvar oSlide1 = oPresentation.GetSlideByIndex(0);\noSlide1.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Comment text: \" + arrComments[0].GetText());\noSlide1.AddObject(oShape);\n```",
        "memberof": "ApiPresentation",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ApiComment>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiComment",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetAllComments",
        "longname": "ApiPresentation#GetAllComments",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1357,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiPresentation/Methods/GetAllComments.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns the document information:\r\n\t * <b>Application</b> - the application the document has been created with.\r\n\t * <b>CreatedRaw</b> - the date and time when the file was created.\r\n\t * <b>Created</b> - the parsed date and time when the file was created.\r\n\t * <b>LastModifiedRaw</b> - the date and time when the file was last modified.\r\n\t * <b>LastModified</b> - the parsed date and time when the file was last modified.\r\n\t * <b>LastModifiedBy</b> - the name of the user who has made the latest change to the document.\r\n\t * <b>Autrors</b> - the persons who has created the file.\r\n\t * <b>Title</b> - this property allows you to simplify your documents classification.\r\n\t * <b>Tags</b> - this property allows you to simplify your documents classification.\r\n\t * <b>Subject</b> - this property allows you to simplify your documents classification.\r\n\t * <b>Comment</b> - this property allows you to simplify your documents classification.\r\n\t * @memberof ApiPresentation\r\n\t * @typeofeditors [\"CPE\"]\r\n\t * @returns {object}\r\n\t * @see office-js-api/Examples/{Editor}/ApiPresentation/Methods/GetDocumentInfo.js\r\n\t */",
        "description": "Returns the document information:\r<b>Application</b> - the application the document has been created with.\r<b>CreatedRaw</b> - the date and time when the file was created.\r<b>Created</b> - the parsed date and time when the file was created.\r<b>LastModifiedRaw</b> - the date and time when the file was last modified.\r<b>LastModified</b> - the parsed date and time when the file was last modified.\r<b>LastModifiedBy</b> - the name of the user who has made the latest change to the document.\r<b>Autrors</b> - the persons who has created the file.\r<b>Title</b> - this property allows you to simplify your documents classification.\r<b>Tags</b> - this property allows you to simplify your documents classification.\r<b>Subject</b> - this property allows you to simplify your documents classification.\r<b>Comment</b> - this property allows you to simplify your documents classification.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nconst oPresentation = Api.GetPresentation();\nconst oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nconst oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nconst oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nconst oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nconst oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nconst oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nconst oDocContent = oShape.GetDocContent();\nconst oParagraph = oDocContent.GetElement(0);\nconst oDocInfo = oPresentation.GetDocumentInfo();\noParagraph.AddText('This document has been created with: ' + oDocInfo.Application);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiPresentation",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                }
            }
        ],
        "name": "GetDocumentInfo",
        "longname": "ApiPresentation#GetDocumentInfo",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1385,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiPresentation/Methods/GetDocumentInfo.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns the type of the ApiMaster class.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {\"master\"}\r\n     * @see office-js-api/Examples/{Editor}/ApiMaster/Methods/GetClassType.js\r\n\t */",
        "description": "Returns the type of the ApiMaster class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar sType = oMaster.GetClassType();\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Class type = \" + sType);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiMaster",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"master\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"master\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiMaster#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1463,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiMaster/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns a layout of the specified slide master by its position.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {number} nPos - Layout position.\r\n     * @returns {ApiLayout | null} - returns null if position is invalid.\r\n     * @see office-js-api/Examples/{Editor}/ApiMaster/Methods/GetLayout.js\r\n\t */",
        "description": "Returns a layout of the specified slide master by its position.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oLayout = Api.CreateLayout();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\noLayout.AddObject(oShape);\noMaster.AddLayout(0, oLayout);\noSlide.ApplyLayout(oMaster.GetLayout(0));\n```",
        "memberof": "ApiMaster",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nPos",
                "description": "Layout position.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiLayout",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiLayout"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetLayout",
        "longname": "ApiMaster#GetLayout",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1475,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiMaster/Methods/GetLayout.js"
        ]
    },
    {
        "comment": "/**\r\n     * Adds a layout to the specified slide master.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {number} [nPos = ApiMaster.GetLayoutsCount()] - Position where a layout will be added.\r\n     * @param {ApiLayout} oLayout - A layout to be added.\r\n     * @returns {boolean} - returns false if oLayout isn't a layout.\r\n     * @see office-js-api/Examples/{Editor}/ApiMaster/Methods/AddLayout.js\r\n\t */",
        "description": "Adds a layout to the specified slide master.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar nCountBefore = oMaster.GetLayoutsCount();\nvar oLayout = Api.CreateLayout();\noMaster.AddLayout(0, oLayout);\nvar nCountAfter = oMaster.GetLayoutsCount();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Number of layouts before adding new layout: \" + nCountBefore);\noParagraph.AddLineBreak();\noParagraph.AddText(\"Number of layouts after adding new layout: \" + nCountAfter);\noSlide.RemoveAllObjects();\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiMaster",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nPos",
                "description": "Position where a layout will be added.",
                "optional": true,
                "defaultvalue": "ApiMaster.GetLayoutsCount()"
            },
            {
                "type": {
                    "names": [
                        "ApiLayout"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiLayout"
                    }
                },
                "name": "oLayout",
                "description": "A layout to be added.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "AddLayout",
        "longname": "ApiMaster#AddLayout",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1491,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiMaster/Methods/AddLayout.js"
        ]
    },
    {
        "comment": "/**\r\n     * Removes the layouts from the current slide master.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {number} nPos - Position from which a layout will be deleted.\r\n     * @param {number} [nCount = 1] - Number of layouts to delete.\r\n     * @returns {boolean} - return false if position is invalid.\r\n     * @see office-js-api/Examples/{Editor}/ApiMaster/Methods/RemoveLayout.js\r\n\t */",
        "description": "Removes the layouts from the current slide master.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar nCountBefore = oMaster.GetLayoutsCount();\noMaster.RemoveLayout(0, 2);\nvar nCountAfter = oMaster.GetLayoutsCount();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Number of layouts before deletion: \" + nCountBefore);\noParagraph.AddLineBreak();\noParagraph.AddText(\"Number of layouts after deletion: \" + nCountAfter);\noSlide.RemoveAllObjects();\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiMaster",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nPos",
                "description": "Position from which a layout will be deleted.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nCount",
                "description": "Number of layouts to delete.",
                "optional": true,
                "defaultvalue": 1
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "RemoveLayout",
        "longname": "ApiMaster#RemoveLayout",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1512,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiMaster/Methods/RemoveLayout.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns a number of layout objects.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {number}\r\n     * @see office-js-api/Examples/{Editor}/ApiMaster/Methods/GetLayoutsCount.js\r\n\t */",
        "description": "Returns a number of layout objects.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar nLayouts = oMaster.GetLayoutsCount();\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Number of layouts = \" + nLayouts);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiMaster",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GetLayoutsCount",
        "longname": "ApiMaster#GetLayoutsCount",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1535,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiMaster/Methods/GetLayoutsCount.js"
        ]
    },
    {
        "comment": "/**\r\n     * Adds an object (image, shape or chart) to the current slide master.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @memberof ApiMaster\r\n     * @param {ApiDrawing} oDrawing - The object which will be added to the current slide master.\r\n     * @returns {boolean} - returns false if slide master doesn't exist.\r\n     * @see office-js-api/Examples/{Editor}/ApiMaster/Methods/AddObject.js\r\n\t */",
        "description": "Adds an object (image, shape or chart) to the current slide master.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\noMaster.AddObject(oShape);\n```",
        "memberof": "ApiMaster",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiDrawing"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiDrawing"
                    }
                },
                "name": "oDrawing",
                "description": "The object which will be added to the current slide master.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "AddObject",
        "longname": "ApiMaster#AddObject",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1548,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiMaster/Methods/AddObject.js"
        ]
    },
    {
        "comment": "/**\r\n     * Removes objects (image, shape or chart) from the current slide master.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @memberof ApiMaster\r\n     * @param {number} nPos - Position from which the object will be deleted.\r\n     * @param {number} [nCount = 1] - Number of objects to delete.\r\n     * @returns {boolean} - returns false if master doesn't exist or position is invalid or master hasn't objects.\r\n     * @see office-js-api/Examples/{Editor}/ApiMaster/Methods/RemoveObject.js\r\n\t */",
        "description": "Removes objects (image, shape or chart) from the current slide master.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oDrawing = Api.CreateShape(\"cube\", 3212465, 963295, oFill, oStroke);\noDrawing.SetPosition(30 * 36000, 1267200);\noDrawing.SetSize(150 * 36000, 130 * 36000);\nvar oCopyDrawing = oDrawing.Copy();\noCopyDrawing.SetPosition(170 * 36000, 1267200);\noCopyDrawing.SetSize(150 * 36000, 130 * 36000);\noMaster.AddObject(oDrawing);\noMaster.AddObject(oCopyDrawing);\noMaster.RemoveObject(1, 1);\nvar oDocContent = oDrawing.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"The second cube was removed from this master.\");\n```",
        "memberof": "ApiMaster",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nPos",
                "description": "Position from which the object will be deleted.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nCount",
                "description": "Number of objects to delete.",
                "optional": true,
                "defaultvalue": 1
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "RemoveObject",
        "longname": "ApiMaster#RemoveObject",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1571,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiMaster/Methods/RemoveObject.js"
        ]
    },
    {
        "comment": "/**\r\n     * Sets the background to the current slide master.\r\n     * @memberOf ApiMaster\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {ApiFill} oApiFill - The color or pattern used to fill the presentation slide master background.\r\n     * @returns {boolean}\r\n     * @see office-js-api/Examples/{Editor}/ApiMaster/Methods/SetBackground.js\r\n\t */",
        "description": "Sets the background to the current slide master.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\noMaster.ClearBackground();\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\noMaster.AddObject(oShape);\noMaster.SetBackground(oFill);\n```",
        "memberof": "ApiMaster",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                },
                "name": "oApiFill",
                "description": "The color or pattern used to fill the presentation slide master background.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetBackground",
        "longname": "ApiMaster#SetBackground",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1597,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiMaster/Methods/SetBackground.js"
        ]
    },
    {
        "comment": "/**\r\n     * Clears the slide master background.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {boolean} - return false if slide master doesn't exist.\r\n     * @see office-js-api/Examples/{Editor}/ApiMaster/Methods/ClearBackground.js\r\n\t */",
        "description": "Clears the slide master background.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\noMaster.ClearBackground();\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\noMaster.AddObject(oShape);\n```",
        "memberof": "ApiMaster",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "ClearBackground",
        "longname": "ApiMaster#ClearBackground",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1614,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiMaster/Methods/ClearBackground.js"
        ]
    },
    {
        "comment": "/**\r\n     * Creates a copy of the specified slide master object.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {ApiMaster | null} - returns new ApiMaster object that represents the copy of slide master. \r\n     * Returns null if slide doesn't exist.\r\n     * @see office-js-api/Examples/{Editor}/ApiMaster/Methods/Copy.js\r\n\t */",
        "description": "Creates a copy of the specified slide master object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar nCountBefore = oPresentation.GetMastersCount();\nvar oCopyMaster = oMaster.Copy();\noPresentation.AddMaster(1, oCopyMaster);\nvar nCountAfter = oPresentation.GetMastersCount();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Number of masters before adding the copied master: \" + nCountBefore);\noParagraph.AddLineBreak();\noParagraph.AddText(\"Number of masters after adding the copied master: \" + nCountAfter);\noSlide.RemoveAllObjects();\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiMaster",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiMaster",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiMaster"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "Copy",
        "longname": "ApiMaster#Copy",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1634,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiMaster/Methods/Copy.js"
        ]
    },
    {
        "comment": "/**\r\n     * Creates a duplicate of the specified slide master object, adds the new slide master to the slide masters collection.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {number} [nPos    = ApiPresentation.GetMastersCount()] - Position where the new slide master will be added.\r\n     * @returns {ApiMaster | null} - returns new ApiMaster object that represents the copy of slide master. \r\n     * Returns null if slide master doesn't exist or is not in the presentation.\r\n     * @see office-js-api/Examples/{Editor}/ApiMaster/Methods/Duplicate.js\r\n\t */",
        "description": "Creates a duplicate of the specified slide master object, adds the new slide master to the slide masters collection.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar nCountBefore = oPresentation.GetMastersCount();\noMaster.Duplicate(1);\nvar nCountAfter = oPresentation.GetMastersCount();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Number of masters before duplicating: \" + nCountBefore);\noParagraph.AddLineBreak();\noParagraph.AddText(\"Number of masters after duplicating: \" + nCountAfter);\noSlide.RemoveAllObjects();\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiMaster",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nPos",
                "description": "Position where the new slide master will be added.",
                "optional": true,
                "defaultvalue": "ApiPresentation.GetMastersCount()"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiMaster",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiMaster"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "Duplicate",
        "longname": "ApiMaster#Duplicate",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1650,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiMaster/Methods/Duplicate.js"
        ]
    },
    {
        "comment": "/**\r\n     * Deletes the specified object from the parent if it exists.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {boolean} - return false if master doesn't exist or is not in the presentation.\r\n     * @see office-js-api/Examples/{Editor}/ApiMaster/Methods/Delete.js\r\n\t */",
        "description": "Deletes the specified object from the parent if it exists.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar nCountBefore = oPresentation.GetMastersCount();\noMaster.Delete();\nvar nCountAfter = oPresentation.GetMastersCount();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Number of masters before deletion: \" + nCountBefore);\noParagraph.AddLineBreak();\noParagraph.AddText(\"Number of masters after deletion: \" + nCountAfter);\noSlide.RemoveAllObjects();\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiMaster",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "Delete",
        "longname": "ApiMaster#Delete",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1671,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiMaster/Methods/Delete.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns a theme of the slide master.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {ApiTheme | null} - returns null if theme doesn't exist.\r\n     * @see office-js-api/Examples/{Editor}/ApiMaster/Methods/GetTheme.js\r\n\t */",
        "description": "Returns a theme of the slide master.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oTheme = oMaster.GetTheme();\nvar oClrScheme = Api.CreateThemeColorScheme([Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51), Api.CreateRGBColor(230, 179, 117), Api.CreateRGBColor(235, 235, 235), Api.CreateRGBColor(163, 21, 21), \n\tApi.CreateRGBColor(128, 43, 43), Api.CreateRGBColor(0, 0, 0), Api.CreateRGBColor(128, 128, 128), Api.CreateRGBColor(176, 196, 222), Api.CreateRGBColor(65, 105, 225), Api.CreateRGBColor(255, 255, 255), Api.CreateRGBColor(255, 213, 191)], \"New color scheme\");\noTheme.SetColorScheme(oClrScheme);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetLegendPos(\"bottom\");\noChart.SetShowDataLabels(false, false, true, false);\noChart.SetTitle(\"Financial Overview\", 20);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiMaster",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTheme",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiTheme"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetTheme",
        "longname": "ApiMaster#GetTheme",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1693,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiMaster/Methods/GetTheme.js"
        ]
    },
    {
        "comment": "/**\r\n     * Sets a theme to the slide master.\r\n     * Sets a copy of the theme object.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {ApiTheme} oTheme - Presentation theme.\r\n     * @returns {boolean} - return false if oTheme isn't a theme or slide master doesn't exist.\r\n     * @see office-js-api/Examples/{Editor}/ApiMaster/Methods/SetTheme.js\r\n\t */",
        "description": "Sets a theme to the slide master.\rSets a copy of the theme object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oClrScheme = Api.CreateThemeColorScheme([Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51), Api.CreateRGBColor(230, 179, 117), Api.CreateRGBColor(235, 235, 235), Api.CreateRGBColor(163, 21, 21), \n\tApi.CreateRGBColor(128, 43, 43), Api.CreateRGBColor(0, 0, 0), Api.CreateRGBColor(128, 128, 128), Api.CreateRGBColor(176, 196, 222), Api.CreateRGBColor(65, 105, 225), Api.CreateRGBColor(255, 255, 255), Api.CreateRGBColor(255, 213, 191)], \"New color scheme\");\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill1 = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oBgFill1 = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke1 = Api.CreateStroke(0, oFill2);\nvar oFill2 = Api.CreatePatternFill(\"dashDnDiag\", Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51));\nvar oBgFill2 = Api.CreatePatternFill(\"dashDnDiag\", Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51));\nvar oStroke2 = Api.CreateStroke(0, Api.CreateRGBColor(51, 51, 51));\nvar oFill3 = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oBgFill3 = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke3 = Api.CreateStroke(0, oFill1);\nvar oFormatScheme = Api.CreateThemeFormatScheme([oFill1, oFill2, oFill3], [oBgFill1, oBgFill2, oBgFill3], [oStroke1, oStroke2, oStroke3], \"New format scheme\");\nvar oFontScheme = Api.CreateThemeFontScheme(\"Arial\", \"Noto Sans Simplified Chinese\", \"Arabic\", \"Times New Roman\", \"Noto Serif Simplified Chinese\", \"Arabic\", \"New font scheme\");\nvar oTheme = Api.CreateTheme(\"New theme\", oMaster, oClrScheme, oFormatScheme, oFontScheme);\noMaster.SetTheme(oTheme);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetLegendPos(\"bottom\");\noChart.SetShowDataLabels(false, false, true, false);\noChart.SetTitle(\"Financial Overview\", 20);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiMaster",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiTheme"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTheme"
                    }
                },
                "name": "oTheme",
                "description": "Presentation theme.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetTheme",
        "longname": "ApiMaster#SetTheme",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1715,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiMaster/Methods/SetTheme.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns an array with all the drawing objects from the slide master.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {Drawing[]}\r\n     * @see office-js-api/Examples/{Editor}/ApiMaster/Methods/GetAllDrawings.js\r\n\t */",
        "description": "Returns an array with all the drawing objects from the slide master.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oDrawing = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noDrawing.SetPosition(608400, 1267200);\noDrawing.SetSize(300 * 36000, 130 * 36000);\noSlide.RemoveAllObjects();\noMaster.AddObject(oDrawing);\nvar aDrawings = oMaster.GetAllDrawings();\nvar oPlaceholder = Api.CreatePlaceholder(\"picture\");\naDrawings[0].SetPlaceholder(oPlaceholder);\n```",
        "memberof": "ApiMaster",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Drawing>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "Drawing",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetAllDrawings",
        "longname": "ApiMaster#GetAllDrawings",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1732,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiMaster/Methods/GetAllDrawings.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns an array with all the shape objects from the slide master.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {ApiShape[]}\r\n     * @see office-js-api/Examples/{Editor}/ApiMaster/Methods/GetAllShapes.js\r\n\t */",
        "description": "Returns an array with all the shape objects from the slide master.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\noMaster.AddObject(oShape);\nvar aShapes = oMaster.GetAllShapes();\nvar sType = aShapes[0].GetClassType();\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Class type = \" + sType);\noShape.SetVerticalTextAlign(\"center\");\n```",
        "memberof": "ApiMaster",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ApiShape>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiShape",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetAllShapes",
        "longname": "ApiMaster#GetAllShapes",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1747,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiMaster/Methods/GetAllShapes.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns an array with all the image objects from the slide master.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {ApiImage[]}\r\n     * @see office-js-api/Examples/{Editor}/ApiMaster/Methods/GetAllImages.js\r\n\t */",
        "description": "Returns an array with all the image objects from the slide master.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oImage = Api.CreateImage(\"https://api.onlyoffice.com/content/img/docbuilder/examples/coordinate_aspects.png\", 60 * 36000, 35 * 36000);\noMaster.AddObject(oImage);\nvar aImages = oMaster.GetAllImages();\nvar sType = aImages[0].GetClassType();\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(61, 74, 107));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Class type = \" + sType);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiMaster",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ApiImage>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiImage",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetAllImages",
        "longname": "ApiMaster#GetAllImages",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1762,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiMaster/Methods/GetAllImages.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns an array with all the chart objects from the slide master.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {ApiChart[]}\r\n     * @see office-js-api/Examples/{Editor}/ApiMaster/Methods/GetAllCharts.js\r\n\t */",
        "description": "Returns an array with all the chart objects from the slide master.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetLegendPos(\"bottom\");\noChart.SetShowDataLabels(false, false, true, false);\noChart.SetTitle(\"Financial Overview\", 13);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\noMaster.AddObject(oChart);\noSlide.RemoveAllObjects();\nvar aCharts = oMaster.GetAllCharts();\nvar oStroke = Api.CreateStroke(1 * 150, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\naCharts[0].SetMinorHorizontalGridlines(oStroke);\n```",
        "memberof": "ApiMaster",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ApiChart>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiChart",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetAllCharts",
        "longname": "ApiMaster#GetAllCharts",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1774,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiMaster/Methods/GetAllCharts.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns an array with all the OLE objects from the slide master.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {ApiOleObject[]}\r\n     * @see office-js-api/Examples/{Editor}/ApiMaster/Methods/GetAllOleObjects.js\r\n\t */",
        "description": "Returns an array with all the OLE objects from the slide master.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oOleObject = Api.CreateOleObject(\"https://i.ytimg.com/vi_webp/SKGz4pmnpgY/sddefault.webp\", 130 * 36000, 90 * 36000, \"https://youtu.be/SKGz4pmnpgY\", \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\");\noOleObject.SetSize(200 * 36000, 130 * 36000);\noOleObject.SetPosition(70 * 36000, 30 * 36000);\noMaster.AddObject(oOleObject);\nvar aOleObjects = oMaster.GetAllOleObjects();\nvar sAppId = aOleObjects[0].GetApplicationId();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 224, 204), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 164, 101), 100000);\nvar oFill = Api.CreateLinearGradientFill([oGs1, oGs2], 5400000);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oDrawing = Api.CreateShape(\"rect\", 300 * 36000, 15 * 36000, oFill, oStroke);\noDrawing.SetPosition(20 * 36000, 170 * 36000);\nvar oDocContent = oDrawing.GetContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.AddText(\"The application ID for the current OLE object: \" + sAppId);\noMaster.AddObject(oDrawing);\n```",
        "memberof": "ApiMaster",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ApiOleObject>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiOleObject",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetAllOleObjects",
        "longname": "ApiMaster#GetAllOleObjects",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1786,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiMaster/Methods/GetAllOleObjects.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Converts the ApiMaster object into the JSON object.\r\n\t * @memberof ApiMaster\r\n\t * @typeofeditors [\"CPE\"]\r\n     * @param {bool} [bWriteTableStyles=false] - Specifies whether to write used table styles to the JSON object (true) or not (false).\r\n\t * @returns {JSON}\r\n\t * @see office-js-api/Examples/{Editor}/ApiMaster/Methods/ToJSON.js\r\n\t */",
        "description": "Converts the ApiMaster object into the JSON object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar json = oMaster.ToJSON(true);\nvar oMasterFromJSON = Api.FromJSON(json);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar sType = oMasterFromJSON.GetClassType();\noParagraph.AddText(\"Class type = \" + sType);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiMaster",
        "params": [
            {
                "type": {
                    "names": [
                        "bool"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "bool"
                    }
                },
                "name": "bWriteTableStyles",
                "description": "Specifies whether to write used table styles to the JSON object (true) or not (false).",
                "optional": true,
                "defaultvalue": false
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "JSON"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "JSON"
                    }
                }
            }
        ],
        "name": "ToJSON",
        "longname": "ApiMaster#ToJSON",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1799,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiMaster/Methods/ToJSON.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Gets drawings by placeholder type.\r\n\t * @memberof ApiMaster\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {PlaceholderType} sType - placeholders type\r\n\t * @returns {Drawing[]}\r\n\t * @see office-js-api/Examples/{Editor}/ApiMaster/Methods/GetDrawingsByPlaceholderType.js\r\n\t */",
        "description": "Gets drawings by placeholder type.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nlet oPresentation = Api.GetPresentation();\nlet oSlide = oPresentation.GetSlideByIndex(0);\nlet oMaster = oPresentation.GetMaster(0);\nlet aDrawingsWithPh = oMaster.GetDrawingsByPlaceholderType(\"title\");\nfor (let i = 0; i < aDrawingsWithPh.length; i++) {\n    aDrawingsWithPh[i].Delete();\n}\n\n```",
        "memberof": "ApiMaster",
        "params": [
            {
                "type": {
                    "names": [
                        "PlaceholderType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PlaceholderType"
                    }
                },
                "name": "sType",
                "description": "placeholders type",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Drawing>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "Drawing",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetDrawingsByPlaceholderType",
        "longname": "ApiMaster#GetDrawingsByPlaceholderType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1815,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiMaster/Methods/GetDrawingsByPlaceholderType.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns the type of the ApiLayout class.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {\"layout\"}\r\n     * @see office-js-api/Examples/{Editor}/ApiLayout/Methods/GetClassType.js\r\n\t */",
        "description": "Returns the type of the ApiLayout class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oLayout = oMaster.GetLayout(0);\nvar sType = oLayout.GetClassType();\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Class type = \" + sType);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiLayout",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"layout\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"layout\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiLayout#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1836,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiLayout/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\r\n     * Sets a name to the current layout.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {string} sName - Layout name to be set.\r\n     * @returns {boolean}\r\n     * @see office-js-api/Examples/{Editor}/ApiLayout/Methods/SetName.js\r\n\t */",
        "description": "Sets a name to the current layout.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oLayout = oMaster.GetLayout(0);\noLayout.SetName(\"New layout\");\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"A new name was set to the current layout.\");\noLayout.AddObject(oShape);\n```",
        "memberof": "ApiLayout",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sName",
                "description": "Layout name to be set.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetName",
        "longname": "ApiLayout#SetName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1848,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiLayout/Methods/SetName.js"
        ]
    },
    {
        "comment": "/**\r\n     * Adds an object (image, shape or chart) to the current slide layout.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @memberof ApiLayout\r\n     * @param {ApiDrawing} oDrawing - The object which will be added to the current slide layout.\r\n     * @returns {boolean} - returns false if slide layout doesn't exist.\r\n     * @see office-js-api/Examples/{Editor}/ApiLayout/Methods/AddObject.js\r\n\t */",
        "description": "Adds an object (image, shape or chart) to the current slide layout.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oMaster = oPresentation.GetMaster(0);\nvar oLayout = oMaster.GetLayout(0);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\noLayout.AddObject(oShape);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"This shape was added to the current layout.\");\n```",
        "memberof": "ApiLayout",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiDrawing"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiDrawing"
                    }
                },
                "name": "oDrawing",
                "description": "The object which will be added to the current slide layout.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "AddObject",
        "longname": "ApiLayout#AddObject",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1866,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiLayout/Methods/AddObject.js"
        ]
    },
    {
        "comment": "/**\r\n     * Removes objects (image, shape or chart) from the current slide layout.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @memberof ApiLayout\r\n     * @param {number} nPos - Position from which the object will be deleted.\r\n     * @param {number} [nCount = 1] - The number of elements to delete.\r\n     * @returns {boolean} - returns false if layout doesn't exist or position is invalid or layout hasn't objects.\r\n     * @see office-js-api/Examples/{Editor}/ApiLayout/Methods/RemoveObject.js\r\n\t */",
        "description": "Removes objects (image, shape or chart) from the current slide layout.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oLayout = oMaster.GetLayout(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oDrawing = Api.CreateShape(\"cube\", 3212465, 963295, oFill, oStroke);\noDrawing.SetPosition(30 * 36000, 1267200);\noDrawing.SetSize(150 * 36000, 130 * 36000);\nvar oCopyDrawing = oDrawing.Copy();\noCopyDrawing.SetPosition(160 * 36000, 1267200);\noCopyDrawing.SetSize(150 * 36000, 130 * 36000);\noLayout.AddObject(oDrawing);\noLayout.AddObject(oCopyDrawing);\noLayout.RemoveObject(1, 1);\nvar oDocContent = oDrawing.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"The second cube was removed from this layout.\");\n```",
        "memberof": "ApiLayout",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nPos",
                "description": "Position from which the object will be deleted.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nCount",
                "description": "The number of elements to delete.",
                "optional": true,
                "defaultvalue": 1
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "RemoveObject",
        "longname": "ApiLayout#RemoveObject",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1889,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiLayout/Methods/RemoveObject.js"
        ]
    },
    {
        "comment": "/**\r\n     * Sets the background to the current slide layout.\r\n     * @memberOf ApiLayout\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {ApiFill} oApiFill - The color or pattern used to fill the presentation slide layout background.\\\r\n     * @returns {boolean}\r\n     * @see office-js-api/Examples/{Editor}/ApiLayout/Methods/SetBackground.js\r\n\t */",
        "description": "Sets the background to the current slide layout.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oLayout = oMaster.GetLayout(0);\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\noLayout.SetBackground(oFill);\noSlide.FollowLayoutBackground();\n```",
        "memberof": "ApiLayout",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                },
                "name": "oApiFill",
                "description": "The color or pattern used to fill the presentation slide layout background.\\",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetBackground",
        "longname": "ApiLayout#SetBackground",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1914,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiLayout/Methods/SetBackground.js"
        ]
    },
    {
        "comment": "/**\r\n     * Clears the slide layout background.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {boolean} - return false if slide layout doesn't exist.\r\n     * @see office-js-api/Examples/{Editor}/ApiLayout/Methods/ClearBackground.js\r\n\t */",
        "description": "Clears the slide layout background.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oLayout = oMaster.GetLayout(0);\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\noLayout.SetBackground(oFill);\noSlide.FollowLayoutBackground();\noSlide = Api.CreateSlide();\noPresentation.AddSlide(oSlide);\noLayout.ClearBackground();\noSlide.FollowLayoutBackground();\n```",
        "memberof": "ApiLayout",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "ClearBackground",
        "longname": "ApiLayout#ClearBackground",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1931,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiLayout/Methods/ClearBackground.js"
        ]
    },
    {
        "comment": "/**\r\n     * Sets the master background as the background of the layout.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {boolean} - returns false if master is null or master hasn't background.\r\n     * @see office-js-api/Examples/{Editor}/ApiLayout/Methods/FollowMasterBackground.js\r\n\t */",
        "description": "Sets the master background as the background of the layout.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noMaster.SetBackground(oFill);\nvar oLayout = oMaster.GetLayout(0);\noLayout.FollowMasterBackground();\noSlide.FollowLayoutBackground();\n```",
        "memberof": "ApiLayout",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "FollowMasterBackground",
        "longname": "ApiLayout#FollowMasterBackground",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1950,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiLayout/Methods/FollowMasterBackground.js"
        ]
    },
    {
        "comment": "/**\r\n     * Creates a copy of the specified slide layout object.\r\n     * Copies without master slide.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {ApiLayout | null} - returns new ApiLayout object that represents the copy of slide layout. \r\n     * Returns null if slide layout doesn't exist.\r\n     * @see office-js-api/Examples/{Editor}/ApiLayout/Methods/Copy.js\r\n\t */",
        "description": "Creates a copy of the specified slide layout object.\rCopies without master slide.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oLayout = oMaster.GetLayout(0);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\noLayout.AddObject(oShape);\noSlide = Api.CreateSlide();\noPresentation.AddSlide(oSlide);\nvar oCopyLayout = oLayout.Copy();\noMaster.AddLayout(1, oCopyLayout);\noSlide.ApplyLayout(oCopyLayout);\n```",
        "memberof": "ApiLayout",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiLayout",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiLayout"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "Copy",
        "longname": "ApiLayout#Copy",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1973,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiLayout/Methods/Copy.js"
        ]
    },
    {
        "comment": "/**\r\n     * Deletes the specified object from the parent slide master if it exists.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {boolean} - return false if parent slide master doesn't exist.\r\n     * @see office-js-api/Examples/{Editor}/ApiLayout/Methods/Delete.js\r\n\t */",
        "description": "Deletes the specified object from the parent slide master if it exists.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar nCountBefore = oMaster.GetLayoutsCount();\nvar oLayout = oMaster.GetLayout(0);\noLayout.Delete();\nvar nCountAfter = oMaster.GetLayoutsCount();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Number of layouts before deletion: \" + nCountBefore);\noParagraph.AddLineBreak();\noParagraph.AddText(\"Number of layouts after deletion: \" + nCountAfter);\noSlide.RemoveAllObjects();\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiLayout",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "Delete",
        "longname": "ApiLayout#Delete",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1987,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiLayout/Methods/Delete.js"
        ]
    },
    {
        "comment": "/**\r\n     * Creates a duplicate of the specified slide layout object, adds the new slide layout to the slide layout collection.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {number} [nPos = ApiMaster.GetLayoutsCount()] - Position where the new slide layout will be added.\r\n     * @returns {ApiLayout | null} - returns new ApiLayout object that represents the copy of slide layout. \r\n     * Returns null if slide layout doesn't exist or is not in the slide master.\r\n     * @see office-js-api/Examples/{Editor}/ApiLayout/Methods/Duplicate.js\r\n\t */",
        "description": "Creates a duplicate of the specified slide layout object, adds the new slide layout to the slide layout collection.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oLayout = oMaster.GetLayout(0);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\noLayout.AddObject(oShape);\noSlide = Api.CreateSlide();\noPresentation.AddSlide(oSlide);\nvar oDuplicateLayout = oLayout.Duplicate(1);\noSlide.ApplyLayout(oDuplicateLayout);\n```",
        "memberof": "ApiLayout",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nPos",
                "description": "Position where the new slide layout will be added.",
                "optional": true,
                "defaultvalue": "ApiMaster.GetLayoutsCount()"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiLayout",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiLayout"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "Duplicate",
        "longname": "ApiLayout#Duplicate",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2010,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiLayout/Methods/Duplicate.js"
        ]
    },
    {
        "comment": "/**\r\n     * Moves the specified layout to a specific location within the same collection.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {number} nPos - Position where the specified slide layout will be moved to.\r\n     * @returns {boolean} - returns false if layout or parent slide master doesn't exist or position is invalid.\r\n     * @see office-js-api/Examples/{Editor}/ApiLayout/Methods/MoveTo.js\r\n\t */",
        "description": "Moves the specified layout to a specific location within the same collection.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide1 = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oLayout1 = oMaster.GetLayout(3);\noSlide1.ApplyLayout(oLayout1);\noLayout1.MoveTo(7);\nvar oLayout2 = oMaster.GetLayout(7);\nvar oSlide2 = Api.CreateSlide();\noPresentation.AddSlide(oSlide2);\noSlide2.ApplyLayout(oLayout2);\nvar oSlide3 = Api.CreateSlide();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\noSlide3.AddObject(oShape);\nvar oDocContent = oShape.GetContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"The third layout was moved to the seventh position within the same collection.\");\noPresentation.AddSlide(oSlide3);\n```",
        "memberof": "ApiLayout",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nPos",
                "description": "Position where the specified slide layout will be moved to.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "MoveTo",
        "longname": "ApiLayout#MoveTo",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2033,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiLayout/Methods/MoveTo.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns an array with all the drawing objects from the slide layout.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {Drawing[]}\r\n     * @see office-js-api/Examples/{Editor}/ApiLayout/Methods/GetAllDrawings.js\r\n\t */",
        "description": "Returns an array with all the drawing objects from the slide layout.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oLayout = oMaster.GetLayout(0);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oDrawing = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noDrawing.SetPosition(608400, 1267200);\noDrawing.SetSize(300 * 36000, 130 * 36000);\noSlide.RemoveAllObjects();\noLayout.AddObject(oDrawing);\nvar aDrawings = oLayout.GetAllDrawings();\nvar oPlaceholder = Api.CreatePlaceholder(\"picture\");\naDrawings[0].SetPlaceholder(oPlaceholder);\n```",
        "memberof": "ApiLayout",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Drawing>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "Drawing",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetAllDrawings",
        "longname": "ApiLayout#GetAllDrawings",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2055,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiLayout/Methods/GetAllDrawings.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns an array with all the shape objects from the slide layout.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {ApiShape[]}\r\n     * @see office-js-api/Examples/{Editor}/ApiLayout/Methods/GetAllShapes.js\r\n\t */",
        "description": "Returns an array with all the shape objects from the slide layout.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oLayout = oMaster.GetLayout(0);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\noSlide.RemoveAllObjects();\noLayout.AddObject(oShape);\nvar aShapes = oLayout.GetAllShapes();\nvar oDocContent = aShapes[0].GetContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"This is a sample shape which was added to the current layout.\");\n```",
        "memberof": "ApiLayout",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ApiShape>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiShape",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetAllShapes",
        "longname": "ApiLayout#GetAllShapes",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2070,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiLayout/Methods/GetAllShapes.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns an array with all the image objects from the slide layout.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {ApiImage[]}\r\n     * @see office-js-api/Examples/{Editor}/ApiLayout/Methods/GetAllImages.js\r\n\t */",
        "description": "Returns an array with all the image objects from the slide layout.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oLayout = oMaster.GetLayout(0);\nvar oImage = Api.CreateImage(\"https://api.onlyoffice.com/content/img/docbuilder/examples/coordinate_aspects.png\", 60 * 36000, 35 * 36000);\noLayout.AddObject(oImage);\nvar aImages = oLayout.GetAllImages();\nvar sType = aImages[0].GetClassType();\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(61, 74, 107));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Class type = \" + sType);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiLayout",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ApiImage>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiImage",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetAllImages",
        "longname": "ApiLayout#GetAllImages",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2084,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiLayout/Methods/GetAllImages.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns an array with all the chart objects from the slide layout.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {ApiChart[]}\r\n     * @see office-js-api/Examples/{Editor}/ApiLayout/Methods/GetAllCharts.js\r\n\t */",
        "description": "Returns an array with all the chart objects from the slide layout.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oMaster = oPresentation.GetMaster(0);\nvar oLayout = oMaster.GetLayout(0);\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetLegendPos(\"bottom\");\noChart.SetShowDataLabels(false, false, true, false);\noChart.SetTitle(\"Financial Overview\", 20);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\noLayout.AddObject(oChart);\nvar aCharts = oLayout.GetAllCharts();\nvar oStroke = Api.CreateStroke(1 * 150, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\naCharts[0].SetMinorHorizontalGridlines(oStroke);\n```",
        "memberof": "ApiLayout",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ApiChart>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiChart",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetAllCharts",
        "longname": "ApiLayout#GetAllCharts",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2098,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiLayout/Methods/GetAllCharts.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns an array with all the OLE objects from the slide layout.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {ApiOleObject[]}\r\n     * @see office-js-api/Examples/{Editor}/ApiLayout/Methods/GetAllOleObjects.js\r\n\t */",
        "description": "Returns an array with all the OLE objects from the slide layout.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oMaster = oPresentation.GetMaster(0);\nvar oLayout = oMaster.GetLayout(0);\nvar oOleObject = Api.CreateOleObject(\"https://i.ytimg.com/vi_webp/SKGz4pmnpgY/sddefault.webp\", 130 * 36000, 90 * 36000, \"https://youtu.be/SKGz4pmnpgY\", \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\");\noOleObject.SetSize(200 * 36000, 130 * 36000);\noOleObject.SetPosition(70 * 36000, 30 * 36000);\noLayout.AddObject(oOleObject);\nvar aOleObjects = oLayout.GetAllOleObjects();\nvar sAppId = aOleObjects[0].GetApplicationId();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 224, 204), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 164, 101), 100000);\nvar oFill = Api.CreateLinearGradientFill([oGs1, oGs2], 5400000);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oDrawing = Api.CreateShape(\"rect\", 300 * 36000, 15 * 36000, oFill, oStroke);\noDrawing.SetPosition(20 * 36000, 170 * 36000);\nvar oDocContent = oDrawing.GetContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.AddText(\"The application ID for the current OLE object: \" + sAppId);\noLayout.AddObject(oDrawing);\n```",
        "memberof": "ApiLayout",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ApiOleObject>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiOleObject",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetAllOleObjects",
        "longname": "ApiLayout#GetAllOleObjects",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2112,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiLayout/Methods/GetAllOleObjects.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns the parent slide master of the current layout.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {?ApiMaster} - returns null if parent slide master doesn't exist.\r\n     * @see office-js-api/Examples/{Editor}/ApiLayout/Methods/GetMaster.js\r\n\t */",
        "description": "Returns the parent slide master of the current layout.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oLayout = oSlide.GetLayout();\nvar oMaster = oLayout.GetMaster();\nvar sType = oMaster.GetClassType();\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Class type = \" + sType);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiLayout",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiMaster"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiMaster",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetMaster",
        "longname": "ApiLayout#GetMaster",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2124,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiLayout/Methods/GetMaster.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Converts the ApiLayout object into the JSON object.\r\n\t * @memberof ApiLayout\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {bool} [bWriteMaster=false] - Specifies if the slide master will be written to the JSON object or not.\r\n     * @param {bool} [bWriteTableStyles=false] - Specifies whether to write used table styles to the JSON object (true) or not (false).\r\n\t * @returns {JSON}\r\n\t * @see office-js-api/Examples/{Editor}/ApiLayout/Methods/ToJSON.js\r\n\t */",
        "description": "Converts the ApiLayout object into the JSON object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oMaster = oPresentation.GetMaster(0);\nvar oLayout = oMaster.GetLayout(0);\nvar json = oLayout.ToJSON(true, false);\nvar oLayoutFromJSON = Api.FromJSON(json);\noMaster.AddLayout(0, oLayoutFromJSON);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar sType = oLayoutFromJSON.GetClassType();\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.AddText(\"Class type = \" + sType);\noLayoutFromJSON.AddObject(oShape);\noSlide.ApplyLayout(oLayoutFromJSON);\n```",
        "memberof": "ApiLayout",
        "params": [
            {
                "type": {
                    "names": [
                        "bool"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "bool"
                    }
                },
                "name": "bWriteMaster",
                "description": "Specifies if the slide master will be written to the JSON object or not.",
                "optional": true,
                "defaultvalue": false
            },
            {
                "type": {
                    "names": [
                        "bool"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "bool"
                    }
                },
                "name": "bWriteTableStyles",
                "description": "Specifies whether to write used table styles to the JSON object (true) or not (false).",
                "optional": true,
                "defaultvalue": false
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "JSON"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "JSON"
                    }
                }
            }
        ],
        "name": "ToJSON",
        "longname": "ApiLayout#ToJSON",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2139,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiLayout/Methods/ToJSON.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Gets drawings by placeholder type.\r\n\t * @memberof ApiLayout\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {PlaceholderType} sType - placeholders type\r\n\t * @returns {Drawing[]}\r\n\t * @see office-js-api/Examples/{Editor}/ApiLayout/Methods/GetDrawingsByPlaceholderType.js\r\n\t */",
        "description": "Gets drawings by placeholder type.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nlet oPresentation = Api.GetPresentation();\nlet oSlide = oPresentation.GetSlideByIndex(0);\nlet oMaster = oPresentation.GetMaster(0);\nlet oLayout = oMaster.GetLayout(0);\nlet aDrawingsWithPh = oLayout.GetDrawingsByPlaceholderType(\"ctrTitle\");\nfor (let i = 0; i < aDrawingsWithPh.length; i++) {\n    aDrawingsWithPh[i].Delete();\n}\n\n```",
        "memberof": "ApiLayout",
        "params": [
            {
                "type": {
                    "names": [
                        "PlaceholderType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PlaceholderType"
                    }
                },
                "name": "sType",
                "description": "placeholders type",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Drawing>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "Drawing",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetDrawingsByPlaceholderType",
        "longname": "ApiLayout#GetDrawingsByPlaceholderType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2155,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiLayout/Methods/GetDrawingsByPlaceholderType.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns the type of the ApiPlaceholder class.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {\"placeholder\"}\r\n     * @see office-js-api/Examples/{Editor}/ApiPlaceholder/Methods/GetClassType.js\r\n\t */",
        "description": "Returns the type of the ApiPlaceholder class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oPlaceholder = Api.CreatePlaceholder(\"chart\");\noShape.SetPlaceholder(oPlaceholder);\nvar sType = oPlaceholder.GetClassType();\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Class type = \" + sType);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiPlaceholder",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"placeholder\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"placeholder\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiPlaceholder#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2176,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiPlaceholder/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\r\n     * Sets the placeholder type.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {PlaceholderType} sType - Placeholder type\r\n     * @returns {boolean} - returns false if placeholder type doesn't exist.\r\n     * @see office-js-api/Examples/{Editor}/ApiPlaceholder/Methods/SetType.js\r\n\t */",
        "description": "Sets the placeholder type.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oPlaceholder = Api.CreatePlaceholder(\"chart\");\noShape.SetPlaceholder(oPlaceholder);\noPlaceholder.SetType(\"picture\");\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiPlaceholder",
        "params": [
            {
                "type": {
                    "names": [
                        "PlaceholderType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PlaceholderType"
                    }
                },
                "name": "sType",
                "description": "Placeholder type",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetType",
        "longname": "ApiPlaceholder#SetType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2188,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiPlaceholder/Methods/SetType.js"
        ]
    },
    {
        "comment": "/**\r\n     * Gets the placeholder type.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {PlaceholderType} - returns placeholder type\r\n     * @see office-js-api/Examples/{Editor}/ApiPlaceholder/Methods/GetType.js\r\n\t */",
        "description": "Gets the placeholder type.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nlet oPresentation = Api.GetPresentation();\nlet oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nlet oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nlet oPlaceholder = Api.CreatePlaceholder(\"chart\");\noShape.SetPlaceholder(oPlaceholder);\nlet oContent = oShape.GetContent();\nlet oParagraph = oContent.GetElement(0);\noParagraph.AddText('Placeholder type in this shape is: \"' + oPlaceholder.GetType() + '\"');\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiPlaceholder",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "PlaceholderType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PlaceholderType"
                    }
                }
            }
        ],
        "name": "GetType",
        "longname": "ApiPlaceholder#GetType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2199,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiPlaceholder/Methods/GetType.js"
        ]
    },
    {
        "comment": "/**\r\n     * Sets the placeholder index.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {number} nIdx - placeholder index\r\n     * @returns {boolean} - returns false if placeholder index wasn't set.\r\n     * @see office-js-api/Examples/{Editor}/ApiPlaceholder/Methods/SetIndex.js\r\n\t */",
        "description": "Sets the placeholder index.",
        "memberof": "ApiPlaceholder",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nIdx",
                "description": "placeholder index",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetIndex",
        "longname": "ApiPlaceholder#SetIndex",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2220,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiPlaceholder/Methods/SetIndex.js"
        ]
    },
    {
        "comment": "/**\r\n     * Gets the placeholder index.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {number | undefined} - returns placeholder index\r\n     * @see office-js-api/Examples/{Editor}/ApiPlaceholder/Methods/GetIndex.js\r\n\t */",
        "description": "Gets the placeholder index.",
        "memberof": "ApiPlaceholder",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number",
                        "undefined"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "UndefinedLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetIndex",
        "longname": "ApiPlaceholder#GetIndex",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2236,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiPlaceholder/Methods/GetIndex.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns the type of the ApiTheme class.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {\"theme\"}\r\n     * @see office-js-api/Examples/{Editor}/ApiTheme/Methods/GetClassType.js\r\n\t */",
        "description": "Returns the type of the ApiTheme class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oTheme = oMaster.GetTheme();\nvar sType = oTheme.GetClassType();\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Class type = \" + sType);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiTheme",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"theme\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"theme\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiTheme#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2262,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTheme/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns the slide master of the current theme.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {ApiMaster | null} - returns null if slide master doesn't exist.\r\n     * @see office-js-api/Examples/{Editor}/ApiTheme/Methods/GetMaster.js\r\n\t */",
        "description": "Returns the slide master of the current theme.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oTheme = oSlide.GetTheme();\nvar oMaster = oTheme.GetMaster();\nvar sType = oMaster.GetClassType();\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Class type = \" + sType);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiTheme",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiMaster",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiMaster"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetMaster",
        "longname": "ApiTheme#GetMaster",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2273,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTheme/Methods/GetMaster.js"
        ]
    },
    {
        "comment": "/**\r\n     * Sets the color scheme to the current presentation theme.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {ApiThemeColorScheme} oApiColorScheme - Theme color scheme.\r\n     * @returns {boolean} - return false if color scheme doesn't exist.\r\n     * @see office-js-api/Examples/{Editor}/ApiTheme/Methods/SetColorScheme.js\r\n\t */",
        "description": "Sets the color scheme to the current presentation theme.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oClrScheme = Api.CreateThemeColorScheme([Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51), Api.CreateRGBColor(230, 179, 117), Api.CreateRGBColor(235, 235, 235), Api.CreateRGBColor(163, 21, 21), \n\tApi.CreateRGBColor(128, 43, 43), Api.CreateRGBColor(0, 0, 0), Api.CreateRGBColor(128, 128, 128), Api.CreateRGBColor(176, 196, 222), Api.CreateRGBColor(65, 105, 225), Api.CreateRGBColor(255, 255, 255), Api.CreateRGBColor(255, 213, 191)], \"New color scheme\");\nvar oTheme = oSlide.GetTheme();\noTheme.SetColorScheme(oClrScheme);\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetLegendPos(\"bottom\");\noChart.SetShowDataLabels(false, false, true, false);\noChart.SetTitle(\"Financial Overview\", 20);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiTheme",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiThemeColorScheme"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiThemeColorScheme"
                    }
                },
                "name": "oApiColorScheme",
                "description": "Theme color scheme.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetColorScheme",
        "longname": "ApiTheme#SetColorScheme",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2288,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTheme/Methods/SetColorScheme.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns the color scheme of the current theme.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {?ApiThemeColorScheme}\r\n     * @see office-js-api/Examples/{Editor}/ApiTheme/Methods/GetColorScheme.js\r\n\t */",
        "description": "Returns the color scheme of the current theme.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oTheme = oMaster.GetTheme();\nvar oClrScheme = oTheme.GetColorScheme();\noClrScheme.ChangeColor(0, Api.CreateRGBColor(255, 111, 61));\noClrScheme.ChangeColor(1, Api.CreateRGBColor(51, 51, 51));\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetLegendPos(\"bottom\");\noChart.SetShowDataLabels(false, false, true, false);\noChart.SetTitle(\"Financial Overview\", 20);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiTheme",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiThemeColorScheme"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiThemeColorScheme",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetColorScheme",
        "longname": "ApiTheme#GetColorScheme",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2305,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTheme/Methods/GetColorScheme.js"
        ]
    },
    {
        "comment": "/**\r\n     * Sets the format scheme to the current presentation theme.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {ApiThemeFormatScheme} oApiFormatScheme - Theme format scheme.\r\n     * @returns {boolean} - return false if format scheme doesn't exist.\r\n     * @see office-js-api/Examples/{Editor}/ApiTheme/Methods/SetFormatScheme.js\r\n\t */",
        "description": "Sets the format scheme to the current presentation theme.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill1 = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oBgFill1 = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke1 = Api.CreateStroke(1 * 36000, oFill1);\nvar oFill2 = Api.CreatePatternFill(\"dashDnDiag\", Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51));\nvar oBgFill2 = Api.CreatePatternFill(\"dashDnDiag\", Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51));\nvar oStroke2 = Api.CreateStroke(1 * 36000, oFill2);\nvar oFill3 = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oBgFill3 = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke3 = Api.CreateStroke(1 * 36000, oFill3);\nvar oFormatScheme = Api.CreateThemeFormatScheme([oFill1, oFill2, oFill3], [oBgFill1, oBgFill2, oBgFill3], [oStroke1, oStroke2, oStroke3], \"New format scheme\");\nvar oTheme = oSlide.GetTheme();\noTheme.SetFormatScheme(oFormatScheme);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetLegendPos(\"bottom\");\noChart.SetShowDataLabels(false, false, true, false);\noChart.SetTitle(\"Financial Overview\", 20);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiTheme",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiThemeFormatScheme"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiThemeFormatScheme"
                    }
                },
                "name": "oApiFormatScheme",
                "description": "Theme format scheme.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetFormatScheme",
        "longname": "ApiTheme#SetFormatScheme",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2322,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTheme/Methods/SetFormatScheme.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns the format scheme of the current theme.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {?ApiThemeFormatScheme}\r\n     * @see office-js-api/Examples/{Editor}/ApiTheme/Methods/GetFormatScheme.js\r\n\t */",
        "description": "Returns the format scheme of the current theme.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oMaster = oPresentation.GetMaster(0);\nvar oTheme = oMaster.GetTheme();\nvar oFormatScheme = oTheme.GetFormatScheme();\nvar sType = oFormatScheme.GetClassType();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Class type = \" + sType);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiTheme",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiThemeFormatScheme"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiThemeFormatScheme",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetFormatScheme",
        "longname": "ApiTheme#GetFormatScheme",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2339,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTheme/Methods/GetFormatScheme.js"
        ]
    },
    {
        "comment": "/**\r\n     * Sets the font scheme to the current presentation theme.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {ApiThemeFontScheme} oApiFontScheme - Theme font scheme.\r\n     * @returns {boolean} - return false if font scheme doesn't exist.\r\n     * @see office-js-api/Examples/{Editor}/ApiTheme/Methods/SetFontScheme.js\r\n\t */",
        "description": "Sets the font scheme to the current presentation theme.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oFontScheme = Api.CreateThemeFontScheme(\"Arial\", \"Noto Sans Simplified Chinese\", \"Arabic\", \"Times New Roman\", \"Noto Serif Simplified Chinese\", \"Arabic\", \"New font scheme\");\nvar oTheme = oSlide.GetTheme();\noTheme.SetFontScheme(oFontScheme);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\noDocContent.RemoveAllElements();\nvar oParagraph = Api.CreateParagraph();\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"This is an example of a paragraph with a new font scheme set.\");\noDocContent.Push(oParagraph);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiTheme",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiThemeFontScheme"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiThemeFontScheme"
                    }
                },
                "name": "oApiFontScheme",
                "description": "Theme font scheme.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetFontScheme",
        "longname": "ApiTheme#SetFontScheme",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2356,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTheme/Methods/SetFontScheme.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns the font scheme of the current theme.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {?ApiThemeFontScheme}\r\n     * @see office-js-api/Examples/{Editor}/ApiTheme/Methods/GetFontScheme.js\r\n\t */",
        "description": "Returns the font scheme of the current theme.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oMaster = oPresentation.GetMaster(0);\nvar oTheme = oMaster.GetTheme();\nvar oFontScheme = oTheme.GetFontScheme();\nvar sType = oFontScheme.GetClassType();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Class type = \" + sType);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiTheme",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiThemeFontScheme"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiThemeFontScheme",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetFontScheme",
        "longname": "ApiTheme#GetFontScheme",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2373,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTheme/Methods/GetFontScheme.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns the type of the ApiThemeColorScheme class.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {\"themeColorScheme\"}\r\n     * @see office-js-api/Examples/{Editor}/ApiThemeColorScheme/Methods/GetClassType.js\r\n\t */",
        "description": "Returns the type of the ApiThemeColorScheme class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oMaster = oPresentation.GetMaster(0);\nvar oTheme = oMaster.GetTheme();\nvar oClrScheme = Api.CreateThemeColorScheme([Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51), Api.CreateRGBColor(230, 179, 117), Api.CreateRGBColor(235, 235, 235), Api.CreateRGBColor(163, 21, 21), \n\tApi.CreateRGBColor(128, 43, 43), Api.CreateRGBColor(0, 0, 0), Api.CreateRGBColor(128, 128, 128), Api.CreateRGBColor(176, 196, 222), Api.CreateRGBColor(65, 105, 225), Api.CreateRGBColor(255, 255, 255), Api.CreateRGBColor(255, 213, 191)], \"New color scheme\");\noTheme.SetColorScheme(oClrScheme);\nvar sType = oClrScheme.GetClassType();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Class type = \" + sType);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiThemeColorScheme",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"themeColorScheme\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"themeColorScheme\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiThemeColorScheme#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2395,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiThemeColorScheme/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\r\n     * Sets a name to the current theme color scheme.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {string} sName - Theme color scheme name.\r\n     * @returns {boolean}\r\n     * @see office-js-api/Examples/{Editor}/ApiThemeColorScheme/Methods/SetSchemeName.js\r\n\t */",
        "description": "Sets a name to the current theme color scheme.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oMaster = oPresentation.GetMaster(0);\nvar oTheme = oMaster.GetTheme();\nvar oClrScheme = Api.CreateThemeColorScheme([Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51), Api.CreateRGBColor(230, 179, 117), Api.CreateRGBColor(235, 235, 235), Api.CreateRGBColor(163, 21, 21), \n\tApi.CreateRGBColor(128, 43, 43), Api.CreateRGBColor(0, 0, 0), Api.CreateRGBColor(128, 128, 128), Api.CreateRGBColor(176, 196, 222), Api.CreateRGBColor(65, 105, 225), Api.CreateRGBColor(255, 255, 255), Api.CreateRGBColor(255, 213, 191)], \"New color scheme\");\noTheme.SetColorScheme(oClrScheme);\noClrScheme.SetSchemeName(\"New color scheme name\");\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"New name was set to the theme color scheme.\");\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiThemeColorScheme",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sName",
                "description": "Theme color scheme name.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetSchemeName",
        "longname": "ApiThemeColorScheme#SetSchemeName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2407,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiThemeColorScheme/Methods/SetSchemeName.js"
        ]
    },
    {
        "comment": "/**\r\n     * Changes a color in the theme color scheme.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {number} nPos - Color position in the color scheme which will be changed.\r\n     * @param {ApiUniColor | ApiRGBColor} oColor - New color of the theme color scheme.\r\n     * @returns {boolean}\r\n     * @see office-js-api/Examples/{Editor}/ApiThemeColorScheme/Methods/ChangeColor.js\r\n\t */",
        "description": "Changes a color in the theme color scheme.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oTheme = oMaster.GetTheme();\nvar oClrScheme = oTheme.GetColorScheme();\noClrScheme.ChangeColor(0, Api.CreateRGBColor(255, 111, 61));\noClrScheme.ChangeColor(1, Api.CreateRGBColor(51, 51, 51));\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetLegendPos(\"bottom\");\noChart.SetShowDataLabels(false, false, true, false);\noChart.SetTitle(\"Financial Overview\", 20);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiThemeColorScheme",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nPos",
                "description": "Color position in the color scheme which will be changed.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiUniColor",
                        "ApiRGBColor"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiUniColor"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRGBColor"
                            }
                        ]
                    }
                },
                "name": "oColor",
                "description": "New color of the theme color scheme.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "ChangeColor",
        "longname": "ApiThemeColorScheme#ChangeColor",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2423,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiThemeColorScheme/Methods/ChangeColor.js"
        ]
    },
    {
        "comment": "/**\r\n     * Creates a copy of the current theme color scheme.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {ApiThemeColorScheme}\r\n     * @see office-js-api/Examples/{Editor}/ApiThemeColorScheme/Methods/Copy.js\r\n\t */",
        "description": "Creates a copy of the current theme color scheme.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide1 = oPresentation.GetSlideByIndex(0);\noSlide1.RemoveAllObjects();\nvar oMaster = oPresentation.GetMaster(0);\nvar oTheme1 = oMaster.GetTheme();\nvar oClrScheme = Api.CreateThemeColorScheme([Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51), Api.CreateRGBColor(230, 179, 117), Api.CreateRGBColor(235, 235, 235), Api.CreateRGBColor(163, 21, 21), \n\tApi.CreateRGBColor(128, 43, 43), Api.CreateRGBColor(0, 0, 0), Api.CreateRGBColor(128, 128, 128), Api.CreateRGBColor(176, 196, 222), Api.CreateRGBColor(65, 105, 225), Api.CreateRGBColor(255, 255, 255), Api.CreateRGBColor(255, 213, 191)], \"New color scheme\");\noTheme1.SetColorScheme(oClrScheme);\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetLegendPos(\"bottom\");\noChart.SetShowDataLabels(false, false, true, false);\noChart.SetTitle(\"Financial Overview\", 20);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\noSlide1.AddObject(oChart);\nvar oCopyClrScheme = oClrScheme.Copy();\noSlide1.ApplyTheme(oTheme1);\nvar oSlide2 = Api.CreateSlide();\noSlide2.RemoveAllObjects();\noPresentation.AddSlide(oSlide2);\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill1 = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oBgFill1 = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke1 = Api.CreateStroke(1 * 36000, oFill1);\nvar oFill2 = Api.CreatePatternFill(\"dashDnDiag\", Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51));\nvar oBgFill2 = Api.CreatePatternFill(\"dashDnDiag\", Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51));\nvar oStroke2 = Api.CreateStroke(1 * 36000, oFill2);\nvar oFill3 = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oBgFill3 = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke3 = Api.CreateStroke(1 * 36000, oFill3);\nvar oFormatScheme = Api.CreateThemeFormatScheme([oFill1, oFill2, oFill3], [oBgFill1, oBgFill2, oBgFill3], [oStroke1, oStroke2, oStroke3], \"New format scheme\");\nvar oFontScheme = Api.CreateThemeFontScheme(\"Arial\", \"Noto Sans Simplified Chinese\", \"Arabic\", \"Times New Roman\", \"Noto Serif Simplified Chinese\", \"Arabic\", \"New font scheme\");\nvar oTheme2 = Api.CreateTheme(\"New theme\", oMaster, oCopyClrScheme, oFormatScheme, oFontScheme);\noSlide2.ApplyTheme(oTheme2);\noSlide2.AddObject(oChart);\n```",
        "memberof": "ApiThemeColorScheme",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiThemeColorScheme"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiThemeColorScheme"
                    }
                }
            }
        ],
        "name": "Copy",
        "longname": "ApiThemeColorScheme#Copy",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2442,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiThemeColorScheme/Methods/Copy.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Converts the ApiThemeColorScheme object into the JSON object.\r\n\t * @memberof ApiThemeColorScheme\r\n\t * @typeofeditors [\"CPE\"]\r\n\t * @returns {JSON}\r\n\t * @see office-js-api/Examples/{Editor}/ApiThemeColorScheme/Methods/ToJSON.js\r\n\t */",
        "description": "Converts the ApiThemeColorScheme object into the JSON object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oMaster = oPresentation.GetMaster(0);\nvar oClrScheme = Api.CreateThemeColorScheme([Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51), Api.CreateRGBColor(230, 179, 117), Api.CreateRGBColor(235, 235, 235), Api.CreateRGBColor(163, 21, 21), \n\tApi.CreateRGBColor(128, 43, 43), Api.CreateRGBColor(0, 0, 0), Api.CreateRGBColor(128, 128, 128), Api.CreateRGBColor(176, 196, 222), Api.CreateRGBColor(65, 105, 225), Api.CreateRGBColor(255, 255, 255), Api.CreateRGBColor(255, 213, 191)], \"New color scheme\");\nvar json = oClrScheme.ToJSON();\nvar oClrSchemeFromJSON = Api.FromJSON(json);\nvar oTheme = oSlide.GetTheme();\noTheme.SetColorScheme(oClrSchemeFromJSON);\nvar sType = oClrSchemeFromJSON.GetClassType();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetLegendPos(\"bottom\");\noChart.SetShowDataLabels(false, false, true, false);\noChart.SetTitle(\"Class type = \" + sType, 20);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiThemeColorScheme",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "JSON"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "JSON"
                    }
                }
            }
        ],
        "name": "ToJSON",
        "longname": "ApiThemeColorScheme#ToJSON",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2454,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiThemeColorScheme/Methods/ToJSON.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns the type of the ApiThemeFormatScheme class.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {\"themeFormatScheme\"}\r\n     * @see office-js-api/Examples/{Editor}/ApiThemeFormatScheme/Methods/GetClassType.js\r\n\t */",
        "description": "Returns the type of the ApiThemeFormatScheme class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oTheme = oMaster.GetTheme();\nvar oFormatScheme = oTheme.GetFormatScheme();\nvar sType = oFormatScheme.GetClassType();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Class type = \" + sType);\noSlide.RemoveAllObjects();\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiThemeFormatScheme",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"themeFormatScheme\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"themeFormatScheme\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiThemeFormatScheme#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2471,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiThemeFormatScheme/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\r\n     * Sets a name to the current theme format scheme.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {string} sName - Theme format scheme name.\r\n     * @returns {boolean}\r\n     * @see office-js-api/Examples/{Editor}/ApiThemeFormatScheme/Methods/SetSchemeName.js\r\n\t */",
        "description": "Sets a name to the current theme format scheme.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oMaster = oPresentation.GetMaster(0);\nvar oTheme = oMaster.GetTheme();\nvar oFormatScheme = oTheme.GetFormatScheme();\noFormatScheme.SetSchemeName(\"New format scheme name\");\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"New name was set to the theme format scheme.\");\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiThemeFormatScheme",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sName",
                "description": "Theme format scheme name.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetSchemeName",
        "longname": "ApiThemeFormatScheme#SetSchemeName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2483,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiThemeFormatScheme/Methods/SetSchemeName.js"
        ]
    },
    {
        "comment": "/**\r\n     * Sets the fill styles to the current theme format scheme.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {ApiFill[]} arrFill - The array of fill styles must contain 3 elements - subtle, moderate and intense fills.\r\n     * If an array is empty or NoFill elements are in the array, it will be filled with the Api.CreateNoFill() elements.\r\n     * @see office-js-api/Examples/{Editor}/ApiThemeFormatScheme/Methods/ChangeFillStyles.js\r\n\t */",
        "description": "Sets the fill styles to the current theme format scheme.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oTheme = oSlide.GetTheme();\nvar oFormatScheme = oTheme.GetFormatScheme();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill1 = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oFill2 = Api.CreatePatternFill(\"dashDnDiag\", Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51));\nvar oFill3 = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noFormatScheme.ChangeFillStyles([oFill1, oFill2, oFill3]);\nvar oClrScheme = Api.CreateThemeColorScheme([Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51), Api.CreateRGBColor(230, 179, 117), Api.CreateRGBColor(235, 235, 235), Api.CreateRGBColor(163, 21, 21), \n\tApi.CreateRGBColor(128, 43, 43), Api.CreateRGBColor(0, 0, 0), Api.CreateRGBColor(128, 128, 128), Api.CreateRGBColor(176, 196, 222), Api.CreateRGBColor(65, 105, 225), Api.CreateRGBColor(255, 255, 255), Api.CreateRGBColor(255, 213, 191)], \"New color scheme\");\nvar oFontScheme = Api.CreateThemeFontScheme(\"Arial\", \"Noto Sans Simplified Chinese\", \"Arabic\", \"Times New Roman\", \"Noto Serif Simplified Chinese\", \"Arabic\", \"New font scheme\");\noTheme = Api.CreateTheme(\"Theme 1\", oMaster, oClrScheme, oFormatScheme, oFontScheme);\noPresentation.ApplyTheme(oTheme);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetLegendPos(\"bottom\");\noChart.SetShowDataLabels(false, false, true, false);\noChart.SetTitle(\"Financial Overview\", 20);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiThemeFormatScheme",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<ApiFill>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiFill",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "arrFill",
                "description": "The array of fill styles must contain 3 elements - subtle, moderate and intense fills.\rIf an array is empty or NoFill elements are in the array, it will be filled with the Api.CreateNoFill() elements.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "ChangeFillStyles",
        "longname": "ApiThemeFormatScheme#ChangeFillStyles",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2498,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiThemeFormatScheme/Methods/ChangeFillStyles.js"
        ]
    },
    {
        "comment": "/**\r\n     * Sets the background fill styles to the current theme format scheme.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {ApiFill[]} arrBgFill - The array of background fill styles must contains 3 elements - subtle, moderate and intense fills.\r\n     * If an array is empty or NoFill elements are in the array, it will be filled with the Api.CreateNoFill() elements.\r\n     * @see office-js-api/Examples/{Editor}/ApiThemeFormatScheme/Methods/ChangeBgFillStyles.js\r\n\t */",
        "description": "Sets the background fill styles to the current theme format scheme.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oTheme = oSlide.GetTheme();\nvar oFormatScheme = oTheme.GetFormatScheme();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oBgFill1 = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oBgFill2 = Api.CreatePatternFill(\"dashDnDiag\", Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51));\nvar oBgFill3 = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noFormatScheme.ChangeBgFillStyles([oBgFill1, oBgFill2, oBgFill3]);\nvar oClrScheme = Api.CreateThemeColorScheme([Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51), Api.CreateRGBColor(230, 179, 117), Api.CreateRGBColor(235, 235, 235), Api.CreateRGBColor(163, 21, 21), \n\tApi.CreateRGBColor(128, 43, 43), Api.CreateRGBColor(0, 0, 0), Api.CreateRGBColor(128, 128, 128), Api.CreateRGBColor(176, 196, 222), Api.CreateRGBColor(65, 105, 225), Api.CreateRGBColor(255, 255, 255), Api.CreateRGBColor(255, 213, 191)], \"New color scheme\");\nvar oFontScheme = Api.CreateThemeFontScheme(\"Arial\", \"Noto Sans Simplified Chinese\", \"Arabic\", \"Times New Roman\", \"Noto Serif Simplified Chinese\", \"Arabic\", \"New font scheme\");\noTheme = Api.CreateTheme(\"Theme 1\", oMaster, oClrScheme, oFormatScheme, oFontScheme);\noPresentation.ApplyTheme(oTheme);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetLegendPos(\"bottom\");\noChart.SetShowDataLabels(false, false, true, false);\noChart.SetTitle(\"Financial Overview\", 20);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiThemeFormatScheme",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<ApiFill>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiFill",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "arrBgFill",
                "description": "The array of background fill styles must contains 3 elements - subtle, moderate and intense fills.\rIf an array is empty or NoFill elements are in the array, it will be filled with the Api.CreateNoFill() elements.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "ChangeBgFillStyles",
        "longname": "ApiThemeFormatScheme#ChangeBgFillStyles",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2521,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiThemeFormatScheme/Methods/ChangeBgFillStyles.js"
        ]
    },
    {
        "comment": "/**\r\n     * Sets the line styles to the current theme format scheme.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {ApiStroke[]} arrLine - The array of line styles must contain 3 elements - subtle, moderate and intense fills.\r\n     * If an array is empty or ApiStroke elements are with no fill, it will be filled with the Api.CreateStroke(0, Api.CreateNoFill()) elements.\r\n     * @see office-js-api/Examples/{Editor}/ApiThemeFormatScheme/Methods/ChangeLineStyles.js\r\n\t */",
        "description": "Sets the line styles to the current theme format scheme.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oTheme = oSlide.GetTheme();\nvar oFormatScheme = oTheme.GetFormatScheme();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill1 = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke1 = Api.CreateStroke(3 * 36000, oFill1);\nvar oFill2 = Api.CreatePatternFill(\"dashDnDiag\", Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51));\nvar oStroke2 = Api.CreateStroke(3 * 36000, oFill2);\nvar oFill3 = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke3 = Api.CreateStroke(3 * 36000, oFill3);\noFormatScheme.ChangeLineStyles([oStroke1, oStroke2, oFill3]);\nvar oClrScheme = Api.CreateThemeColorScheme([Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51), Api.CreateRGBColor(230, 179, 117), Api.CreateRGBColor(235, 235, 235), Api.CreateRGBColor(163, 21, 21), \n\tApi.CreateRGBColor(128, 43, 43), Api.CreateRGBColor(0, 0, 0), Api.CreateRGBColor(128, 128, 128), Api.CreateRGBColor(176, 196, 222), Api.CreateRGBColor(65, 105, 225), Api.CreateRGBColor(255, 255, 255), Api.CreateRGBColor(255, 213, 191)], \"New color scheme\");\nvar oFontScheme = Api.CreateThemeFontScheme(\"Arial\", \"Noto Sans Simplified Chinese\", \"Arabic\", \"Times New Roman\", \"Noto Serif Simplified Chinese\", \"Arabic\", \"New font scheme\");\noTheme = Api.CreateTheme(\"Theme 1\", oMaster, oClrScheme, oFormatScheme, oFontScheme);\noPresentation.ApplyTheme(oTheme);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Create a shape by yourself to see the stroke style set to this presentation.\");\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiThemeFormatScheme",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<ApiStroke>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiStroke",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "arrLine",
                "description": "The array of line styles must contain 3 elements - subtle, moderate and intense fills.\rIf an array is empty or ApiStroke elements are with no fill, it will be filled with the Api.CreateStroke(0, Api.CreateNoFill()) elements.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "ChangeLineStyles",
        "longname": "ApiThemeFormatScheme#ChangeLineStyles",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2544,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiThemeFormatScheme/Methods/ChangeLineStyles.js"
        ]
    },
    {
        "comment": "/**\r\n     * Creates a copy of the current theme format scheme.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {ApiThemeFormatScheme}\r\n     * @see office-js-api/Examples/{Editor}/ApiThemeFormatScheme/Methods/Copy.js\r\n\t */",
        "description": "Creates a copy of the current theme format scheme.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oMaster = oPresentation.GetMaster(0);\nvar oSlide1 = oPresentation.GetSlideByIndex(0);\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill1 = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oBgFill1 = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke1 = Api.CreateStroke(1 * 36000, oFill1);\nvar oFill2 = Api.CreatePatternFill(\"dashDnDiag\", Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51));\nvar oBgFill2 = Api.CreatePatternFill(\"dashDnDiag\", Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51));\nvar oStroke2 = Api.CreateStroke(1 * 36000, oFill2);\nvar oFill3 = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oBgFill3 = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke3 = Api.CreateStroke(1 * 36000, oFill3);\nvar oFormatScheme = Api.CreateThemeFormatScheme([oFill1, oFill2, oFill3], [oBgFill1, oBgFill2, oBgFill3], [oStroke1, oStroke2, oStroke3], \"New format scheme\");\nvar oClrScheme = Api.CreateThemeColorScheme([Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51), Api.CreateRGBColor(230, 179, 117), Api.CreateRGBColor(235, 235, 235), Api.CreateRGBColor(163, 21, 21), \n\tApi.CreateRGBColor(128, 43, 43), Api.CreateRGBColor(0, 0, 0), Api.CreateRGBColor(128, 128, 128), Api.CreateRGBColor(176, 196, 222), Api.CreateRGBColor(65, 105, 225), Api.CreateRGBColor(255, 255, 255), Api.CreateRGBColor(255, 213, 191)], \"New color scheme\");\nvar oFontScheme = Api.CreateThemeFontScheme(\"Arial\", \"Noto Sans Simplified Chinese\", \"Arabic\", \"Times New Roman\", \"Noto Serif Simplified Chinese\", \"Arabic\", \"New font scheme\");\nvar oTheme1 = Api.CreateTheme(\"Theme 1\", oMaster, oClrScheme, oFormatScheme, oFontScheme);\noPresentation.ApplyTheme(oTheme1);\nvar oSlide2 = Api.CreateSlide();\noPresentation.AddSlide(oSlide2);\noGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 218, 185), 0);\noGs2 = Api.CreateGradientStop(Api.CreateRGBColor(238, 203, 173), 100000);\nvar oNewBgFill1 = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oNewBgFill2 = Api.CreatePatternFill(\"dashDnDiag\", Api.CreateRGBColor(238, 203, 173), Api.CreateRGBColor(51, 51, 51));\nvar oNewBgFill3 = Api.CreateSolidFill(Api.CreateRGBColor(238, 203, 173));\nvar oCopyFormatScheme = oFormatScheme.Copy();\noCopyFormatScheme.ChangeBgFillStyles([oNewBgFill1, oNewBgFill2, oNewBgFill3]);\nvar oTheme2 = Api.CreateTheme(\"Theme 2\", oMaster, oClrScheme, oCopyFormatScheme, oFontScheme);\noSlide2.ApplyTheme(oTheme2);\n```",
        "memberof": "ApiThemeFormatScheme",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiThemeFormatScheme"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiThemeFormatScheme"
                    }
                }
            }
        ],
        "name": "Copy",
        "longname": "ApiThemeFormatScheme#Copy",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2593,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiThemeFormatScheme/Methods/Copy.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Converts the ApiThemeFormatScheme object into the JSON object.\r\n\t * @memberof ApiThemeFormatScheme\r\n\t * @typeofeditors [\"CPE\"]\r\n\t * @returns {JSON}\r\n\t * @see office-js-api/Examples/{Editor}/ApiThemeFormatScheme/Methods/ToJSON.js\r\n\t */",
        "description": "Converts the ApiThemeFormatScheme object into the JSON object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oTheme = oSlide.GetTheme();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill1 = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oBgFill1 = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke1 = Api.CreateStroke(1 * 36000, oFill1);\nvar oFill2 = Api.CreatePatternFill(\"dashDnDiag\", Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51));\nvar oBgFill2 = Api.CreatePatternFill(\"dashDnDiag\", Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51));\nvar oStroke2 = Api.CreateStroke(1 * 36000, oFill2);\nvar oFill3 = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oBgFill3 = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke3 = Api.CreateStroke(1 * 36000, oFill3);\nvar oFormatScheme = Api.CreateThemeFormatScheme([oFill1, oFill2, oFill3], [oBgFill1, oBgFill2, oBgFill3], [oStroke1, oStroke2, oStroke3], \"New format scheme\");\nvar json = oFormatScheme.ToJSON();\nvar oFormatSchemeFromJSON = Api.FromJSON(json);\noTheme.SetFormatScheme(oFormatSchemeFromJSON);\nvar sType = oFormatSchemeFromJSON.GetClassType();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetLegendPos(\"bottom\");\noChart.SetShowDataLabels(false, false, true, false);\noChart.SetTitle(\"Class type = \" + sType, 20);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiThemeFormatScheme",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "JSON"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "JSON"
                    }
                }
            }
        ],
        "name": "ToJSON",
        "longname": "ApiThemeFormatScheme#ToJSON",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2605,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiThemeFormatScheme/Methods/ToJSON.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns the type of the ApiThemeFontScheme class.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {\"themeFontScheme\"}\r\n     * @see office-js-api/Examples/{Editor}/ApiThemeFontScheme/Methods/GetClassType.js\r\n\t */",
        "description": "Returns the type of the ApiThemeFontScheme class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oMaster = oPresentation.GetMaster();\nvar oFontScheme = Api.CreateThemeFontScheme(\"Arial\", \"Noto Sans Simplified Chinese\", \"Arabic\", \"Times New Roman\", \"Noto Serif Simplified Chinese\", \"Arabic\", \"New font scheme\");\nvar sType = oFontScheme.GetClassType();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Class type = \" + sType);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiThemeFontScheme",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"themeFontScheme\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"themeFontScheme\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiThemeFontScheme#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2622,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiThemeFontScheme/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\r\n     * Sets a name to the current theme font scheme.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {string} sName - Theme font scheme name.\r\n     * @returns {boolean} - returns false if font scheme doesn't exist.\r\n     * @see office-js-api/Examples/{Editor}/ApiThemeFontScheme/Methods/SetSchemeName.js\r\n\t */",
        "description": "Sets a name to the current theme font scheme.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oTheme = oMaster.GetTheme();\nvar oFontScheme = oTheme.GetFontScheme();\noFontScheme.SetFonts(\"Arial\", \"Noto Sans Simplified Chinese\", \"Arabic\", \"Times New Roman\", \"Noto Serif Simplified Chinese\", \"Arabic\", \"New font scheme\");\noFontScheme.SetSchemeName(\"New font scheme name\");\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"New name was set to the theme font scheme.\");\noSlide.RemoveAllObjects();\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiThemeFontScheme",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sName",
                "description": "Theme font scheme name.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetSchemeName",
        "longname": "ApiThemeFontScheme#SetSchemeName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2634,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiThemeFontScheme/Methods/SetSchemeName.js"
        ]
    },
    {
        "comment": "/**\r\n     * Sets the fonts to the current theme font scheme.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @memberof ApiThemeFontScheme\r\n     * @param {string} mjLatin - The major theme font applied to the latin text.\r\n     * @param {string} mjEa - The major theme font applied to the east asian text.\r\n     * @param {string} mjCs - The major theme font applied to the complex script text.\r\n     * @param {string} mnLatin - The minor theme font applied to the latin text.\r\n     * @param {string} mnEa - The minor theme font applied to the east asian text.\r\n     * @param {string} mnCs - The minor theme font applied to the complex script text.\r\n     * @see office-js-api/Examples/{Editor}/ApiThemeFontScheme/Methods/SetFonts.js\r\n\t */",
        "description": "Sets the fonts to the current theme font scheme.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oTheme = oMaster.GetTheme();\nvar oFontScheme = oTheme.GetFontScheme();\noFontScheme.SetFonts(\"Arial\", \"Noto Sans Simplified Chinese\", \"Arabic\", \"Times New Roman\", \"Noto Serif Simplified Chinese\", \"Arabic\", \"New font scheme\");\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"New font scheme was set to this slide.\");\noSlide.RemoveAllObjects();\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiThemeFontScheme",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "mjLatin",
                "description": "The major theme font applied to the latin text.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "mjEa",
                "description": "The major theme font applied to the east asian text.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "mjCs",
                "description": "The major theme font applied to the complex script text.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "mnLatin",
                "description": "The minor theme font applied to the latin text.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "mnEa",
                "description": "The minor theme font applied to the east asian text.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "mnCs",
                "description": "The minor theme font applied to the complex script text.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetFonts",
        "longname": "ApiThemeFontScheme#SetFonts",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2660,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiThemeFontScheme/Methods/SetFonts.js"
        ]
    },
    {
        "comment": "/**\r\n     * Creates a copy of the current theme font scheme.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {ApiThemeFontScheme}\r\n     * @see office-js-api/Examples/{Editor}/ApiThemeFontScheme/Methods/Copy.js\r\n\t */",
        "description": "Creates a copy of the current theme font scheme.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide1 = oPresentation.GetSlideByIndex(0);\noSlide1.RemoveAllObjects();\nvar oMaster = oPresentation.GetMaster(0);\nvar oTheme1 = oMaster.GetTheme();\nvar oFontScheme = Api.CreateThemeFontScheme(\"Arial\", \"Noto Sans Simplified Chinese\", \"Arabic\", \"Times New Roman\", \"Noto Serif Simplified Chinese\", \"Arabic\", \"New font scheme\");\noTheme1.SetFontScheme(oFontScheme);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"New font scheme was set to this slide.\");\noSlide1.AddObject(oShape);\nvar oCopyFontScheme = oFontScheme.Copy();\noSlide1.ApplyTheme(oTheme1);\nvar oSlide2 = Api.CreateSlide();\noSlide2.RemoveAllObjects();\noPresentation.AddSlide(oSlide2);\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill1 = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oBgFill1 = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke1 = Api.CreateStroke(1 * 36000, oFill1);\nvar oFill2 = Api.CreatePatternFill(\"dashDnDiag\", Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51));\nvar oBgFill2 = Api.CreatePatternFill(\"dashDnDiag\", Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51));\nvar oStroke2 = Api.CreateStroke(1 * 36000, oFill2);\nvar oFill3 = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oBgFill3 = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke3 = Api.CreateStroke(1 * 36000, oFill3);\noFormatScheme = Api.CreateThemeFormatScheme([oFill1, oFill2, oFill3], [oBgFill1, oBgFill2, oBgFill3], [oStroke1, oStroke2, oStroke3], \"New format scheme\");\nvar oClrScheme = Api.CreateThemeColorScheme([Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51), Api.CreateRGBColor(230, 179, 117), Api.CreateRGBColor(235, 235, 235), Api.CreateRGBColor(163, 21, 21), \n\tApi.CreateRGBColor(128, 43, 43), Api.CreateRGBColor(0, 0, 0), Api.CreateRGBColor(128, 128, 128), Api.CreateRGBColor(176, 196, 222), Api.CreateRGBColor(65, 105, 225), Api.CreateRGBColor(255, 255, 255), Api.CreateRGBColor(255, 213, 191)], \"New color scheme\");\nvar oTheme2 = Api.CreateTheme(\"New theme\", oMaster, oClrScheme, oFormatScheme, oCopyFontScheme);\noSlide2.ApplyTheme(oTheme2);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noStroke = Api.CreateStroke(0, Api.CreateNoFill());\noShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\noDocContent = oShape.GetDocContent();\noParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"New font scheme was set to this slide.\");\noSlide2.AddObject(oShape);\n```",
        "memberof": "ApiThemeFontScheme",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiThemeFontScheme"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiThemeFontScheme"
                    }
                }
            }
        ],
        "name": "Copy",
        "longname": "ApiThemeFontScheme#Copy",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2686,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiThemeFontScheme/Methods/Copy.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Converts the ApiThemeFontScheme object into the JSON object.\r\n\t * @memberof ApiThemeFontScheme\r\n\t * @typeofeditors [\"CPE\"]\r\n\t * @returns {JSON}\r\n\t * @see office-js-api/Examples/{Editor}/ApiThemeFontScheme/Methods/ToJSON.js\r\n\t */",
        "description": "Converts the ApiThemeFontScheme object into the JSON object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oMaster = oPresentation.GetMaster(0);\nvar oThemeMaster = oMaster.GetTheme();\nvar oFontScheme = oThemeMaster.GetFontScheme();\noFontScheme.SetFonts(\"Arial\", \"Noto Sans Simplified Chinese\", \"Arabic\", \"Times New Roman\", \"Noto Serif Simplified Chinese\", \"Arabic\", \"New font scheme\");\noFontScheme.SetSchemeName(\"New font scheme name\");\nvar json = oFontScheme.ToJSON();\nvar oFontSchemeFromJSON = Api.FromJSON(json);\nvar oTheme = oSlide.GetTheme();\noTheme.SetFontScheme(oFontSchemeFromJSON);\nvar sType = oFontSchemeFromJSON.GetClassType();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Class type = \" + sType);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiThemeFontScheme",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "JSON"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "JSON"
                    }
                }
            }
        ],
        "name": "ToJSON",
        "longname": "ApiThemeFontScheme#ToJSON",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2698,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiThemeFontScheme/Methods/ToJSON.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns the type of the ApiSlide class.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {\"slide\"}\r\n     * @see office-js-api/Examples/{Editor}/ApiSlide/Methods/GetClassType.js\r\n\t */",
        "description": "Returns the type of the ApiSlide class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar sClassType = oSlide.GetClassType();\noParagraph.AddText(\"Class Type = \" + sClassType);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiSlide",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"slide\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"slide\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiSlide#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2715,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiSlide/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\r\n     * Removes all the objects from the current slide.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @memberof ApiSlide\r\n     * @see office-js-api/Examples/{Editor}/ApiSlide/Methods/RemoveAllObjects.js\r\n\t */",
        "description": "Removes all the objects from the current slide.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\noPresentation.SetSizes(254 * 36000, 190 * 36000);\nvar oSlide = oPresentation.GetCurrentSlide();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"rect\", 200 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\noFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\noStroke = Api.CreateStroke(0, Api.CreateNoFill());\noShape = Api.CreateShape(\"flowChartMagneticTape\", 200 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.AddText(\"All objects were removed from this slide before adding this shape.\");\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiSlide",
        "params": null,
        "returns": null,
        "name": "RemoveAllObjects",
        "longname": "ApiSlide#RemoveAllObjects",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2726,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiSlide/Methods/RemoveAllObjects.js"
        ]
    },
    {
        "comment": "/**\r\n     * Adds an object (image, shape or chart) to the current presentation slide.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @memberof ApiSlide\r\n     * @param {ApiDrawing} oDrawing - The object which will be added to the current presentation slide.\r\n     * @returns {boolean} - returns false if slide doesn't exist.\r\n     * @see office-js-api/Examples/{Editor}/ApiSlide/Methods/AddObject.js\r\n\t */",
        "description": "Adds an object (image, shape or chart) to the current presentation slide.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetLegendPos(\"bottom\");\noChart.SetShowDataLabels(false, false, true, false);\noChart.SetTitle(\"Financial Overview\", 13);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiSlide",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiDrawing"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiDrawing"
                    }
                },
                "name": "oDrawing",
                "description": "The object which will be added to the current presentation slide.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "AddObject",
        "longname": "ApiSlide#AddObject",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2743,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiSlide/Methods/AddObject.js"
        ]
    },
    {
        "comment": "/**\r\n     * Removes objects (image, shape or chart) from the current slide.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @memberof ApiSlide\r\n     * @param {number} nPos - Position from which the object will be deleted.\r\n     * @param {number} [nCount = 1] - The number of elements to delete.\r\n     * @returns {boolean} - returns false if slide doesn't exist or position is invalid or slide hasn't objects.\r\n     * @see office-js-api/Examples/{Editor}/ApiSlide/Methods/RemoveObject.js\r\n\t */",
        "description": "Removes objects (image, shape or chart) from the current slide.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oDrawing = Api.CreateShape(\"cube\", 3212465, 963295, oFill, oStroke);\noDrawing.SetPosition(30 * 36000, 1267200);\noDrawing.SetSize(150 * 36000, 130 * 36000);\nvar oCopyDrawing = oDrawing.Copy();\noCopyDrawing.SetPosition(170 * 36000, 1267200);\noCopyDrawing.SetSize(150 * 36000, 130 * 36000);\noSlide.AddObject(oDrawing);\noSlide.AddObject(oCopyDrawing);\noSlide.RemoveObject(1, 1);\n```",
        "memberof": "ApiSlide",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nPos",
                "description": "Position from which the object will be deleted.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nCount",
                "description": "The number of elements to delete.",
                "optional": true,
                "defaultvalue": 1
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "RemoveObject",
        "longname": "ApiSlide#RemoveObject",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2764,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiSlide/Methods/RemoveObject.js"
        ]
    },
    {
        "comment": "/**\r\n     * Sets the background to the current presentation slide.\r\n     * @memberOf ApiSlide\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {ApiFill} oApiFill - The color or pattern used to fill the presentation slide background.\r\n     * @returns {boolean}\r\n     * @see office-js-api/Examples/{Editor}/ApiSlide/Methods/SetBackground.js\r\n\t */",
        "description": "Sets the background to the current presentation slide.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = Api.CreateSlide();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\noSlide.SetBackground(oFill);\noPresentation.AddSlide(oSlide);\n```",
        "memberof": "ApiSlide",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                },
                "name": "oApiFill",
                "description": "The color or pattern used to fill the presentation slide background.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetBackground",
        "longname": "ApiSlide#SetBackground",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2789,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiSlide/Methods/SetBackground.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns the visibility of the current presentation slide.\r\n     * @memberOf ApiSlide\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {boolean}\r\n     * @see office-js-api/Examples/{Editor}/ApiSlide/Methods/GetVisible.js\r\n\t */",
        "description": "Returns the visibility of the current presentation slide.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = Api.CreateSlide();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\noSlide.SetBackground(oFill);\noPresentation.AddSlide(oSlide);\noSlide = oPresentation.GetSlideByIndex(0);\noSlide.SetVisible(false);\nvar bVisible = oSlide.GetVisible();\noSlide = oPresentation.GetSlideByIndex(1);\noSlide.RemoveAllObjects();\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\noSlide.AddObject(oShape);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.AddText(\"The first slide visibility: \" + bVisible);\n```",
        "memberof": "ApiSlide",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "GetVisible",
        "longname": "ApiSlide#GetVisible",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2809,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiSlide/Methods/GetVisible.js"
        ]
    },
    {
        "comment": "/**\r\n     * Sets the visibility to the current presentation slide.\r\n     * @memberOf ApiSlide\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {boolean} value - Slide visibility.\r\n     * @returns {boolean}\r\n     * @see office-js-api/Examples/{Editor}/ApiSlide/Methods/SetVisible.js\r\n\t */",
        "description": "Sets the visibility to the current presentation slide.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = Api.CreateSlide();\noSlide.SetVisible(false);\noPresentation.AddSlide(oSlide);\n```",
        "memberof": "ApiSlide",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "value",
                "description": "Slide visibility.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetVisible",
        "longname": "ApiSlide#SetVisible",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2824,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiSlide/Methods/SetVisible.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns the slide width in English measure units.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {EMU}\r\n     * @see office-js-api/Examples/{Editor}/ApiSlide/Methods/GetWidth.js\r\n\t */",
        "description": "Returns the slide width in English measure units.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\noPresentation.SetSizes(254 * 36000, 190 * 36000);\nvar oSlide = oPresentation.GetCurrentSlide();\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"rect\", 200 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar nSlideWidth = oSlide.GetWidth();\noParagraph.AddText(\"The slide width = \" + nSlideWidth / 36000 + \" mm\");\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiSlide",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                }
            }
        ],
        "name": "GetWidth",
        "longname": "ApiSlide#GetWidth",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2838,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiSlide/Methods/GetWidth.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns the slide height in English measure units.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {EMU}\r\n     * @see office-js-api/Examples/{Editor}/ApiSlide/Methods/GetHeight.js\r\n\t */",
        "description": "Returns the slide height in English measure units.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\noPresentation.SetSizes(254 * 36000, 190 * 36000);\nvar oSlide = oPresentation.GetCurrentSlide();\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"rect\", 200 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar nSlideHeight = oSlide.GetHeight();\noParagraph.AddText(\"The slide height = \" + nSlideHeight / 36000 + \" mm\");\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiSlide",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                }
            }
        ],
        "name": "GetHeight",
        "longname": "ApiSlide#GetHeight",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2851,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiSlide/Methods/GetHeight.js"
        ]
    },
    {
        "comment": "/**\r\n     * Applies the specified layout to the current slide.\r\n     * The layout must be in slide master.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {ApiLayout} oLayout - Layout to be applied.\r\n     * @returns {boolean} - returns false if slide doesn't exist.\r\n     * @see office-js-api/Examples/{Editor}/ApiSlide/Methods/ApplyLayout.js\r\n\t */",
        "description": "Applies the specified layout to the current slide.\rThe layout must be in slide master.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oLayout = oMaster.GetLayout(4);\noSlide.ApplyLayout(oLayout);\n```",
        "memberof": "ApiSlide",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiLayout"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiLayout"
                    }
                },
                "name": "oLayout",
                "description": "Layout to be applied.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "ApplyLayout",
        "longname": "ApiSlide#ApplyLayout",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2866,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiSlide/Methods/ApplyLayout.js"
        ]
    },
    {
        "comment": "/**\r\n     * Deletes the current slide from the presentation.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {boolean} - returns false if slide doesn't exist or is not in the presentation.\r\n     * @see office-js-api/Examples/{Editor}/ApiSlide/Methods/Delete.js\r\n\t */",
        "description": "Deletes the current slide from the presentation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = Api.CreateSlide();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\noSlide.SetBackground(oFill);\noPresentation.AddSlide(oSlide);\noSlide = oPresentation.GetSlideByIndex(0);\noSlide.Delete();\n```",
        "memberof": "ApiSlide",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "Delete",
        "longname": "ApiSlide#Delete",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2880,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiSlide/Methods/Delete.js"
        ]
    },
    {
        "comment": "/**\r\n     * Creates a copy of the current slide object.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {ApiSlide | null} - returns new ApiSlide object that represents the duplicate slide. \r\n     * Returns null if slide doesn't exist.\r\n     * @see office-js-api/Examples/{Editor}/ApiSlide/Methods/Copy.js\r\n\t */",
        "description": "Creates a copy of the current slide object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\noSlide.SetBackground(oFill);\nvar oCopySlide = oSlide.Copy();\noPresentation.AddSlide(oCopySlide);\n```",
        "memberof": "ApiSlide",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiSlide",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiSlide"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "Copy",
        "longname": "ApiSlide#Copy",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2903,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiSlide/Methods/Copy.js"
        ]
    },
    {
        "comment": "/**\r\n     * Creates a duplicate of the specified slide object, adds the new slide to the slides collection.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {number} [nPos    = ApiPresentation.GetSlidesCount()] - Position where the new slide will be added.\r\n     * @returns {ApiSlide | null} - returns new ApiSlide object that represents the duplicate slide. \r\n     * Returns null if slide doesn't exist or is not in the presentation.\r\n     * @see office-js-api/Examples/{Editor}/ApiSlide/Methods/Duplicate.js\r\n\t */",
        "description": "Creates a duplicate of the specified slide object, adds the new slide to the slides collection.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\noSlide.SetBackground(oFill);\nvar oDuplicateSlide = oSlide.Duplicate(1);\n```",
        "memberof": "ApiSlide",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nPos",
                "description": "Position where the new slide will be added.",
                "optional": true,
                "defaultvalue": "ApiPresentation.GetSlidesCount()"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiSlide",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiSlide"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "Duplicate",
        "longname": "ApiSlide#Duplicate",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2919,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiSlide/Methods/Duplicate.js"
        ]
    },
    {
        "comment": "/**\r\n     * Moves the current slide to a specific location within the same collection.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {number} nPos - Position where the current slide will be moved to.\r\n     * @returns {boolean} - returns false if slide doesn't exist or position is invalid or slide is not in the presentation.\r\n     * @see office-js-api/Examples/{Editor}/ApiSlide/Methods/MoveTo.js\r\n\t */",
        "description": "Moves the current slide to a specific location within the same collection.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = Api.CreateSlide();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\noSlide.SetBackground(oFill);\noPresentation.AddSlide(oSlide);\noSlide.MoveTo(0);\n```",
        "memberof": "ApiSlide",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nPos",
                "description": "Position where the current slide will be moved to.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "MoveTo",
        "longname": "ApiSlide#MoveTo",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2941,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiSlide/Methods/MoveTo.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns a position of the current slide in the presentation.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {number} - returns -1 if slide doesn't exist or is not in the presentation.\r\n     * @see office-js-api/Examples/{Editor}/ApiSlide/Methods/GetSlideIndex.js\r\n\t */",
        "description": "Returns a position of the current slide in the presentation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar nIndex = oSlide.GetSlideIndex();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Slide index = \" + nIndex);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiSlide",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GetSlideIndex",
        "longname": "ApiSlide#GetSlideIndex",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2965,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiSlide/Methods/GetSlideIndex.js"
        ]
    },
    {
        "comment": "/**\r\n     * Clears the slide background.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {boolean} - return false if slide doesn't exist.\r\n     * @see office-js-api/Examples/{Editor}/ApiSlide/Methods/ClearBackground.js\r\n\t */",
        "description": "Clears the slide background.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\noSlide.SetBackground(oFill);\nvar oDuplicateSlide = oSlide.Duplicate(1);\noDuplicateSlide.ClearBackground();\n```",
        "memberof": "ApiSlide",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "ClearBackground",
        "longname": "ApiSlide#ClearBackground",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2988,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiSlide/Methods/ClearBackground.js"
        ]
    },
    {
        "comment": "/**\r\n     * Sets the layout background as the background of the slide.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {boolean} - returns false if layout is null or layout hasn't background or slide doesn't exist.\r\n     * @see office-js-api/Examples/{Editor}/ApiSlide/Methods/FollowLayoutBackground.js\r\n\t */",
        "description": "Sets the layout background as the background of the slide.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oLayout = oMaster.GetLayout(0);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noLayout.SetBackground(oFill);\noSlide.FollowLayoutBackground();\n```",
        "memberof": "ApiSlide",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "FollowLayoutBackground",
        "longname": "ApiSlide#FollowLayoutBackground",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3008,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiSlide/Methods/FollowLayoutBackground.js"
        ]
    },
    {
        "comment": "/**\r\n     * Sets the master background as the background of the slide.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {boolean} - returns false if master is null or master hasn't background or slide doesn't exist.\r\n     * @see office-js-api/Examples/{Editor}/ApiSlide/Methods/FollowMasterBackground.js\r\n\t */",
        "description": "Sets the master background as the background of the slide.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oLayout = oMaster.GetLayout(0);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noLayout.SetBackground(oFill);\noSlide.FollowMasterBackground();\n```",
        "memberof": "ApiSlide",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "FollowMasterBackground",
        "longname": "ApiSlide#FollowMasterBackground",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3030,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiSlide/Methods/FollowMasterBackground.js"
        ]
    },
    {
        "comment": "/**\r\n     * Applies the specified theme to the current slide.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {ApiTheme} oApiTheme - Presentation theme.\r\n     * @returns {boolean} - returns false if master is null or master hasn't background.\r\n     * @see office-js-api/Examples/{Editor}/ApiSlide/Methods/ApplyTheme.js\r\n\t */",
        "description": "Applies the specified theme to the current slide.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oClrScheme = Api.CreateThemeColorScheme([Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51), Api.CreateRGBColor(230, 179, 117), Api.CreateRGBColor(235, 235, 235), Api.CreateRGBColor(163, 21, 21), \n\tApi.CreateRGBColor(128, 43, 43), Api.CreateRGBColor(0, 0, 0), Api.CreateRGBColor(128, 128, 128), Api.CreateRGBColor(176, 196, 222), Api.CreateRGBColor(65, 105, 225), Api.CreateRGBColor(255, 255, 255), Api.CreateRGBColor(255, 213, 191)], \"New color scheme\");\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill1 = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oBgFill1 = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke1 = Api.CreateStroke(1 * 36000, oFill1);\nvar oFill2 = Api.CreatePatternFill(\"dashDnDiag\", Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51));\nvar oBgFill2 = Api.CreatePatternFill(\"dashDnDiag\", Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51));\nvar oStroke2 = Api.CreateStroke(1 * 36000, oFill2);\nvar oFill3 = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oBgFill3 = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke3 = Api.CreateStroke(1 * 36000, oFill3);\nvar oFormatScheme = Api.CreateThemeFormatScheme([oFill1, oFill2, oFill3], [oBgFill1, oBgFill2, oBgFill3], [oStroke1, oStroke2, oStroke3], \"New format scheme\");\nvar oFontScheme = Api.CreateThemeFontScheme(\"Arial\", \"Noto Sans Simplified Chinese\", \"Arabic\", \"Times New Roman\", \"Noto Serif Simplified Chinese\", \"Arabic\", \"New font scheme\");\nvar oTheme = Api.CreateTheme(\"New theme\", oMaster, oClrScheme, oFormatScheme, oFontScheme);\noSlide.ApplyTheme(oTheme);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetLegendPos(\"bottom\");\noChart.SetShowDataLabels(false, false, true, false);\noChart.SetTitle(\"Financial Overview\", 20);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiSlide",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiTheme"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTheme"
                    }
                },
                "name": "oApiTheme",
                "description": "Presentation theme.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "ApplyTheme",
        "longname": "ApiSlide#ApplyTheme",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3052,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiSlide/Methods/ApplyTheme.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns a layout of the current slide.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {ApiLayout | null} - returns null if slide or layout doesn't exist. \r\n     * @see office-js-api/Examples/{Editor}/ApiSlide/Methods/GetLayout.js\r\n\t */",
        "description": "Returns a layout of the current slide.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oLayout = oSlide.GetLayout();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noLayout.SetBackground(oFill);\noSlide.FollowLayoutBackground();\n```",
        "memberof": "ApiSlide",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiLayout",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiLayout"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetLayout",
        "longname": "ApiSlide#GetLayout",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3161,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiSlide/Methods/GetLayout.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns a theme of the current slide.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {ApiTheme} - returns null if slide or layout or master or theme doesn't exist.\r\n     * @see office-js-api/Examples/{Editor}/ApiSlide/Methods/GetTheme.js\r\n\t */",
        "description": "Returns a theme of the current slide.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oTheme = oSlide.GetTheme();\nvar oClrScheme = Api.CreateThemeColorScheme([Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51), Api.CreateRGBColor(230, 179, 117), Api.CreateRGBColor(235, 235, 235), Api.CreateRGBColor(163, 21, 21), \n\tApi.CreateRGBColor(128, 43, 43), Api.CreateRGBColor(0, 0, 0), Api.CreateRGBColor(128, 128, 128), Api.CreateRGBColor(176, 196, 222), Api.CreateRGBColor(65, 105, 225), Api.CreateRGBColor(255, 255, 255), Api.CreateRGBColor(255, 213, 191)], \"New color scheme\");\noTheme.SetColorScheme(oClrScheme);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetLegendPos(\"bottom\");\noChart.SetShowDataLabels(false, false, true, false);\noChart.SetTitle(\"Financial Overview\", 20);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\noSlide.AddObject(oChart);\n```",
        "memberof": "ApiSlide",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTheme"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTheme"
                    }
                }
            }
        ],
        "name": "GetTheme",
        "longname": "ApiSlide#GetTheme",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3174,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiSlide/Methods/GetTheme.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns an array with all the drawing objects from the slide.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {Drawing[]} \r\n     * @see office-js-api/Examples/{Editor}/ApiSlide/Methods/GetAllDrawings.js\r\n\t */",
        "description": "Returns an array with all the drawing objects from the slide.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oDrawing = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noDrawing.SetPosition(608400, 1267200);\noDrawing.SetSize(300 * 36000, 130 * 36000);\noSlide.AddObject(oDrawing);\nvar aDrawings = oSlide.GetAllDrawings();\nvar oPlaceholder = Api.CreatePlaceholder(\"chart\");\naDrawings[0].SetPlaceholder(oPlaceholder);\n```",
        "memberof": "ApiSlide",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Drawing>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "Drawing",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetAllDrawings",
        "longname": "ApiSlide#GetAllDrawings",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3194,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiSlide/Methods/GetAllDrawings.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns an array with all the shape objects from the slide.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {ApiShape[]} \r\n     * @see office-js-api/Examples/{Editor}/ApiSlide/Methods/GetAllShapes.js\r\n\t */",
        "description": "Returns an array with all the shape objects from the slide.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\noSlide.AddObject(oShape);\nvar aShapes = oSlide.GetAllShapes();\naShapes[0].SetSize(150 * 36000, 65 * 36000);\n```",
        "memberof": "ApiSlide",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ApiShape>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiShape",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetAllShapes",
        "longname": "ApiSlide#GetAllShapes",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3209,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiSlide/Methods/GetAllShapes.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns an array with all the image objects from the slide.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {ApiImage[]} \r\n     * @see office-js-api/Examples/{Editor}/ApiSlide/Methods/GetAllImages.js\r\n\t */",
        "description": "Returns an array with all the image objects from the slide.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oImage = Api.CreateImage(\"https://api.onlyoffice.com/content/img/docbuilder/examples/coordinate_aspects.png\", 60 * 36000, 35 * 36000);\noSlide.AddObject(oImage);\nvar aImages = oSlide.GetAllImages();\nvar sType = aImages[0].GetClassType();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Class type = \" + sType);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiSlide",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ApiImage>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiImage",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetAllImages",
        "longname": "ApiSlide#GetAllImages",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3224,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiSlide/Methods/GetAllImages.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns an array with all the chart objects from the slide.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {ApiChart[]} \r\n     * @see office-js-api/Examples/{Editor}/ApiSlide/Methods/GetAllCharts.js\r\n\t */",
        "description": "Returns an array with all the chart objects from the slide.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oChart = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noChart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noChart.SetHorAxisTitle(\"Year\", 11);\noChart.SetLegendPos(\"bottom\");\noChart.SetShowDataLabels(false, false, true, false);\noChart.SetTitle(\"Financial Overview\", 13);\noChart.SetSize(300 * 36000, 130 * 36000);\noChart.SetPosition(608400, 1267200);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noChart.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noChart.SetSeriesFill(oFill, 1, false);\noSlide.AddObject(oChart);\nvar aCharts = oSlide.GetAllCharts();\nvar oStroke = Api.CreateStroke(1 * 150, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\naCharts[0].SetMinorHorizontalGridlines(oStroke);\n```",
        "memberof": "ApiSlide",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ApiChart>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiChart",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetAllCharts",
        "longname": "ApiSlide#GetAllCharts",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3238,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiSlide/Methods/GetAllCharts.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns an array with all the OLE objects from the slide.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {ApiOleObject[]} \r\n     * @see office-js-api/Examples/{Editor}/ApiSlide/Methods/GetAllOleObjects.js\r\n\t */",
        "description": "Returns an array with all the OLE objects from the slide.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oOleObject = Api.CreateOleObject(\"https://i.ytimg.com/vi_webp/SKGz4pmnpgY/sddefault.webp\", 130 * 36000, 90 * 36000, \"https://youtu.be/SKGz4pmnpgY\", \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\");\noOleObject.SetSize(200 * 36000, 130 * 36000);\noOleObject.SetPosition(70 * 36000, 30 * 36000);\noSlide.AddObject(oOleObject);\nvar aOleObjects = oSlide.GetAllOleObjects();\nvar sAppId = aOleObjects[0].GetApplicationId();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateLinearGradientFill([oGs1, oGs2], 5400000);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oDrawing = Api.CreateShape(\"rect\", 300 * 36000, 15 * 36000, oFill, oStroke);\noDrawing.SetPosition(20 * 36000, 170 * 36000);\nvar oDocContent = oDrawing.GetContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.AddText(\"The application ID for the current OLE object: \" + sAppId);\noSlide.AddObject(oDrawing);\n```",
        "memberof": "ApiSlide",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ApiOleObject>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiOleObject",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetAllOleObjects",
        "longname": "ApiSlide#GetAllOleObjects",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3252,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiSlide/Methods/GetAllOleObjects.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Converts the ApiSlide object into the JSON object.\r\n\t * @memberof ApiSlide\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {bool} [bWriteLayout=false] - Specifies if the slide layout will be written to the JSON object or not.\r\n     * @param {bool} [bWriteMaster=false] - Specifies if the slide master will be written to the JSON object or not (bWriteMaster is false if bWriteLayout === false).\r\n     * @param {bool} [bWriteAllMasLayouts=false] - Specifies if all child layouts from the slide master will be written to the JSON object or not.\r\n\t * @param {bool} [bWriteTableStyles=false] - Specifies whether to write used table styles to the JSON object (true) or not (false).\r\n\t * @returns {JSON}\r\n\t * @see office-js-api/Examples/{Editor}/ApiSlide/Methods/ToJSON.js\r\n\t */",
        "description": "Converts the ApiSlide object into the JSON object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar json = oSlide.ToJSON(true, true, true, true);\nvar oSlideFromJSON = Api.FromJSON(json);\noPresentation.AddSlide(oSlideFromJSON);\nvar sType = oSlideFromJSON.GetClassType();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oDrawing = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noDrawing.SetPosition(608400, 1267200);\noDrawing.SetSize(300 * 36000, 130 * 36000);\noSlide.AddObject(oDrawing);\nvar oDocContent = oDrawing.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.AddText(\"Class type = \" + sType);\n```",
        "memberof": "ApiSlide",
        "params": [
            {
                "type": {
                    "names": [
                        "bool"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "bool"
                    }
                },
                "name": "bWriteLayout",
                "description": "Specifies if the slide layout will be written to the JSON object or not.",
                "optional": true,
                "defaultvalue": false
            },
            {
                "type": {
                    "names": [
                        "bool"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "bool"
                    }
                },
                "name": "bWriteMaster",
                "description": "Specifies if the slide master will be written to the JSON object or not (bWriteMaster is false if bWriteLayout === false).",
                "optional": true,
                "defaultvalue": false
            },
            {
                "type": {
                    "names": [
                        "bool"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "bool"
                    }
                },
                "name": "bWriteAllMasLayouts",
                "description": "Specifies if all child layouts from the slide master will be written to the JSON object or not.",
                "optional": true,
                "defaultvalue": false
            },
            {
                "type": {
                    "names": [
                        "bool"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "bool"
                    }
                },
                "name": "bWriteTableStyles",
                "description": "Specifies whether to write used table styles to the JSON object (true) or not (false).",
                "optional": true,
                "defaultvalue": false
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "JSON"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "JSON"
                    }
                }
            }
        ],
        "name": "ToJSON",
        "longname": "ApiSlide#ToJSON",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3269,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiSlide/Methods/ToJSON.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Gets drawings by placeholder type.\r\n\t * @memberof ApiSlide\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {PlaceholderType} sType - placeholders type\r\n\t * @returns {Drawing[]}\r\n\t * @see office-js-api/Examples/{Editor}/ApiSlide/Methods/GetDrawingsByPlaceholderType.js\r\n\t */",
        "description": "Gets drawings by placeholder type.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nlet oPresentation = Api.GetPresentation();\nlet oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nlet oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nlet oPlaceholder = Api.CreatePlaceholder(\"chart\");\noShape.SetPlaceholder(oPlaceholder);\noSlide.AddObject(oShape);\nlet aDrawingsWithPh = oSlide.GetDrawingsByPlaceholderType(\"chart\");\nfor (let i = 0; i < aDrawingsWithPh.length; i++) {\n    aDrawingsWithPh[i].Delete();\n}\n\n```",
        "memberof": "ApiSlide",
        "params": [
            {
                "type": {
                    "names": [
                        "PlaceholderType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PlaceholderType"
                    }
                },
                "name": "sType",
                "description": "placeholders type",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Drawing>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "Drawing",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetDrawingsByPlaceholderType",
        "longname": "ApiSlide#GetDrawingsByPlaceholderType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3285,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiSlide/Methods/GetDrawingsByPlaceholderType.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns the type of the ApiDrawing class.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {\"drawing\"}\r\n     * @see office-js-api/Examples/{Editor}/ApiDrawing/Methods/GetClassType.js\r\n\t */",
        "description": "Returns the type of the ApiDrawing class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oDrawing = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noDrawing.SetPosition(608400, 1267200);\noDrawing.SetSize(300 * 36000, 130 * 36000);\noSlide.AddObject(oDrawing);\nvar aDrawings = oSlide.GetAllDrawings();\nvar sType = aDrawings[0].GetClassType();\nvar oDocContent = oDrawing.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Class Type = \" + sType);\n```",
        "memberof": "ApiDrawing",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"drawing\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"drawing\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiDrawing#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3306,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiDrawing/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\r\n     * Sets the size of the object (image, shape, chart) bounding box.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {EMU} nWidth - The object width measured in English measure units.\r\n     * @param {EMU} nHeight - The object height measured in English measure units.\r\n     * @see office-js-api/Examples/{Editor}/ApiDrawing/Methods/SetSize.js\r\n\t */",
        "description": "Sets the size of the object (image, shape, chart) bounding box.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\noDocContent.RemoveAllElements();\nvar oParagraph = Api.CreateParagraph();\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"This is an example of a paragraph inside a shape. Nothing special.\");\noDocContent.Push(oParagraph);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiDrawing",
        "params": [
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nWidth",
                "description": "The object width measured in English measure units.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nHeight",
                "description": "The object height measured in English measure units.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetSize",
        "longname": "ApiDrawing#SetSize",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3317,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiDrawing/Methods/SetSize.js"
        ]
    },
    {
        "comment": "/**\r\n     * Sets the position of the drawing on the slide.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {EMU} nPosX - The distance from the left side of the slide to the left side of the drawing measured in English measure units.\r\n     * @param {EMU} nPosY - The distance from the top side of the slide to the upper side of the drawing measured in English measure units.\r\n     * @see office-js-api/Examples/{Editor}/ApiDrawing/Methods/SetPosition.js\r\n\t */",
        "description": "Sets the position of the drawing on the slide.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oDocContent = oShape.GetDocContent();\noDocContent.RemoveAllElements();\nvar oParagraph = Api.CreateParagraph();\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"This is an example of a paragraph inside a shape. Nothing special.\");\noDocContent.Push(oParagraph);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiDrawing",
        "params": [
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nPosX",
                "description": "The distance from the left side of the slide to the left side of the drawing measured in English measure units.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nPosY",
                "description": "The distance from the top side of the slide to the upper side of the drawing measured in English measure units.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetPosition",
        "longname": "ApiDrawing#SetPosition",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3335,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiDrawing/Methods/SetPosition.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns the drawing parent object.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {ApiSlide | ApiLayout | ApiMaster | null}\r\n     * @see office-js-api/Examples/{Editor}/ApiDrawing/Methods/GetParent.js\r\n\t */",
        "description": "Returns the drawing parent object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\noSlide.RemoveAllObjects();\noSlide.AddObject(oShape);\nvar oParent = oShape.GetParent();\nvar sType = oParent.GetClassType();\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Class type of the shape parent = \" + sType);\n```",
        "memberof": "ApiDrawing",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiSlide",
                        "ApiLayout",
                        "ApiMaster",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiSlide"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiLayout"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiMaster"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetParent",
        "longname": "ApiDrawing#GetParent",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3352,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiDrawing/Methods/GetParent.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns the drawing parent slide.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {ApiSlide | null} - return null if parent ins't a slide.\r\n     * @see office-js-api/Examples/{Editor}/ApiDrawing/Methods/GetParentSlide.js\r\n\t */",
        "description": "Returns the drawing parent slide.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\noSlide.RemoveAllObjects();\noSlide.AddObject(oShape);\nvar oParent = oShape.GetParentSlide();\nvar sType = oParent.GetClassType();\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Class type of the shape parent = \" + sType);\n```",
        "memberof": "ApiDrawing",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiSlide",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiSlide"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetParentSlide",
        "longname": "ApiDrawing#GetParentSlide",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3376,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiDrawing/Methods/GetParentSlide.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns the drawing parent slide layout.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {ApiLayout | null} - return null if parent ins't a slide layout.\r\n     * @see office-js-api/Examples/{Editor}/ApiDrawing/Methods/GetParentLayout.js\r\n\t */",
        "description": "Returns the drawing parent slide layout.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oLayout = oMaster.GetLayout(0);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\noLayout.AddObject(oShape);\nvar oParent = oShape.GetParentLayout();\nvar sType = oParent.GetClassType();\noSlide.RemoveAllObjects();\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Class type of the shape parent = \" + sType);\n```",
        "memberof": "ApiDrawing",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiLayout",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiLayout"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetParentLayout",
        "longname": "ApiDrawing#GetParentLayout",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3392,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiDrawing/Methods/GetParentLayout.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns the drawing parent slide master.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {ApiMaster | null} - return null if parent ins't a slide master.\r\n     * @see office-js-api/Examples/{Editor}/ApiDrawing/Methods/GetParentMaster.js\r\n\t */",
        "description": "Returns the drawing parent slide master.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oMaster = oPresentation.GetMaster(0);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\noMaster.AddObject(oShape);\nvar oParent = oShape.GetParentMaster();\nvar sType = oParent.GetClassType();\noSlide.RemoveAllObjects();\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Class type of the shape parent = \" + sType);\n```",
        "memberof": "ApiDrawing",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiMaster",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiMaster"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetParentMaster",
        "longname": "ApiDrawing#GetParentMaster",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3408,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiDrawing/Methods/GetParentMaster.js"
        ]
    },
    {
        "comment": "/**\r\n     * Creates a copy of the specified drawing object.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {ApiDrawing} - return null if drawing doesn't exist.\r\n     * @see office-js-api/Examples/{Editor}/ApiDrawing/Methods/Copy.js\r\n\t */",
        "description": "Creates a copy of the specified drawing object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\noSlide.AddObject(oShape);\nvar oCopyShape = oShape.Copy();\noSlide = Api.CreateSlide();\noPresentation.AddSlide(oSlide);\noSlide.AddObject(oCopyShape);\n```",
        "memberof": "ApiDrawing",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiDrawing"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiDrawing"
                    }
                }
            }
        ],
        "name": "Copy",
        "longname": "ApiDrawing#Copy",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3424,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiDrawing/Methods/Copy.js"
        ]
    },
    {
        "comment": "/**\r\n     * Deletes the specified drawing object from the parent.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {boolean} - false if drawing doesn't exist or drawing hasn't a parent.\r\n     * @see office-js-api/Examples/{Editor}/ApiDrawing/Methods/Delete.js\r\n\t */",
        "description": "Deletes the specified drawing object from the parent.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateLinearGradientFill([oGs1, oGs2], 5400000);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oDrawing1 = Api.CreateShape(\"rect\", 3212465, 963295, oFill, oStroke);\noSlide.AddObject(oDrawing1);\nvar oDrawing2 = Api.CreateChart(\"bar3D\", [\n\t[200, 240, 280],\n\t[250, 260, 280]\n], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\noDrawing2.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\noDrawing2.SetHorAxisTitle(\"Year\", 11);\noDrawing2.SetLegendPos(\"bottom\");\noDrawing2.SetShowDataLabels(false, false, true, false);\noDrawing2.SetTitle(\"Financial Overview\", 13);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noDrawing2.SetSeriesFill(oFill, 0, false);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\noDrawing2.SetSeriesFill(oFill, 1, false);\noSlide.AddObject(oDrawing2);\noDrawing2.Delete();\nvar oDocContent = oDrawing1.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"The chart was deleted from this slide.\");\n```",
        "memberof": "ApiDrawing",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "Delete",
        "longname": "ApiDrawing#Delete",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3438,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiDrawing/Methods/Delete.js"
        ]
    },
    {
        "comment": "/**\r\n     * Sets the specified placeholder to the current drawing object.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {ApiPlaceholder} oPlaceholder - Placeholder object.\r\n     * @returns {boolean} - returns false if parameter isn't a placeholder.\r\n     * @see office-js-api/Examples/{Editor}/ApiDrawing/Methods/SetPlaceholder.js\r\n\t */",
        "description": "Sets the specified placeholder to the current drawing object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oPlaceholder = Api.CreatePlaceholder(\"picture\");\noShape.SetPlaceholder(oPlaceholder);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiDrawing",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiPlaceholder"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiPlaceholder"
                    }
                },
                "name": "oPlaceholder",
                "description": "Placeholder object.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetPlaceholder",
        "longname": "ApiDrawing#SetPlaceholder",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3464,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiDrawing/Methods/SetPlaceholder.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns a placeholder from the current drawing object.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {ApiPlaceholder | null} - returns null if placeholder doesn't exist.\r\n     * @see office-js-api/Examples/{Editor}/ApiDrawing/Methods/GetPlaceholder.js\r\n\t */",
        "description": "Returns a placeholder from the current drawing object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetSize(300 * 36000, 130 * 36000);\nvar oPlaceholder = Api.CreatePlaceholder(\"chart\");\noShape.SetPlaceholder(oPlaceholder);\noSlide.AddObject(oShape);\noPlaceholder = oShape.GetPlaceholder();\nvar sType = oPlaceholder.GetClassType();\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Class type of the element from the shape = \" + sType);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiDrawing",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiPlaceholder",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiPlaceholder"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetPlaceholder",
        "longname": "ApiDrawing#GetPlaceholder",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3522,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiDrawing/Methods/GetPlaceholder.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns the lock value for the specified lock type of the current drawing.\r\n     * @typeofeditors [\"CPE\"]\r\n\t * @param {DrawingLockType} sType - Lock type in the string format.\r\n     * @returns {bool}\r\n     * @see office-js-api/Examples/{Editor}/ApiDrawing/Methods/GetLockValue.js\r\n\t */",
        "description": "Returns the lock value for the specified lock type of the current drawing.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetLockValue(\"noSelect\", true);\nvar oDocContent = oShape.GetContent();\nvar bLockValue = oShape.GetLockValue(\"noSelect\");\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.AddText(\"This drawing cannot be selected: \" + bLockValue);\noDocContent.AddElement(0, oParagraph);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiDrawing",
        "params": [
            {
                "type": {
                    "names": [
                        "DrawingLockType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "DrawingLockType"
                    }
                },
                "name": "sType",
                "description": "Lock type in the string format.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "bool"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "bool"
                    }
                }
            }
        ],
        "name": "GetLockValue",
        "longname": "ApiDrawing#GetLockValue",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3585,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiDrawing/Methods/GetLockValue.js"
        ]
    },
    {
        "comment": "/**\r\n     * Sets the lock value to the specified lock type of the current drawing.\r\n     * @typeofeditors [\"CPE\"]\r\n\t * @param {DrawingLockType} sType - Lock type in the string format.\r\n     * @param {bool} bValue - Specifies if the specified lock is applied to the current drawing.\r\n\t * @returns {bool}\r\n     * @see office-js-api/Examples/{Editor}/ApiDrawing/Methods/SetLockValue.js\r\n\t */",
        "description": "Sets the lock value to the specified lock type of the current drawing.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noShape.SetLockValue(\"noSelect\", true);\nvar oDocContent = oShape.GetContent();\nvar bLockValue = oShape.GetLockValue(\"noSelect\");\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.AddText(\"This drawing cannot be selected: \" + bLockValue);\noDocContent.AddElement(0, oParagraph);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiDrawing",
        "params": [
            {
                "type": {
                    "names": [
                        "DrawingLockType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "DrawingLockType"
                    }
                },
                "name": "sType",
                "description": "Lock type in the string format.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "bool"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "bool"
                    }
                },
                "name": "bValue",
                "description": "Specifies if the specified lock is applied to the current drawing.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "bool"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "bool"
                    }
                }
            }
        ],
        "name": "SetLockValue",
        "longname": "ApiDrawing#SetLockValue",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3606,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiDrawing/Methods/SetLockValue.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Converts the ApiDrawing object into the JSON object.\r\n\t * @memberof ApiDrawing\r\n\t * @typeofeditors [\"CPE\"]\r\n\t * @returns {JSON}\r\n\t * @see office-js-api/Examples/{Editor}/ApiDrawing/Methods/ToJSON.js\r\n\t */",
        "description": "Converts the ApiDrawing object into the JSON object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oDrawing = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\nvar json = oDrawing.ToJSON();\nvar oDrawingFromJSON = Api.FromJSON(json);\noDrawingFromJSON.SetPosition(608400, 1267200);\noDrawingFromJSON.SetSize(300 * 36000, 130 * 36000);\noSlide.AddObject(oDrawingFromJSON);\n```",
        "memberof": "ApiDrawing",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "JSON"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "JSON"
                    }
                }
            }
        ],
        "name": "ToJSON",
        "longname": "ApiDrawing#ToJSON",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3629,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiDrawing/Methods/ToJSON.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Selects the current graphic object.\r\n\t * @memberof ApiDrawing\r\n\t * @typeofeditors [\"CPE\"]\r\n\t * @see office-js-api/Examples/{Editor}/ApiDrawing/Methods/Select.js\r\n\t */",
        "description": "Selects the current graphic object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\nvar aAllDrawings = oSlide.GetAllDrawings();\nif(aAllDrawings.length > 0)\n{\n\tvar oDrawing = aAllDrawings[0];\n\toDrawing.Select();\n}\n```",
        "memberof": "ApiDrawing",
        "params": null,
        "returns": null,
        "name": "Select",
        "longname": "ApiDrawing#Select",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3641,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiDrawing/Methods/Select.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns the type of the ApiImage class.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {\"image\"}\r\n     * @see office-js-api/Examples/{Editor}/ApiImage/Methods/GetClassType.js\r\n\t */",
        "description": "Returns the type of the ApiImage class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oImage = Api.CreateImage(\"https://api.onlyoffice.com/content/img/docbuilder/examples/step2_1.png\", 100 * 36000, 50 * 36000);\noSlide.AddObject(oImage);\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar sClassType = oImage.GetClassType();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"Class Type = \" + sClassType);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiImage",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"image\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"image\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiImage#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3662,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiImage/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns the type of the ApiShape class.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {\"shape\"}\r\n     * @see office-js-api/Examples/{Editor}/ApiShape/Methods/GetClassType.js\r\n\t */",
        "description": "Returns the type of the ApiShape class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\noPresentation.SetSizes(254 * 36000, 190 * 36000);\nvar oSlide = oPresentation.GetCurrentSlide();\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartOnlineStorage\", 200 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar sClassType = oShape.GetClassType();\noParagraph.AddText(\"Class Type = \" + sClassType);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiShape",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"shape\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"shape\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiShape#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3679,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiShape/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\r\n     * Deprecated in 6.2.\r\n     * Returns the shape inner contents where a paragraph or text runs can be inserted.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {?ApiDocumentContent}\r\n     * @see office-js-api/Examples/{Editor}/ApiShape/Methods/GetDocContent.js\r\n\t */",
        "description": "Deprecated in 6.2.\rReturns the shape inner contents where a paragraph or text runs can be inserted.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\noPresentation.SetSizes(254 * 36000, 190 * 36000);\nvar oSlide = oPresentation.GetCurrentSlide();\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartOnlineStorage\", 200 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\noShape.SetVerticalTextAlign(\"bottom\");\nvar oParagraph = Api.CreateParagraph();\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"We removed all elements from the shape and added a new paragraph inside it \");\noParagraph.AddText(\"aligning it vertically by the bottom.\");\noDocContent.Push(oParagraph);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiShape",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiDocumentContent"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiDocumentContent",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetDocContent",
        "longname": "ApiShape#GetDocContent",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3692,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiShape/Methods/GetDocContent.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns the shape inner contents where a paragraph or text runs can be inserted.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {?ApiDocumentContent}\r\n     * @see office-js-api/Examples/{Editor}/ApiShape/Methods/GetContent.js\r\n\t */",
        "description": "Returns the shape inner contents where a paragraph or text runs can be inserted.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\noPresentation.SetSizes(254 * 36000, 190 * 36000);\nvar oSlide = oPresentation.GetCurrentSlide();\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartOnlineStorage\", 200 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetContent();\noShape.SetVerticalTextAlign(\"bottom\");\nvar oParagraph = Api.CreateParagraph();\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"We removed all elements from the shape and added a new paragraph inside it \");\noParagraph.AddText(\"aligning it vertically by the bottom.\");\noDocContent.Push(oParagraph);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiShape",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiDocumentContent"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiDocumentContent",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetContent",
        "longname": "ApiShape#GetContent",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3708,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiShape/Methods/GetContent.js"
        ]
    },
    {
        "comment": "/**\r\n     * Sets the vertical alignment to the shape content where a paragraph or text runs can be inserted.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {VerticalTextAlign} VerticalAlign - The type of the vertical alignment for the shape inner contents.\r\n     * @see office-js-api/Examples/{Editor}/ApiShape/Methods/SetVerticalTextAlign.js\r\n\t */",
        "description": "Sets the vertical alignment to the shape content where a paragraph or text runs can be inserted.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\noPresentation.SetSizes(254 * 36000, 190 * 36000);\nvar oSlide = oPresentation.GetCurrentSlide();\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartOnlineStorage\", 200 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\noShape.SetVerticalTextAlign(\"bottom\");\nvar oParagraph = Api.CreateParagraph();\noParagraph.SetJc(\"left\");\noParagraph.AddText(\"We removed all elements from the shape and added a new paragraph inside it \");\noParagraph.AddText(\"aligning it vertically by the bottom.\");\noDocContent.Push(oParagraph);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiShape",
        "params": [
            {
                "type": {
                    "names": [
                        "VerticalTextAlign"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "VerticalTextAlign"
                    }
                },
                "name": "VerticalAlign",
                "description": "The type of the vertical alignment for the shape inner contents.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetVerticalTextAlign",
        "longname": "ApiShape#SetVerticalTextAlign",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3724,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiShape/Methods/SetVerticalTextAlign.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns the type of the ApiTable object.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {\"table\"}\r\n     * @see office-js-api/Examples/{Editor}/ApiTable/Methods/GetClassType.js\r\n\t */",
        "description": "Returns the type of the ApiTable object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oTable = Api.CreateTable(2, 4);\nvar oRow = oTable.GetRow(0);\nvar oCell = oRow.GetCell(0);\nvar oContent = oCell.GetContent();\nvar oParagraph = Api.CreateParagraph();\nvar sClassType = oTable.GetClassType();\noParagraph.AddText(\"Class type: \" + sClassType);\noContent.Push(oParagraph);\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\noSlide.AddObject(oTable);\n```",
        "memberof": "ApiTable",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"table\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"table\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiTable#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3850,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTable/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns a row by its index.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param nIndex {number} - The row index (position) in the table.\r\n     * @returns {?ApiTableRow}\r\n     * @see office-js-api/Examples/{Editor}/ApiTable/Methods/GetRow.js\r\n\t */",
        "description": "Returns a row by its index.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oTable = Api.CreateTable(2, 4);\noTable.AddRow(1, true);\nvar oRow = oTable.GetRow(0);\nvar oCell = oRow.GetCell(0);\nvar oContent = oCell.GetContent();\nvar oParagraph = Api.CreateParagraph();\noParagraph.AddText(\"This is a sample text in the first row.\");\noContent.Push(oParagraph);\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\noSlide.AddObject(oTable);\n```",
        "memberof": "ApiTable",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nIndex",
                "description": "The row index (position) in the table.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTableRow"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTableRow",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetRow",
        "longname": "ApiTable#GetRow",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3862,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTable/Methods/GetRow.js"
        ]
    },
    {
        "comment": "/**\r\n     * Merges an array of cells. If merge is successful, it will return merged cell, otherwise \"null\".\r\n     * <b>Warning</b>: The number of cells in any row and the number of rows in the current table may be changed.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {ApiTableCell[]} aCells - The array of cells.\r\n     * @returns {?ApiTableCell}\r\n     * @see office-js-api/Examples/{Editor}/ApiTable/Methods/MergeCells.js\r\n\t */",
        "description": "Merges an array of cells. If merge is successful, it will return merged cell, otherwise \"null\".\r<b>Warning</b>: The number of cells in any row and the number of rows in the current table may be changed.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oTable = Api.CreateTable(2, 4);\nvar oRow = oTable.GetRow(0);\nvar oCell1 = oRow.GetCell(0);\nvar oCell2 = oRow.GetCell(1);\noTable.MergeCells([oCell1, oCell2]);\nvar oCell = oRow.GetCell(0);\nvar oContent = oCell.GetContent();\nvar oParagraph = Api.CreateParagraph();\noParagraph.AddText(\"This cell was formed by merging two cells.\");\noContent.Push(oParagraph);\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\noSlide.AddObject(oTable);\n```",
        "memberof": "ApiTable",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<ApiTableCell>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiTableCell",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "aCells",
                "description": "The array of cells.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTableCell"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTableCell",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "MergeCells",
        "longname": "ApiTable#MergeCells",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3881,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTable/Methods/MergeCells.js"
        ]
    },
    {
        "comment": "/**\r\n     * Specifies the components of the conditional formatting of the referenced table style (if one exists)\r\n     * which shall be applied to the set of table rows with the current table-level property exceptions. A table style\r\n     * can specify up to six different optional conditional formats [Example: Different formatting for first column],\r\n     * which then can be applied or omitted from individual table rows in the parent table.\r\n     *\r\n     * The default setting is to apply the row and column banding formatting, but not the first row, last row, first\r\n     * column, or last column formatting.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {boolean} isFirstColumn - Specifies that the first column conditional formatting shall be applied to the\r\n     *     table.\r\n     * @param {boolean} isFirstRow - Specifies that the first row conditional formatting shall be applied to the table.\r\n     * @param {boolean} isLastColumn - Specifies that the last column conditional formatting shall be applied to the\r\n     *     table.\r\n     * @param {boolean} isLastRow - Specifies that the last row conditional formatting shall be applied to the table.\r\n     * @param {boolean} isHorBand - Specifies that the horizontal banding conditional formatting shall not be applied\r\n     *     to the table.\r\n     * @param {boolean} isVerBand - Specifies that the vertical banding conditional formatting shall not be applied to\r\n     *     the table.\r\n     * @see office-js-api/Examples/{Editor}/ApiTable/Methods/SetTableLook.js\r\n\t */",
        "description": "Specifies the components of the conditional formatting of the referenced table style (if one exists)\rwhich shall be applied to the set of table rows with the current table-level property exceptions. A table style\rcan specify up to six different optional conditional formats [Example: Different formatting for first column],\rwhich then can be applied or omitted from individual table rows in the parent table.\r\rThe default setting is to apply the row and column banding formatting, but not the first row, last row, first\rcolumn, or last column formatting.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oTable = Api.CreateTable(2, 4);\noTable.SetTableLook(true, false, false, false, false, true);\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\noSlide.AddObject(oTable);\n```",
        "memberof": "ApiTable",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isFirstColumn",
                "description": "Specifies that the first column conditional formatting shall be applied to the\r    table.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isFirstRow",
                "description": "Specifies that the first row conditional formatting shall be applied to the table.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isLastColumn",
                "description": "Specifies that the last column conditional formatting shall be applied to the\r    table.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isLastRow",
                "description": "Specifies that the last row conditional formatting shall be applied to the table.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isHorBand",
                "description": "Specifies that the horizontal banding conditional formatting shall not be applied\r    to the table.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isVerBand",
                "description": "Specifies that the vertical banding conditional formatting shall not be applied to\r    the table.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetTableLook",
        "longname": "ApiTable#SetTableLook",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3960,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTable/Methods/SetTableLook.js"
        ]
    },
    {
        "comment": "/**\r\n     * Adds a new row to the current table.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {ApiTableCell} [oCell] - If not specified, a new row will be added to the end of the table.\r\n     * @param {boolean} [isBefore=false] - Adds a new row before or after the specified cell. If no cell is specified,\r\n     * then this parameter will be ignored.\r\n     * @returns {ApiTableRow}\r\n     * @see office-js-api/Examples/{Editor}/ApiTable/Methods/AddRow.js\r\n\t */",
        "description": "Adds a new row to the current table.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oTable = Api.CreateTable(2, 4);\noTable.AddRow(1, true);\nvar oRow = oTable.GetRow(1);\nvar oCell = oRow.GetCell(0);\nvar oContent = oCell.GetContent();\nvar oParagraph = Api.CreateParagraph();\noParagraph.AddText(\"New row was added here.\");\noContent.Push(oParagraph);\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\noSlide.AddObject(oTable);\n```",
        "memberof": "ApiTable",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiTableCell"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTableCell"
                    }
                },
                "name": "oCell",
                "description": "If not specified, a new row will be added to the end of the table.",
                "optional": true,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isBefore",
                "description": "Adds a new row before or after the specified cell. If no cell is specified,\rthen this parameter will be ignored.",
                "optional": true,
                "defaultvalue": false
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTableRow"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTableRow"
                    }
                }
            }
        ],
        "name": "AddRow",
        "longname": "ApiTable#AddRow",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3979,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTable/Methods/AddRow.js"
        ]
    },
    {
        "comment": "/**\r\n     * Adds a new column to the end of the current table.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {ApiTableCell} [oCell] - If not specified, a new column will be added to the end of the table.\r\n     * @param {boolean} [isBefore=false] - Add a new column before or after the specified cell. If no cell is specified,\r\n     * then this parameter will be ignored.\r\n     * @see office-js-api/Examples/{Editor}/ApiTable/Methods/AddColumn.js\r\n\t */",
        "description": "Adds a new column to the end of the current table.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\noPresentation.SetSizes(300 * 36000, 190 * 36000);\nvar oTable = Api.CreateTable(2, 4);\noTable.SetPosition(0 * 36000, 60 * 36000);\noTable.AddColumn(1, true);\nvar oRow = oTable.GetRow(0);\nvar oCell = oRow.GetCell(1);\nvar oContent = oCell.GetContent();\nvar oParagraph = Api.CreateParagraph();\noParagraph.AddText(\"New column was added here.\");\noContent.Push(oParagraph);\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\noSlide.AddObject(oTable);\n```",
        "memberof": "ApiTable",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiTableCell"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTableCell"
                    }
                },
                "name": "oCell",
                "description": "If not specified, a new column will be added to the end of the table.",
                "optional": true,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isBefore",
                "description": "Add a new column before or after the specified cell. If no cell is specified,\rthen this parameter will be ignored.",
                "optional": true,
                "defaultvalue": false
            }
        ],
        "returns": null,
        "name": "AddColumn",
        "longname": "ApiTable#AddColumn",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4010,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTable/Methods/AddColumn.js"
        ]
    },
    {
        "comment": "/**\r\n     * Removes a table row with the specified cell.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {ApiTableCell} oCell - The table cell from the row which will be removed.\r\n     * @returns {boolean} - defines if the table is empty after removing or not.\r\n     * @see office-js-api/Examples/{Editor}/ApiTable/Methods/RemoveRow.js\r\n\t */",
        "description": "Removes a table row with the specified cell.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oTable = Api.CreateTable(2, 4);\nvar oRow = oTable.GetRow(0);\nvar oCell = oRow.GetCell(0);\noTable.RemoveRow(oCell);\noRow = oTable.GetRow(0);\noCell = oRow.GetCell(0);\nvar oContent = oCell.GetContent();\nvar oParagraph = Api.CreateParagraph();\noParagraph.AddText(\"The first row was removed.\");\noContent.Push(oParagraph);\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\noSlide.AddObject(oTable);\n```",
        "memberof": "ApiTable",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiTableCell"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTableCell"
                    }
                },
                "name": "oCell",
                "description": "The table cell from the row which will be removed.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "RemoveRow",
        "longname": "ApiTable#RemoveRow",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4036,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTable/Methods/RemoveRow.js"
        ]
    },
    {
        "comment": "/**\r\n     * Removes a table column with the specified cell.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {ApiTableCell} oCell - The table cell from the column which will be removed.\r\n     * @returns {boolean} - defines if the table is empty after removing or not.\r\n     * @see office-js-api/Examples/{Editor}/ApiTable/Methods/RemoveColumn.js\r\n\t */",
        "description": "Removes a table column with the specified cell.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oTable = Api.CreateTable(2, 4);\nvar oRow = oTable.GetRow(0);\nvar oCell = oRow.GetCell(1);\noTable.RemoveColumn(oCell);\noCell = oRow.GetCell(0);\nvar oContent = oCell.GetContent();\nvar oParagraph = Api.CreateParagraph();\noParagraph.AddText(\"The second column was removed.\");\noContent.Push(oParagraph);\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\noSlide.AddObject(oTable);\n```",
        "memberof": "ApiTable",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiTableCell"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTableCell"
                    }
                },
                "name": "oCell",
                "description": "The table cell from the column which will be removed.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "RemoveColumn",
        "longname": "ApiTable#RemoveColumn",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4052,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTable/Methods/RemoveColumn.js"
        ]
    },
    {
        "comment": "/**\r\n     * Specifies the shading which shall be applied to the extents of the current table.\r\n     * @typeofeditors [\"CPE\"]\r\n\t * @param {ShdType | ApiFill} sType - The shading type applied to the contents of the current table. Can be ShdType or ApiFill.\r\n\t * @param {byte} r - Red color component value.\r\n\t * @param {byte} g - Green color component value.\r\n\t * @param {byte} b - Blue color component value.\r\n\t * @see office-js-api/Examples/{Editor}/ApiTable/Methods/SetShd.js\r\n\t */",
        "description": "Specifies the shading which shall be applied to the extents of the current table.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oTable = Api.CreateTable(2, 4);\noTable.SetShd(\"clear\", 255, 111, 61);\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\noSlide.AddObject(oTable);\n```",
        "memberof": "ApiTable",
        "params": [
            {
                "type": {
                    "names": [
                        "ShdType",
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ShdType"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiFill"
                            }
                        ]
                    }
                },
                "name": "sType",
                "description": "The shading type applied to the contents of the current table. Can be ShdType or ApiFill.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "byte"
                    }
                },
                "name": "r",
                "description": "Red color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "byte"
                    }
                },
                "name": "g",
                "description": "Green color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "byte"
                    }
                },
                "name": "b",
                "description": "Blue color component value.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetShd",
        "longname": "ApiTable#SetShd",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4071,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTable/Methods/SetShd.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Converts the ApiTable object into the JSON object.\r\n\t * @memberof ApiTable\r\n\t * @typeofeditors [\"CPE\"]\r\n     * @param {bool} [bWriteTableStyles=false] - Specifies whether to write used table styles to the JSON object (true) or not (false).\r\n\t * @returns {JSON}\r\n\t * @see office-js-api/Examples/{Editor}/ApiTable/Methods/ToJSON.js\r\n\t */",
        "description": "Converts the ApiTable object into the JSON object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oTable = Api.CreateTable(2, 4);\nvar json = oTable.ToJSON(true);\nvar oTableFromJSON = Api.FromJSON(json);\nvar sType = oTableFromJSON.GetClassType();\nvar oRow = oTableFromJSON.GetRow(0);\nvar oCell = oRow.GetCell(0);\nvar oContent = oCell.GetContent();\nvar oParagraph = Api.CreateParagraph();\noParagraph.AddText(\"Class type = \" + sType);\noContent.Push(oParagraph);\noSlide.AddObject(oTableFromJSON);\n```",
        "memberof": "ApiTable",
        "params": [
            {
                "type": {
                    "names": [
                        "bool"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "bool"
                    }
                },
                "name": "bWriteTableStyles",
                "description": "Specifies whether to write used table styles to the JSON object (true) or not (false).",
                "optional": true,
                "defaultvalue": false
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "JSON"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "JSON"
                    }
                }
            }
        ],
        "name": "ToJSON",
        "longname": "ApiTable#ToJSON",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4120,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTable/Methods/ToJSON.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns the type of the ApiTableRow class.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {\"tableRow\"}\r\n     * @see office-js-api/Examples/{Editor}/ApiTableRow/Methods/GetClassType.js\r\n\t */",
        "description": "Returns the type of the ApiTableRow class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oTable = Api.CreateTable(2, 4);\nvar oRow = oTable.GetRow(0);\nvar oCell = oRow.GetCell(0);\nvar oContent = oCell.GetContent();\nvar oParagraph = Api.CreateParagraph();\nvar sClassType = oRow.GetClassType();\noParagraph.AddText(\"Class type: \" + sClassType);\noContent.Push(oParagraph);\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\noSlide.AddObject(oTable);\n```",
        "memberof": "ApiTableRow",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"tableRow\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"tableRow\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiTableRow#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4140,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTableRow/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns a number of cells in the current row.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {number}\r\n     * @see office-js-api/Examples/{Editor}/ApiTableRow/Methods/GetCellsCount.js\r\n\t */",
        "description": "Returns a number of cells in the current row.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oTable = Api.CreateTable(2, 4);\nvar oRow = oTable.GetRow(0);\nvar nCellsCount = oRow.GetCellsCount();\nvar oCell = oRow.GetCell(0);\nvar oContent = oCell.GetContent();\nvar oParagraph = Api.CreateParagraph();\noParagraph.AddText(\"The number of cells in the row: \" + nCellsCount);\noContent.Push(oParagraph);\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\noSlide.AddObject(oTable);\n```",
        "memberof": "ApiTableRow",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GetCellsCount",
        "longname": "ApiTableRow#GetCellsCount",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4150,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTableRow/Methods/GetCellsCount.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns a cell by its position in the current row.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {number} nPos - The cell position in the table row.\r\n     * @returns {ApiTableCell}\r\n     * @see office-js-api/Examples/{Editor}/ApiTableRow/Methods/GetCell.js\r\n\t */",
        "description": "Returns a cell by its position in the current row.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oTable = Api.CreateTable(2, 4);\nvar oRow = oTable.GetRow(0);\nvar oCell = oRow.GetCell(0);\nvar oContent = oCell.GetContent();\nvar oParagraph = Api.CreateParagraph();\noParagraph.AddText(\"This is a sample text in the cell of the first row.\");\noContent.Push(oParagraph);\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\noSlide.AddObject(oTable);\n```",
        "memberof": "ApiTableRow",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nPos",
                "description": "The cell position in the table row.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTableCell"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTableCell"
                    }
                }
            }
        ],
        "name": "GetCell",
        "longname": "ApiTableRow#GetCell",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4161,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTableRow/Methods/GetCell.js"
        ]
    },
    {
        "comment": "/**\r\n     * Sets the height to the current table row.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {EMU} [nValue] - The row height in English measure units.\r\n     * @see office-js-api/Examples/{Editor}/ApiTableRow/Methods/SetHeight.js\r\n\t */",
        "description": "Sets the height to the current table row.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oTable = Api.CreateTable(2, 4);\nvar oRow = oTable.GetRow(0);\noRow.SetHeight(30 * 36000);\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\noSlide.AddObject(oTable);\n```",
        "memberof": "ApiTableRow",
        "params": [
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nValue",
                "description": "The row height in English measure units.",
                "optional": true,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetHeight",
        "longname": "ApiTableRow#SetHeight",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4176,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTableRow/Methods/SetHeight.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns the type of the ApiTableCell class.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {\"tableCell\"}\r\n     * @see office-js-api/Examples/{Editor}/ApiTableCell/Methods/GetClassType.js\r\n\t */",
        "description": "Returns the type of the ApiTableCell class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oTable = Api.CreateTable(2, 4);\nvar oRow = oTable.GetRow(0);\nvar oCell = oRow.GetCell(0);\nvar oContent = oCell.GetContent();\nvar oParagraph = Api.CreateParagraph();\nvar sClassType = oCell.GetClassType();\noParagraph.AddText(\"Class type: \" + sClassType);\noContent.Push(oParagraph);\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\noSlide.AddObject(oTable);\n```",
        "memberof": "ApiTableCell",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"tableCell\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"tableCell\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiTableCell#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4214,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTableCell/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\r\n     * Returns the current cell content.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @returns {ApiDocumentContent}\r\n     * @see office-js-api/Examples/{Editor}/ApiTableCell/Methods/GetContent.js\r\n\t */",
        "description": "Returns the current cell content.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oTable = Api.CreateTable(2, 4);\nvar oRow = oTable.GetRow(0);\nvar oCell = oRow.GetCell(0);\nvar oContent = oCell.GetContent();\nvar oParagraph = Api.CreateParagraph();\noParagraph.AddText(\"This is a sample text in the cell.\");\noContent.Push(oParagraph);\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\noSlide.AddObject(oTable);\n```",
        "memberof": "ApiTableCell",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiDocumentContent"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiDocumentContent"
                    }
                }
            }
        ],
        "name": "GetContent",
        "longname": "ApiTableCell#GetContent",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4225,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTableCell/Methods/GetContent.js"
        ]
    },
    {
        "comment": "/**\r\n     * Specifies the shading which shall be applied to the extents of the current table cell.\r\n     * @typeofeditors [\"CPE\"]\r\n\t * @param {ShdType | ApiFill} sType - The shading type applied to the contents of the current table. Can be ShdType or ApiFill.\r\n\t * @param {byte} r - Red color component value.\r\n\t * @param {byte} g - Green color component value.\r\n\t * @param {byte} b - Blue color component value.\r\n\t * @see office-js-api/Examples/{Editor}/ApiTableCell/Methods/SetShd.js\r\n\t */",
        "description": "Specifies the shading which shall be applied to the extents of the current table cell.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oTable = Api.CreateTable(2, 4);\nvar oRow = oTable.GetRow(0);\nvar oCell = oRow.GetCell(0);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noCell.SetShd(oFill);\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\noSlide.AddObject(oTable);\n```",
        "memberof": "ApiTableCell",
        "params": [
            {
                "type": {
                    "names": [
                        "ShdType",
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ShdType"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiFill"
                            }
                        ]
                    }
                },
                "name": "sType",
                "description": "The shading type applied to the contents of the current table. Can be ShdType or ApiFill.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "byte"
                    }
                },
                "name": "r",
                "description": "Red color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "byte"
                    }
                },
                "name": "g",
                "description": "Green color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "byte"
                    }
                },
                "name": "b",
                "description": "Blue color component value.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetShd",
        "longname": "ApiTableCell#SetShd",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4241,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTableCell/Methods/SetShd.js"
        ]
    },
    {
        "comment": "/**\r\n     * Specifies an amount of space which shall be left between the bottom extent of the cell contents and the border\r\n     * of a specific individual table cell within a table.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {?twips} nValue - If this value is <code>null</code>, then default table cell bottom margin shall be used,\r\n     * otherwise override the table cell bottom margin with specified value for the current cell.\r\n     * @see office-js-api/Examples/{Editor}/ApiTableCell/Methods/SetCellMarginBottom.js\r\n\t */",
        "description": "Specifies an amount of space which shall be left between the bottom extent of the cell contents and the border\rof a specific individual table cell within a table.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oTable = Api.CreateTable(2, 4);\nvar oRow = oTable.GetRow(0);\nvar oCell = oRow.GetCell(0);\nvar oContent = oCell.GetContent();\nvar oParagraph = Api.CreateParagraph();\noParagraph.AddText(\"This is just a sample text.\");\noContent.Push(oParagraph);\noCell.SetCellMarginBottom(600);\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\noSlide.AddObject(oTable);\n```",
        "memberof": "ApiTableCell",
        "params": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "twips",
                        "nullable": true
                    }
                },
                "name": "nValue",
                "description": "If this value is <code>null</code>, then default table cell bottom margin shall be used,\rotherwise override the table cell bottom margin with specified value for the current cell.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetCellMarginBottom",
        "longname": "ApiTableCell#SetCellMarginBottom",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4291,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTableCell/Methods/SetCellMarginBottom.js"
        ]
    },
    {
        "comment": "/**\r\n     * Specifies an amount of space which shall be left between the left extent of the current cell contents and the\r\n     * left edge border of a specific individual table cell within a table.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {?twips} nValue - If this value is <code>null</code>, then default table cell left margin shall be used,\r\n     * otherwise override the table cell left margin with specified value for the current cell.\r\n     * @see office-js-api/Examples/{Editor}/ApiTableCell/Methods/SetCellMarginLeft.js\r\n\t */",
        "description": "Specifies an amount of space which shall be left between the left extent of the current cell contents and the\rleft edge border of a specific individual table cell within a table.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oTable = Api.CreateTable(2, 4);\nvar oRow = oTable.GetRow(0);\nvar oCell = oRow.GetCell(0);\nvar oContent = oCell.GetContent();\nvar oParagraph = Api.CreateParagraph();\noParagraph.AddText(\"This is just a sample text.\");\noContent.Push(oParagraph);\noCell.SetCellMarginLeft(720);\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\noSlide.AddObject(oTable);\n```",
        "memberof": "ApiTableCell",
        "params": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "twips",
                        "nullable": true
                    }
                },
                "name": "nValue",
                "description": "If this value is <code>null</code>, then default table cell left margin shall be used,\rotherwise override the table cell left margin with specified value for the current cell.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetCellMarginLeft",
        "longname": "ApiTableCell#SetCellMarginLeft",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4319,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTableCell/Methods/SetCellMarginLeft.js"
        ]
    },
    {
        "comment": "/**\r\n     * Specifies an amount of space which shall be left between the right extent of the current cell contents and the\r\n     * right edge border of a specific individual table cell within a table.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {?twips} nValue - If this value is <code>null</code>, then default table cell right margin shall be used,\r\n     * otherwise override the table cell right margin with specified value for the current cell.\r\n     * @see office-js-api/Examples/{Editor}/ApiTableCell/Methods/SetCellMarginRight.js\r\n\t */",
        "description": "Specifies an amount of space which shall be left between the right extent of the current cell contents and the\rright edge border of a specific individual table cell within a table.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oTable = Api.CreateTable(2, 4);\nvar oRow = oTable.GetRow(0);\nvar oCell = oRow.GetCell(0);\nvar oContent = oCell.GetContent();\nvar oParagraph = Api.CreateParagraph();\noParagraph.AddText(\"This is just a sample text.\");\noContent.Push(oParagraph);\noCell.SetCellMarginRight(600);\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\noSlide.AddObject(oTable);\n```",
        "memberof": "ApiTableCell",
        "params": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "twips",
                        "nullable": true
                    }
                },
                "name": "nValue",
                "description": "If this value is <code>null</code>, then default table cell right margin shall be used,\rotherwise override the table cell right margin with specified value for the current cell.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetCellMarginRight",
        "longname": "ApiTableCell#SetCellMarginRight",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4347,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTableCell/Methods/SetCellMarginRight.js"
        ]
    },
    {
        "comment": "/**\r\n     * Specifies an amount of space which shall be left between the top extent of the current cell contents and the\r\n     * top edge border of a specific individual table cell within a table.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {?twips} nValue - If this value is <code>null</code>, then default table cell top margin shall be used,\r\n     * otherwise override the table cell top margin with specified value for the current cell.\r\n     * @see office-js-api/Examples/{Editor}/ApiTableCell/Methods/SetCellMarginTop.js\r\n\t */",
        "description": "Specifies an amount of space which shall be left between the top extent of the current cell contents and the\rtop edge border of a specific individual table cell within a table.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oTable = Api.CreateTable(2, 4);\nvar oRow = oTable.GetRow(0);\nvar oCell = oRow.GetCell(0);\nvar oContent = oCell.GetContent();\nvar oParagraph = Api.CreateParagraph();\noParagraph.AddText(\"This is just a sample text.\");\noContent.Push(oParagraph);\noCell.SetCellMarginTop(720);\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\noSlide.AddObject(oTable);\n```",
        "memberof": "ApiTableCell",
        "params": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "twips",
                        "nullable": true
                    }
                },
                "name": "nValue",
                "description": "If this value is <code>null</code>, then default table cell top margin shall be used,\rotherwise override the table cell top margin with specified value for the current cell.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetCellMarginTop",
        "longname": "ApiTableCell#SetCellMarginTop",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4375,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTableCell/Methods/SetCellMarginTop.js"
        ]
    },
    {
        "comment": "/**\r\n     * Sets the border which shall be displayed at the bottom of the current table cell.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {mm} fSize - The width of the current border.\r\n     * @param {ApiFill} oApiFill - The color or pattern used to fill the current border.\r\n     * @see office-js-api/Examples/{Editor}/ApiTableCell/Methods/SetCellBorderBottom.js\r\n\t */",
        "description": "Sets the border which shall be displayed at the bottom of the current table cell.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oTable = Api.CreateTable(2, 4);\nvar oRow = oTable.GetRow(0);\nvar oCell = oRow.GetCell(0);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noCell.SetCellBorderBottom(2, oFill);\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\noSlide.AddObject(oTable);\n```",
        "memberof": "ApiTableCell",
        "params": [
            {
                "type": {
                    "names": [
                        "mm"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "mm"
                    }
                },
                "name": "fSize",
                "description": "The width of the current border.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                },
                "name": "oApiFill",
                "description": "The color or pattern used to fill the current border.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetCellBorderBottom",
        "longname": "ApiTableCell#SetCellBorderBottom",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4402,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTableCell/Methods/SetCellBorderBottom.js"
        ]
    },
    {
        "comment": "/**\r\n     * Sets the border which shall be displayed at the left of the current table cell.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {mm} fSize - The width of the current border.\r\n     * @param {ApiFill} oApiFill - The color or pattern used to fill the current border.\r\n     * @see office-js-api/Examples/{Editor}/ApiTableCell/Methods/SetCellBorderLeft.js\r\n\t */",
        "description": "Sets the border which shall be displayed at the left of the current table cell.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oTable = Api.CreateTable(2, 4);\nvar oRow = oTable.GetRow(0);\nvar oCell = oRow.GetCell(0);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noCell.SetCellBorderLeft(2, oFill);\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\noSlide.AddObject(oTable);\n```",
        "memberof": "ApiTableCell",
        "params": [
            {
                "type": {
                    "names": [
                        "mm"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "mm"
                    }
                },
                "name": "fSize",
                "description": "The width of the current border.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                },
                "name": "oApiFill",
                "description": "The color or pattern used to fill the current border.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetCellBorderLeft",
        "longname": "ApiTableCell#SetCellBorderLeft",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4421,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTableCell/Methods/SetCellBorderLeft.js"
        ]
    },
    {
        "comment": "/**\r\n     * Sets the border which shall be displayed at the right of the current table cell.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {mm} fSize - The width of the current border.\r\n     * @param {ApiFill} oApiFill - The color or pattern used to fill the current border.\r\n     * @see office-js-api/Examples/{Editor}/ApiTableCell/Methods/SetCellBorderRight.js\r\n\t */",
        "description": "Sets the border which shall be displayed at the right of the current table cell.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oTable = Api.CreateTable(2, 4);\nvar oRow = oTable.GetRow(0);\nvar oCell = oRow.GetCell(0);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noCell.SetCellBorderRight(2, oFill);\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\noSlide.AddObject(oTable);\n```",
        "memberof": "ApiTableCell",
        "params": [
            {
                "type": {
                    "names": [
                        "mm"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "mm"
                    }
                },
                "name": "fSize",
                "description": "The width of the current border.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                },
                "name": "oApiFill",
                "description": "The color or pattern used to fill the current border.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetCellBorderRight",
        "longname": "ApiTableCell#SetCellBorderRight",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4440,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTableCell/Methods/SetCellBorderRight.js"
        ]
    },
    {
        "comment": "/**\r\n     * Sets the border which shall be displayed at the top of the current table cell.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {mm} fSize - The width of the current border.\r\n     * @param {ApiFill} oApiFill - The color or pattern used to fill the current border.\r\n     * @see office-js-api/Examples/{Editor}/ApiTableCell/Methods/SetCellBorderTop.js\r\n\t */",
        "description": "Sets the border which shall be displayed at the top of the current table cell.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oTable = Api.CreateTable(2, 4);\nvar oRow = oTable.GetRow(0);\nvar oCell = oRow.GetCell(0);\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noCell.SetCellBorderTop(2, oFill);\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\noSlide.AddObject(oTable);\n```",
        "memberof": "ApiTableCell",
        "params": [
            {
                "type": {
                    "names": [
                        "mm"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "mm"
                    }
                },
                "name": "fSize",
                "description": "The width of the current border.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                },
                "name": "oApiFill",
                "description": "The color or pattern used to fill the current border.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetCellBorderTop",
        "longname": "ApiTableCell#SetCellBorderTop",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4459,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTableCell/Methods/SetCellBorderTop.js"
        ]
    },
    {
        "comment": "/**\r\n     * Specifies the vertical alignment for text within the current table cell.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {(\"top\" | \"center\" | \"bottom\")} sType - The type of the vertical alignment.\r\n     * @see office-js-api/Examples/{Editor}/ApiTableCell/Methods/SetVerticalAlign.js\r\n\t */",
        "description": "Specifies the vertical alignment for text within the current table cell.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oTable = Api.CreateTable(2, 4);\nvar oRow = oTable.GetRow(1);\noRow.SetHeight(30 * 36000);\nvar oCell = oRow.GetCell(0);\nvar oContent = oCell.GetContent();\nvar oParagraph = Api.CreateParagraph();\noParagraph.AddText(\"This is just a sample text.\");\noContent.Push(oParagraph);\noCell.SetVerticalAlign(\"bottom\");\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\noSlide.AddObject(oTable);\n```",
        "memberof": "ApiTableCell",
        "params": [
            {
                "type": {
                    "names": [
                        "\"top\"",
                        "\"center\"",
                        "\"bottom\""
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "\"top\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"center\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"bottom\""
                            }
                        ]
                    }
                },
                "name": "sType",
                "description": "The type of the vertical alignment.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetVerticalAlign",
        "longname": "ApiTableCell#SetVerticalAlign",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4477,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTableCell/Methods/SetVerticalAlign.js"
        ]
    },
    {
        "comment": "/**\r\n     * Specifies the direction of the text flow for the current table cell.\r\n     * @typeofeditors [\"CPE\"]\r\n     * @param {(\"lrtb\" | \"tbrl\" | \"btlr\")} sType - The type of the text flow direction. \r\n     * @see office-js-api/Examples/{Editor}/ApiTableCell/Methods/SetTextDirection.js\r\n\t */",
        "description": "Specifies the direction of the text flow for the current table cell.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oTable = Api.CreateTable(2, 4);\nvar oRow = oTable.GetRow(0);\noRow.SetHeight(30 * 36000);\nvar oCell = oRow.GetCell(0);\noCell.SetTextDirection(\"tbrl\");\nvar oContent = oCell.GetContent();\nvar oParagraph = Api.CreateParagraph();\noParagraph.AddText(\"This is just a sample text.\");\noContent.Push(oParagraph);\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\noSlide.AddObject(oTable);\n```",
        "memberof": "ApiTableCell",
        "params": [
            {
                "type": {
                    "names": [
                        "\"lrtb\"",
                        "\"tbrl\"",
                        "\"btlr\""
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "\"lrtb\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"tbrl\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"btlr\""
                            }
                        ]
                    }
                },
                "name": "sType",
                "description": "The type of the text flow direction.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetTextDirection",
        "longname": "ApiTableCell#SetTextDirection",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4494,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTableCell/Methods/SetTextDirection.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns a type of the ApiParaPr class.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {\"paraPr\"}\r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetClassType.js\r\n\t */",
        "description": "Returns a type of the ApiParaPr class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\nvar sClassType = oParaPr.GetClassType();\noParaPr.SetIndFirstLine(1440);\noParagraph.AddText(\"This is the first paragraph with the indent of 1 inch set to the first line. \");\noParagraph.AddText(\"This indent is set by the paragraph style. No paragraph inline style is applied. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\noParagraph = Api.CreateParagraph();\noParagraph.AddText(\"Class Type = \" + sClassType);\noDocContent.Push(oParagraph);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"paraPr\""
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiParagraph#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13655,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the paragraph left side indentation.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {twips} nValue - The paragraph left side indentation value measured in twentieths of a point (1/1440 of an inch).\r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetIndLeft.js\r\n\t */",
        "description": "Sets the paragraph left side indentation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\noParaPr.SetIndLeft(2880);\noParagraph.AddText(\"This is the first paragraph with the indent of 2 inches set to it. \");\noParagraph.AddText(\"This indent is set by the paragraph style. No paragraph inline style is applied. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiParagraph",
        "params": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": null
                },
                "name": "nValue",
                "description": "The paragraph left side indentation value measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetIndLeft",
        "longname": "ApiParagraph#SetIndLeft",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13724,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/SetIndLeft.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns the paragraph left side indentation.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {twips | undefined} - The paragraph left side indentation value measured in twentieths of a point (1/1440 of an inch).\r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetIndLeft.js\r\n\t */",
        "description": "Returns the paragraph left side indentation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noSlide.AddObject(oShape);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\noParaPr.SetIndLeft(2880);\noParagraph.AddText(\"This is the first paragraph with the indent of 2 inches set to it. \");\noParagraph.AddText(\"This indent is set by the paragraph style. No paragraph inline style is applied. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\nvar nIndLeft = oParaPr.GetIndLeft();\noParagraph = Api.CreateParagraph();\noParagraph.AddText(\"Left indent: \" + nIndLeft);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "twips",
                        "undefined"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetIndLeft",
        "longname": "ApiParagraph#GetIndLeft",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13736,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/GetIndLeft.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the paragraph right side indentation.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {twips} nValue - The paragraph right side indentation value measured in twentieths of a point (1/1440 of an inch).\r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetIndRight.js\r\n\t */",
        "description": "Sets the paragraph right side indentation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\noParaPr.SetIndRight(2880);\noParagraph.AddText(\"This is the first paragraph with the right offset of 2 inches set to it. \");\noParagraph.AddText(\"This offset is set by the paragraph style. No paragraph inline style is applied. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiParagraph",
        "params": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": null
                },
                "name": "nValue",
                "description": "The paragraph right side indentation value measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetIndRight",
        "longname": "ApiParagraph#SetIndRight",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13753,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/SetIndRight.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns the paragraph right side indentation.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {twips | undefined} - The paragraph right side indentation value measured in twentieths of a point (1/1440 of an inch).\r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetIndRight.js\r\n\t */",
        "description": "Returns the paragraph right side indentation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noSlide.AddObject(oShape);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\noParaPr.SetIndRight(2880);\noParaPr.SetJc(\"right\");\noParagraph.AddText(\"This is the first paragraph with the right offset of 2 inches set to it. \");\noParagraph.AddText(\"This indent is set by the paragraph style. No paragraph inline style is applied. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\nvar nIndRight = oParaPr.GetIndRight();\noParagraph = Api.CreateParagraph();\noParagraph.AddText(\"Right indent: \" + nIndRight);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "twips",
                        "undefined"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetIndRight",
        "longname": "ApiParagraph#GetIndRight",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13765,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/GetIndRight.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the paragraph first line indentation.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {twips} nValue - The paragraph first line indentation value measured in twentieths of a point (1/1440 of an inch).\r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetIndFirstLine.js\r\n\t */",
        "description": "Sets the paragraph first line indentation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\noParaPr.SetIndFirstLine(1440);\noParagraph.AddText(\"This is the first paragraph with the indent of 1 inch set to the first line. \");\noParagraph.AddText(\"This indent is set by the paragraph style. No paragraph inline style is applied. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiParagraph",
        "params": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": null
                },
                "name": "nValue",
                "description": "The paragraph first line indentation value measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetIndFirstLine",
        "longname": "ApiParagraph#SetIndFirstLine",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13783,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/SetIndFirstLine.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns the paragraph first line indentation.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {twips | undefined} - The paragraph first line indentation value measured in twentieths of a point (1/1440 of an inch).\r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetIndFirstLine.js\r\n\t */",
        "description": "Returns the paragraph first line indentation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noSlide.AddObject(oShape);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\noParaPr.SetIndFirstLine(1440);\noParagraph.AddText(\"This is the first paragraph with the indent of 1 inch set to the first line. \");\noParagraph.AddText(\"This indent is set by the paragraph style. No paragraph inline style is applied. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\nvar nIndFirstLine = oParaPr.GetIndFirstLine();\noParagraph = Api.CreateParagraph();\noParagraph.AddText(\"First line indent: \" + nIndFirstLine);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "twips",
                        "undefined"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetIndFirstLine",
        "longname": "ApiParagraph#GetIndFirstLine",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13795,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/GetIndFirstLine.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the paragraph contents justification.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {(\"left\" | \"right\" | \"both\" | \"center\")} sJc - The justification type that\r\n\t * will be applied to the paragraph contents.\r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetJc.js\r\n\t */",
        "description": "Sets the paragraph contents justification.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\noParaPr.SetJc(\"center\");\noParagraph.AddText(\"This is a paragraph with the text in it aligned by the center. \");\noParagraph.AddText(\"The justification is specified in the paragraph style. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiParagraph",
        "params": [
            {
                "type": {
                    "names": [
                        "\"left\"",
                        "\"right\"",
                        "\"both\"",
                        "\"center\""
                    ],
                    "parsedType": null
                },
                "name": "sJc",
                "description": "The justification type that\rwill be applied to the paragraph contents.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetJc",
        "longname": "ApiParagraph#SetJc",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13815,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/SetJc.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns the paragraph contents justification.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {(\"left\" | \"right\" | \"both\" | \"center\" | undefined)} \r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetJc.js\r\n\t */",
        "description": "Returns the paragraph contents justification.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noSlide.AddObject(oShape);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\noParaPr.SetJc(\"center\");\noParagraph.AddText(\"This is a paragraph with the text in it aligned by the center. \");\noParagraph.AddText(\"The justification is specified in the paragraph style. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\nvar sJc = oParaPr.GetJc();\noParagraph = Api.CreateParagraph();\noParagraph.AddText(\"Justification: \" + sJc);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"left\"",
                        "\"right\"",
                        "\"both\"",
                        "\"center\"",
                        "undefined"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetJc",
        "longname": "ApiParagraph#GetJc",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13827,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/GetJc.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the paragraph line spacing. If the value of the sLineRule parameter is either \r\n\t * \"atLeast\" or \"exact\", then the value of nLine will be interpreted as twentieths of a point. If \r\n\t * the value of the sLineRule parameter is \"auto\", then the value of the \r\n\t * nLine parameter will be interpreted as 240ths of a line.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {(twips | line240)} nLine - The line spacing value measured either in twentieths of a point (1/1440 of an inch) or in 240ths of a line.\r\n\t * @param {(\"auto\" | \"atLeast\" | \"exact\")} sLineRule - The rule that determines the measuring units of the line spacing.\r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetSpacingLine.js\r\n\t */",
        "description": "Sets the paragraph line spacing. If the value of the sLineRule parameter is either \r\"atLeast\" or \"exact\", then the value of nLine will be interpreted as twentieths of a point. If \rthe value of the sLineRule parameter is \"auto\", then the value of the \rnLine parameter will be interpreted as 240ths of a line.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\noParaPr.SetSpacingLine(3 * 240, \"auto\");\noParagraph.AddText(\"Paragraph 1. Spacing: 3 times of a common paragraph line spacing.\");\noParagraph.AddLineBreak();\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiParagraph",
        "params": [
            {
                "type": {
                    "names": [
                        "twips",
                        "line240"
                    ],
                    "parsedType": null
                },
                "name": "nLine",
                "description": "The line spacing value measured either in twentieths of a point (1/1440 of an inch) or in 240ths of a line.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "\"auto\"",
                        "\"atLeast\"",
                        "\"exact\""
                    ],
                    "parsedType": null
                },
                "name": "sLineRule",
                "description": "The rule that determines the measuring units of the line spacing.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetSpacingLine",
        "longname": "ApiParagraph#SetSpacingLine",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13907,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/SetSpacingLine.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns the paragraph line spacing value.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {twips | line240 | undefined} - to know is twips or line240 use ApiParaPr.prototype.GetSpacingLineRule().\r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetSpacingLineValue.js\r\n\t */",
        "description": "Returns the paragraph line spacing value.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noSlide.AddObject(oShape);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\noParaPr.SetSpacingLine(3 * 240, \"auto\");\noParagraph.AddText(\"Paragraph 1. Spacing: 3 times of a common paragraph line spacing.\");\noParagraph.AddLineBreak();\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\nvar nSpacingLineValue = oParaPr.GetSpacingLineValue();\noParagraph = Api.CreateParagraph();\noParagraph.AddText(\"Spacing line value : \" + nSpacingLineValue);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "twips",
                        "line240",
                        "undefined"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetSpacingLineValue",
        "longname": "ApiParagraph#GetSpacingLineValue",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13938,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/GetSpacingLineValue.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns the paragraph line spacing rule.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {\"auto\" | \"atLeast\" | \"exact\" | undefined} \r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetSpacingLineRule.js\r\n\t */",
        "description": "Returns the paragraph line spacing rule.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noSlide.AddObject(oShape);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\noParaPr.SetSpacingLine(3 * 240, \"auto\");\noParagraph.AddText(\"Paragraph 1. Spacing: 3 times of a common paragraph line spacing.\");\noParagraph.AddLineBreak();\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\nvar sSpacingLineRule = oParaPr.GetSpacingLineRule();\noParagraph = Api.CreateParagraph();\noParagraph.AddText(\"Spacing line rule : \" + sSpacingLineRule);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"auto\"",
                        "\"atLeast\"",
                        "\"exact\"",
                        "undefined"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetSpacingLineRule",
        "longname": "ApiParagraph#GetSpacingLineRule",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13971,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/GetSpacingLineRule.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the spacing before the current paragraph. If the value of the isBeforeAuto parameter is true, then \r\n\t * any value of the nBefore is ignored. If isBeforeAuto parameter is not specified, then \r\n\t * it will be interpreted as false.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {twips} nBefore - The value of the spacing before the current paragraph measured in twentieths of a point (1/1440 of an inch).\r\n\t * @param {boolean} [isBeforeAuto=false] - The true value disables the spacing before the current paragraph.\r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetSpacingBefore.js\r\n\t */",
        "description": "Sets the spacing before the current paragraph. If the value of the isBeforeAuto parameter is true, then \rany value of the nBefore is ignored. If isBeforeAuto parameter is not specified, then \rit will be interpreted as false.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\noParagraph.AddText(\"This is an example of setting a space before a paragraph. \");\noParagraph.AddText(\"The second paragraph will have an offset of one inch from the top. \");\noParagraph.AddText(\"This is due to the fact that the second paragraph has this offset enabled.\");\noParagraph = Api.CreateParagraph();\noParaPr = oParagraph.GetParaPr();\noParaPr.SetSpacingBefore(1440);\noParagraph.AddText(\"This is the second paragraph and it is one inch away from the first paragraph.\");\noDocContent.Push(oParagraph);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiParagraph",
        "params": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": null
                },
                "name": "nBefore",
                "description": "The value of the spacing before the current paragraph measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "isBeforeAuto",
                "description": "The true value disables the spacing before the current paragraph.",
                "optional": true,
                "defaultvalue": false
            }
        ],
        "returns": null,
        "name": "SetSpacingBefore",
        "longname": "ApiParagraph#SetSpacingBefore",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14009,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/SetSpacingBefore.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns the spacing before value of the current paragraph.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {twips} - The value of the spacing before the current paragraph measured in twentieths of a point (1/1440 of an inch).\r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetSpacingBefore.js\r\n\t */",
        "description": "Returns the spacing before value of the current paragraph.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noSlide.AddObject(oShape);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\noParagraph.AddText(\"This is an example of setting a space before a paragraph. \");\noParagraph.AddText(\"The second paragraph will have an offset of one inch from the top. \");\noParagraph.AddText(\"This is due to the fact that the second paragraph has this offset enabled.\");\nvar oParagraph2 = Api.CreateParagraph();\noParagraph2.AddText(\"This is the second paragraph and it is one inch away from the first paragraph.\");\nvar oParaPr = oParagraph2.GetParaPr();\noParaPr.SetSpacingBefore(1440);\noDocContent.Push(oParagraph2);\nvar nSpacingBefore = oParaPr.GetSpacingBefore();\noParagraph = Api.CreateParagraph();\noParagraph.AddText(\"Spacing before: \" + nSpacingBefore);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetSpacingBefore",
        "longname": "ApiParagraph#GetSpacingBefore",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14026,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/GetSpacingBefore.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the spacing after the current paragraph. If the value of the isAfterAuto parameter is true, then \r\n\t * any value of the nAfter is ignored. If isAfterAuto parameter is not specified, then it \r\n\t * will be interpreted as false.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {twips} nAfter - The value of the spacing after the current paragraph measured in twentieths of a point (1/1440 of an inch).\r\n\t * @param {boolean} [isAfterAuto=false] - The true value disables the spacing after the current paragraph.\r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetSpacingAfter.js\r\n\t */",
        "description": "Sets the spacing after the current paragraph. If the value of the isAfterAuto parameter is true, then \rany value of the nAfter is ignored. If isAfterAuto parameter is not specified, then it \rwill be interpreted as false.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\noParaPr.SetSpacingAfter(1440);\noParagraph.AddText(\"This is an example of setting a space after a paragraph. \");\noParagraph.AddText(\"The second paragraph will have an offset of one inch from the top. \");\noParagraph.AddText(\"This is due to the fact that the first paragraph has this offset enabled.\");\noParagraph = Api.CreateParagraph();\noParagraph.AddText(\"This is the second paragraph and it is one inch away from the first paragraph.\");\noDocContent.Push(oParagraph);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiParagraph",
        "params": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": null
                },
                "name": "nAfter",
                "description": "The value of the spacing after the current paragraph measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "isAfterAuto",
                "description": "The true value disables the spacing after the current paragraph.",
                "optional": true,
                "defaultvalue": false
            }
        ],
        "returns": null,
        "name": "SetSpacingAfter",
        "longname": "ApiParagraph#SetSpacingAfter",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14048,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/SetSpacingAfter.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns the spacing after value of the current paragraph. \r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {twips} - The value of the spacing after the current paragraph measured in twentieths of a point (1/1440 of an inch).\r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetSpacingAfter.js\r\n\t */",
        "description": "Returns the spacing after value of the current paragraph.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\noSlide.AddObject(oShape);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\noParaPr.SetSpacingAfter(1440);\noParagraph.AddText(\"This is an example of setting a space after a paragraph. \");\noParagraph.AddText(\"The second paragraph will have an offset of one inch from the top. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\noParagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\nvar nSpacingAfter = oParaPr.GetSpacingAfter();\noParagraph = Api.CreateParagraph();\noParagraph.AddText(\"Spacing after : \" + nSpacingAfter);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetSpacingAfter",
        "longname": "ApiParagraph#GetSpacingAfter",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14065,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/GetSpacingAfter.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies a sequence of custom tab stops which will be used for any tab characters in the current paragraph.\r\n\t * <b>Warning</b>: The lengths of aPos array and aVal array <b>MUST BE</b> equal to each other.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {twips[]} aPos - An array of the positions of custom tab stops with respect to the current page margins\r\n\t * measured in twentieths of a point (1/1440 of an inch).\r\n\t * @param {TabJc[]} aVal - An array of the styles of custom tab stops, which determines the behavior of the tab\r\n\t * stop and the alignment which will be applied to text entered at the current custom tab stop.\r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetTabs.js\r\n\t */",
        "description": "Specifies a sequence of custom tab stops which will be used for any tab characters in the current paragraph.\r<b>Warning</b>: The lengths of aPos array and aVal array <b>MUST BE</b> equal to each other.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\noParaPr.SetTabs([1440, 4320, 7200], [\"left\", \"center\", \"right\"]);\noParagraph.AddTabStop();\noParagraph.AddText(\"Custom tab - 1 inch left\");\noParagraph.AddLineBreak();\noParagraph.AddTabStop();\noParagraph.AddTabStop();\noParagraph.AddText(\"Custom tab - 3 inches center\");\noParagraph.AddLineBreak();\noParagraph.AddTabStop();\noParagraph.AddTabStop();\noParagraph.AddTabStop();\noParagraph.AddText(\"Custom tab - 5 inches right\");\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiParagraph",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<twips>"
                    ],
                    "parsedType": null
                },
                "name": "aPos",
                "description": "An array of the positions of custom tab stops with respect to the current page margins\rmeasured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "Array.<TabJc>"
                    ],
                    "parsedType": null
                },
                "name": "aVal",
                "description": "An array of the styles of custom tab stops, which determines the behavior of the tab\rstop and the alignment which will be applied to text entered at the current custom tab stop.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetTabs",
        "longname": "ApiParagraph#SetTabs",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14238,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/SetTabs.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the bullet or numbering to the current paragraph.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CSE\", \"CPE\"]\r\n\t * @param {?ApiBullet} oBullet - The bullet object created with the {@link Api#CreateBullet} or {@link Api#CreateNumbering} method.\r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetBullet.js\r\n\t */",
        "description": "Sets the bullet or numbering to the current paragraph.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oGs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateRadialGradientFill([oGs1, oGs2]);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oParaPr = oParagraph.GetParaPr();\nvar oBullet = Api.CreateBullet(\"-\");\noParaPr.SetBullet(oBullet);\noParagraph.AddText(\" This is an example of the bulleted paragraph.\");\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiParagraph",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiBullet"
                    ],
                    "parsedType": null
                },
                "name": "oBullet",
                "description": "The bullet object created with the {@link Api#CreateBullet} or {@link Api#CreateNumbering} method.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetBullet",
        "longname": "ApiParagraph#SetBullet",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14282,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/SetBullet.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the outline level for the specified properties.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {Number?} [nLvl=undefined] - 0 - based outline level. Possible values are: 0-8.\r\n\t * Note: to set no outline level use this method without parameter.\r\n\t * @returns {boolean}\r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetOutlineLvl.js\r\n\t */",
        "description": "Sets the outline level for the specified properties.",
        "memberof": "ApiParagraph",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ],
                    "parsedType": null
                },
                "name": "nLvl",
                "description": "0 - based outline level. Possible values are: 0-8.\rNote: to set no outline level use this method without parameter.",
                "optional": true,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetOutlineLvl",
        "longname": "ApiParagraph#SetOutlineLvl",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14301,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/SetOutlineLvl.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Gets the outline level of the specified properties.\r\n\t * @memberof ApiParaPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {Number?}\r\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetOutlineLvl.js\r\n\t */",
        "description": "Gets the outline level of the specified properties.",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetOutlineLvl",
        "longname": "ApiParagraph#GetOutlineLvl",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14324,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiParaPr/Methods/GetOutlineLvl.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Returns a type of the ApiTextPr class.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @returns {\"textPr\"}\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetClassType.js\r\n\t */",
        "description": "Returns a type of the ApiTextPr class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontSize(50);\noParagraph.SetJc(\"left\");\nvar sClassType = oTextPr.GetClassType();\noRun.AddText(\"Class Type = \" + sClassType);\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"textPr\""
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiRun#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12933,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the bold property to the text character.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {boolean} isBold - Specifies that the contents of the run are displayed bold.\r\n\t * @return {ApiTextPr} - this text properties.\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetBold.js\r\n\t */",
        "description": "Sets the bold property to the text character.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontSize(50);\noTextPr.SetBold(true);\noParagraph.SetJc(\"left\");\noRun.AddText(\"This is a sample text inside the shape with the font weight set to bold using the text properties.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "isBold",
                "description": "Specifies that the contents of the run are displayed bold.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetBold",
        "longname": "ApiRun#SetBold",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12986,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/SetBold.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Gets the bold property from the current text properties.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @return {?boolean}\r\n\t * @since 8.1.0\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetBold.js\r\n\t */",
        "description": "Gets the bold property from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noRun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\noRun.AddLineBreak();\noParagraph.AddElement(oRun);\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetBold(true);\noSlide.AddObject(oShape);\noParagraph = Api.CreateParagraph();\nvar bBold = oTextPr.GetBold();\noParagraph.AddText(\"Bold property: \" + bBold);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetBold",
        "longname": "ApiRun#GetBold",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13001,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/GetBold.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the italic property to the text character.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {boolean} isItalic - Specifies that the contents of the current run are displayed italicized.\r\n\t * @return {ApiTextPr} - this text properties.\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetItalic.js\r\n\t */",
        "description": "Sets the italic property to the text character.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontSize(50);\noTextPr.SetItalic(true);\noParagraph.SetJc(\"left\");\noRun.AddText(\"This is a sample text inside the shape with the font set to italicized letters using the text properties.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "isItalic",
                "description": "Specifies that the contents of the current run are displayed italicized.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetItalic",
        "longname": "ApiRun#SetItalic",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13014,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/SetItalic.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Gets the italic property from the current text properties.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @return {?boolean}\r\n\t * @since 8.1.0\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetItalic.js\r\n\t */",
        "description": "Gets the italic property from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noRun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\noRun.AddLineBreak();\noParagraph.AddElement(oRun);\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetItalic(true);\noSlide.AddObject(oShape);\noParagraph = Api.CreateParagraph();\nvar bItalic = oTextPr.GetItalic();\noParagraph.AddText(\"Italic property: \" + bItalic);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetItalic",
        "longname": "ApiRun#GetItalic",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13029,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/GetItalic.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies that the contents of the run are displayed with a single horizontal line through the center of the line.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {boolean} isStrikeout - Specifies that the contents of the current run are displayed struck through.\r\n\t * @return {ApiTextPr} - this text properties.\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetStrikeout.js\r\n\t */",
        "description": "Specifies that the contents of the run are displayed with a single horizontal line through the center of the line.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontSize(50);\noTextPr.SetStrikeout(true);\noParagraph.SetJc(\"left\");\noRun.AddText(\"This is a struck out text inside the shape.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "isStrikeout",
                "description": "Specifies that the contents of the current run are displayed struck through.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetStrikeout",
        "longname": "ApiRun#SetStrikeout",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13042,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/SetStrikeout.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Gets the strikeout property from the current text properties.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @return {?boolean}\r\n\t * @since 8.1.0\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetStrikeout.js\r\n\t */",
        "description": "Gets the strikeout property from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noRun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\noRun.AddLineBreak();\noParagraph.AddElement(oRun);\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetStrikeout(true);\noSlide.AddObject(oShape);\noParagraph = Api.CreateParagraph();\nvar bStrikeout = oTextPr.GetStrikeout();\noParagraph.AddText(\"Strikeout property: \" + bStrikeout);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetStrikeout",
        "longname": "ApiRun#GetStrikeout",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13057,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/GetStrikeout.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies that the contents of the run are displayed along with a line appearing directly below the character\r\n\t * (less than all the spacing above and below the characters on the line).\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {boolean} isUnderline - Specifies that the contents of the current run are displayed underlined.\r\n\t * @return {ApiTextPr} - this text properties.\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetUnderline.js\r\n\t */",
        "description": "Specifies that the contents of the run are displayed along with a line appearing directly below the character\r(less than all the spacing above and below the characters on the line).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontSize(50);\noTextPr.SetUnderline(true);\noParagraph.SetJc(\"left\");\noRun.AddText(\"This is an underlined text inside the shape.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "isUnderline",
                "description": "Specifies that the contents of the current run are displayed underlined.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetUnderline",
        "longname": "ApiRun#SetUnderline",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13071,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/SetUnderline.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Gets the underline property from the current text properties.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @return {?boolean}\r\n\t * @since 8.1.0\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetUnderline.js\r\n\t */",
        "description": "Gets the underline property from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noRun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\noRun.AddLineBreak();\noParagraph.AddElement(oRun);\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetUnderline(true);\noSlide.AddObject(oShape);\noParagraph = Api.CreateParagraph();\nvar bUnderline = oTextPr.GetUnderline();\noParagraph.AddText(\"Underline property: \" + bUnderline);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetUnderline",
        "longname": "ApiRun#GetUnderline",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13086,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/GetUnderline.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets all 4 font slots with the specified font family.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {string} sFontFamily - The font family or families used for the current text run.\r\n\t * @return {ApiTextPr} - this text properties.\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetFontFamily.js\r\n\t */",
        "description": "Sets all 4 font slots with the specified font family.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontSize(50);\noTextPr.SetFontFamily(\"Comic Sans MS\");\noParagraph.SetJc(\"left\");\noRun.AddText(\"This is a sample text inside the shape with the font family set to 'Comic Sans MS' using the text properties.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                },
                "name": "sFontFamily",
                "description": "The font family or families used for the current text run.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetFontFamily",
        "longname": "ApiRun#SetFontFamily",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13099,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/SetFontFamily.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Gets the font family from the current text properties.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @return {?string}\r\n\t * @since 8.1.0\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetFontFamily.js\r\n\t */",
        "description": "Gets the font family from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noRun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\noRun.AddLineBreak();\noParagraph.AddElement(oRun);\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontFamily(\"Arial\");\noSlide.AddObject(oShape);\noParagraph = Api.CreateParagraph();\nvar sFontFamily = oTextPr.GetFontFamily();\noParagraph.AddText(\"Font family: \" + sFontFamily);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetFontFamily",
        "longname": "ApiRun#GetFontFamily",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13115,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/GetFontFamily.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the font size to the characters of the current text run.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {hps} nSize - The text size value measured in half-points (1/144 of an inch).\r\n\t * @return {ApiTextPr} - this text properties.\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetFontSize.js\r\n\t */",
        "description": "Sets the font size to the characters of the current text run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontSize(30);\noParagraph.SetJc(\"left\");\noRun.AddText(\"This is a sample text inside the shape with the font size set to 15 points using the text properties.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "hps"
                    ],
                    "parsedType": null
                },
                "name": "nSize",
                "description": "The text size value measured in half-points (1/144 of an inch).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetFontSize",
        "longname": "ApiRun#SetFontSize",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13128,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/SetFontSize.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Gets the font size from the current text properties.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @return {?hps}\r\n\t * @since 8.1.0\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetFontSize.js\r\n\t */",
        "description": "Gets the font size from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noRun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\noRun.AddLineBreak();\noParagraph.AddElement(oRun);\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontSize(60);\noSlide.AddObject(oShape);\noParagraph = Api.CreateParagraph();\nvar nFontSize = oTextPr.GetFontSize();\noParagraph.AddText(\"Font size: \" + nFontSize);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "hps"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetFontSize",
        "longname": "ApiRun#GetFontSize",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13143,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/GetFontSize.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies the alignment which will be applied to the contents of the run in relation to the default appearance of the run text:\r\n\t * <b>\"baseline\"</b> - the characters in the current text run will be aligned by the default text baseline.\r\n\t * <b>\"subscript\"</b> - the characters in the current text run will be aligned below the default text baseline.\r\n\t * <b>\"superscript\"</b> - the characters in the current text run will be aligned above the default text baseline.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {(\"baseline\" | \"subscript\" | \"superscript\")} sType - The vertical alignment type applied to the text contents.\r\n\t * @return {ApiTextPr} - this text properties.\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetVertAlign.js\r\n\t */",
        "description": "Specifies the alignment which will be applied to the contents of the run in relation to the default appearance of the run text:\r<b>\"baseline\"</b> - the characters in the current text run will be aligned by the default text baseline.\r<b>\"subscript\"</b> - the characters in the current text run will be aligned below the default text baseline.\r<b>\"superscript\"</b> - the characters in the current text run will be aligned above the default text baseline.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontSize(50);\noTextPr.SetVertAlign(\"superscript\");\noParagraph.SetJc(\"left\");\noRun.AddText(\"This is a text inside the shape with vertical alignment set to 'superscript'.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "\"baseline\"",
                        "\"subscript\"",
                        "\"superscript\""
                    ],
                    "parsedType": null
                },
                "name": "sType",
                "description": "The vertical alignment type applied to the text contents.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetVertAlign",
        "longname": "ApiRun#SetVertAlign",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13199,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/SetVertAlign.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies a highlighting color which is added to the text properties and applied as a background to the contents of the current run/range/paragraph.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CPE\"]\r\n\t * @param {highlightColor} sColor - Available highlight color.\r\n\t * @returns {ApiTextPr}\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetHighlight.js\r\n\t */",
        "description": "Specifies a highlighting color which is added to the text properties and applied as a background to the contents of the current run/range/paragraph.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontSize(50);\noTextPr.SetHighlight(\"lightGray\");\noParagraph.SetJc(\"left\");\noRun.AddText(\"This is a sample text inside the shape with the text highlighted with light gray color using the text properties.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "highlightColor"
                    ],
                    "parsedType": null
                },
                "name": "sColor",
                "description": "Available highlight color.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetHighlight",
        "longname": "ApiRun#SetHighlight",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13243,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/SetHighlight.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Gets the highlight property from the current text properties.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CPE\"]\r\n\t * @return {?string}\r\n\t * @since 8.1.0\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetHighlight.js\r\n\t */",
        "description": "Gets the highlight property from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noRun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\noRun.AddLineBreak();\noParagraph.AddElement(oRun);\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetHighlight(\"lightGray\");\noSlide.AddObject(oShape);\noParagraph = Api.CreateParagraph();\nvar sHighlight = oTextPr.GetHighlight();\noParagraph.AddText(\"Highlight property: \" + sHighlight);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetHighlight",
        "longname": "ApiRun#GetHighlight",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13276,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/GetHighlight.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the text spacing measured in twentieths of a point.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {twips} nSpacing - The value of the text spacing measured in twentieths of a point (1/1440 of an inch).\r\n\t * @return {ApiTextPr} - this text properties.\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetSpacing.js\r\n\t */",
        "description": "Sets the text spacing measured in twentieths of a point.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontSize(50);\noTextPr.SetSpacing(80);\noParagraph.SetJc(\"left\");\noRun.AddText(\"This is a sample text inside the shape with the spacing set to 4 points (80 twentieths of a point) using the text properties.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": null
                },
                "name": "nSpacing",
                "description": "The value of the text spacing measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetSpacing",
        "longname": "ApiRun#SetSpacing",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13295,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/SetSpacing.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Gets the text spacing from the current text properties measured in twentieths of a point.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @return {?twips}\r\n\t * @since 8.1.0\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetSpacing.js\r\n\t */",
        "description": "Gets the text spacing from the current text properties measured in twentieths of a point.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noRun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\noRun.AddLineBreak();\noParagraph.AddElement(oRun);\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetSpacing(80);\noSlide.AddObject(oShape);\noParagraph = Api.CreateParagraph();\nvar nSpacing = oTextPr.GetSpacing();\noParagraph.AddText(\"Text spacing: \" + nSpacing);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetSpacing",
        "longname": "ApiRun#GetSpacing",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13310,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/GetSpacing.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies that the contents of the run are displayed with two horizontal lines through each character displayed on the line.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {boolean} isDoubleStrikeout - Specifies that the contents of the current run are displayed double struck through.\r\n\t * @return {ApiTextPr} - this text properties.\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetDoubleStrikeout.js\r\n\t */",
        "description": "Specifies that the contents of the run are displayed with two horizontal lines through each character displayed on the line.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontSize(50);\noTextPr.SetDoubleStrikeout(true);\noParagraph.SetJc(\"left\");\noRun.AddText(\"This is a sample text inside the shape struck out with two lines using the text properties.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "isDoubleStrikeout",
                "description": "Specifies that the contents of the current run are displayed double struck through.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetDoubleStrikeout",
        "longname": "ApiRun#SetDoubleStrikeout",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13328,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/SetDoubleStrikeout.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Gets the double strikeout property from the current text properties.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @return {?boolean}\r\n\t * @since 8.1.0\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetDoubleStrikeout.js\r\n\t */",
        "description": "Gets the double strikeout property from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noRun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\noRun.AddLineBreak();\noParagraph.AddElement(oRun);\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetDoubleStrikeout(true);\noSlide.AddObject(oShape);\noParagraph = Api.CreateParagraph();\nvar bDoubleStrikeout = oTextPr.GetDoubleStrikeout();\noParagraph.AddText(\"Double strikeout property: \" + bDoubleStrikeout);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetDoubleStrikeout",
        "longname": "ApiRun#GetDoubleStrikeout",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13343,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/GetDoubleStrikeout.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies that any lowercase characters in the text run are formatted for display only as their capital letter character equivalents.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {boolean} isCaps - Specifies that the contents of the current run are displayed capitalized.\r\n\t * @return {ApiTextPr} - this text properties.\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetCaps.js\r\n\t */",
        "description": "Specifies that any lowercase characters in the text run are formatted for display only as their capital letter character equivalents.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontSize(50);\noTextPr.SetCaps(true);\noParagraph.SetJc(\"left\");\noRun.AddText(\"This is a sample text inside the shape set to capital letters using the text properties.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "isCaps",
                "description": "Specifies that the contents of the current run are displayed capitalized.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetCaps",
        "longname": "ApiRun#SetCaps",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13356,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/SetCaps.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies whether the text with the current text properties are capitalized.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @return {?boolean}\r\n\t * @since 8.1.0\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetCaps.js\r\n\t */",
        "description": "Specifies whether the text with the current text properties are capitalized.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noRun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\noRun.AddLineBreak();\noParagraph.AddElement(oRun);\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetCaps(true);\noSlide.AddObject(oShape);\noParagraph = Api.CreateParagraph();\nvar bCaps = oTextPr.GetCaps();\noParagraph.AddText(\"Property of the capitalized letters: \" + bCaps);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetCaps",
        "longname": "ApiRun#GetCaps",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13371,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/GetCaps.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies that all the small letter characters in the text run are formatted for display only as their capital\r\n\t * letter character equivalents which are two points smaller than the actual font size specified for this text.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @param {boolean} isSmallCaps - Specifies if the contents of the current run are displayed capitalized two points smaller or not.\r\n\t * @return {ApiTextPr} - this text properties.\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetSmallCaps.js\r\n\t */",
        "description": "Specifies that all the small letter characters in the text run are formatted for display only as their capital\rletter character equivalents which are two points smaller than the actual font size specified for this text.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontSize(50);\noTextPr.SetSmallCaps(true);\noParagraph.SetJc(\"left\");\noRun.AddText(\"This is a sample text inside the shape with the font set to small capitalized letters using the text properties.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "isSmallCaps",
                "description": "Specifies if the contents of the current run are displayed capitalized two points smaller or not.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetSmallCaps",
        "longname": "ApiRun#SetSmallCaps",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13385,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/SetSmallCaps.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Specifies whether the text with the current text properties are displayed capitalized two points smaller than the actual font size.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @return {?boolean}\r\n\t * @since 8.1.0\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetSmallCaps.js\r\n\t */",
        "description": "Specifies whether the text with the current text properties are displayed capitalized two points smaller than the actual font size.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noRun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\noRun.AddLineBreak();\noParagraph.AddElement(oRun);\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetSmallCaps(true);\noSlide.AddObject(oShape);\noParagraph = Api.CreateParagraph();\nvar bSmallCaps = oTextPr.GetSmallCaps();\noParagraph.AddText(\"Property of the small capitalized letters: \" + bSmallCaps);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetSmallCaps",
        "longname": "ApiRun#GetSmallCaps",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13400,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/GetSmallCaps.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the text color to the current text run.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CSE\", \"CPE\"]\r\n\t * @param {ApiFill} oApiFill - The color or pattern used to fill the text color.\r\n\t * @return {ApiTextPr} - this text properties.\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetFill.js\r\n\t */",
        "description": "Sets the text color to the current text run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontSize(50);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noTextPr.SetFill(oFill);\noRun.AddText(\"This is a text run with the font color set to black using the text properties.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": null
                },
                "name": "oApiFill",
                "description": "The color or pattern used to fill the text color.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetFill",
        "longname": "ApiRun#SetFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13526,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/SetFill.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Gets the text color from the current text properties.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CSE\", \"CPE\"]\r\n\t * @return {ApiFill}\r\n\t * @since 8.1.0\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetFill.js\r\n\t */",
        "description": "Gets the text color from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noRun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\noRun.AddLineBreak();\noParagraph.AddElement(oRun);\nvar oTextPr = oRun.GetTextPr();\noFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noTextPr.SetFill(oFill);\noSlide.AddObject(oShape);\noParagraph = Api.CreateParagraph();\noFill = oTextPr.GetFill();\nvar sType = oFill.GetClassType();\noParagraph.AddText(\"Text color type: \" + sType);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetFill",
        "longname": "ApiRun#GetFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13541,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/GetFill.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the text fill to the current text run.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\r\n\t * @param {ApiFill} oApiFill - The color or pattern used to fill the text color.\r\n\t * @return {ApiTextPr} - this text properties.\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetTextFill.js\r\n\t */",
        "description": "Sets the text fill to the current text run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontSize(50);\noFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noTextPr.SetTextFill(oFill);\noParagraph.SetJc(\"left\");\noRun.AddText(\"This is a sample text inside the shape with the black text fill set using the text properties.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": null
                },
                "name": "oApiFill",
                "description": "The color or pattern used to fill the text color.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetTextFill",
        "longname": "ApiRun#SetTextFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13559,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/SetTextFill.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Gets the text fill from the current text properties.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @return {ApiFill}\r\n\t * @since 8.1.0\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetTextFill.js\r\n\t */",
        "description": "Gets the text fill from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noRun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\noRun.AddLineBreak();\noParagraph.AddElement(oRun);\nvar oTextPr = oRun.GetTextPr();\noFill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\noTextPr.SetTextFill(oFill);\noSlide.AddObject(oShape);\noParagraph = Api.CreateParagraph();\noFill = oTextPr.GetTextFill();\nvar sType = oFill.GetClassType();\noParagraph.AddText(\"Text fill type: \" + sType);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetTextFill",
        "longname": "ApiRun#GetTextFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13574,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/GetTextFill.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Sets the text outline to the current text run.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\r\n\t * @param {ApiStroke} oStroke - The stroke used to create the text outline.\r\n\t * @return {ApiTextPr} - this text properties.\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetOutLine.js\r\n\t */",
        "description": "Sets the text outline to the current text run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\nvar oTextPr = oRun.GetTextPr();\noTextPr.SetFontSize(50);\noStroke = Api.CreateStroke(0.2 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\noTextPr.SetOutLine(oStroke);\noParagraph.SetJc(\"left\");\noRun.AddText(\"This is a text run with the black text outline set using the text properties.\");\noParagraph.AddElement(oRun);\noSlide.AddObject(oShape);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiStroke"
                    ],
                    "parsedType": null
                },
                "name": "oStroke",
                "description": "The stroke used to create the text outline.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetOutLine",
        "longname": "ApiRun#SetOutLine",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13592,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/SetOutLine.js"
        ]
    },
    {
        "comment": "/**\r\n\t * Gets the text outline from the current text properties.\r\n\t * @memberof ApiTextPr\r\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\r\n\t * @return {ApiStroke}\r\n\t * @since 8.1.0\r\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetOutLine.js\r\n\t */",
        "description": "Gets the text outline from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"slide\"}\nvar oPresentation = Api.GetPresentation();\nvar oSlide = oPresentation.GetSlideByIndex(0);\noSlide.RemoveAllObjects();\nvar oFill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\nvar oShape = Api.CreateShape(\"flowChartMagneticTape\", 300 * 36000, 130 * 36000, oFill, oStroke);\noShape.SetPosition(608400, 1267200);\nvar oDocContent = oShape.GetDocContent();\nvar oParagraph = oDocContent.GetElement(0);\nvar oRun = Api.CreateRun();\noRun.AddText(\"This is just a sample text. \");\noRun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\noRun.AddLineBreak();\noParagraph.AddElement(oRun);\nvar oTextPr = oRun.GetTextPr();\noStroke = Api.CreateStroke(0.2 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\noTextPr.SetOutLine(oStroke);\noSlide.AddObject(oShape);\noParagraph = Api.CreateParagraph();\noStroke = oTextPr.GetOutLine();\nvar sType = oStroke.GetClassType();\noParagraph.AddText(\"Text outline type: \" + sType);\noDocContent.Push(oParagraph);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiStroke"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetOutLine",
        "longname": "ApiRun#GetOutLine",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13607,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Slide/ApiTextPr/Methods/GetOutLine.js"
        ]
    }
]