[
    {
        "comment": "/**\n\t * Base class.\n\t * @global\n\t * @class\n\t * @name Api\n\t * @property {Array} Sheets - Returns the Sheets collection that represents all the sheets in the active workbook.\n\t * @property {ApiWorksheet} ActiveSheet - Returns an object that represents the active sheet.\n\t * @property {ApiRange} Selection - Returns an object that represents the selected range.\n\t * @property {ApiComment[]} Comments - Returns all comments related to the whole workbook.\n\t * @property {FreezePaneType} FreezePanes - Returns or sets the type of freeze panes.\n\t * @property {ApiComment[]} AllComments - Returns all comments from the current workbook including comments from all worksheets.\n\t * @property {ReferenceStyle} ReferenceStyle - Returns or sets the reference style.\n\t * @property {ApiWorksheetFunction} WorksheetFunction - Returns an object that represents the function list.\n\t * @property {ApiPivotTable[]} PivotTables - Returns all pivot tables.\n\t */",
        "description": "Base class.",
        "name": "Api",
        "longname": "Api",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 44,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Array"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Array"
                    }
                },
                "name": "Sheets",
                "description": "Returns the Sheets collection that represents all the sheets in the active workbook.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiWorksheet"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiWorksheet"
                    }
                },
                "name": "ActiveSheet",
                "description": "Returns an object that represents the active sheet.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                },
                "name": "Selection",
                "description": "Returns an object that represents the selected range.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "Array.<ApiComment>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiComment",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "Comments",
                "description": "Returns all comments related to the whole workbook.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "FreezePaneType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "FreezePaneType"
                    }
                },
                "name": "FreezePanes",
                "description": "Returns or sets the type of freeze panes.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "Array.<ApiComment>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiComment",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "AllComments",
                "description": "Returns all comments from the current workbook including comments from all worksheets.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ReferenceStyle"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ReferenceStyle"
                    }
                },
                "name": "ReferenceStyle",
                "description": "Returns or sets the reference style.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiWorksheetFunction"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiWorksheetFunction"
                    }
                },
                "name": "WorksheetFunction",
                "description": "Returns an object that represents the function list.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "Array.<ApiPivotTable>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiPivotTable",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "PivotTables",
                "description": "Returns all pivot tables.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "see": null
    },
    {
        "comment": "/**\n\t * Class representing a container for paragraphs and tables.\n\t * @param Document\n\t * @constructor\n\t */",
        "description": "Class representing a container for paragraphs and tables.",
        "name": "ApiDocumentContent",
        "longname": "ApiDocumentContent",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 229,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\n\t * Class representing a range.\n\t * @constructor\n\t * @property {number} Row - Returns the row number for the selected cell.\n\t * @property {number} Col - Returns the column number for the selected cell.\n\t * @property {ApiRange} Rows - Returns the ApiRange object that represents the rows of the specified range.\n\t * @property {ApiRange} Cols - Returns the ApiRange object that represents the columns of the specified range.\n\t * @property {ApiRange} Cells - Returns a Range object that represents all the cells in the specified range or a specified cell.\n\t * @property {number} Count - Returns the rows or columns count.\n\t * @property {string} Address - Returns the range address.\n\t * @property {string} Value - Returns a value from the first cell of the specified range or sets it to this cell.\n\t * @property {string} Formula - Returns a formula from the first cell of the specified range or sets it to this cell.\n\t * @property {string} Value2 - Returns the value2 (value without format) from the first cell of the specified range or sets it to this cell.\n\t * @property {string} Text - Returns the text from the first cell of the specified range or sets it to this cell.\n\t * @property {ApiColor} FontColor - Sets the text color to the current cell range with the previously created color object.\n\t * @property {boolean} Hidden - Returns or sets the value hiding property.\n\t * @property {number} ColumnWidth - Returns or sets the width of all the columns in the specified range measured in points.\n\t * @property {number} Width - Returns a value that represents the range width measured in points.\n\t * @property {number} RowHeight - Returns or sets the height of the first row in the specified range measured in points.\n\t * @property {number} Height - Returns a value that represents the range height measured in points.\n\t * @property {number} FontSize - Sets the font size to the characters of the current cell range.\n\t * @property {string} FontName - Sets the specified font family as the font name for the current cell range.\n\t * @property {'center' | 'bottom' | 'top' | 'distributed' | 'justify'} AlignVertical - Sets the text vertical alignment to the current cell range.\n\t * @property {'left' | 'right' | 'center' | 'justify'} AlignHorizontal - Sets the text horizontal alignment to the current cell range.\n\t * @property {boolean} Bold - Sets the bold property to the text characters from the current cell or cell range.\n\t * @property {boolean} Italic - Sets the italic property to the text characters in the current cell or cell range.\n\t * @property {'none' | 'single' | 'singleAccounting' | 'double' | 'doubleAccounting'} Underline - Sets the type of underline applied to the font.\n\t * @property {boolean} Strikeout - Sets a value that indicates whether the contents of the current cell or cell range are displayed struck through.\n\t * @property {boolean} WrapText - Returns the information about the wrapping cell style or specifies whether the words in the cell must be wrapped to fit the cell size or not.\n\t * @property {ApiColor|'No Fill'} FillColor - Returns or sets the background color of the current cell range.\n\t * @property {string} NumberFormat - Sets a value that represents the format code for the object.\n\t * @property {ApiRange} MergeArea - Returns the cell or cell range from the merge area.\n\t * @property {ApiWorksheet} Worksheet - Returns the ApiWorksheet object that represents the worksheet containing the specified range.\n\t * @property {ApiName} DefName - Returns the ApiName object.\n\t * @property {ApiComment | null} Comments - Returns the ApiComment collection that represents all the comments from the specified worksheet.\n\t * @property {'xlDownward' | 'xlHorizontal' | 'xlUpward' | 'xlVertical'} Orientation - Sets an angle to the current cell range.\n\t * @property {ApiAreas} Areas - Returns a collection of the areas.\n\t * @property {ApiCharacters} Characters - Returns the ApiCharacters object that represents a range of characters within the object text. Use the ApiCharacters object to format characters within a text string.\n\t * @property {ApiPivotTable | null} PivotTable - Returns the ApiPivotTable object that represents the pivot table report containing the upper-left corner of the specified range.\n\t */",
        "description": "Class representing a range.",
        "name": "ApiRange",
        "longname": "ApiRange",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 138,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "Row",
                "description": "Returns the row number for the selected cell.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "Col",
                "description": "Returns the column number for the selected cell.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                },
                "name": "Rows",
                "description": "Returns the ApiRange object that represents the rows of the specified range.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                },
                "name": "Cols",
                "description": "Returns the ApiRange object that represents the columns of the specified range.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                },
                "name": "Cells",
                "description": "Returns a Range object that represents all the cells in the specified range or a specified cell.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "Count",
                "description": "Returns the rows or columns count.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Address",
                "description": "Returns the range address.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Value",
                "description": "Returns a value from the first cell of the specified range or sets it to this cell.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Formula",
                "description": "Returns a formula from the first cell of the specified range or sets it to this cell.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Value2",
                "description": "Returns the value2 (value without format) from the first cell of the specified range or sets it to this cell.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Text",
                "description": "Returns the text from the first cell of the specified range or sets it to this cell.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiColor"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiColor"
                    }
                },
                "name": "FontColor",
                "description": "Sets the text color to the current cell range with the previously created color object.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "Hidden",
                "description": "Returns or sets the value hiding property.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "ColumnWidth",
                "description": "Returns or sets the width of all the columns in the specified range measured in points.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "Width",
                "description": "Returns a value that represents the range width measured in points.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "RowHeight",
                "description": "Returns or sets the height of the first row in the specified range measured in points.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "Height",
                "description": "Returns a value that represents the range height measured in points.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "FontSize",
                "description": "Sets the font size to the characters of the current cell range.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "FontName",
                "description": "Sets the specified font family as the font name for the current cell range.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "'center'",
                        "'bottom'",
                        "'top'",
                        "'distributed'",
                        "'justify'"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "'center'"
                            },
                            {
                                "type": "NameExpression",
                                "name": "'bottom'"
                            },
                            {
                                "type": "NameExpression",
                                "name": "'top'"
                            },
                            {
                                "type": "NameExpression",
                                "name": "'distributed'"
                            },
                            {
                                "type": "NameExpression",
                                "name": "'justify'"
                            }
                        ]
                    }
                },
                "name": "AlignVertical",
                "description": "Sets the text vertical alignment to the current cell range.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "'left'",
                        "'right'",
                        "'center'",
                        "'justify'"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "'left'"
                            },
                            {
                                "type": "NameExpression",
                                "name": "'right'"
                            },
                            {
                                "type": "NameExpression",
                                "name": "'center'"
                            },
                            {
                                "type": "NameExpression",
                                "name": "'justify'"
                            }
                        ]
                    }
                },
                "name": "AlignHorizontal",
                "description": "Sets the text horizontal alignment to the current cell range.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "Bold",
                "description": "Sets the bold property to the text characters from the current cell or cell range.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "Italic",
                "description": "Sets the italic property to the text characters in the current cell or cell range.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "'none'",
                        "'single'",
                        "'singleAccounting'",
                        "'double'",
                        "'doubleAccounting'"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "'none'"
                            },
                            {
                                "type": "NameExpression",
                                "name": "'single'"
                            },
                            {
                                "type": "NameExpression",
                                "name": "'singleAccounting'"
                            },
                            {
                                "type": "NameExpression",
                                "name": "'double'"
                            },
                            {
                                "type": "NameExpression",
                                "name": "'doubleAccounting'"
                            }
                        ]
                    }
                },
                "name": "Underline",
                "description": "Sets the type of underline applied to the font.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "Strikeout",
                "description": "Sets a value that indicates whether the contents of the current cell or cell range are displayed struck through.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "WrapText",
                "description": "Returns the information about the wrapping cell style or specifies whether the words in the cell must be wrapped to fit the cell size or not.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiColor",
                        "'No Fill'"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiColor"
                            },
                            {
                                "type": "NameExpression",
                                "name": "'No Fill'"
                            }
                        ]
                    }
                },
                "name": "FillColor",
                "description": "Returns or sets the background color of the current cell range.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "NumberFormat",
                "description": "Sets a value that represents the format code for the object.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                },
                "name": "MergeArea",
                "description": "Returns the cell or cell range from the merge area.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiWorksheet"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiWorksheet"
                    }
                },
                "name": "Worksheet",
                "description": "Returns the ApiWorksheet object that represents the worksheet containing the specified range.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiName"
                    }
                },
                "name": "DefName",
                "description": "Returns the ApiName object.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiComment",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiComment"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                },
                "name": "Comments",
                "description": "Returns the ApiComment collection that represents all the comments from the specified worksheet.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "'xlDownward'",
                        "'xlHorizontal'",
                        "'xlUpward'",
                        "'xlVertical'"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "'xlDownward'"
                            },
                            {
                                "type": "NameExpression",
                                "name": "'xlHorizontal'"
                            },
                            {
                                "type": "NameExpression",
                                "name": "'xlUpward'"
                            },
                            {
                                "type": "NameExpression",
                                "name": "'xlVertical'"
                            }
                        ]
                    }
                },
                "name": "Orientation",
                "description": "Sets an angle to the current cell range.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiAreas"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiAreas"
                    }
                },
                "name": "Areas",
                "description": "Returns a collection of the areas.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiCharacters"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiCharacters"
                    }
                },
                "name": "Characters",
                "description": "Returns the ApiCharacters object that represents a range of characters within the object text. Use the ApiCharacters object to format characters within a text string.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiPivotTable",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiPivotTable"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                },
                "name": "PivotTable",
                "description": "Returns the ApiPivotTable object that represents the pivot table report containing the upper-left corner of the specified range.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "see": null
    },
    {
        "comment": "/**\n\t * Class representing the paragraph properties.\n\t * @constructor\n\t */",
        "description": "Class representing the paragraph properties.",
        "name": "ApiParaPr",
        "longname": "ApiParaPr",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 3112,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\n\t * Class representing a paragraph bullet.\n\t * @constructor\n\t */",
        "description": "Class representing a paragraph bullet.",
        "name": "ApiBullet",
        "longname": "ApiBullet",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 3123,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\n\t * Class representing a paragraph.\n\t * @constructor\n\t * @extends {ApiParaPr}\n\t */",
        "description": "Class representing a paragraph.",
        "name": "ApiParagraph",
        "longname": "ApiParagraph",
        "kind": "class",
        "scope": "global",
        "augments": [
            "ApiParaPr"
        ],
        "meta": {
            "lineno": 3133,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\n\t * Class representing the text properties.\n\t * @constructor\n\t */",
        "description": "Class representing the text properties.",
        "name": "ApiTextPr",
        "longname": "ApiTextPr",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 3168,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\n\t * Class representing a small text block called 'run'.\n\t * @constructor\n\t * @extends {ApiTextPr}\n\t */",
        "description": "Class representing a small text block called 'run'.",
        "name": "ApiRun",
        "longname": "ApiRun",
        "kind": "class",
        "scope": "global",
        "augments": [
            "ApiTextPr"
        ],
        "meta": {
            "lineno": 3179,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\n\t * Class representing a comment.\n\t * @constructor\n\t * @property {string} Text - Returns or sets the comment text.\n\t * @property {string} Id - Returns the current comment ID.\n\t * @property {string} AuthorName - Returns or sets the comment author's name.\n\t * @property {string} UserId - Returns or sets the user ID of the comment author.\n\t * @property {boolean} Solved - Checks if a comment is solved or not or marks a comment as solved.\n\t * @property {number | string} TimeUTC - Returns or sets the timestamp of the comment creation in UTC format.\n\t * @property {number | string} Time - Returns or sets the timestamp of the comment creation in the current time zone format.\n\t * @property {string} QuoteText - Returns the quote text of the current comment.\n\t * @property {Number} RepliesCount - Returns a number of the comment replies.\n\t */",
        "description": "Class representing a comment.",
        "name": "ApiComment",
        "longname": "ApiComment",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 389,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Text",
                "description": "Returns or sets the comment text.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Id",
                "description": "Returns the current comment ID.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "AuthorName",
                "description": "Returns or sets the comment author's name.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "UserId",
                "description": "Returns or sets the user ID of the comment author.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "Solved",
                "description": "Checks if a comment is solved or not or marks a comment as solved.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "TimeUTC",
                "description": "Returns or sets the timestamp of the comment creation in UTC format.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "Time",
                "description": "Returns or sets the timestamp of the comment creation in the current time zone format.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "QuoteText",
                "description": "Returns the quote text of the current comment.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Number"
                    }
                },
                "name": "RepliesCount",
                "description": "Returns a number of the comment replies.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "see": null
    },
    {
        "comment": "/**\n\t * Class representing a comment reply.\n\t * @constructor\n\t * @property {string} Text - Returns or sets the comment reply text.\n\t * @property {string} AuthorName - Returns or sets the comment reply author's name.\n\t * @property {string} UserId - Returns or sets the user ID of the comment reply author.\n\t * @property {number | string} TimeUTC - Returns or sets the timestamp of the comment reply creation in UTC format.\n\t * @property {number | string} Time - Returns or sets the timestamp of the comment reply creation in the current time zone format.\n\t */",
        "description": "Class representing a comment reply.",
        "name": "ApiCommentReply",
        "longname": "ApiCommentReply",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 403,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Text",
                "description": "Returns or sets the comment reply text.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "AuthorName",
                "description": "Returns or sets the comment reply author's name.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "UserId",
                "description": "Returns or sets the user ID of the comment reply author.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "TimeUTC",
                "description": "Returns or sets the timestamp of the comment reply creation in UTC format.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "Time",
                "description": "Returns or sets the timestamp of the comment reply creation in the current time zone format.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "see": null
    },
    {
        "comment": "/**\n\t * Class representing a Paragraph hyperlink.\n\t * @constructor\n\t */",
        "description": "Class representing a Paragraph hyperlink.",
        "name": "ApiHyperlink",
        "longname": "ApiHyperlink",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 3211,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\n\t * Returns a type of the ApiHyperlink class.\n\t * @memberof ApiHyperlink\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {\"hyperlink\"}\n\t * @see office-js-api/Examples/{Editor}/ApiHyperlink/Methods/GetClassType.js\n\t */",
        "description": "Returns a type of the ApiHyperlink class.",
        "memberof": "ApiHyperlink",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"hyperlink\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"hyperlink\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiHyperlink#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3224,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiHyperlink/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the hyperlink address.\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {string} sLink - The hyperlink address.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiHyperlink/Methods/SetLink.js\n\t */",
        "description": "Sets the hyperlink address.",
        "memberof": "ApiHyperlink",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sLink",
                "description": "The hyperlink address.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetLink",
        "longname": "ApiHyperlink#SetLink",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3336,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiHyperlink/Methods/SetLink.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the hyperlink display text.\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {string} sDisplay - The text to display the hyperlink.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiHyperlink/Methods/SetDisplayedText.js\n\t */",
        "description": "Sets the hyperlink display text.",
        "memberof": "ApiHyperlink",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sDisplay",
                "description": "The text to display the hyperlink.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetDisplayedText",
        "longname": "ApiHyperlink#SetDisplayedText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3362,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiHyperlink/Methods/SetDisplayedText.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the screen tip text of the hyperlink.\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {string} sScreenTipText - The screen tip text of the hyperlink.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiHyperlink/Methods/SetScreenTipText.js\n\t */",
        "description": "Sets the screen tip text of the hyperlink.",
        "memberof": "ApiHyperlink",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sScreenTipText",
                "description": "The screen tip text of the hyperlink.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetScreenTipText",
        "longname": "ApiHyperlink#SetScreenTipText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3399,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiHyperlink/Methods/SetScreenTipText.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the hyperlink address.\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {string} \n\t * @see office-js-api/Examples/{Editor}/ApiHyperlink/Methods/GetLinkedText.js\n\t */",
        "description": "Returns the hyperlink address.",
        "memberof": "ApiHyperlink",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetLinkedText",
        "longname": "ApiHyperlink#GetLinkedText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3414,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiHyperlink/Methods/GetLinkedText.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the hyperlink display text.\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {string} \n\t * @see office-js-api/Examples/{Editor}/ApiHyperlink/Methods/GetDisplayedText.js\n\t */",
        "description": "Returns the hyperlink display text.",
        "memberof": "ApiHyperlink",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetDisplayedText",
        "longname": "ApiHyperlink#GetDisplayedText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3431,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiHyperlink/Methods/GetDisplayedText.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the screen tip text of the hyperlink.\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {string} \n\t * @see office-js-api/Examples/{Editor}/ApiHyperlink/Methods/GetScreenTipText.js\n\t */",
        "description": "Returns the screen tip text of the hyperlink.",
        "memberof": "ApiHyperlink",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetScreenTipText",
        "longname": "ApiHyperlink#GetScreenTipText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3448,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiHyperlink/Methods/GetScreenTipText.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the hyperlink element using the position specified.\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {number} nPos - The position where the element which content we want to get must be located.\n\t * @returns {?ParagraphContent}\n\t * @see office-js-api/Examples/{Editor}/ApiHyperlink/Methods/GetElement.js\n\t */",
        "description": "Returns the hyperlink element using the position specified.",
        "memberof": "ApiHyperlink",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nPos",
                "description": "The position where the element which content we want to get must be located.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ParagraphContent"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ParagraphContent",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetElement",
        "longname": "ApiHyperlink#GetElement",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3466,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiHyperlink/Methods/GetElement.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a number of elements in the current hyperlink.\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiHyperlink/Methods/GetElementsCount.js\n\t */",
        "description": "Returns a number of elements in the current hyperlink.",
        "memberof": "ApiHyperlink",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GetElementsCount",
        "longname": "ApiHyperlink#GetElementsCount",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3482,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiHyperlink/Methods/GetElementsCount.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the default hyperlink style.\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiHyperlink/Methods/SetDefaultStyle.js\n\t */",
        "description": "Sets the default hyperlink style.",
        "memberof": "ApiHyperlink",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetDefaultStyle",
        "longname": "ApiHyperlink#SetDefaultStyle",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3492,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiHyperlink/Methods/SetDefaultStyle.js"
        ]
    },
    {
        "comment": "/**\n\t * Class representing an unsupported element.\n\t * @constructor\n\t */",
        "description": "Class representing an unsupported element.",
        "name": "ApiUnsupported",
        "longname": "ApiUnsupported",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 3639,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\n\t * Class representing a graphical object.\n\t * @constructor\n\t */",
        "description": "Class representing a graphical object.",
        "name": "ApiDrawing",
        "longname": "ApiDrawing",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 148,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\n\t * Class representing an image.\n\t * @constructor\n\t */",
        "description": "Class representing an image.",
        "name": "ApiImage",
        "longname": "ApiImage",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 168,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\n\t * Class representing an OLE object.\n\t * @constructor\n\t */",
        "description": "Class representing an OLE object.",
        "name": "ApiOleObject",
        "longname": "ApiOleObject",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 189,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\n\t * Class representing a shape.\n\t * @constructor\n\t */",
        "description": "Class representing a shape.",
        "name": "ApiShape",
        "longname": "ApiShape",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 156,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\n\t * Class representing a chart.\n\t * @constructor\n\t *\n\t */",
        "description": "Class representing a chart.",
        "name": "ApiChart",
        "longname": "ApiChart",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 3693,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\n     * Class representing a group of drawings.\n     * @constructor\n     */",
        "description": "Class representing a group of drawings.",
        "name": "ApiGroup",
        "longname": "ApiGroup",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 179,
            "columnno": 4
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\n\t * Class representing a chart series.\n\t * @constructor\n\t *\n\t */",
        "description": "Class representing a chart series.",
        "name": "ApiChartSeries",
        "longname": "ApiChartSeries",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 3716,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\n\t * Class representing a base class for color types.\n\t * @constructor\n\t */",
        "description": "Class representing a base class for color types.",
        "name": "ApiUniColor",
        "longname": "ApiUniColor",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 3726,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\n\t * Class representing an RGB Color.\n\t * @constructor\n\t */",
        "description": "Class representing an RGB Color.",
        "name": "ApiRGBColor",
        "longname": "ApiRGBColor",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 3734,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\n\t * Class representing a Scheme Color.\n\t * @constructor\n\t */",
        "description": "Class representing a Scheme Color.",
        "name": "ApiSchemeColor",
        "longname": "ApiSchemeColor",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 3745,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\n\t * Class representing a Preset Color.\n\t * @constructor\n\t */",
        "description": "Class representing a Preset Color.",
        "name": "ApiPresetColor",
        "longname": "ApiPresetColor",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 3776,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\n\t * Class representing a base class for fill.\n\t * @constructor\n\t */",
        "description": "Class representing a base class for fill.",
        "name": "ApiFill",
        "longname": "ApiFill",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 3790,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\n\t * Class representing a stroke.\n\t * @constructor\n\t */",
        "description": "Class representing a stroke.",
        "name": "ApiStroke",
        "longname": "ApiStroke",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 3800,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\n\t * Class representing gradient stop.\n\t * @constructor\n\t */",
        "description": "Class representing gradient stop.",
        "name": "ApiGradientStop",
        "longname": "ApiGradientStop",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 3810,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\n     * Twentieths of a point (equivalent to 1/1440th of an inch).\n     * @typedef {number} twips\n     * @see office-js-api/Examples/Enumerations/twips.js\n\t */",
        "description": "Twentieths of a point (equivalent to 1/1440th of an inch).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nparagraph.SetEqualColumns(2, 720);\n```",
        "name": "twips",
        "longname": "twips",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 204,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/twips.js"
        ],
        "type": {
            "names": [
                "number"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "number"
            }
        }
    },
    {
        "comment": "/**\n     * Any valid element which can be added to the document structure.\n\t * @typedef {(ApiParagraph)} DocumentElement\n\t * @see office-js-api/Examples/Enumerations/DocumentElement.js\n\t */",
        "description": "Any valid element which can be added to the document structure.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\ndoc.AddElement(paragraph);\n```",
        "name": "DocumentElement",
        "longname": "DocumentElement",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 332,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/DocumentElement.js"
        ],
        "type": {
            "names": [
                "ApiParagraph"
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "ApiParagraph"
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n     * The style type used for the document element.\n\t * @typedef {(\"paragraph\" | \"table\" | \"run\" | \"numbering\")} StyleType\n\t * @see office-js-api/Examples/Enumerations/StyleType.js\n\t */",
        "description": "The style type used for the document element.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet normalStyle = doc.GetDefaultStyle(\"paragraph\");\n```",
        "name": "StyleType",
        "longname": "StyleType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 3879,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/StyleType.js"
        ],
        "type": {
            "names": [
                "\"paragraph\"",
                "\"table\"",
                "\"run\"",
                "\"numbering\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"paragraph\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"table\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"run\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"numbering\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n     * 240ths of a line.\n     * @typedef {number} line240\n     * @see office-js-api/Examples/Enumerations/line240.js\n\t */",
        "description": "240ths of a line.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nparaPr.SetSpacingLine(240, \"auto\");\n```",
        "name": "line240",
        "longname": "line240",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 210,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/line240.js"
        ],
        "type": {
            "names": [
                "number"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "number"
            }
        }
    },
    {
        "comment": "/**\n     * Half-points (2 half-points = 1 point).\n     * @typedef {number} hps\n     * @see office-js-api/Examples/Enumerations/hps.js\n\t */",
        "description": "Half-points (2 half-points = 1 point).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\ntextPr.SetFontSize(22);\n```",
        "name": "hps",
        "longname": "hps",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 216,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/hps.js"
        ],
        "type": {
            "names": [
                "number"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "number"
            }
        }
    },
    {
        "comment": "/**\n     * A numeric value from 0 to 255.\n     * @typedef {number} byte\n     * @see office-js-api/Examples/Enumerations/byte.js\n\t */",
        "description": "A numeric value from 0 to 255.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n// The resulting color is green, the bytes are measured in decimal numbers:\nlet rgbColorGreen = Api.CreateRGBColor(0, 255, 0);\n// The resulting color is red, the bytes are measured in hexadecimal numbers:\nlet rgbColorRed = Api.CreateRGBColor(0xff, 0, 0);\n```",
        "name": "byte",
        "longname": "byte",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 222,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/byte.js"
        ],
        "type": {
            "names": [
                "number"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "number"
            }
        }
    },
    {
        "comment": "/**\n     * 60000th of a degree (5400000 = 90 degrees).\n     * @typedef {number} PositiveFixedAngle\n     * @see office-js-api/Examples/Enumerations/PositiveFixedAngle.js\n\t */",
        "description": "60000th of a degree (5400000 = 90 degrees).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet fill = Api.CreateLinearGradientFill([gs1, gs2], 5400000);\n```",
        "name": "PositiveFixedAngle",
        "longname": "PositiveFixedAngle",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 228,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/PositiveFixedAngle.js"
        ],
        "type": {
            "names": [
                "number"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "number"
            }
        }
    },
    {
        "comment": "/**\n     * A border type.\n     * @typedef {(\"none\" | \"single\")} BorderType\n     * @see office-js-api/Examples/Enumerations/BorderType.js\n\t */",
        "description": "A border type.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nparaPr.SetBottomBorder(\"single\", 24, 0, 0, 255, 0);\n```",
        "name": "BorderType",
        "longname": "BorderType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 234,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/BorderType.js"
        ],
        "type": {
            "names": [
                "\"none\"",
                "\"single\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"none\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"single\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * A shade type which can be added to the document element.\n\t * @typedef {(\"nil\" | \"clear\")} ShdType\n\t * @see office-js-api/Examples/Enumerations/ShdType.js\n\t */",
        "description": "A shade type which can be added to the document element.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\ntablePr.SetShd(\"clear\", 0, 255, 0, false);\n```",
        "name": "ShdType",
        "longname": "ShdType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 3917,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/ShdType.js"
        ],
        "type": {
            "names": [
                "\"nil\"",
                "\"clear\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"nil\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"clear\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n     * Types of custom tab.\n     * @typedef {(\"clear\" | \"left\" | \"right\" | \"center\")} TabJc\n     * @see office-js-api/Examples/Enumerations/TabJc.js\n\t */",
        "description": "Types of custom tab.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nparaPr.SetTabs([1000, 1500, 3000], [\"center\", \"left\", \"right\"]);\n```",
        "name": "TabJc",
        "longname": "TabJc",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 240,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/TabJc.js"
        ],
        "type": {
            "names": [
                "\"clear\"",
                "\"left\"",
                "\"right\"",
                "\"center\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"clear\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"left\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"right\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"center\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n     * Eighths of a point (24 eighths of a point = 3 points).\n     * @typedef {number} pt_8\n     * @see office-js-api/Examples/Enumerations/pt_8.js\n\t */",
        "description": "Eighths of a point (24 eighths of a point = 3 points).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nparaPr.SetBottomBorder(\"single\", 48, 0, 0, 255, 0);\n```",
        "name": "pt_8",
        "longname": "pt_8",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 246,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/pt_8.js"
        ],
        "type": {
            "names": [
                "number"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "number"
            }
        }
    },
    {
        "comment": "/**\n     * A point.\n     * @typedef {number} pt\n     * @see office-js-api/Examples/Enumerations/pt.js\n\t */",
        "description": "A point.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nparaPr.SetBottomBorder(\"single\", 24, 1, 0, 255, 0);\n```",
        "name": "pt",
        "longname": "pt",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 252,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/pt.js"
        ],
        "type": {
            "names": [
                "number"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "number"
            }
        }
    },
    {
        "comment": "/**\n\t * Header and footer types which can be applied to the document sections.\n     * <b>\"default\"</b> - a header or footer which can be applied to any default page.\n     * <b>\"title\"</b> - a header or footer which is applied to the title page.\n     * <b>\"even\"</b> - a header or footer which can be applied to even pages to distinguish them from the odd ones (which will be considered default).\n\t * @typedef {(\"default\" | \"title\" | \"even\")} HdrFtrType\n\t * @see office-js-api/Examples/Enumerations/HdrFtrType.js\n\t */",
        "description": "Header and footer types which can be applied to the document sections.\n<b>\"default\"</b> - a header or footer which can be applied to any default page.\n<b>\"title\"</b> - a header or footer which is applied to the title page.\n<b>\"even\"</b> - a header or footer which can be applied to even pages to distinguish them from the odd ones (which will be considered default).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet docContent = finalSection.RemoveHeader(\"title\");\n```",
        "name": "HdrFtrType",
        "longname": "HdrFtrType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 3941,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/HdrFtrType.js"
        ],
        "type": {
            "names": [
                "\"default\"",
                "\"title\"",
                "\"even\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"default\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"title\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"even\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * The possible values for the units of the width property are defined by a specific table or table cell width property.\n     * <b>\"auto\"</b> - sets the table or table cell width to auto width.\n     * <b>\"twips\"</b> - sets the table or table cell width to be measured in twentieths of a point.\n     * <b>\"nul\"</b> - sets the table or table cell width to be of a zero value.\n     * <b>\"percent\"</b> - sets the table or table cell width to be measured in percent to the parent container.\n\t * @typedef {(\"auto\" | \"twips\" | \"nul\" | \"percent\")} TableWidth\n\t * @see office-js-api/Examples/Enumerations/TableWidth.js\n\t */",
        "description": "The possible values for the units of the width property are defined by a specific table or table cell width property.\n<b>\"auto\"</b> - sets the table or table cell width to auto width.\n<b>\"twips\"</b> - sets the table or table cell width to be measured in twentieths of a point.\n<b>\"nul\"</b> - sets the table or table cell width to be of a zero value.\n<b>\"percent\"</b> - sets the table or table cell width to be measured in percent to the parent container.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\ntableCell.SetWidth(\"twips\", 2000);\n```",
        "name": "TableWidth",
        "longname": "TableWidth",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 3950,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/TableWidth.js"
        ],
        "type": {
            "names": [
                "\"auto\"",
                "\"twips\"",
                "\"nul\"",
                "\"percent\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"auto\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"twips\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"nul\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"percent\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * This simple type specifies possible values for the table sections to which the current conditional formatting properties will be applied when this selected table style is used.\n\t * <b>\"topLeftCell\"</b> - specifies that the table formatting is applied to the top left cell.\n\t * <b>\"topRightCell\"</b> - specifies that the table formatting is applied to the top right cell.\n\t * <b>\"bottomLeftCell\"</b> - specifies that the table formatting is applied to the bottom left cell.\n\t * <b>\"bottomRightCell\"</b> - specifies that the table formatting is applied to the bottom right cell.\n\t * <b>\"firstRow\"</b> - specifies that the table formatting is applied to the first row.\n\t * <b>\"lastRow\"</b> - specifies that the table formatting is applied to the last row.\n\t * <b>\"firstColumn\"</b> - specifies that the table formatting is applied to the first column. Any subsequent row which is in *table header* ({@link ApiTableRowPr#SetTableHeader}) will also use this conditional format.\n\t * <b>\"lastColumn\"</b> - specifies that the table formatting is applied to the last column.\n\t * <b>\"bandedColumn\"</b> - specifies that the table formatting is applied to odd numbered groupings of rows.\n\t * <b>\"bandedColumnEven\"</b> - specifies that the table formatting is applied to even numbered groupings of rows.\n\t * <b>\"bandedRow\"</b> - specifies that the table formatting is applied to odd numbered groupings of columns.\n\t * <b>\"bandedRowEven\"</b> - specifies that the table formatting is applied to even numbered groupings of columns.\n\t * <b>\"wholeTable\"</b> - specifies that the conditional formatting is applied to the whole table.\n\t * @typedef {(\"topLeftCell\" | \"topRightCell\" | \"bottomLeftCell\" | \"bottomRightCell\" | \"firstRow\" | \"lastRow\" |\n\t *     \"firstColumn\" | \"lastColumn\" | \"bandedColumn\" | \"bandedColumnEven\" | \"bandedRow\" | \"bandedRowEven\" |\n\t *     \"wholeTable\")} TableStyleOverrideType\n\t * @see office-js-api/Examples/Enumerations/TableStyleOverrideType.js\n\t */",
        "description": "This simple type specifies possible values for the table sections to which the current conditional formatting properties will be applied when this selected table style is used.\n<b>\"topLeftCell\"</b> - specifies that the table formatting is applied to the top left cell.\n<b>\"topRightCell\"</b> - specifies that the table formatting is applied to the top right cell.\n<b>\"bottomLeftCell\"</b> - specifies that the table formatting is applied to the bottom left cell.\n<b>\"bottomRightCell\"</b> - specifies that the table formatting is applied to the bottom right cell.\n<b>\"firstRow\"</b> - specifies that the table formatting is applied to the first row.\n<b>\"lastRow\"</b> - specifies that the table formatting is applied to the last row.\n<b>\"firstColumn\"</b> - specifies that the table formatting is applied to the first column. Any subsequent row which is in *table header* ({@link ApiTableRowPr#SetTableHeader}) will also use this conditional format.\n<b>\"lastColumn\"</b> - specifies that the table formatting is applied to the last column.\n<b>\"bandedColumn\"</b> - specifies that the table formatting is applied to odd numbered groupings of rows.\n<b>\"bandedColumnEven\"</b> - specifies that the table formatting is applied to even numbered groupings of rows.\n<b>\"bandedRow\"</b> - specifies that the table formatting is applied to odd numbered groupings of columns.\n<b>\"bandedRowEven\"</b> - specifies that the table formatting is applied to even numbered groupings of columns.\n<b>\"wholeTable\"</b> - specifies that the conditional formatting is applied to the whole table.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\ntableStyle.GetConditionalTableStyle(\"topLeftCell\").GetTableCellPr().SetShd(\"clear\", 255, 0, 0);\n```",
        "name": "TableStyleOverrideType",
        "longname": "TableStyleOverrideType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 3960,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/TableStyleOverrideType.js"
        ],
        "type": {
            "names": [
                "\"topLeftCell\"",
                "\"topRightCell\"",
                "\"bottomLeftCell\"",
                "\"bottomRightCell\"",
                "\"firstRow\"",
                "\"lastRow\"",
                "\"firstColumn\"",
                "\"lastColumn\"",
                "\"bandedColumn\"",
                "\"bandedColumnEven\"",
                "\"bandedRow\"",
                "\"bandedRowEven\"",
                "\"wholeTable\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"topLeftCell\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"topRightCell\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bottomLeftCell\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bottomRightCell\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"firstRow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lastRow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"firstColumn\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lastColumn\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bandedColumn\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bandedColumnEven\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bandedRow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bandedRowEven\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"wholeTable\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * The types of elements that can be added to the paragraph structure.\n\t * @typedef {(ApiUnsupported | ApiRun | ApiHyperlink)} ParagraphContent\n\t * @see office-js-api/Examples/Enumerations/ParagraphContent.js\n\t */",
        "description": "The types of elements that can be added to the paragraph structure.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nparagraph.AddElement(run, 0);\n```",
        "name": "ParagraphContent",
        "longname": "ParagraphContent",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 338,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/ParagraphContent.js"
        ],
        "type": {
            "names": [
                "ApiUnsupported",
                "ApiRun",
                "ApiHyperlink"
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "ApiUnsupported"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiRun"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiHyperlink"
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * The possible values for the base which the relative horizontal positioning of an object will be calculated from.\n\t * @typedef {(\"character\" | \"column\" | \"leftMargin\" | \"rightMargin\" | \"margin\" | \"page\")} RelFromH\n\t * @see office-js-api/Examples/Enumerations/RelFromH.js\n\t */",
        "description": "The possible values for the base which the relative horizontal positioning of an object will be calculated from.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\ndrawing.SetHorAlign(\"page\", \"center\");\n```",
        "name": "RelFromH",
        "longname": "RelFromH",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 3987,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/RelFromH.js"
        ],
        "type": {
            "names": [
                "\"character\"",
                "\"column\"",
                "\"leftMargin\"",
                "\"rightMargin\"",
                "\"margin\"",
                "\"page\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"character\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"column\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"leftMargin\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"rightMargin\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"margin\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"page\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * The possible values for the base which the relative vertical positioning of an object will be calculated from.\n\t * @typedef {(\"bottomMargin\" | \"topMargin\" | \"margin\" | \"page\" | \"line\" | \"paragraph\")} RelFromV\n\t * @see office-js-api/Examples/Enumerations/RelFromV.js\n\t */",
        "description": "The possible values for the base which the relative vertical positioning of an object will be calculated from.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\ndrawing.SetVerAlign(\"page\", \"center\");\n```",
        "name": "RelFromV",
        "longname": "RelFromV",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 3993,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/RelFromV.js"
        ],
        "type": {
            "names": [
                "\"bottomMargin\"",
                "\"topMargin\"",
                "\"margin\"",
                "\"page\"",
                "\"line\"",
                "\"paragraph\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"bottomMargin\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"topMargin\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"margin\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"page\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"line\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"paragraph\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n     * English measure unit. 1 mm = 36000 EMUs, 1 inch = 914400 EMUs.\n     * @typedef {number} EMU\n     * @see office-js-api/Examples/Enumerations/EMU.js\n\t */",
        "description": "English measure unit. 1 mm = 36000 EMUs, 1 inch = 914400 EMUs.",
        "name": "EMU",
        "longname": "EMU",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 259,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/EMU.js"
        ],
        "type": {
            "names": [
                "number"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "number"
            }
        }
    },
    {
        "comment": "/**\n     * This type specifies the preset shape geometry that will be used for a shape.\n     * @typedef {(\"accentBorderCallout1\" | \"accentBorderCallout2\" | \"accentBorderCallout3\" | \"accentCallout1\" | \"accentCallout2\" | \"accentCallout3\" | \"actionButtonBackPrevious\" | \"actionButtonBeginning\" | \"actionButtonBlank\" | \"actionButtonDocument\" | \"actionButtonEnd\" | \"actionButtonForwardNext\" | \"actionButtonHelp\" | \"actionButtonHome\" | \"actionButtonInformation\" | \"actionButtonMovie\" | \"actionButtonReturn\" | \"actionButtonSound\" | \"arc\" | \"bentArrow\" | \"bentConnector2\" | \"bentConnector3\" | \"bentConnector4\" | \"bentConnector5\" | \"bentUpArrow\" | \"bevel\" | \"blockArc\" | \"borderCallout1\" | \"borderCallout2\" | \"borderCallout3\" | \"bracePair\" | \"bracketPair\" | \"callout1\" | \"callout2\" | \"callout3\" | \"can\" | \"chartPlus\" | \"chartStar\" | \"chartX\" | \"chevron\" | \"chord\" | \"circularArrow\" | \"cloud\" | \"cloudCallout\" | \"corner\" | \"cornerTabs\" | \"cube\" | \"curvedConnector2\" | \"curvedConnector3\" | \"curvedConnector4\" | \"curvedConnector5\" | \"curvedDownArrow\" | \"curvedLeftArrow\" | \"curvedRightArrow\" | \"curvedUpArrow\" | \"decagon\" | \"diagStripe\" | \"diamond\" | \"dodecagon\" | \"donut\" | \"doubleWave\" | \"downArrow\" | \"downArrowCallout\" | \"ellipse\" | \"ellipseRibbon\" | \"ellipseRibbon2\" | \"flowChartAlternateProcess\" | \"flowChartCollate\" | \"flowChartConnector\" | \"flowChartDecision\" | \"flowChartDelay\" | \"flowChartDisplay\" | \"flowChartDocument\" | \"flowChartExtract\" | \"flowChartInputOutput\" | \"flowChartInternalStorage\" | \"flowChartMagneticDisk\" | \"flowChartMagneticDrum\" | \"flowChartMagneticTape\" | \"flowChartManualInput\" | \"flowChartManualOperation\" | \"flowChartMerge\" | \"flowChartMultidocument\" | \"flowChartOfflineStorage\" | \"flowChartOffpageConnector\" | \"flowChartOnlineStorage\" | \"flowChartOr\" | \"flowChartPredefinedProcess\" | \"flowChartPreparation\" | \"flowChartProcess\" | \"flowChartPunchedCard\" | \"flowChartPunchedTape\" | \"flowChartSort\" | \"flowChartSummingJunction\" | \"flowChartTerminator\" | \"foldedCorner\" | \"frame\" | \"funnel\" | \"gear6\" | \"gear9\" | \"halfFrame\" | \"heart\" | \"heptagon\" | \"hexagon\" | \"homePlate\" | \"horizontalScroll\" | \"irregularSeal1\" | \"irregularSeal2\" | \"leftArrow\" | \"leftArrowCallout\" | \"leftBrace\" | \"leftBracket\" | \"leftCircularArrow\" | \"leftRightArrow\" | \"leftRightArrowCallout\" | \"leftRightCircularArrow\" | \"leftRightRibbon\" | \"leftRightUpArrow\" | \"leftUpArrow\" | \"lightningBolt\" | \"line\" | \"lineInv\" | \"mathDivide\" | \"mathEqual\" | \"mathMinus\" | \"mathMultiply\" | \"mathNotEqual\" | \"mathPlus\" | \"moon\" | \"nonIsoscelesTrapezoid\" | \"noSmoking\" | \"notchedRightArrow\" | \"octagon\" | \"parallelogram\" | \"pentagon\" | \"pie\" | \"pieWedge\" | \"plaque\" | \"plaqueTabs\" | \"plus\" | \"quadArrow\" | \"quadArrowCallout\" | \"rect\" | \"ribbon\" | \"ribbon2\" | \"rightArrow\" | \"rightArrowCallout\" | \"rightBrace\" | \"rightBracket\" | \"round1Rect\" | \"round2DiagRect\" | \"round2SameRect\" | \"roundRect\" | \"rtTriangle\" | \"smileyFace\" | \"snip1Rect\" | \"snip2DiagRect\" | \"snip2SameRect\" | \"snipRoundRect\" | \"squareTabs\" | \"star10\" | \"star12\" | \"star16\" | \"star24\" | \"star32\" | \"star4\" | \"star5\" | \"star6\" | \"star7\" | \"star8\" | \"straightConnector1\" | \"stripedRightArrow\" | \"sun\" | \"swooshArrow\" | \"teardrop\" | \"trapezoid\" | \"triangle\" | \"upArrowCallout\" | \"upDownArrow\" | \"upDownArrow\" | \"upDownArrowCallout\" | \"uturnArrow\" | \"verticalScroll\" | \"wave\" | \"wedgeEllipseCallout\" | \"wedgeRectCallout\" | \"wedgeRoundRectCallout\")} ShapeType\n     * @see office-js-api/Examples/Enumerations/ShapeType.js\n\t */",
        "description": "This type specifies the preset shape geometry that will be used for a shape.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet drawing = Api.CreateShape(\"diamond\", 100 * 36000, 100 * 36000, fill, stroke);\n```",
        "name": "ShapeType",
        "longname": "ShapeType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 265,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/ShapeType.js"
        ],
        "type": {
            "names": [
                "\"accentBorderCallout1\"",
                "\"accentBorderCallout2\"",
                "\"accentBorderCallout3\"",
                "\"accentCallout1\"",
                "\"accentCallout2\"",
                "\"accentCallout3\"",
                "\"actionButtonBackPrevious\"",
                "\"actionButtonBeginning\"",
                "\"actionButtonBlank\"",
                "\"actionButtonDocument\"",
                "\"actionButtonEnd\"",
                "\"actionButtonForwardNext\"",
                "\"actionButtonHelp\"",
                "\"actionButtonHome\"",
                "\"actionButtonInformation\"",
                "\"actionButtonMovie\"",
                "\"actionButtonReturn\"",
                "\"actionButtonSound\"",
                "\"arc\"",
                "\"bentArrow\"",
                "\"bentConnector2\"",
                "\"bentConnector3\"",
                "\"bentConnector4\"",
                "\"bentConnector5\"",
                "\"bentUpArrow\"",
                "\"bevel\"",
                "\"blockArc\"",
                "\"borderCallout1\"",
                "\"borderCallout2\"",
                "\"borderCallout3\"",
                "\"bracePair\"",
                "\"bracketPair\"",
                "\"callout1\"",
                "\"callout2\"",
                "\"callout3\"",
                "\"can\"",
                "\"chartPlus\"",
                "\"chartStar\"",
                "\"chartX\"",
                "\"chevron\"",
                "\"chord\"",
                "\"circularArrow\"",
                "\"cloud\"",
                "\"cloudCallout\"",
                "\"corner\"",
                "\"cornerTabs\"",
                "\"cube\"",
                "\"curvedConnector2\"",
                "\"curvedConnector3\"",
                "\"curvedConnector4\"",
                "\"curvedConnector5\"",
                "\"curvedDownArrow\"",
                "\"curvedLeftArrow\"",
                "\"curvedRightArrow\"",
                "\"curvedUpArrow\"",
                "\"decagon\"",
                "\"diagStripe\"",
                "\"diamond\"",
                "\"dodecagon\"",
                "\"donut\"",
                "\"doubleWave\"",
                "\"downArrow\"",
                "\"downArrowCallout\"",
                "\"ellipse\"",
                "\"ellipseRibbon\"",
                "\"ellipseRibbon2\"",
                "\"flowChartAlternateProcess\"",
                "\"flowChartCollate\"",
                "\"flowChartConnector\"",
                "\"flowChartDecision\"",
                "\"flowChartDelay\"",
                "\"flowChartDisplay\"",
                "\"flowChartDocument\"",
                "\"flowChartExtract\"",
                "\"flowChartInputOutput\"",
                "\"flowChartInternalStorage\"",
                "\"flowChartMagneticDisk\"",
                "\"flowChartMagneticDrum\"",
                "\"flowChartMagneticTape\"",
                "\"flowChartManualInput\"",
                "\"flowChartManualOperation\"",
                "\"flowChartMerge\"",
                "\"flowChartMultidocument\"",
                "\"flowChartOfflineStorage\"",
                "\"flowChartOffpageConnector\"",
                "\"flowChartOnlineStorage\"",
                "\"flowChartOr\"",
                "\"flowChartPredefinedProcess\"",
                "\"flowChartPreparation\"",
                "\"flowChartProcess\"",
                "\"flowChartPunchedCard\"",
                "\"flowChartPunchedTape\"",
                "\"flowChartSort\"",
                "\"flowChartSummingJunction\"",
                "\"flowChartTerminator\"",
                "\"foldedCorner\"",
                "\"frame\"",
                "\"funnel\"",
                "\"gear6\"",
                "\"gear9\"",
                "\"halfFrame\"",
                "\"heart\"",
                "\"heptagon\"",
                "\"hexagon\"",
                "\"homePlate\"",
                "\"horizontalScroll\"",
                "\"irregularSeal1\"",
                "\"irregularSeal2\"",
                "\"leftArrow\"",
                "\"leftArrowCallout\"",
                "\"leftBrace\"",
                "\"leftBracket\"",
                "\"leftCircularArrow\"",
                "\"leftRightArrow\"",
                "\"leftRightArrowCallout\"",
                "\"leftRightCircularArrow\"",
                "\"leftRightRibbon\"",
                "\"leftRightUpArrow\"",
                "\"leftUpArrow\"",
                "\"lightningBolt\"",
                "\"line\"",
                "\"lineInv\"",
                "\"mathDivide\"",
                "\"mathEqual\"",
                "\"mathMinus\"",
                "\"mathMultiply\"",
                "\"mathNotEqual\"",
                "\"mathPlus\"",
                "\"moon\"",
                "\"nonIsoscelesTrapezoid\"",
                "\"noSmoking\"",
                "\"notchedRightArrow\"",
                "\"octagon\"",
                "\"parallelogram\"",
                "\"pentagon\"",
                "\"pie\"",
                "\"pieWedge\"",
                "\"plaque\"",
                "\"plaqueTabs\"",
                "\"plus\"",
                "\"quadArrow\"",
                "\"quadArrowCallout\"",
                "\"rect\"",
                "\"ribbon\"",
                "\"ribbon2\"",
                "\"rightArrow\"",
                "\"rightArrowCallout\"",
                "\"rightBrace\"",
                "\"rightBracket\"",
                "\"round1Rect\"",
                "\"round2DiagRect\"",
                "\"round2SameRect\"",
                "\"roundRect\"",
                "\"rtTriangle\"",
                "\"smileyFace\"",
                "\"snip1Rect\"",
                "\"snip2DiagRect\"",
                "\"snip2SameRect\"",
                "\"snipRoundRect\"",
                "\"squareTabs\"",
                "\"star10\"",
                "\"star12\"",
                "\"star16\"",
                "\"star24\"",
                "\"star32\"",
                "\"star4\"",
                "\"star5\"",
                "\"star6\"",
                "\"star7\"",
                "\"star8\"",
                "\"straightConnector1\"",
                "\"stripedRightArrow\"",
                "\"sun\"",
                "\"swooshArrow\"",
                "\"teardrop\"",
                "\"trapezoid\"",
                "\"triangle\"",
                "\"upArrowCallout\"",
                "\"upDownArrow\"",
                "\"upDownArrow\"",
                "\"upDownArrowCallout\"",
                "\"uturnArrow\"",
                "\"verticalScroll\"",
                "\"wave\"",
                "\"wedgeEllipseCallout\"",
                "\"wedgeRectCallout\"",
                "\"wedgeRoundRectCallout\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"accentBorderCallout1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"accentBorderCallout2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"accentBorderCallout3\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"accentCallout1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"accentCallout2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"accentCallout3\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"actionButtonBackPrevious\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"actionButtonBeginning\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"actionButtonBlank\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"actionButtonDocument\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"actionButtonEnd\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"actionButtonForwardNext\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"actionButtonHelp\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"actionButtonHome\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"actionButtonInformation\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"actionButtonMovie\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"actionButtonReturn\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"actionButtonSound\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"arc\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bentArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bentConnector2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bentConnector3\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bentConnector4\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bentConnector5\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bentUpArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bevel\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"blockArc\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"borderCallout1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"borderCallout2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"borderCallout3\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bracePair\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bracketPair\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"callout1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"callout2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"callout3\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"can\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"chartPlus\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"chartStar\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"chartX\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"chevron\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"chord\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"circularArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"cloud\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"cloudCallout\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"corner\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"cornerTabs\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"cube\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"curvedConnector2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"curvedConnector3\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"curvedConnector4\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"curvedConnector5\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"curvedDownArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"curvedLeftArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"curvedRightArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"curvedUpArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"decagon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"diagStripe\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"diamond\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dodecagon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"donut\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"doubleWave\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"downArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"downArrowCallout\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ellipse\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ellipseRibbon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ellipseRibbon2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartAlternateProcess\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartCollate\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartConnector\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartDecision\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartDelay\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartDisplay\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartDocument\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartExtract\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartInputOutput\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartInternalStorage\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartMagneticDisk\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartMagneticDrum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartMagneticTape\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartManualInput\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartManualOperation\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartMerge\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartMultidocument\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartOfflineStorage\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartOffpageConnector\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartOnlineStorage\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartOr\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartPredefinedProcess\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartPreparation\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartProcess\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartPunchedCard\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartPunchedTape\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartSort\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartSummingJunction\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartTerminator\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"foldedCorner\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"frame\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"funnel\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"gear6\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"gear9\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"halfFrame\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"heart\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"heptagon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"hexagon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"homePlate\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"horizontalScroll\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"irregularSeal1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"irregularSeal2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"leftArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"leftArrowCallout\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"leftBrace\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"leftBracket\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"leftCircularArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"leftRightArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"leftRightArrowCallout\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"leftRightCircularArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"leftRightRibbon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"leftRightUpArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"leftUpArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightningBolt\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"line\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lineInv\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mathDivide\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mathEqual\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mathMinus\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mathMultiply\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mathNotEqual\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mathPlus\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"moon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"nonIsoscelesTrapezoid\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noSmoking\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"notchedRightArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"octagon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"parallelogram\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pentagon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pie\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pieWedge\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"plaque\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"plaqueTabs\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"plus\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"quadArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"quadArrowCallout\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"rect\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ribbon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ribbon2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"rightArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"rightArrowCallout\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"rightBrace\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"rightBracket\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"round1Rect\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"round2DiagRect\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"round2SameRect\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"roundRect\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"rtTriangle\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"smileyFace\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"snip1Rect\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"snip2DiagRect\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"snip2SameRect\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"snipRoundRect\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"squareTabs\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"star10\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"star12\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"star16\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"star24\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"star32\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"star4\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"star5\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"star6\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"star7\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"star8\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"straightConnector1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"stripedRightArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"sun\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"swooshArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"teardrop\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"trapezoid\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"triangle\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"upArrowCallout\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"upDownArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"upDownArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"upDownArrowCallout\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"uturnArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"verticalScroll\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"wave\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"wedgeEllipseCallout\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"wedgeRectCallout\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"wedgeRoundRectCallout\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * This type specifies the available chart types which can be used to create a new chart.\n\t * @typedef {(\"bar\" | \"barStacked\" | \"barStackedPercent\" | \"bar3D\" | \"barStacked3D\" | \"barStackedPercent3D\" |\n\t *     \"barStackedPercent3DPerspective\" | \"horizontalBar\" | \"horizontalBarStacked\" | \"horizontalBarStackedPercent\"\n\t *     | \"horizontalBar3D\" | \"horizontalBarStacked3D\" | \"horizontalBarStackedPercent3D\" | \"lineNormal\" |\n\t *     \"lineStacked\" | \"lineStackedPercent\" | \"line3D\" | \"pie\" | \"pie3D\" | \"doughnut\" | \"scatter\" | \"stock\" |\n\t *     \"area\" | \"areaStacked\" | \"areaStackedPercent\" | \"comboBarLine\" | \"comboBarLineSecondary\" | \"comboCustom\" | \"unknown\")} ChartType\n\t * @see office-js-api/Examples/Enumerations/ChartType.js\n\t */",
        "description": "This type specifies the available chart types which can be used to create a new chart.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n// ChartType used in text documents\n// The resulting chart will have a 'bar3D' type:\nvar chart = Api.CreateChart(\"bar3D\", [[200, 240, 280],[250, 260, 280]], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\n\n// ChartType used in spreadsheets\n// The resulting chart will have a 'bar3D' type:\nvar chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);\n```",
        "name": "ChartType",
        "longname": "ChartType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4021,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/ChartType.js"
        ],
        "type": {
            "names": [
                "\"bar\"",
                "\"barStacked\"",
                "\"barStackedPercent\"",
                "\"bar3D\"",
                "\"barStacked3D\"",
                "\"barStackedPercent3D\"",
                "\"barStackedPercent3DPerspective\"",
                "\"horizontalBar\"",
                "\"horizontalBarStacked\"",
                "\"horizontalBarStackedPercent\"",
                "\"horizontalBar3D\"",
                "\"horizontalBarStacked3D\"",
                "\"horizontalBarStackedPercent3D\"",
                "\"lineNormal\"",
                "\"lineStacked\"",
                "\"lineStackedPercent\"",
                "\"line3D\"",
                "\"pie\"",
                "\"pie3D\"",
                "\"doughnut\"",
                "\"scatter\"",
                "\"stock\"",
                "\"area\"",
                "\"areaStacked\"",
                "\"areaStackedPercent\"",
                "\"comboBarLine\"",
                "\"comboBarLineSecondary\"",
                "\"comboCustom\"",
                "\"unknown\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"bar\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"barStacked\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"barStackedPercent\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bar3D\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"barStacked3D\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"barStackedPercent3D\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"barStackedPercent3DPerspective\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"horizontalBar\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"horizontalBarStacked\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"horizontalBarStackedPercent\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"horizontalBar3D\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"horizontalBarStacked3D\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"horizontalBarStackedPercent3D\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lineNormal\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lineStacked\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lineStackedPercent\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"line3D\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pie\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pie3D\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"doughnut\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"scatter\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"stock\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"area\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"areaStacked\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"areaStackedPercent\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"comboBarLine\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"comboBarLineSecondary\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"comboCustom\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"unknown\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * This type specifies the type of drawing lock.\n\t * @typedef {(\"noGrp\" | \"noUngrp\" | \"noSelect\" | \"noRot\" | \"noChangeAspect\" | \"noMove\" | \"noResize\" | \"noEditPoints\" | \"noAdjustHandles\"\n\t * \t| \"noChangeArrowheads\" | \"noChangeShapeType\" | \"noDrilldown\" | \"noTextEdit\" | \"noCrop\" | \"txBox\")} DrawingLockType\n\t * @see office-js-api/Examples/Enumerations/DrawingLockType.js\n\t */",
        "description": "This type specifies the type of drawing lock.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet lockValue = drawing.GetLockValue(\"noSelect\");\n```",
        "name": "DrawingLockType",
        "longname": "DrawingLockType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4031,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/DrawingLockType.js"
        ],
        "type": {
            "names": [
                "\"noGrp\"",
                "\"noUngrp\"",
                "\"noSelect\"",
                "\"noRot\"",
                "\"noChangeAspect\"",
                "\"noMove\"",
                "\"noResize\"",
                "\"noEditPoints\"",
                "\"noAdjustHandles\"",
                "\"noChangeArrowheads\"",
                "\"noChangeShapeType\"",
                "\"noDrilldown\"",
                "\"noTextEdit\"",
                "\"noCrop\"",
                "\"txBox\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"noGrp\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noUngrp\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noSelect\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noRot\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noChangeAspect\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noMove\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noResize\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noEditPoints\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noAdjustHandles\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noChangeArrowheads\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noChangeShapeType\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noDrilldown\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noTextEdit\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noCrop\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"txBox\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n     * The available text vertical alignment (used to align text in a shape with a placement for text inside it).\n     * @typedef {(\"top\" | \"center\" | \"bottom\")} VerticalTextAlign\n     * @see office-js-api/Examples/Enumerations/VerticalTextAlign.js\n\t */",
        "description": "The available text vertical alignment (used to align text in a shape with a placement for text inside it).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\ndrawing.SetVerticalTextAlign(\"top\");\n```",
        "name": "VerticalTextAlign",
        "longname": "VerticalTextAlign",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 278,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/VerticalTextAlign.js"
        ],
        "type": {
            "names": [
                "\"top\"",
                "\"center\"",
                "\"bottom\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"top\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"center\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bottom\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n     * The available color scheme identifiers.\n     * @typedef {(\"accent1\" | \"accent2\" | \"accent3\" | \"accent4\" | \"accent5\" | \"accent6\" | \"bg1\" | \"bg2\" | \"dk1\" | \"dk2\" | \"lt1\" | \"lt2\" | \"tx1\" | \"tx2\")} SchemeColorId\n     * @see office-js-api/Examples/Enumerations/SchemeColorId.js\n\t */",
        "description": "The available color scheme identifiers.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet schemeColor = Api.CreateSchemeColor(\"accent2\");\n```",
        "name": "SchemeColorId",
        "longname": "SchemeColorId",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 284,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/SchemeColorId.js"
        ],
        "type": {
            "names": [
                "\"accent1\"",
                "\"accent2\"",
                "\"accent3\"",
                "\"accent4\"",
                "\"accent5\"",
                "\"accent6\"",
                "\"bg1\"",
                "\"bg2\"",
                "\"dk1\"",
                "\"dk2\"",
                "\"lt1\"",
                "\"lt2\"",
                "\"tx1\"",
                "\"tx2\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"accent1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"accent2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"accent3\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"accent4\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"accent5\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"accent6\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bg1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bg2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dk1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dk2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lt1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lt2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"tx1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"tx2\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * The available preset color names.\n\t * @typedef {(\"aliceBlue\" | \"antiqueWhite\" | \"aqua\" | \"aquamarine\" | \"azure\" | \"beige\" | \"bisque\" | \"black\" |\n\t *     \"blanchedAlmond\" | \"blue\" | \"blueViolet\" | \"brown\" | \"burlyWood\" | \"cadetBlue\" | \"chartreuse\" | \"chocolate\"\n\t *     | \"coral\" | \"cornflowerBlue\" | \"cornsilk\" | \"crimson\" | \"cyan\" | \"darkBlue\" | \"darkCyan\" | \"darkGoldenrod\" |\n\t *     \"darkGray\" | \"darkGreen\" | \"darkGrey\" | \"darkKhaki\" | \"darkMagenta\" | \"darkOliveGreen\" | \"darkOrange\" |\n\t *     \"darkOrchid\" | \"darkRed\" | \"darkSalmon\" | \"darkSeaGreen\" | \"darkSlateBlue\" | \"darkSlateGray\" |\n\t *     \"darkSlateGrey\" | \"darkTurquoise\" | \"darkViolet\" | \"deepPink\" | \"deepSkyBlue\" | \"dimGray\" | \"dimGrey\" |\n\t *     \"dkBlue\" | \"dkCyan\" | \"dkGoldenrod\" | \"dkGray\" | \"dkGreen\" | \"dkGrey\" | \"dkKhaki\" | \"dkMagenta\" |\n\t *     \"dkOliveGreen\" | \"dkOrange\" | \"dkOrchid\" | \"dkRed\" | \"dkSalmon\" | \"dkSeaGreen\" | \"dkSlateBlue\" |\n\t *     \"dkSlateGray\" | \"dkSlateGrey\" | \"dkTurquoise\" | \"dkViolet\" | \"dodgerBlue\" | \"firebrick\" | \"floralWhite\" |\n\t *     \"forestGreen\" | \"fuchsia\" | \"gainsboro\" | \"ghostWhite\" | \"gold\" | \"goldenrod\" | \"gray\" | \"green\" |\n\t *     \"greenYellow\" | \"grey\" | \"honeydew\" | \"hotPink\" | \"indianRed\" | \"indigo\" | \"ivory\" | \"khaki\" | \"lavender\" |\n\t *     \"lavenderBlush\" | \"lawnGreen\" | \"lemonChiffon\" | \"lightBlue\" | \"lightCoral\" | \"lightCyan\" |\n\t *     \"lightGoldenrodYellow\" | \"lightGray\" | \"lightGreen\" | \"lightGrey\" | \"lightPink\" | \"lightSalmon\" |\n\t *     \"lightSeaGreen\" | \"lightSkyBlue\" | \"lightSlateGray\" | \"lightSlateGrey\" | \"lightSteelBlue\" | \"lightYellow\" |\n\t *     \"lime\" | \"limeGreen\" | \"linen\" | \"ltBlue\" | \"ltCoral\" | \"ltCyan\" | \"ltGoldenrodYellow\" | \"ltGray\" |\n\t *     \"ltGreen\" | \"ltGrey\" | \"ltPink\" | \"ltSalmon\" | \"ltSeaGreen\" | \"ltSkyBlue\" | \"ltSlateGray\" | \"ltSlateGrey\"|\n\t *     \"ltSteelBlue\" | \"ltYellow\" | \"magenta\" | \"maroon\" | \"medAquamarine\" | \"medBlue\" | \"mediumAquamarine\" |\n\t *     \"mediumBlue\" | \"mediumOrchid\" | \"mediumPurple\" | \"mediumSeaGreen\" | \"mediumSlateBlue\" |\n\t *     \"mediumSpringGreen\" | \"mediumTurquoise\" | \"mediumVioletRed\" | \"medOrchid\" | \"medPurple\" | \"medSeaGreen\" |\n\t *     \"medSlateBlue\" | \"medSpringGreen\" | \"medTurquoise\" | \"medVioletRed\" | \"midnightBlue\" | \"mintCream\" |\n\t *     \"mistyRose\" | \"moccasin\" | \"navajoWhite\" | \"navy\" | \"oldLace\" | \"olive\" | \"oliveDrab\" | \"orange\" |\n\t *     \"orangeRed\" | \"orchid\" | \"paleGoldenrod\" | \"paleGreen\" | \"paleTurquoise\" | \"paleVioletRed\" | \"papayaWhip\"|\n\t *     \"peachPuff\" | \"peru\" | \"pink\" | \"plum\" | \"powderBlue\" | \"purple\" | \"red\" | \"rosyBrown\" | \"royalBlue\" |\n\t *     \"saddleBrown\" | \"salmon\" | \"sandyBrown\" | \"seaGreen\" | \"seaShell\" | \"sienna\" | \"silver\" | \"skyBlue\" |\n\t *     \"slateBlue\" | \"slateGray\" | \"slateGrey\" | \"snow\" | \"springGreen\" | \"steelBlue\" | \"tan\" | \"teal\" |\n\t *     \"thistle\" | \"tomato\" | \"turquoise\" | \"violet\" | \"wheat\" | \"white\" | \"whiteSmoke\" | \"yellow\" |\n\t *     \"yellowGreen\")} PresetColor\n\t * @see office-js-api/Examples/Enumerations/PresetColor.js\n\t */",
        "description": "The available preset color names.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet schemeColor = Api.CreatePresetColor(\"lightYellow\");\n```",
        "name": "PresetColor",
        "longname": "PresetColor",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 196,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/PresetColor.js"
        ],
        "type": {
            "names": [
                "\"aliceBlue\"",
                "\"antiqueWhite\"",
                "\"aqua\"",
                "\"aquamarine\"",
                "\"azure\"",
                "\"beige\"",
                "\"bisque\"",
                "\"black\"",
                "\"blanchedAlmond\"",
                "\"blue\"",
                "\"blueViolet\"",
                "\"brown\"",
                "\"burlyWood\"",
                "\"cadetBlue\"",
                "\"chartreuse\"",
                "\"chocolate\"",
                "\"coral\"",
                "\"cornflowerBlue\"",
                "\"cornsilk\"",
                "\"crimson\"",
                "\"cyan\"",
                "\"darkBlue\"",
                "\"darkCyan\"",
                "\"darkGoldenrod\"",
                "\"darkGray\"",
                "\"darkGreen\"",
                "\"darkGrey\"",
                "\"darkKhaki\"",
                "\"darkMagenta\"",
                "\"darkOliveGreen\"",
                "\"darkOrange\"",
                "\"darkOrchid\"",
                "\"darkRed\"",
                "\"darkSalmon\"",
                "\"darkSeaGreen\"",
                "\"darkSlateBlue\"",
                "\"darkSlateGray\"",
                "\"darkSlateGrey\"",
                "\"darkTurquoise\"",
                "\"darkViolet\"",
                "\"deepPink\"",
                "\"deepSkyBlue\"",
                "\"dimGray\"",
                "\"dimGrey\"",
                "\"dkBlue\"",
                "\"dkCyan\"",
                "\"dkGoldenrod\"",
                "\"dkGray\"",
                "\"dkGreen\"",
                "\"dkGrey\"",
                "\"dkKhaki\"",
                "\"dkMagenta\"",
                "\"dkOliveGreen\"",
                "\"dkOrange\"",
                "\"dkOrchid\"",
                "\"dkRed\"",
                "\"dkSalmon\"",
                "\"dkSeaGreen\"",
                "\"dkSlateBlue\"",
                "\"dkSlateGray\"",
                "\"dkSlateGrey\"",
                "\"dkTurquoise\"",
                "\"dkViolet\"",
                "\"dodgerBlue\"",
                "\"firebrick\"",
                "\"floralWhite\"",
                "\"forestGreen\"",
                "\"fuchsia\"",
                "\"gainsboro\"",
                "\"ghostWhite\"",
                "\"gold\"",
                "\"goldenrod\"",
                "\"gray\"",
                "\"green\"",
                "\"greenYellow\"",
                "\"grey\"",
                "\"honeydew\"",
                "\"hotPink\"",
                "\"indianRed\"",
                "\"indigo\"",
                "\"ivory\"",
                "\"khaki\"",
                "\"lavender\"",
                "\"lavenderBlush\"",
                "\"lawnGreen\"",
                "\"lemonChiffon\"",
                "\"lightBlue\"",
                "\"lightCoral\"",
                "\"lightCyan\"",
                "\"lightGoldenrodYellow\"",
                "\"lightGray\"",
                "\"lightGreen\"",
                "\"lightGrey\"",
                "\"lightPink\"",
                "\"lightSalmon\"",
                "\"lightSeaGreen\"",
                "\"lightSkyBlue\"",
                "\"lightSlateGray\"",
                "\"lightSlateGrey\"",
                "\"lightSteelBlue\"",
                "\"lightYellow\"",
                "\"lime\"",
                "\"limeGreen\"",
                "\"linen\"",
                "\"ltBlue\"",
                "\"ltCoral\"",
                "\"ltCyan\"",
                "\"ltGoldenrodYellow\"",
                "\"ltGray\"",
                "\"ltGreen\"",
                "\"ltGrey\"",
                "\"ltPink\"",
                "\"ltSalmon\"",
                "\"ltSeaGreen\"",
                "\"ltSkyBlue\"",
                "\"ltSlateGray\"",
                "\"ltSlateGrey\"",
                "\"ltSteelBlue\"",
                "\"ltYellow\"",
                "\"magenta\"",
                "\"maroon\"",
                "\"medAquamarine\"",
                "\"medBlue\"",
                "\"mediumAquamarine\"",
                "\"mediumBlue\"",
                "\"mediumOrchid\"",
                "\"mediumPurple\"",
                "\"mediumSeaGreen\"",
                "\"mediumSlateBlue\"",
                "\"mediumSpringGreen\"",
                "\"mediumTurquoise\"",
                "\"mediumVioletRed\"",
                "\"medOrchid\"",
                "\"medPurple\"",
                "\"medSeaGreen\"",
                "\"medSlateBlue\"",
                "\"medSpringGreen\"",
                "\"medTurquoise\"",
                "\"medVioletRed\"",
                "\"midnightBlue\"",
                "\"mintCream\"",
                "\"mistyRose\"",
                "\"moccasin\"",
                "\"navajoWhite\"",
                "\"navy\"",
                "\"oldLace\"",
                "\"olive\"",
                "\"oliveDrab\"",
                "\"orange\"",
                "\"orangeRed\"",
                "\"orchid\"",
                "\"paleGoldenrod\"",
                "\"paleGreen\"",
                "\"paleTurquoise\"",
                "\"paleVioletRed\"",
                "\"papayaWhip\"",
                "\"peachPuff\"",
                "\"peru\"",
                "\"pink\"",
                "\"plum\"",
                "\"powderBlue\"",
                "\"purple\"",
                "\"red\"",
                "\"rosyBrown\"",
                "\"royalBlue\"",
                "\"saddleBrown\"",
                "\"salmon\"",
                "\"sandyBrown\"",
                "\"seaGreen\"",
                "\"seaShell\"",
                "\"sienna\"",
                "\"silver\"",
                "\"skyBlue\"",
                "\"slateBlue\"",
                "\"slateGray\"",
                "\"slateGrey\"",
                "\"snow\"",
                "\"springGreen\"",
                "\"steelBlue\"",
                "\"tan\"",
                "\"teal\"",
                "\"thistle\"",
                "\"tomato\"",
                "\"turquoise\"",
                "\"violet\"",
                "\"wheat\"",
                "\"white\"",
                "\"whiteSmoke\"",
                "\"yellow\"",
                "\"yellowGreen\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"aliceBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"antiqueWhite\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"aqua\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"aquamarine\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"azure\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"beige\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bisque\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"black\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"blanchedAlmond\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"blue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"blueViolet\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"brown\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"burlyWood\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"cadetBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"chartreuse\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"chocolate\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"coral\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"cornflowerBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"cornsilk\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"crimson\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"cyan\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkCyan\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkGoldenrod\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkGray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkGrey\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkKhaki\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkMagenta\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkOliveGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkOrange\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkOrchid\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkRed\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkSalmon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkSeaGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkSlateBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkSlateGray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkSlateGrey\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkTurquoise\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkViolet\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"deepPink\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"deepSkyBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dimGray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dimGrey\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkCyan\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkGoldenrod\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkGray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkGrey\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkKhaki\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkMagenta\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkOliveGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkOrange\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkOrchid\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkRed\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkSalmon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkSeaGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkSlateBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkSlateGray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkSlateGrey\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkTurquoise\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkViolet\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dodgerBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"firebrick\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"floralWhite\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"forestGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"fuchsia\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"gainsboro\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ghostWhite\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"gold\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"goldenrod\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"gray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"green\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"greenYellow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"grey\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"honeydew\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"hotPink\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"indianRed\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"indigo\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ivory\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"khaki\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lavender\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lavenderBlush\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lawnGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lemonChiffon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightCoral\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightCyan\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightGoldenrodYellow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightGray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightGrey\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightPink\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightSalmon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightSeaGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightSkyBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightSlateGray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightSlateGrey\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightSteelBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightYellow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lime\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"limeGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"linen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltCoral\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltCyan\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltGoldenrodYellow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltGray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltGrey\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltPink\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltSalmon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltSeaGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltSkyBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltSlateGray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltSlateGrey\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltSteelBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltYellow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"magenta\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"maroon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"medAquamarine\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"medBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mediumAquamarine\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mediumBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mediumOrchid\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mediumPurple\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mediumSeaGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mediumSlateBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mediumSpringGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mediumTurquoise\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mediumVioletRed\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"medOrchid\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"medPurple\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"medSeaGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"medSlateBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"medSpringGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"medTurquoise\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"medVioletRed\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"midnightBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mintCream\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mistyRose\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"moccasin\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"navajoWhite\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"navy\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"oldLace\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"olive\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"oliveDrab\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"orange\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"orangeRed\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"orchid\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"paleGoldenrod\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"paleGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"paleTurquoise\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"paleVioletRed\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"papayaWhip\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"peachPuff\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"peru\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pink\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"plum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"powderBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"purple\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"red\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"rosyBrown\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"royalBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"saddleBrown\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"salmon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"sandyBrown\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"seaGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"seaShell\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"sienna\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"silver\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"skyBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"slateBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"slateGray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"slateGrey\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"snow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"springGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"steelBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"tan\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"teal\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"thistle\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"tomato\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"turquoise\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"violet\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"wheat\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"white\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"whiteSmoke\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"yellow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"yellowGreen\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Possible values for the position of chart tick labels (either horizontal or vertical).\n\t * <b>\"none\"</b> - does not display the selected tick labels.\n\t * <b>\"nextTo\"</b> - sets the position of the selected tick labels next to the main label.\n\t * <b>\"low\"</b> - sets the position of the selected tick labels in the part of the chart with lower values.\n\t * <b>\"high\"</b> - sets the position of the selected tick labels in the part of the chart with higher values.\n\t * @typedef {(\"none\" | \"nextTo\" | \"low\" | \"high\")} TickLabelPosition\n\t * @see office-js-api/Examples/Enumerations/TickLabelPosition.js\n\t */",
        "description": "Possible values for the position of chart tick labels (either horizontal or vertical).\n<b>\"none\"</b> - does not display the selected tick labels.\n<b>\"nextTo\"</b> - sets the position of the selected tick labels next to the main label.\n<b>\"low\"</b> - sets the position of the selected tick labels in the part of the chart with lower values.\n<b>\"high\"</b> - sets the position of the selected tick labels in the part of the chart with higher values.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nchart.SetVertAxisTickLabelPosition(\"nextTo\");\n```",
        "name": "TickLabelPosition",
        "longname": "TickLabelPosition",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 228,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/TickLabelPosition.js"
        ],
        "type": {
            "names": [
                "\"none\"",
                "\"nextTo\"",
                "\"low\"",
                "\"high\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"none\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"nextTo\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"low\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"high\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n     * The type of a fill which uses an image as a background.\n     * <b>\"tile\"</b> - if the image is smaller than the shape which is filled, the image will be tiled all over the created shape surface.\n     * <b>\"stretch\"</b> - if the image is smaller than the shape which is filled, the image will be stretched to fit the created shape surface.\n     * @typedef {\"tile\" | \"stretch\"} BlipFillType\n     * @see office-js-api/Examples/Enumerations/BlipFillType.js\n\t */",
        "description": "The type of a fill which uses an image as a background.\n<b>\"tile\"</b> - if the image is smaller than the shape which is filled, the image will be tiled all over the created shape surface.\n<b>\"stretch\"</b> - if the image is smaller than the shape which is filled, the image will be stretched to fit the created shape surface.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet blipFill = Api.CreateBlipFill(\"https://example.com/myimage.png\", \"tile\");\n```",
        "name": "BlipFillType",
        "longname": "BlipFillType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 307,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/BlipFillType.js"
        ],
        "type": {
            "names": [
                "\"tile\"",
                "\"stretch\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"tile\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"stretch\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n     * The available preset patterns which can be used for the fill.\n     * @typedef {\"cross\" | \"dashDnDiag\" | \"dashHorz\" | \"dashUpDiag\" | \"dashVert\" | \"diagBrick\" | \"diagCross\" | \"divot\" | \"dkDnDiag\" | \"dkHorz\" | \"dkUpDiag\" | \"dkVert\" | \"dnDiag\" | \"dotDmnd\" | \"dotGrid\" | \"horz\" | \"horzBrick\" | \"lgCheck\" | \"lgConfetti\" | \"lgGrid\" | \"ltDnDiag\" | \"ltHorz\" | \"ltUpDiag\" | \"ltVert\" | \"narHorz\" | \"narVert\" | \"openDmnd\" | \"pct10\" | \"pct20\" | \"pct25\" | \"pct30\" | \"pct40\" | \"pct5\" | \"pct50\" | \"pct60\" | \"pct70\" | \"pct75\" | \"pct80\" | \"pct90\" | \"plaid\" | \"shingle\" | \"smCheck\" | \"smConfetti\" | \"smGrid\" | \"solidDmnd\" | \"sphere\" | \"trellis\" | \"upDiag\" | \"vert\" | \"wave\" | \"wdDnDiag\" | \"wdUpDiag\" | \"weave\" | \"zigZag\"} PatternType\n     * @see office-js-api/Examples/Enumerations/PatternType.js\n\t */",
        "description": "The available preset patterns which can be used for the fill.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet fill = Api.CreatePatternFill(\"dashDnDiag\", Api.CreateRGBColor(0, 225, 0), Api.CreateRGBColor(255, 0, 0));\n```",
        "name": "PatternType",
        "longname": "PatternType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 315,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/PatternType.js"
        ],
        "type": {
            "names": [
                "\"cross\"",
                "\"dashDnDiag\"",
                "\"dashHorz\"",
                "\"dashUpDiag\"",
                "\"dashVert\"",
                "\"diagBrick\"",
                "\"diagCross\"",
                "\"divot\"",
                "\"dkDnDiag\"",
                "\"dkHorz\"",
                "\"dkUpDiag\"",
                "\"dkVert\"",
                "\"dnDiag\"",
                "\"dotDmnd\"",
                "\"dotGrid\"",
                "\"horz\"",
                "\"horzBrick\"",
                "\"lgCheck\"",
                "\"lgConfetti\"",
                "\"lgGrid\"",
                "\"ltDnDiag\"",
                "\"ltHorz\"",
                "\"ltUpDiag\"",
                "\"ltVert\"",
                "\"narHorz\"",
                "\"narVert\"",
                "\"openDmnd\"",
                "\"pct10\"",
                "\"pct20\"",
                "\"pct25\"",
                "\"pct30\"",
                "\"pct40\"",
                "\"pct5\"",
                "\"pct50\"",
                "\"pct60\"",
                "\"pct70\"",
                "\"pct75\"",
                "\"pct80\"",
                "\"pct90\"",
                "\"plaid\"",
                "\"shingle\"",
                "\"smCheck\"",
                "\"smConfetti\"",
                "\"smGrid\"",
                "\"solidDmnd\"",
                "\"sphere\"",
                "\"trellis\"",
                "\"upDiag\"",
                "\"vert\"",
                "\"wave\"",
                "\"wdDnDiag\"",
                "\"wdUpDiag\"",
                "\"weave\"",
                "\"zigZag\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"cross\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dashDnDiag\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dashHorz\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dashUpDiag\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dashVert\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"diagBrick\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"diagCross\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"divot\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkDnDiag\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkHorz\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkUpDiag\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkVert\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dnDiag\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dotDmnd\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dotGrid\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"horz\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"horzBrick\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lgCheck\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lgConfetti\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lgGrid\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltDnDiag\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltHorz\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltUpDiag\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltVert\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"narHorz\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"narVert\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"openDmnd\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pct10\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pct20\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pct25\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pct30\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pct40\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pct5\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pct50\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pct60\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pct70\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pct75\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pct80\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pct90\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"plaid\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"shingle\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"smCheck\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"smConfetti\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"smGrid\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"solidDmnd\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"sphere\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"trellis\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"upDiag\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"vert\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"wave\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"wdDnDiag\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"wdUpDiag\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"weave\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"zigZag\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t *\n\t * The lock type of the content control.\n\t * @typedef {\"unlocked\" | \"contentLocked\" | \"sdtContentLocked\" | \"sdtLocked\"} SdtLock\n\t * @see office-js-api/Examples/Enumerations/SdtLock.js\n\t */",
        "description": "The lock type of the content control.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\ninlineLvlSdt.SetLock(\"sdtContentLocked\");\n```",
        "name": "SdtLock",
        "longname": "SdtLock",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4100,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/SdtLock.js"
        ],
        "type": {
            "names": [
                "\"unlocked\"",
                "\"contentLocked\"",
                "\"sdtContentLocked\"",
                "\"sdtLocked\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"unlocked\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"contentLocked\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"sdtContentLocked\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"sdtLocked\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Text transform type.\n\t * @typedef {(\"textArchDown\" | \"textArchDownPour\" | \"textArchUp\" | \"textArchUpPour\" | \"textButton\" | \"textButtonPour\" | \"textCanDown\"\n\t * | \"textCanUp\" | \"textCascadeDown\" | \"textCascadeUp\" | \"textChevron\" | \"textChevronInverted\" | \"textCircle\" | \"textCirclePour\"\n\t * | \"textCurveDown\" | \"textCurveUp\" | \"textDeflate\" | \"textDeflateBottom\" | \"textDeflateInflate\" | \"textDeflateInflateDeflate\" | \"textDeflateTop\"\n\t * | \"textDoubleWave1\" | \"textFadeDown\" | \"textFadeLeft\" | \"textFadeRight\" | \"textFadeUp\" | \"textInflate\" | \"textInflateBottom\" | \"textInflateTop\"\n\t * | \"textPlain\" | \"textRingInside\" | \"textRingOutside\" | \"textSlantDown\" | \"textSlantUp\" | \"textStop\" | \"textTriangle\" | \"textTriangleInverted\"\n\t * | \"textWave1\" | \"textWave2\" | \"textWave4\" | \"textNoShape\")} TextTransform\n\t * @see office-js-api/Examples/Enumerations/TextTransform.js\n\t */",
        "description": "Text transform type.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet textArt = Api.CreateWordArt(oTextPr, \"onlyoffice\", \"textArchUp\", fill, stroke, 0, 150 * 36000, 50 * 36000);\n```",
        "name": "TextTransform",
        "longname": "TextTransform",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 250,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/TextTransform.js"
        ],
        "type": {
            "names": [
                "\"textArchDown\"",
                "\"textArchDownPour\"",
                "\"textArchUp\"",
                "\"textArchUpPour\"",
                "\"textButton\"",
                "\"textButtonPour\"",
                "\"textCanDown\"",
                "\"textCanUp\"",
                "\"textCascadeDown\"",
                "\"textCascadeUp\"",
                "\"textChevron\"",
                "\"textChevronInverted\"",
                "\"textCircle\"",
                "\"textCirclePour\"",
                "\"textCurveDown\"",
                "\"textCurveUp\"",
                "\"textDeflate\"",
                "\"textDeflateBottom\"",
                "\"textDeflateInflate\"",
                "\"textDeflateInflateDeflate\"",
                "\"textDeflateTop\"",
                "\"textDoubleWave1\"",
                "\"textFadeDown\"",
                "\"textFadeLeft\"",
                "\"textFadeRight\"",
                "\"textFadeUp\"",
                "\"textInflate\"",
                "\"textInflateBottom\"",
                "\"textInflateTop\"",
                "\"textPlain\"",
                "\"textRingInside\"",
                "\"textRingOutside\"",
                "\"textSlantDown\"",
                "\"textSlantUp\"",
                "\"textStop\"",
                "\"textTriangle\"",
                "\"textTriangleInverted\"",
                "\"textWave1\"",
                "\"textWave2\"",
                "\"textWave4\"",
                "\"textNoShape\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"textArchDown\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textArchDownPour\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textArchUp\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textArchUpPour\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textButton\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textButtonPour\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textCanDown\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textCanUp\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textCascadeDown\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textCascadeUp\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textChevron\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textChevronInverted\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textCircle\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textCirclePour\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textCurveDown\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textCurveUp\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textDeflate\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textDeflateBottom\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textDeflateInflate\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textDeflateInflateDeflate\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textDeflateTop\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textDoubleWave1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textFadeDown\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textFadeLeft\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textFadeRight\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textFadeUp\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textInflate\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textInflateBottom\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textInflateTop\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textPlain\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textRingInside\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textRingOutside\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textSlantDown\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textSlantUp\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textStop\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textTriangle\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textTriangleInverted\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textWave1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textWave2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textWave4\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textNoShape\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Form type.\n\t * The available form types.\n\t * @typedef {\"textForm\" | \"comboBoxForm\" | \"dropDownForm\" | \"checkBoxForm\" | \"radioButtonForm\" | \"pictureForm\"} FormType\n\t * @see office-js-api/Examples/Enumerations/FormType.js\n\t */",
        "description": "Form type.\nThe available form types.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet formType = textForm.GetFormType();\n```",
        "name": "FormType",
        "longname": "FormType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4118,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/FormType.js"
        ],
        "type": {
            "names": [
                "\"textForm\"",
                "\"comboBoxForm\"",
                "\"dropDownForm\"",
                "\"checkBoxForm\"",
                "\"radioButtonForm\"",
                "\"pictureForm\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"textForm\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"comboBoxForm\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dropDownForm\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"checkBoxForm\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"radioButtonForm\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pictureForm\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * 1 millimetre equals 1/10th of a centimetre.\n\t * @typedef {number} mm\n\t * @see office-js-api/Examples/Enumerations/mm.js\n\t */",
        "description": "1 millimetre equals 1/10th of a centimetre.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\ntextForm.SetCellWidth(7);\n```",
        "name": "mm",
        "longname": "mm",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4125,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/mm.js"
        ],
        "type": {
            "names": [
                "number"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "number"
            }
        }
    },
    {
        "comment": "/**\n\t * The condition to scale an image in the picture form.\n\t * @typedef {\"always\" | \"never\" | \"tooBig\" | \"tooSmall\"} ScaleFlag\n\t * @see office-js-api/Examples/Enumerations/ScaleFlag.js\n\t */",
        "description": "The condition to scale an image in the picture form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\npictureForm.SetScaleFlag(\"tooBig\");\n```",
        "name": "ScaleFlag",
        "longname": "ScaleFlag",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4131,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/ScaleFlag.js"
        ],
        "type": {
            "names": [
                "\"always\"",
                "\"never\"",
                "\"tooBig\"",
                "\"tooSmall\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"always\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"never\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"tooBig\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"tooSmall\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Value from 0 to 100.\n\t * @typedef {number} percentage\n\t * @see office-js-api/Examples/Enumerations/percentage.js\n\t */",
        "description": "Value from 0 to 100.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\npictureForm.SetPicturePosition(70, 70);\n```",
        "name": "percentage",
        "longname": "percentage",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4137,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/percentage.js"
        ],
        "type": {
            "names": [
                "number"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "number"
            }
        }
    },
    {
        "comment": "/**\n\t * Available highlight colors.\n\t * @typedef {\"black\" | \"blue\" | \"cyan\" | \"green\" | \"magenta\" | \"red\" | \"yellow\" | \"white\" | \"darkBlue\" |\n\t * \"darkCyan\" | \"darkGreen\" | \"darkMagenta\" | \"darkRed\" | \"darkYellow\" | \"darkGray\" | \"lightGray\" | \"none\"} highlightColor\n\t * @see office-js-api/Examples/Enumerations/highlightColor.js\n\t */",
        "description": "Available highlight colors.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nparagraph.SetHighlight(\"green\");\n```",
        "name": "highlightColor",
        "longname": "highlightColor",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4143,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/highlightColor.js"
        ],
        "type": {
            "names": [
                "\"black\"",
                "\"blue\"",
                "\"cyan\"",
                "\"green\"",
                "\"magenta\"",
                "\"red\"",
                "\"yellow\"",
                "\"white\"",
                "\"darkBlue\"",
                "\"darkCyan\"",
                "\"darkGreen\"",
                "\"darkMagenta\"",
                "\"darkRed\"",
                "\"darkYellow\"",
                "\"darkGray\"",
                "\"lightGray\"",
                "\"none\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"black\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"blue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"cyan\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"green\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"magenta\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"red\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"yellow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"white\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkCyan\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkMagenta\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkRed\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkYellow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkGray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightGray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"none\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Available values of the \"numbered\" reference type:\n\t * <b>\"pageNum\"</b> - the numbered item page number;\n     * <b>\"paraNum\"</b> - the numbered item paragraph number;\n\t * <b>\"noCtxParaNum\"</b> - the abbreviated paragraph number (the specific item only, e.g. instead of \"4.1.1\" you refer to \"1\" only);\n     * <b>\"fullCtxParaNum\"</b> - the full paragraph number, e.g. \"4.1.1\";\n\t * <b>\"text\"</b> - the paragraph text value, e.g. if you have \"4.1.1. Terms and Conditions\", you refer to \"Terms and Conditions\" only;\n     * <b>\"aboveBelow\"</b> - the words \"above\" or \"below\" depending on the item position.\n\t * @typedef {\"pageNum\" | \"paraNum\" | \"noCtxParaNum\" | \"fullCtxParaNum\" | \"text\" | \"aboveBelow\"} numberedRefTo\n\t * @see office-js-api/Examples/Enumerations/numberedRefTo.js\n\t */",
        "description": "Available values of the \"numbered\" reference type:\n<b>\"pageNum\"</b> - the numbered item page number;\n<b>\"paraNum\"</b> - the numbered item paragraph number;\n<b>\"noCtxParaNum\"</b> - the abbreviated paragraph number (the specific item only, e.g. instead of \"4.1.1\" you refer to \"1\" only);\n<b>\"fullCtxParaNum\"</b> - the full paragraph number, e.g. \"4.1.1\";\n<b>\"text\"</b> - the paragraph text value, e.g. if you have \"4.1.1. Terms and Conditions\", you refer to \"Terms and Conditions\" only;\n<b>\"aboveBelow\"</b> - the words \"above\" or \"below\" depending on the item position.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nparagraph.AddNumberedCrossRef(\"pageNum\", numberedParagraph, true, true);\n```",
        "name": "numberedRefTo",
        "longname": "numberedRefTo",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4156,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/numberedRefTo.js"
        ],
        "type": {
            "names": [
                "\"pageNum\"",
                "\"paraNum\"",
                "\"noCtxParaNum\"",
                "\"fullCtxParaNum\"",
                "\"text\"",
                "\"aboveBelow\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"pageNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"paraNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noCtxParaNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"fullCtxParaNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"text\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"aboveBelow\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Available values of the \"heading\" reference type:\n\t * <b>\"text\"</b> - the entire heading text;\n\t * <b>\"pageNum\"</b> - the heading page number;\n     * <b>\"headingNum\"</b> - the heading sequence number;\n\t * <b>\"noCtxHeadingNum\"</b> - the abbreviated heading number. Make sure the cursor pointer is in the section you are referencing to, e.g. you are in section 4 and you wish to refer to heading 4.B, so instead of \"4.B\" you receive \"B\" only;\n     * <b>\"fullCtxHeadingNum\"</b> - the full heading number even if the cursor pointer is in the same section;\n     * <b>\"aboveBelow\"</b> - the words \"above\" or \"below\" depending on the item position.\n\t * @typedef {\"text\" | \"pageNum\" | \"headingNum\" | \"noCtxHeadingNum\" | \"fullCtxHeadingNum\" | \"aboveBelow\"} headingRefTo\n\t * @see office-js-api/Examples/Enumerations/headingRefTo.js\n\t */",
        "description": "Available values of the \"heading\" reference type:\n<b>\"text\"</b> - the entire heading text;\n<b>\"pageNum\"</b> - the heading page number;\n<b>\"headingNum\"</b> - the heading sequence number;\n<b>\"noCtxHeadingNum\"</b> - the abbreviated heading number. Make sure the cursor pointer is in the section you are referencing to, e.g. you are in section 4 and you wish to refer to heading 4.B, so instead of \"4.B\" you receive \"B\" only;\n<b>\"fullCtxHeadingNum\"</b> - the full heading number even if the cursor pointer is in the same section;\n<b>\"aboveBelow\"</b> - the words \"above\" or \"below\" depending on the item position.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nparagraph.AddHeadingCrossRef(\"pageNum\", headingParagraph);\n```",
        "name": "headingRefTo",
        "longname": "headingRefTo",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4168,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/headingRefTo.js"
        ],
        "type": {
            "names": [
                "\"text\"",
                "\"pageNum\"",
                "\"headingNum\"",
                "\"noCtxHeadingNum\"",
                "\"fullCtxHeadingNum\"",
                "\"aboveBelow\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"text\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pageNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"headingNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noCtxHeadingNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"fullCtxHeadingNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"aboveBelow\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Available values of the \"bookmark\" reference type:\n\t * <b>\"text\"</b> - the entire bookmark text;\n\t * <b>\"pageNum\"</b> - the bookmark page number;\n     * <b>\"paraNum\"</b> - the bookmark paragraph number;\n\t * <b>\"noCtxParaNum\"</b> - the abbreviated paragraph number (the specific item only, e.g. instead of \"4.1.1\" you refer to \"1\" only);\n     * <b>\"fullCtxParaNum</b> - the full paragraph number, e.g. \"4.1.1\";\n     * <b>\"aboveBelow\"</b> - the words \"above\" or \"below\" depending on the item position.\n\t * @typedef {\"text\" | \"pageNum\" | \"paraNum\" | \"noCtxParaNum\" | \"fullCtxParaNum\" | \"aboveBelow\"} bookmarkRefTo\n\t * @see office-js-api/Examples/Enumerations/bookmarkRefTo.js\n\t */",
        "description": "Available values of the \"bookmark\" reference type:\n<b>\"text\"</b> - the entire bookmark text;\n<b>\"pageNum\"</b> - the bookmark page number;\n<b>\"paraNum\"</b> - the bookmark paragraph number;\n<b>\"noCtxParaNum\"</b> - the abbreviated paragraph number (the specific item only, e.g. instead of \"4.1.1\" you refer to \"1\" only);\n<b>\"fullCtxParaNum</b> - the full paragraph number, e.g. \"4.1.1\";\n<b>\"aboveBelow\"</b> - the words \"above\" or \"below\" depending on the item position.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nparagraph.AddBookmarkCrossRef(\"pageNum\", bookmark);\n```",
        "name": "bookmarkRefTo",
        "longname": "bookmarkRefTo",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4180,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/bookmarkRefTo.js"
        ],
        "type": {
            "names": [
                "\"text\"",
                "\"pageNum\"",
                "\"paraNum\"",
                "\"noCtxParaNum\"",
                "\"fullCtxParaNum\"",
                "\"aboveBelow\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"text\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pageNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"paraNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noCtxParaNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"fullCtxParaNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"aboveBelow\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Available values of the \"footnote\" reference type:\n\t * <b>\"footnoteNum\"</b> - the footnote number;\n\t * <b>\"pageNum\"</b> - the page number of the footnote;\n     * <b>\"aboveBelow\"</b> - the words \"above\" or \"below\" depending on the position of the item;\n\t * <b>\"formFootnoteNum\"</b> - the form number formatted as a footnote. The numbering of the actual footnotes is not affected.\n\t * @typedef {\"footnoteNum\" | \"pageNum\" | \"aboveBelow\" | \"formFootnoteNum\"} footnoteRefTo\n\t * @see office-js-api/Examples/Enumerations/footnoteRefTo.js\n\t */",
        "description": "Available values of the \"footnote\" reference type:\n<b>\"footnoteNum\"</b> - the footnote number;\n<b>\"pageNum\"</b> - the page number of the footnote;\n<b>\"aboveBelow\"</b> - the words \"above\" or \"below\" depending on the position of the item;\n<b>\"formFootnoteNum\"</b> - the form number formatted as a footnote. The numbering of the actual footnotes is not affected.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nparagraph.AddFootnoteCrossRef(\"pageNum\", footnoteParagraph);\n```",
        "name": "footnoteRefTo",
        "longname": "footnoteRefTo",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4192,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/footnoteRefTo.js"
        ],
        "type": {
            "names": [
                "\"footnoteNum\"",
                "\"pageNum\"",
                "\"aboveBelow\"",
                "\"formFootnoteNum\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"footnoteNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pageNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"aboveBelow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"formFootnoteNum\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Available values of the \"endnote\" reference type:\n\t * <b>\"endnoteNum\"</b> - the endnote number;\n\t * <b>\"pageNum\"</b> - the endnote page number;\n     * <b>\"aboveBelow\"</b> - the words \"above\" or \"below\" depending on the item position;\n\t * <b>\"formEndnoteNum\"</b> - the form number formatted as an endnote. The numbering of the actual endnotes is not affected.\n\t * @typedef {\"endnoteNum\" | \"pageNum\" | \"aboveBelow\" | \"formEndnoteNum\"} endnoteRefTo\n\t * @see office-js-api/Examples/Enumerations/endnoteRefTo.js\n\t */",
        "description": "Available values of the \"endnote\" reference type:\n<b>\"endnoteNum\"</b> - the endnote number;\n<b>\"pageNum\"</b> - the endnote page number;\n<b>\"aboveBelow\"</b> - the words \"above\" or \"below\" depending on the item position;\n<b>\"formEndnoteNum\"</b> - the form number formatted as an endnote. The numbering of the actual endnotes is not affected.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nparagraph.AddEndnoteCrossRef(\"pageNum\", endnoteParagraph);\n```",
        "name": "endnoteRefTo",
        "longname": "endnoteRefTo",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4202,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/endnoteRefTo.js"
        ],
        "type": {
            "names": [
                "\"endnoteNum\"",
                "\"pageNum\"",
                "\"aboveBelow\"",
                "\"formEndnoteNum\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"endnoteNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pageNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"aboveBelow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"formEndnoteNum\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Available values of the \"equation\"/\"figure\"/\"table\" reference type:\n\t * <b>\"entireCaption\"</b>- the entire caption text;\n\t * <b>\"labelNumber\"</b> - the label and object number only, e.g. \"Table 1.1\";\n     * <b>\"captionText\"</b> - the caption text only;\n\t * <b>\"pageNum\"</b> - the page number containing the referenced object;\n\t * <b>\"aboveBelow\"</b> - the words \"above\" or \"below\" depending on the item position.\n\t * @typedef {\"entireCaption\" | \"labelNumber\" | \"captionText\" | \"pageNum\" | \"aboveBelow\"} captionRefTo\n\t * @see office-js-api/Examples/Enumerations/captionRefTo.js\n\t */",
        "description": "Available values of the \"equation\"/\"figure\"/\"table\" reference type:\n<b>\"entireCaption\"</b>- the entire caption text;\n<b>\"labelNumber\"</b> - the label and object number only, e.g. \"Table 1.1\";\n<b>\"captionText\"</b> - the caption text only;\n<b>\"pageNum\"</b> - the page number containing the referenced object;\n<b>\"aboveBelow\"</b> - the words \"above\" or \"below\" depending on the item position.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nparagraph.AddCaptionCrossRef(\"table\", \"pageNum\", caption);\n```",
        "name": "captionRefTo",
        "longname": "captionRefTo",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4212,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/captionRefTo.js"
        ],
        "type": {
            "names": [
                "\"entireCaption\"",
                "\"labelNumber\"",
                "\"captionText\"",
                "\"pageNum\"",
                "\"aboveBelow\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"entireCaption\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"labelNumber\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"captionText\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pageNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"aboveBelow\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Axis position in the chart.\n\t * @typedef {(\"top\" | \"bottom\" | \"right\" | \"left\")} AxisPos\n\t * @see office-js-api/Examples/Enumerations/AxisPos.js\n\t */",
        "description": "Axis position in the chart.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nchart.SetAxieNumFormat(\"top\", \"0.00\");\n```",
        "name": "AxisPos",
        "longname": "AxisPos",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 261,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/AxisPos.js"
        ],
        "type": {
            "names": [
                "\"top\"",
                "\"bottom\"",
                "\"right\"",
                "\"left\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"top\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bottom\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"right\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"left\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Standard numeric format.\n\t * @typedef {(\"General\" | \"0\" | \"0.00\" | \"#,##0\" | \"#,##0.00\" | \"0%\" | \"0.00%\" |\n\t * \"0.00E+00\" | \"# ?/?\" | \"# ??/??\" | \"m/d/yyyy\" | \"d-mmm-yy\" | \"d-mmm\" | \"mmm-yy\" | \"h:mm AM/PM\" |\n\t * \"h:mm:ss AM/PM\" | \"h:mm\" | \"h:mm:ss\" | \"m/d/yyyy h:mm\" | \"#,##0_);(#,##0)\" | \"#,##0_);[Red](#,##0)\" | \n\t * \"#,##0.00_);(#,##0.00)\" | \"#,##0.00_);[Red](#,##0.00)\" | \"mm:ss\" | \"[h]:mm:ss\" | \"mm:ss.0\" | \"##0.0E+0\" | \"@\")} NumFormat\n\t * @see office-js-api/Examples/Enumerations/NumFormat.js\n\t */",
        "description": "Standard numeric format.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nworksheet.GetRange(\"A1\").SetOrientation(\"xlUpward\");\n```",
        "name": "NumFormat",
        "longname": "NumFormat",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 267,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/NumFormat.js"
        ],
        "type": {
            "names": [
                "\"General\"",
                "\"0\"",
                "\"0.00\"",
                "\"#,##0\"",
                "\"#,##0.00\"",
                "\"0%\"",
                "\"0.00%\"",
                "\"0.00E+00\"",
                "\"# ?/?\"",
                "\"# ??/??\"",
                "\"m/d/yyyy\"",
                "\"d-mmm-yy\"",
                "\"d-mmm\"",
                "\"mmm-yy\"",
                "\"h:mm AM/PM\"",
                "\"h:mm:ss AM/PM\"",
                "\"h:mm\"",
                "\"h:mm:ss\"",
                "\"m/d/yyyy h:mm\"",
                "\"#,##0_);(#,##0)\"",
                "\"#,##0_);[Red](#,##0)\"",
                "\"#,##0.00_);(#,##0.00)\"",
                "\"#,##0.00_);[Red](#,##0.00)\"",
                "\"mm:ss\"",
                "\"[h]:mm:ss\"",
                "\"mm:ss.0\"",
                "\"##0.0E+0\"",
                "\"@\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"General\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"0\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"0.00\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"#,##0\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"#,##0.00\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"0%\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"0.00%\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"0.00E+00\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"# ?/?\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"# ??/??\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"m/d/yyyy\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"d-mmm-yy\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"d-mmm\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mmm-yy\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"h:mm AM/PM\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"h:mm:ss AM/PM\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"h:mm\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"h:mm:ss\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"m/d/yyyy h:mm\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"#,##0_);(#,##0)\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"#,##0_);[Red](#,##0)\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"#,##0.00_);(#,##0.00)\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"#,##0.00_);[Red](#,##0.00)\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mm:ss\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"[h]:mm:ss\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mm:ss.0\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"##0.0E+0\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"@\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Types of all supported forms.\n\t * @typedef {ApiTextForm | ApiComboBoxForm | ApiCheckBoxForm | ApiPictureForm | ApiDateForm | ApiComplexForm} ApiForm\n\t * @see office-js-api/Examples/Enumerations/ApiForm.js\n\t */",
        "description": "Types of all supported forms.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet copyTextForm = textForm.Copy();\n```",
        "name": "ApiForm",
        "longname": "ApiForm",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4240,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/ApiForm.js"
        ],
        "type": {
            "names": [
                "ApiTextForm",
                "ApiComboBoxForm",
                "ApiCheckBoxForm",
                "ApiPictureForm",
                "ApiDateForm",
                "ApiComplexForm"
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "ApiTextForm"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiComboBoxForm"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiCheckBoxForm"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiPictureForm"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiDateForm"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiComplexForm"
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n     * Possible values for the caption numbering format.\n     * <b>\"ALPHABETIC\"</b> - upper letter.\n     * <b>\"alphabetic\"</b> - lower letter.\n     * <b>\"Roman\"</b> - upper Roman.\n     * <b>\"roman\"</b> - lower Roman.\n\t * <b>\"Arabic\"</b> - arabic.\n\t * @typedef {(\"ALPHABETIC\" | \"alphabetic\" | \"Roman\" | \"roman\" | \"Arabic\")} CaptionNumberingFormat\n\t * @see office-js-api/Examples/Enumerations/CaptionNumberingFormat.js\n\t */",
        "description": "Possible values for the caption numbering format.\n<b>\"ALPHABETIC\"</b> - upper letter.\n<b>\"alphabetic\"</b> - lower letter.\n<b>\"Roman\"</b> - upper Roman.\n<b>\"roman\"</b> - lower Roman.\n<b>\"Arabic\"</b> - arabic.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nparagraph.AddCaption(\"\", \"Figure\", false, \"Arabic\", false, undefined, \"hyphen\");\n```",
        "name": "CaptionNumberingFormat",
        "longname": "CaptionNumberingFormat",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4246,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/CaptionNumberingFormat.js"
        ],
        "type": {
            "names": [
                "\"ALPHABETIC\"",
                "\"alphabetic\"",
                "\"Roman\"",
                "\"roman\"",
                "\"Arabic\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"ALPHABETIC\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"alphabetic\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Roman\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"roman\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Arabic\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n     * Possible values for the caption separator.\n     * <b>\"hyphen\"</b> - the \"-\" punctuation mark.\n     * <b>\"period\"</b> - the \".\" punctuation mark.\n     * <b>\"colon\"</b> - the \":\" punctuation mark.\n     * <b>\"longDash\"</b> - the \"—\" punctuation mark.\n\t * <b>\"dash\"</b> - the \"-\" punctuation mark.\n\t * @typedef {(\"hyphen\" | \"period\" | \"colon\" | \"longDash\" | \"dash\")} CaptionSep\n\t * @see office-js-api/Examples/Enumerations/CaptionSep.js\n\t */",
        "description": "Possible values for the caption separator.\n<b>\"hyphen\"</b> - the \"-\" punctuation mark.\n<b>\"period\"</b> - the \".\" punctuation mark.\n<b>\"colon\"</b> - the \":\" punctuation mark.\n<b>\"longDash\"</b> - the \"—\" punctuation mark.\n<b>\"dash\"</b> - the \"-\" punctuation mark.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nparagraph.AddCaption(\"\", \"Figure\", false, \"Arabic\", false, undefined, \"hyphen\");\n```",
        "name": "CaptionSep",
        "longname": "CaptionSep",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4257,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/CaptionSep.js"
        ],
        "type": {
            "names": [
                "\"hyphen\"",
                "\"period\"",
                "\"colon\"",
                "\"longDash\"",
                "\"dash\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"hyphen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"period\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"colon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"longDash\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dash\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n     * Possible values for the caption label.\n     * @typedef {(\"Table\" | \"Equation\" | \"Figure\")} CaptionLabel\n\t * @see office-js-api/Examples/Enumerations/CaptionLabel.js\n\t */",
        "description": "Possible values for the caption label.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nparagraph.AddCaptionCrossRef(\"Table\", \"pageNum\", caption);\n```",
        "name": "CaptionLabel",
        "longname": "CaptionLabel",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4268,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/CaptionLabel.js"
        ],
        "type": {
            "names": [
                "\"Table\"",
                "\"Equation\"",
                "\"Figure\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"Table\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Equation\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Figure\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Table of contents properties.\n\t * @typedef {Object} TocPr\n\t * @property {boolean} [ShowPageNums=true] - Specifies whether to show page numbers in the table of contents.\n\t * @property {boolean} [RightAlgn=true] - Specifies whether to right-align page numbers in the table of contents.\n\t * @property {TocLeader} [LeaderType=\"dot\"] - The leader type in the table of contents.\n\t * @property {boolean} [FormatAsLinks=true] - Specifies whether to format the table of contents as links.\n\t * @property {TocBuildFromPr} [BuildFrom={OutlineLvls=9}] - Specifies whether to generate the table of contents from the outline levels or the specified styles.\n\t * @property {TocStyle} [TocStyle=\"standard\"] - The table of contents style type.\n\t * @see office-js-api/Examples/Enumerations/TocPr.js\n\t */",
        "description": "Table of contents properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet tocPr = {\"ShowPageNums\": true, \"RightAlgn\": true, \"LeaderType\": \"dot\", \"FormatAsLinks\": true, \"BuildFrom\": {\"OutlineLvls\": 9}, \"TocStyle\": \"standard\"};\ndoc.AddTableOfContents(tocPr);\n```",
        "name": "TocPr",
        "longname": "TocPr",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4274,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "ShowPageNums",
                "description": "Specifies whether to show page numbers in the table of contents.",
                "optional": true,
                "defaultvalue": true
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "RightAlgn",
                "description": "Specifies whether to right-align page numbers in the table of contents.",
                "optional": true,
                "defaultvalue": true
            },
            {
                "type": {
                    "names": [
                        "TocLeader"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "TocLeader"
                    }
                },
                "name": "LeaderType",
                "description": "The leader type in the table of contents.",
                "optional": true,
                "defaultvalue": "\"dot\""
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "FormatAsLinks",
                "description": "Specifies whether to format the table of contents as links.",
                "optional": true,
                "defaultvalue": true
            },
            {
                "type": {
                    "names": [
                        "TocBuildFromPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "TocBuildFromPr"
                    }
                },
                "name": "BuildFrom",
                "description": "Specifies whether to generate the table of contents from the outline levels or the specified styles.",
                "optional": true,
                "defaultvalue": "{OutlineLvls=9}"
            },
            {
                "type": {
                    "names": [
                        "TocStyle"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "TocStyle"
                    }
                },
                "name": "TocStyle",
                "description": "The table of contents style type.",
                "optional": true,
                "defaultvalue": "\"standard\""
            }
        ],
        "see": [
            "office-js-api/Examples/Enumerations/TocPr.js"
        ],
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        }
    },
    {
        "comment": "/**\n\t * Table of figures properties.\n\t * @typedef {Object} TofPr\n\t * @property {boolean} [ShowPageNums=true] - Specifies whether to show page numbers in the table of figures.\n\t * @property {boolean} [RightAlgn=true] - Specifies whether to right-align page numbers in the table of figures.\n\t * @property {TocLeader} [LeaderType=\"dot\"] - The leader type in the table of figures.\n\t * @property {boolean} [FormatAsLinks=true] - Specifies whether to format the table of figures as links.\n\t * @property {CaptionLabel | string} [BuildFrom=\"Figure\"] - Specifies whether to generate the table of figures based on the specified caption label or the paragraph style name used (for example, \"Heading 1\").\n\t * @property {boolean} [LabelNumber=true] - Specifies whether to include the label and number in the table of figures.\n\t * @property {TofStyle} [TofStyle=\"distinctive\"] - The table of figures style type.\n\t * @see office-js-api/Examples/Enumerations/TofPr.js\n\t */",
        "description": "Table of figures properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet tofPr = {\"ShowPageNums\": true, \"RightAlgn\": true, \"LeaderType\": \"dot\", \"FormatAsLinks\": true, \"BuildFrom\": \"Figure\", \"LabelNumber\": true, \"TofStyle\": \"distinctive\"};\ndoc.AddTableOfFigures(tofPr);\n```",
        "name": "TofPr",
        "longname": "TofPr",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4286,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "ShowPageNums",
                "description": "Specifies whether to show page numbers in the table of figures.",
                "optional": true,
                "defaultvalue": true
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "RightAlgn",
                "description": "Specifies whether to right-align page numbers in the table of figures.",
                "optional": true,
                "defaultvalue": true
            },
            {
                "type": {
                    "names": [
                        "TocLeader"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "TocLeader"
                    }
                },
                "name": "LeaderType",
                "description": "The leader type in the table of figures.",
                "optional": true,
                "defaultvalue": "\"dot\""
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "FormatAsLinks",
                "description": "Specifies whether to format the table of figures as links.",
                "optional": true,
                "defaultvalue": true
            },
            {
                "type": {
                    "names": [
                        "CaptionLabel",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "CaptionLabel"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "BuildFrom",
                "description": "Specifies whether to generate the table of figures based on the specified caption label or the paragraph style name used (for example, \"Heading 1\").",
                "optional": true,
                "defaultvalue": "\"Figure\""
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "LabelNumber",
                "description": "Specifies whether to include the label and number in the table of figures.",
                "optional": true,
                "defaultvalue": true
            },
            {
                "type": {
                    "names": [
                        "TofStyle"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "TofStyle"
                    }
                },
                "name": "TofStyle",
                "description": "The table of figures style type.",
                "optional": true,
                "defaultvalue": "\"distinctive\""
            }
        ],
        "see": [
            "office-js-api/Examples/Enumerations/TofPr.js"
        ],
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        }
    },
    {
        "comment": "/**\n\t * Table of contents properties which specify whether to generate the table of contents from the outline levels or the specified styles.\n\t * @typedef {Object} TocBuildFromPr\n\t * @property {number} [OutlineLvls=9] - Maximum number of levels in the table of contents.\n\t * @property {TocStyleLvl[]} StylesLvls - Style levels (for example, [{Name: \"Heading 1\", Lvl: 2}, {Name: \"Heading 2\", Lvl: 3}]).\n\t * <note>If StylesLvls.length > 0, then the OutlineLvls property will be ignored.</note>\n\t * @see office-js-api/Examples/Enumerations/TocBuildFromPr.js\n\t */",
        "description": "Table of contents properties which specify whether to generate the table of contents from the outline levels or the specified styles.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet tocBuildFromPr = {\"OutlineLvls\": 9};\nlet tocPr = {\"ShowPageNums\": true, \"RightAlgn\": true, \"LeaderType\": \"dot\", \"FormatAsLinks\": true, \"BuildFrom\": tocBuildFromPr, \"TocStyle\": \"standard\"};\ndoc.AddTableOfContents(tocPr);\n```",
        "name": "TocBuildFromPr",
        "longname": "TocBuildFromPr",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4299,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "OutlineLvls",
                "description": "Maximum number of levels in the table of contents.",
                "optional": true,
                "defaultvalue": 9
            },
            {
                "type": {
                    "names": [
                        "Array.<TocStyleLvl>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "TocStyleLvl",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "StylesLvls",
                "description": "Style levels (for example, [{Name: \"Heading 1\", Lvl: 2}, {Name: \"Heading 2\", Lvl: 3}]).\n<note>If StylesLvls.length > 0, then the OutlineLvls property will be ignored.</note>",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "see": [
            "office-js-api/Examples/Enumerations/TocBuildFromPr.js"
        ],
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        }
    },
    {
        "comment": "/**\n\t * Table of contents style levels.\n\t * @typedef {Object} TocStyleLvl\n\t * @property {string} Name - Style name (for example, \"Heading 1\").\n\t * @property {number} Lvl - Level which will be applied to the specified style in the table of contents.\n\t * @see office-js-api/Examples/Enumerations/TocStyleLvl.js\n\t */",
        "description": "Table of contents style levels.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet tocStyleLvl = [{Name: \"Heading 1\", Lvl: 2}, {Name: \"Heading 2\", Lvl: 3}];\nlet tocPr = {\"ShowPageNums\": true, \"RightAlgn\": true, \"LeaderType\": \"dot\", \"FormatAsLinks\": true, \"BuildFrom\": {\"StylesLvls\": tocStyleLvl}, \"TocStyle\": \"standard\"};\ndoc.AddTableOfContents(tocPr);\n```",
        "name": "TocStyleLvl",
        "longname": "TocStyleLvl",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4308,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Name",
                "description": "Style name (for example, \"Heading 1\").",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "Lvl",
                "description": "Level which will be applied to the specified style in the table of contents.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "see": [
            "office-js-api/Examples/Enumerations/TocStyleLvl.js"
        ],
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        }
    },
    {
        "comment": "/**\n\t * Possible values for the table of contents leader:\n\t * <b>\"dot\"</b> - \".......\"\n\t * <b>\"dash\"</b> - \"-------\"\n\t * <b>\"underline\"</b> - \"_______\"\n     * @typedef {(\"dot\" | \"dash\" | \"underline\" | \"none\")} TocLeader\n\t * @see office-js-api/Examples/Enumerations/TocLeader.js\n\t */",
        "description": "Possible values for the table of contents leader:\n<b>\"dot\"</b> - \".......\"\n<b>\"dash\"</b> - \"-------\"\n<b>\"underline\"</b> - \"_______\"\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet tocLeader = \"dot\";\nlet tocPr = {\"ShowPageNums\": true, \"RightAlgn\": true, \"LeaderType\": tocLeader, \"FormatAsLinks\": true, \"BuildFrom\": {\"OutlineLvls\": 9}, \"TocStyle\": \"standard\"};\ndoc.AddTableOfContents(tocPr);\n```",
        "name": "TocLeader",
        "longname": "TocLeader",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4316,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/TocLeader.js"
        ],
        "type": {
            "names": [
                "\"dot\"",
                "\"dash\"",
                "\"underline\"",
                "\"none\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"dot\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dash\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"underline\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"none\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n     * Possible values for the table of contents style.\n     * @typedef {(\"simple\" | \"online\" | \"standard\" | \"modern\" | \"classic\")} TocStyle\n\t * @see office-js-api/Examples/Enumerations/TocStyle.js\n\t */",
        "description": "Possible values for the table of contents style.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet tocStyle = \"standard\";\nlet tocPr = {\"ShowPageNums\": true, \"RightAlgn\": true, \"LeaderType\": \"dot\", \"FormatAsLinks\": true, \"BuildFrom\": {\"OutlineLvls\": 9}, \"TocStyle\": tocStyle};\ndoc.AddTableOfContents(tocPr);\n```",
        "name": "TocStyle",
        "longname": "TocStyle",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4325,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/TocStyle.js"
        ],
        "type": {
            "names": [
                "\"simple\"",
                "\"online\"",
                "\"standard\"",
                "\"modern\"",
                "\"classic\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"simple\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"online\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"standard\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"modern\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"classic\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n     * Possible values for the table of figures style.\n     * @typedef {(\"simple\" | \"online\" | \"classic\" | \"distinctive\" | \"centered\" | \"formal\")} TofStyle\n\t * @see office-js-api/Examples/Enumerations/TofStyle.js\n\t */",
        "description": "Possible values for the table of figures style.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet tofStyle = \"distinctive\";\nlet tofPr = {\"ShowPageNums\": true, \"RightAlgn\": true, \"LeaderType\": \"dot\", \"FormatAsLinks\": true, \"BuildFrom\": \"Figure\", \"LabelNumber\": true, \"TofStyle\": tofStyle};\ndoc.AddTableOfFigures(tofPr);\n```",
        "name": "TofStyle",
        "longname": "TofStyle",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4331,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/TofStyle.js"
        ],
        "type": {
            "names": [
                "\"simple\"",
                "\"online\"",
                "\"classic\"",
                "\"distinctive\"",
                "\"centered\"",
                "\"formal\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"simple\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"online\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"classic\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"distinctive\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"centered\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"formal\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n     * Any valid drawing element.\n     * @typedef {(ApiShape | ApiImage | ApiGroup | ApiOleObject | ApiChart )} Drawing\n\t * @see office-js-api/Examples/Enumerations/Drawing.js\n\t */",
        "description": "Any valid drawing element.",
        "name": "Drawing",
        "longname": "Drawing",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 305,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/Drawing.js"
        ],
        "type": {
            "names": [
                "ApiShape",
                "ApiImage",
                "ApiGroup",
                "ApiOleObject",
                "ApiChart"
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "ApiShape"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiImage"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiGroup"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiOleObject"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiChart"
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n     * Available drawing element for grouping.\n     * @typedef {(ApiShape | ApiGroup | ApiImage | ApiChart)} DrawingForGroup\n\t * @see office-js-api/Examples/Enumerations/DrawingForGroup.js\n\t */",
        "description": "Available drawing element for grouping.",
        "name": "DrawingForGroup",
        "longname": "DrawingForGroup",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 311,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/DrawingForGroup.js"
        ],
        "type": {
            "names": [
                "ApiShape",
                "ApiGroup",
                "ApiImage",
                "ApiChart"
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "ApiShape"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiGroup"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiImage"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiChart"
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n     * The 1000th of a percent (100000 = 100%).\n     * @typedef {number} PositivePercentage\n     * @see office-js-api/Examples/Enumerations/PositivePercentage.js\n\t */",
        "description": "The 1000th of a percent (100000 = 100%).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet gs = Api.CreateGradientStop(Api.CreateRGBColor(255, 164, 101), 100000);\n```",
        "name": "PositivePercentage",
        "longname": "PositivePercentage",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 383,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/PositivePercentage.js"
        ],
        "type": {
            "names": [
                "number"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "number"
            }
        }
    },
    {
        "comment": "/**\n\t * The type of tick mark appearance.\n\t * @typedef {(\"cross\" | \"in\" | \"none\" | \"out\")} TickMark\n\t * @see office-js-api/Examples/Enumerations/TickMark.js\n\t */",
        "description": "The type of tick mark appearance.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nchart.SetVertAxisMajorTickMark(\"cross\");\n```",
        "name": "TickMark",
        "longname": "TickMark",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 244,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/TickMark.js"
        ],
        "type": {
            "names": [
                "\"cross\"",
                "\"in\"",
                "\"none\"",
                "\"out\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"cross\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"in\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"none\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"out\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * The watermark type.\n\t * @typedef {(\"none\" | \"text\" | \"image\")} WatermarkType\n\t * @see office-js-api/Examples/Enumerations/WatermarkType.js\n\t */",
        "description": "The watermark type.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwatermarkSettings.SetType(\"text\");\n```",
        "name": "WatermarkType",
        "longname": "WatermarkType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4367,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/WatermarkType.js"
        ],
        "type": {
            "names": [
                "\"none\"",
                "\"text\"",
                "\"image\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"none\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"text\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"image\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * The watermark direction.\n\t * @typedef {(\"horizontal\" | \"clockwise45\" | \"counterclockwise45\")} WatermarkDirection\n\t * @see office-js-api/Examples/Enumerations/WatermarkDirection.js\n\t */",
        "description": "The watermark direction.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nwatermarkSettings.SetDirection(\"clockwise45\");\n```",
        "name": "WatermarkDirection",
        "longname": "WatermarkDirection",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4373,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/WatermarkDirection.js"
        ],
        "type": {
            "names": [
                "\"horizontal\"",
                "\"clockwise45\"",
                "\"counterclockwise45\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"horizontal\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"clockwise45\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"counterclockwise45\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Creates a new paragraph.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CSE\"]\n\t * @returns {ApiParagraph}\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/CreateParagraph.js\n\t */",
        "description": "Creates a new paragraph.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet docContent = shape.GetContent();\ndocContent.RemoveAllElements();\nlet paragraph = Api.CreateParagraph();\nparagraph.SetJc(\"left\");\nparagraph.AddText(\"We removed all elements from the shape and added a new paragraph inside it.\");\ndocContent.Push(paragraph);\n```",
        "memberof": "Api",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiParagraph"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiParagraph"
                    }
                }
            }
        ],
        "name": "CreateParagraph",
        "longname": "Api#CreateParagraph",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4398,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/CreateParagraph.js"
        ]
    },
    {
        "comment": "/**\n\t * Creates a new smaller text block to be inserted to the current paragraph or table.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {ApiRun}\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/CreateRun.js\n\t */",
        "description": "Creates a new smaller text block to be inserted to the current paragraph or table.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet docContent = shape.GetContent();\nlet paragraph = docContent.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nparagraph.AddElement(run);\nrun = Api.CreateRun();\nrun.SetFontFamily(\"Comic Sans MS\");\nrun.AddText(\"This is a text run with the font family set to 'Comic Sans MS'.\");\nparagraph.AddElement(run);\n```",
        "memberof": "Api",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRun"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRun"
                    }
                }
            }
        ],
        "name": "CreateRun",
        "longname": "Api#CreateRun",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4461,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/CreateRun.js"
        ]
    },
    {
        "comment": "/**\n\t * Creates an RGB color setting the appropriate values for the red, green and blue color components.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {byte} r - Red color component value.\n\t * @param {byte} g - Green color component value.\n\t * @param {byte} b - Blue color component value.\n\t * @returns {ApiRGBColor}\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/CreateRGBColor.js\n\t */",
        "description": "Creates an RGB color setting the appropriate values for the red, green and blue color components.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet gs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nlet gs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nlet fill = Api.CreateLinearGradientFill([gs1, gs2], 5400000);\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nworksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 1, 3 * 36000);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "byte"
                    }
                },
                "name": "r",
                "description": "Red color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "byte"
                    }
                },
                "name": "g",
                "description": "Green color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "byte"
                    }
                },
                "name": "b",
                "description": "Blue color component value.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRGBColor"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRGBColor"
                    }
                }
            }
        ],
        "name": "CreateRGBColor",
        "longname": "Api#CreateRGBColor",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4647,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/CreateRGBColor.js"
        ]
    },
    {
        "comment": "/**\n\t * Creates a complex color scheme selecting from one of the available schemes.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {SchemeColorId} schemeColorId - The color scheme identifier.\n\t * @returns {ApiSchemeColor}\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/CreateSchemeColor.js\n\t */",
        "description": "Creates a complex color scheme selecting from one of the available schemes.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet schemeColor = Api.CreateSchemeColor(\"dk1\");\nlet fill = Api.CreateSolidFill(schemeColor);\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nworksheet.AddShape(\"curvedUpArrow\", 60 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 1, 3 * 36000);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "SchemeColorId"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "SchemeColorId"
                    }
                },
                "name": "schemeColorId",
                "description": "The color scheme identifier.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiSchemeColor"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiSchemeColor"
                    }
                }
            }
        ],
        "name": "CreateSchemeColor",
        "longname": "Api#CreateSchemeColor",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4660,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/CreateSchemeColor.js"
        ]
    },
    {
        "comment": "/**\n\t * Creates a color selecting it from one of the available color presets.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {PresetColor} presetColor - A preset selected from the list of the available color preset names.\n\t * @returns {ApiPresetColor};\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/CreatePresetColor.js\n\t */",
        "description": "Creates a color selecting it from one of the available color presets.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet presetColor = Api.CreatePresetColor(\"peachPuff\");\nlet gs1 = Api.CreateGradientStop(presetColor, 0);\nlet gs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nlet fill = Api.CreateLinearGradientFill([gs1, gs2], 5400000);\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nworksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 1, 3 * 36000);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "PresetColor"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PresetColor"
                    }
                },
                "name": "presetColor",
                "description": "A preset selected from the list of the available color preset names.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiPresetColor"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiPresetColor"
                    }
                }
            }
        ],
        "name": "CreatePresetColor",
        "longname": "Api#CreatePresetColor",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4673,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/CreatePresetColor.js"
        ]
    },
    {
        "comment": "/**\n\t * Creates a solid fill to apply to the object using a selected solid color as the object background.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {ApiUniColor} uniColor - The color used for the element fill.\n\t * @returns {ApiFill}\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/CreateSolidFill.js\n\t */",
        "description": "Creates a solid fill to apply to the object using a selected solid color as the object background.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet rgbColor = Api.CreateRGBColor(255, 111, 61);\nlet fill = Api.CreateSolidFill(rgbColor);\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nworksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 1, 3 * 36000);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiUniColor"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiUniColor"
                    }
                },
                "name": "uniColor",
                "description": "The color used for the element fill.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                }
            }
        ],
        "name": "CreateSolidFill",
        "longname": "Api#CreateSolidFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4686,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/CreateSolidFill.js"
        ]
    },
    {
        "comment": "/**\n\t * Creates a linear gradient fill to apply to the object using the selected linear gradient as the object background.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {Array} gradientStops - The array of gradient color stops measured in 1000th of percent.\n\t * @param {PositiveFixedAngle} angle - The angle measured in 60000th of a degree that will define the gradient direction.\n\t * @returns {ApiFill}\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/CreateLinearGradientFill.js\n\t */",
        "description": "Creates a linear gradient fill to apply to the object using the selected linear gradient as the object background.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet gs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nlet gs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nlet fill = Api.CreateLinearGradientFill([gs1, gs2], 5400000);\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nworksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 1, 3 * 36000);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Array"
                    }
                },
                "name": "gradientStops",
                "description": "The array of gradient color stops measured in 1000th of percent.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "PositiveFixedAngle"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PositiveFixedAngle"
                    }
                },
                "name": "angle",
                "description": "The angle measured in 60000th of a degree that will define the gradient direction.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                }
            }
        ],
        "name": "CreateLinearGradientFill",
        "longname": "Api#CreateLinearGradientFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4700,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/CreateLinearGradientFill.js"
        ]
    },
    {
        "comment": "/**\n\t * Creates a radial gradient fill to apply to the object using the selected radial gradient as the object background.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {Array} gradientStops - The array of gradient color stops measured in 1000th of percent.\n\t * @returns {ApiFill}\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/CreateRadialGradientFill.js\n\t */",
        "description": "Creates a radial gradient fill to apply to the object using the selected radial gradient as the object background.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet gs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nlet gs2 = Api.CreateGradientStop(Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000));\nlet fill = Api.CreateRadialGradientFill([gs1, gs2]);\nvar stroke = Api.CreateStroke(0, Api.CreateNoFill());\nworksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 1, 3 * 36000);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Array"
                    }
                },
                "name": "gradientStops",
                "description": "The array of gradient color stops measured in 1000th of percent.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                }
            }
        ],
        "name": "CreateRadialGradientFill",
        "longname": "Api#CreateRadialGradientFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4714,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/CreateRadialGradientFill.js"
        ]
    },
    {
        "comment": "/**\n\t * Creates a pattern fill to apply to the object using the selected pattern as the object background.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {PatternType} patternType - The pattern type used for the fill selected from one of the available pattern types.\n\t * @param {ApiUniColor} bgColor - The background color used for the pattern creation.\n\t * @param {ApiUniColor} fgColor - The foreground color used for the pattern creation.\n\t * @returns {ApiFill}\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/CreatePatternFill.js\n\t */",
        "description": "Creates a pattern fill to apply to the object using the selected pattern as the object background.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreatePatternFill(\"dashDnDiag\", Api.CreateRGBColor(255, 111, 61), Api.CreateRGBColor(51, 51, 51));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nworksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 1, 3 * 36000);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "PatternType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PatternType"
                    }
                },
                "name": "patternType",
                "description": "The pattern type used for the fill selected from one of the available pattern types.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiUniColor"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiUniColor"
                    }
                },
                "name": "bgColor",
                "description": "The background color used for the pattern creation.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiUniColor"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiUniColor"
                    }
                },
                "name": "fgColor",
                "description": "The foreground color used for the pattern creation.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                }
            }
        ],
        "name": "CreatePatternFill",
        "longname": "Api#CreatePatternFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4728,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/CreatePatternFill.js"
        ]
    },
    {
        "comment": "/**\n\t * Creates a blip fill to apply to the object using the selected image as the object background.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {string} imageUrl - The path to the image used for the blip fill (currently only internet URL or Base64 encoded images are supported).\n\t * @param {BlipFillType} blipFillType - The type of the fill used for the blip fill (tile or stretch).\n\t * @returns {ApiFill}\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/CreateBlipFill.js\n\t */",
        "description": "Creates a blip fill to apply to the object using the selected image as the object background.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateBlipFill(\"https://api.onlyoffice.com/content/img/docbuilder/examples/icon_DocumentEditors.png\", \"tile\");\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nworksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 1, 3 * 36000);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "imageUrl",
                "description": "The path to the image used for the blip fill (currently only internet URL or Base64 encoded images are supported).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "BlipFillType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "BlipFillType"
                    }
                },
                "name": "blipFillType",
                "description": "The type of the fill used for the blip fill (tile or stretch).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                }
            }
        ],
        "name": "CreateBlipFill",
        "longname": "Api#CreateBlipFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4742,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/CreateBlipFill.js"
        ]
    },
    {
        "comment": "/**\n\t * Creates no fill and removes the fill from the element.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {ApiFill}\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/CreateNoFill.js\n\t */",
        "description": "Creates no fill and removes the fill from the element.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet gs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nlet gs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nlet fill = Api.CreateLinearGradientFill([gs1, gs2], 5400000);\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nworksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 1, 3 * 36000);\n```",
        "memberof": "Api",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                }
            }
        ],
        "name": "CreateNoFill",
        "longname": "Api#CreateNoFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4754,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/CreateNoFill.js"
        ]
    },
    {
        "comment": "/**\n\t * Creates a stroke adding shadows to the element.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {EMU} width - The width of the shadow measured in English measure units.\n\t * @param {ApiFill} fill - The fill type used to create the shadow.\n\t * @returns {ApiStroke}\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/CreateStroke.js\n\t */",
        "description": "Creates a stroke adding shadows to the element.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet gs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nlet gs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nlet fill = Api.CreateLinearGradientFill([gs1, gs2], 5400000);\nlet fill1 = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nlet stroke = Api.CreateStroke(3 * 36000, fill1);\nworksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 1, 3 * 36000);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "width",
                "description": "The width of the shadow measured in English measure units.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                },
                "name": "fill",
                "description": "The fill type used to create the shadow.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiStroke"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiStroke"
                    }
                }
            }
        ],
        "name": "CreateStroke",
        "longname": "Api#CreateStroke",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4768,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/CreateStroke.js"
        ]
    },
    {
        "comment": "/**\n\t * Creates a gradient stop used for different types of gradients.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {ApiUniColor} uniColor - The color used for the gradient stop.\n\t * @param {PositivePercentage} pos - The position of the gradient stop measured in 1000th of percent.\n\t * @returns {ApiGradientStop}\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/CreateGradientStop.js\n\t */",
        "description": "Creates a gradient stop used for different types of gradients.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet gs1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nlet gs2 = Api.CreateGradientStop(Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000));\nlet fill = Api.CreateLinearGradientFill([gs1, gs2], 5400000);\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nworksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 1, 3 * 36000);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiUniColor"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiUniColor"
                    }
                },
                "name": "uniColor",
                "description": "The color used for the gradient stop.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "PositivePercentage"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PositivePercentage"
                    }
                },
                "name": "pos",
                "description": "The position of the gradient stop measured in 1000th of percent.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiGradientStop"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiGradientStop"
                    }
                }
            }
        ],
        "name": "CreateGradientStop",
        "longname": "Api#CreateGradientStop",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4782,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/CreateGradientStop.js"
        ]
    },
    {
        "comment": "/**\n\t * Creates a bullet for a paragraph with the character or symbol specified with the sSymbol parameter.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\", \"CPE\"]\n\t * @param {string} sSymbol - The character or symbol which will be used to create the bullet for the paragraph.\n\t * @returns {ApiBullet}\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/CreateBullet.js\n\t */",
        "description": "Creates a bullet for a paragraph with the character or symbol specified with the sSymbol parameter.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet docContent = shape.GetContent();\nlet paragraph = docContent.GetElement(0);\nlet bullet = Api.CreateBullet(\"-\");\nparagraph.SetBullet(bullet);\nparagraph.AddText(\" This is an example of the bulleted paragraph.\");\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sSymbol",
                "description": "The character or symbol which will be used to create the bullet for the paragraph.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiBullet"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiBullet"
                    }
                }
            }
        ],
        "name": "CreateBullet",
        "longname": "Api#CreateBullet",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4795,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/CreateBullet.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the ApiUnsupported class.\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {\"unsupported\"}\n\t * @see office-js-api/Examples/{Editor}/ApiUnsupported/Methods/GetClassType.js\n\t */",
        "description": "Returns a type of the ApiUnsupported class.",
        "memberof": "ApiUnsupported",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"unsupported\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"unsupported\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiUnsupported#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5327,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiUnsupported/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the ApiDocumentContent class. \n\t * @memberof ApiDocumentContent\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {\"documentContent\"}\n\t * @see office-js-api/Examples/{Editor}/ApiDocumentContent/Methods/GetClassType.js\n\t */",
        "description": "Returns a type of the ApiDocumentContent class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 200 * 36000, 60 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet classType = content.GetClassType();\nlet paragraph = content.GetElement(0);\nparagraph.SetJc(\"left\");\nparagraph.AddText(\"Class Type = \" + classType);\n```",
        "memberof": "ApiDocumentContent",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"documentContent\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"documentContent\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiDocumentContent#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5464,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiDocumentContent/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a number of elements in the current document.\n\t * @memberof ApiDocumentContent\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiDocumentContent/Methods/GetElementsCount.js\n\t */",
        "description": "Returns a number of elements in the current document.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 200 * 36000, 60 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nparagraph.AddText(\"We got the first paragraph inside the shape.\");\nparagraph.AddLineBreak();\nparagraph.AddText(\"Number of elements inside the shape: \" + content.GetElementsCount());\nparagraph.AddLineBreak();\nparagraph.AddText(\"Line breaks are NOT counted into the number of elements.\");\n```",
        "memberof": "ApiDocumentContent",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GetElementsCount",
        "longname": "ApiDocumentContent#GetElementsCount",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5475,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiDocumentContent/Methods/GetElementsCount.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns an element by its position in the document.\n\t * @memberof ApiDocumentContent\n\t * @param {number} nPos - The element position that will be taken from the document.\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {?DocumentElement}\n\t * @see office-js-api/Examples/{Editor}/ApiDocumentContent/Methods/GetElement.js\n\t */",
        "description": "Returns an element by its position in the document.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 200 * 36000, 60 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet paraPr = paragraph.GetParaPr();\nparaPr.SetJc(\"center\");\nparagraph.AddText(\"This is a paragraph with the text in it aligned by the center. \");\nparagraph.AddText(\"The justification is specified in the paragraph style. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\n```",
        "memberof": "ApiDocumentContent",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nPos",
                "description": "The element position that will be taken from the document.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "DocumentElement"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "DocumentElement",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetElement",
        "longname": "ApiDocumentContent#GetElement",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5487,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiDocumentContent/Methods/GetElement.js"
        ]
    },
    {
        "comment": "/**\n\t * Adds a paragraph or a table or a blockLvl content control using its position in the document content.\n\t * @memberof ApiDocumentContent\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {number} nPos - The position where the current element will be added.\n\t * @param {DocumentElement} oElement - The document element which will be added at the current position.\n\t * @see office-js-api/Examples/{Editor}/ApiDocumentContent/Methods/AddElement.js\n\t */",
        "description": "Adds a paragraph or a table or a blockLvl content control using its position in the document content.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 200 * 36000, 60 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\ncontent.RemoveAllElements();\nlet paragraph = Api.CreateParagraph();\nparagraph.AddText(\"We removed all elements from the shape and added a new paragraph inside it.\");\ncontent.AddElement(paragraph);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiDocumentContent",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nPos",
                "description": "The position where the current element will be added.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "DocumentElement"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "DocumentElement"
                    }
                },
                "name": "oElement",
                "description": "The document element which will be added at the current position.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "AddElement",
        "longname": "ApiDocumentContent#AddElement",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5510,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiDocumentContent/Methods/AddElement.js"
        ]
    },
    {
        "comment": "/**\n\t * Pushes a paragraph or a table to actually add it to the document.\n\t * @memberof ApiDocumentContent\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {DocumentElement} oElement - The element type which will be pushed to the document.\n\t * @returns {boolean} - returns false if oElement is unsupported.\n\t * @see office-js-api/Examples/{Editor}/ApiDocumentContent/Methods/Push.js\n\t */",
        "description": "Pushes a paragraph or a table to actually add it to the document.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\ncontent.RemoveAllElements();\nlet paragraph = Api.CreateParagraph();\nparagraph.SetJc(\"left\");\nparagraph.AddText(\"We removed all elements from the shape and added a new paragraph inside it.\");\ncontent.Push(paragraph);\n```",
        "memberof": "ApiDocumentContent",
        "params": [
            {
                "type": {
                    "names": [
                        "DocumentElement"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "DocumentElement"
                    }
                },
                "name": "oElement",
                "description": "The element type which will be pushed to the document.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "Push",
        "longname": "ApiDocumentContent#Push",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5528,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiDocumentContent/Methods/Push.js"
        ]
    },
    {
        "comment": "/**\n\t * Removes all the elements from the current document or from the current document element.\n\t * <note>When all elements are removed, a new empty paragraph is automatically created. If you want to add\n\t * content to this paragraph, use the {@link ApiDocumentContent#GetElement} method.</note>\n\t * @memberof ApiDocumentContent\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @see office-js-api/Examples/{Editor}/ApiDocumentContent/Methods/RemoveAllElements.js\n\t */",
        "description": "Removes all the elements from the current document or from the current document element.\n<note>When all elements are removed, a new empty paragraph is automatically created. If you want to add\ncontent to this paragraph, use the {@link ApiDocumentContent#GetElement} method.</note>\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nparagraph.AddText(\"This is just a sample paragraph.\");\ncontent.RemoveAllElements();\nparagraph = Api.CreateParagraph();\nparagraph.SetJc(\"left\");\nparagraph.AddText(\"We removed all elements from the shape and added a new paragraph inside it.\");\ncontent.Push(paragraph);\n```",
        "memberof": "ApiDocumentContent",
        "params": null,
        "returns": null,
        "name": "RemoveAllElements",
        "longname": "ApiDocumentContent#RemoveAllElements",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5550,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiDocumentContent/Methods/RemoveAllElements.js"
        ]
    },
    {
        "comment": "/**\n\t * Removes an element using the position specified.\n\t * @memberof ApiDocumentContent\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {number} nPos - The element number (position) in the document or inside other element.\n\t * @see office-js-api/Examples/{Editor}/ApiDocumentContent/Methods/RemoveElement.js\n\t */",
        "description": "Removes an element using the position specified.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 200 * 36000, 60 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nparagraph.AddText(\"This is paragraph #1.\");\nfor (let paraIncrease = 1; paraIncrease < 5; ++paraIncrease) {\n    paragraph = Api.CreateParagraph();\n    paragraph.AddText(\"This is paragraph #\" + (paraIncrease + 1) + \".\");\n    content.Push(paragraph);\n}\ncontent.RemoveElement(2);\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"We removed paragraph #3, check that out above.\");\ncontent.Push(paragraph);\n```",
        "memberof": "ApiDocumentContent",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nPos",
                "description": "The element number (position) in the document or inside other element.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "RemoveElement",
        "longname": "ApiDocumentContent#RemoveElement",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5561,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiDocumentContent/Methods/RemoveElement.js"
        ]
    },
    {
        "comment": "/**\n\t * Record of one comment.\n\t * @typedef {Object} CommentReportRecord\n\t * @property {boolean} [IsAnswer=false] - Specifies whether this is an initial comment or a reply to another comment.\n\t * @property {string} CommentMessage - The text of the current comment.\n\t * @property {number} Date - The time when this change was made in local time.\n\t * @property {number} DateUTC - The time when this change was made in UTC.\n\t * @property {string} [QuoteText=undefined] - The text to which this comment is related.\n\t * @see office-js-api/Examples/Enumerations/CommentReportRecord.js\n\t */",
        "description": "Record of one comment.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet commentsReport = oDocument.GetCommentsReport();\n```",
        "name": "CommentReportRecord",
        "longname": "CommentReportRecord",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 6064,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "IsAnswer",
                "description": "Specifies whether this is an initial comment or a reply to another comment.",
                "optional": true,
                "defaultvalue": false
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "CommentMessage",
                "description": "The text of the current comment.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "Date",
                "description": "The time when this change was made in local time.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "DateUTC",
                "description": "The time when this change was made in UTC.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "QuoteText",
                "description": "The text to which this comment is related.",
                "optional": true,
                "defaultvalue": null
            }
        ],
        "see": [
            "office-js-api/Examples/Enumerations/CommentReportRecord.js"
        ],
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        }
    },
    {
        "comment": "/**\n\t * Report on all comments.\n\t * This is a dictionary where the keys are usernames.\n\t * @typedef {Object.<string, Array.<CommentReportRecord>>} CommentReport\n\t * @example\n\t *  {\n\t *    \"John Smith\" : [{IsAnswer: false, CommentMessage: 'Good text', Date: 1688588002698, DateUTC: 1688570002698, QuoteText: 'Some text'},\n\t *      {IsAnswer: true, CommentMessage: \"I don't think so\", Date: 1688588012661, DateUTC: 1688570012661}],\n\t *\n\t *    \"Mark Pottato\" : [{IsAnswer: false, CommentMessage: 'Need to change this part', Date: 1688587967245, DateUTC: 1688569967245, QuoteText: 'The quick brown fox jumps over the lazy dog'},\n\t *      {IsAnswer: false, CommentMessage: 'We need to add a link', Date: 1688587967245, DateUTC: 1688569967245, QuoteText: 'OnlyOffice'}]\n\t *  }\n\t * @see office-js-api/Examples/Enumerations/CommentReport.js\n\t */",
        "description": "Report on all comments.\nThis is a dictionary where the keys are usernames.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet commentsReport = oDocument.GetCommentsReport();\n```",
        "name": "CommentReport",
        "longname": "CommentReport",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 6075,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/CommentReport.js"
        ],
        "type": {
            "names": [
                "Object.<string, Array.<CommentReportRecord>>"
            ],
            "parsedType": {
                "type": "TypeApplication",
                "expression": {
                    "type": "NameExpression",
                    "name": "Object"
                },
                "applications": [
                    {
                        "type": "NameExpression",
                        "name": "string"
                    },
                    {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "type": "NameExpression",
                                "name": "CommentReportRecord"
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Review record type.\n\t * @typedef {(\"TextAdd\" | \"TextRem\" | \"ParaAdd\" | \"ParaRem\" | \"TextPr\" | \"ParaPr\" | \"Unknown\")} ReviewReportRecordType\n\t * @see office-js-api/Examples/Enumerations/ReviewReportRecordType.js\n\t */",
        "description": "Review record type.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet reviewReportRecord1 = {Type: \"TextRem\", Value: \"Hello, Mark!\", Date: 1679941734161};\nlet reviewReportRecord2 = {Type: \"TextAdd\", Value: \"Dear Mr. Pottato.\", Date: 1679941736189};\nlet reviewReportRecord3 = {Type: \"ParaRem\", Date: 1679941755942};\nlet reviewReportRecord4 = {Type: \"TextPr\", Date: 1679941757832};\nlet reviewRecord = {\n\t\"John Smith\" : [reviewReportRecord1, reviewReportRecord2],\n\t\"Mark Pottato\" : [reviewReportRecord3, reviewReportRecord4]\n};\n```",
        "name": "ReviewReportRecordType",
        "longname": "ReviewReportRecordType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 6142,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/ReviewReportRecordType.js"
        ],
        "type": {
            "names": [
                "\"TextAdd\"",
                "\"TextRem\"",
                "\"ParaAdd\"",
                "\"ParaRem\"",
                "\"TextPr\"",
                "\"ParaPr\"",
                "\"Unknown\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"TextAdd\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"TextRem\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ParaAdd\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ParaRem\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"TextPr\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ParaPr\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Unknown\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Record of one review change.\n\t * @typedef {Object} ReviewReportRecord\n\t * @property {ReviewReportRecordType} Type - Review record type.\n\t * @property {string} [Value=undefined] - Review change value that is set for the \"TextAdd\" and \"TextRem\" types only.\n\t * @property {number} Date - The time when this change was made.\n\t * @property {ApiParagraph | ApiTable} ReviewedElement - Element that has been reviewed.\n\t * @see office-js-api/Examples/Enumerations/ReviewReportRecord.js\n\t */",
        "description": "Record of one review change.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet reviewReportRecord1 = {Type: \"TextRem\", Value: \"Hello, Mark!\", Date: 1679941734161};\nlet reviewReportRecord2 = {Type: \"TextAdd\", Value: \"Dear Mr. Pottato.\", Date: 1679941736189};\nlet reviewReportRecord3 = {Type: \"ParaRem\", Date: 1679941755942};\nlet reviewReportRecord4 = {Type: \"TextPr\", Date: 1679941757832};\nlet reviewRecord = {\n\t\"John Smith\" : [reviewReportRecord1, reviewReportRecord2],\n\t\"Mark Pottato\" : [reviewReportRecord3, reviewReportRecord4]\n};\n```",
        "name": "ReviewReportRecord",
        "longname": "ReviewReportRecord",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 6148,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "ReviewReportRecordType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ReviewReportRecordType"
                    }
                },
                "name": "Type",
                "description": "Review record type.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Value",
                "description": "Review change value that is set for the \"TextAdd\" and \"TextRem\" types only.",
                "optional": true,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "Date",
                "description": "The time when this change was made.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiParagraph",
                        "ApiTable"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiParagraph"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiTable"
                            }
                        ]
                    }
                },
                "name": "ReviewedElement",
                "description": "Element that has been reviewed.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "see": [
            "office-js-api/Examples/Enumerations/ReviewReportRecord.js"
        ],
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        }
    },
    {
        "comment": "/**\n\t * Report on all review changes.\n\t * This is a dictionary where the keys are usernames.\n\t * @typedef {Object.<string, Array.<ReviewReportRecord>>} ReviewReport\n\t * @example\n\t * \t{\n\t * \t  \"John Smith\" : [{Type: 'TextRem', Value: 'Hello, Mark!', Date: 1679941734161, Element: ApiParagraph},\n\t * \t                {Type: 'TextAdd', Value: 'Dear Mr. Pottato.', Date: 1679941736189, Element: ApiParagraph}],\n\t * \t  \"Mark Pottato\" : [{Type: 'ParaRem', Date: 1679941755942, ReviewedElement: ApiParagraph},\n\t * \t                  {Type: 'TextPr', Date: 1679941757832, ReviewedElement: ApiParagraph}]\n\t * \t}\n\t * @see office-js-api/Examples/Enumerations/ReviewReport.js\n\t */",
        "description": "Report on all review changes.\nThis is a dictionary where the keys are usernames.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet reviewRecord = {\n\t\"John Smith\" : [{Type: \"TextRem\", Value: \"Hello, Mark!\", Date: 1679941734161},\n\t\t\t\t\t{Type: \"TextAdd\", Value: \"Dear Mr. Pottato.\", Date: 1679941736189}],\n\t\"Mark Pottato\" : [{Type: \"ParaRem\", Date: 1679941755942},\n\t\t\t\t\t{Type: \"TextPr\", Date: 1679941757832}]\n}\n```",
        "name": "ReviewReport",
        "longname": "ReviewReport",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 6158,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/ReviewReport.js"
        ],
        "type": {
            "names": [
                "Object.<string, Array.<ReviewReportRecord>>"
            ],
            "parsedType": {
                "type": "TypeApplication",
                "expression": {
                    "type": "NameExpression",
                    "name": "Object"
                },
                "applications": [
                    {
                        "type": "NameExpression",
                        "name": "string"
                    },
                    {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "type": "NameExpression",
                                "name": "ReviewReportRecord"
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * The specific form type.\n\t * @typedef {(\"text\" | \"checkBox\" | \"picture\" | \"comboBox\" | \"dropDownList\" | \"dateTime\" | \"radio\")} FormSpecificType\n\t * @see office-js-api/Examples/Enumerations/FormSpecificType.js\n\t */",
        "description": "The specific form type.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet formsData = doc.GetFormsData();\n```",
        "name": "FormSpecificType",
        "longname": "FormSpecificType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 6424,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/FormSpecificType.js"
        ],
        "type": {
            "names": [
                "\"text\"",
                "\"checkBox\"",
                "\"picture\"",
                "\"comboBox\"",
                "\"dropDownList\"",
                "\"dateTime\"",
                "\"radio\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"text\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"checkBox\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"picture\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"comboBox\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dropDownList\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dateTime\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"radio\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Form data.\n\t * @typedef {Object} FormData\n\t * @property {string} key - The form key. If the current form is a radio button, then this field contains the group key.\n\t * @property {string | boolean} value - The current field value.\n\t * @property {string} tag - The form tag.\n\t * @property {FormSpecificType} type - The form type.\n\t * @example\n\t * \t{\n\t * \t  \"key\" : \"CompanyName\",\n\t * \t  \"tag\" : \"companyName\",\n\t * \t  \"value\" : \"ONLYOFFICE\",\n\t * \t  \"type\" : \"text\"\n\t * \t}\n\t * @see office-js-api/Examples/Enumerations/FormData.js\n\t */",
        "description": "Form data.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet formData = {key: \"CompanyName\", value: \"OnlyOffice\", type: \"text\"};\n```",
        "name": "FormData",
        "longname": "FormData",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 6429,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "key",
                "description": "The form key. If the current form is a radio button, then this field contains the group key.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                },
                "name": "value",
                "description": "The current field value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "tag",
                "description": "The form tag.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "FormSpecificType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "FormSpecificType"
                    }
                },
                "name": "type",
                "description": "The form type.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "see": [
            "office-js-api/Examples/Enumerations/FormData.js"
        ],
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        }
    },
    {
        "comment": "/**\n\t * Returns a type of the ApiParagraph class.\n\t * @memberof ApiParagraph\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {\"paragraph\"}\n\t * @see office-js-api/Examples/{Editor}/ApiParagraph/Methods/GetClassType.js\n\t */",
        "description": "Returns a type of the ApiParagraph class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet classType = paragraph.GetClassType();\nparagraph.AddText(\"Class Type = \" + classType);\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"paragraph\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"paragraph\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiParagraph#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8035,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParagraph/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\n\t * Adds some text to the current paragraph.\n\t * @memberof ApiParagraph\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {string} [sText=\"\"] - The text that we want to insert into the current document element.\n\t * @returns {ApiRun}\n\t * @see office-js-api/Examples/{Editor}/ApiParagraph/Methods/AddText.js\n\t */",
        "description": "Adds some text to the current paragraph.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nparagraph.SetJc(\"left\");\nparagraph.AddText(\"This is a text inside the shape aligned left.\");\nparagraph.AddLineBreak();\nparagraph.AddText(\"This is a text after the line break.\");\n```",
        "memberof": "ApiParagraph",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sText",
                "description": "The text that we want to insert into the current document element.",
                "optional": true,
                "defaultvalue": "\"\""
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRun"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRun"
                    }
                }
            }
        ],
        "name": "AddText",
        "longname": "ApiParagraph#AddText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8047,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParagraph/Methods/AddText.js"
        ]
    },
    {
        "comment": "/**\n\t * Adds a line break to the current position and starts the next element from a new line.\n\t * @memberof ApiParagraph\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {ApiRun}\n\t * @see office-js-api/Examples/{Editor}/ApiParagraph/Methods/AddLineBreak.js\n\t */",
        "description": "Adds a line break to the current position and starts the next element from a new line.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nparagraph.SetJc(\"left\");\nparagraph.AddText(\"This is a text inside the shape aligned left.\");\nparagraph.AddLineBreak();\nparagraph.AddText(\"This is a text after the line break.\");\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRun"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRun"
                    }
                }
            }
        ],
        "name": "AddLineBreak",
        "longname": "ApiParagraph#AddLineBreak",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8080,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParagraph/Methods/AddLineBreak.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the paragraph properties.\n\t * @memberof ApiParagraph\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {ApiParaPr}\n\t * @see office-js-api/Examples/{Editor}/ApiParagraph/Methods/GetParaPr.js\n\t */",
        "description": "Returns the paragraph properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet paraPr = paragraph.GetParaPr();\nparaPr.SetSpacingAfter(1440);\nparagraph.AddText(\"This is an example of setting a space after a paragraph. \");\nparagraph.AddText(\"The second paragraph will have an offset of one inch from the top. \");\nparagraph.AddText(\"This is due to the fact that the first paragraph has this offset enabled.\");\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"This is the second paragraph and it is one inch away from the first paragraph.\");\ncontent.Push(paragraph);\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiParaPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiParaPr"
                    }
                }
            }
        ],
        "name": "GetParaPr",
        "longname": "ApiParagraph#GetParaPr",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8149,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParagraph/Methods/GetParaPr.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a number of elements in the current paragraph.\n\t * @memberof ApiParagraph\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiParagraph/Methods/GetElementsCount.js\n\t */",
        "description": "Returns a number of elements in the current paragraph.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nparagraph.RemoveAllElements();\nlet run = Api.CreateRun();\nrun.AddText(\"Number of paragraph elements at this point: \");\nrun.AddTabStop();\nrun.AddText(\"\" + paragraph.GetElementsCount());\nrun.AddLineBreak();\nparagraph.AddElement(run);\nrun.AddText(\"Number of paragraph elements after we added a text run: \");\nrun.AddTabStop();\nrun.AddText(\"\" + paragraph.GetElementsCount());\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GetElementsCount",
        "longname": "ApiParagraph#GetElementsCount",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8196,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParagraph/Methods/GetElementsCount.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a paragraph element using the position specified.\n\t * @memberof ApiParagraph\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {number} nPos - The position where the element which content we want to get must be located.\n\t * @returns {?ParagraphContent}\n\t * @see office-js-api/Examples/{Editor}/ApiParagraph/Methods/GetElement.js\n\t */",
        "description": "Returns a paragraph element using the position specified.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nparagraph.RemoveAllElements();\nlet run = Api.CreateRun();\nrun.AddText(\"This is the text for the first text run. Do not forget a space at its end to separate from the second one. \");\nparagraph.AddElement(run);\nrun = Api.CreateRun();\nrun.AddText(\"This is the text for the second run. We will set it bold afterwards. It also needs space at its end. \");\nparagraph.AddElement(run);\nrun = Api.CreateRun();\nrun.AddText(\"This is the text for the third run. It ends the paragraph.\");\nparagraph.AddElement(run);\nrun = paragraph.GetElement(2);\nrun.SetBold(true);\n```",
        "memberof": "ApiParagraph",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nPos",
                "description": "The position where the element which content we want to get must be located.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ParagraphContent"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ParagraphContent",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetElement",
        "longname": "ApiParagraph#GetElement",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8209,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParagraph/Methods/GetElement.js"
        ]
    },
    {
        "comment": "/**\n\t * Removes an element using the position specified.\n\t * <note>If the element you remove is the last paragraph element (i.e. all the elements are removed from the paragraph),\n     * a new empty run is automatically created. If you want to add\n\t * content to this run, use the {@link ApiParagraph#GetElement} method.</note>\n\t * @memberof ApiParagraph\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {number} nPos - The element position which we want to remove from the paragraph.\n\t * @see office-js-api/Examples/{Editor}/ApiParagraph/Methods/RemoveElement.js\n\t */",
        "description": "Removes an element using the position specified.\n<note>If the element you remove is the last paragraph element (i.e. all the elements are removed from the paragraph),\na new empty run is automatically created. If you want to add\ncontent to this run, use the {@link ApiParagraph#GetElement} method.</note>\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nparagraph.RemoveAllElements();\nlet run = Api.CreateRun();\nrun.AddText(\"This is the first paragraph element. \");\nparagraph.AddElement(run);\nrun = Api.CreateRun();\nrun.AddText(\"This is the second paragraph element. \");\nparagraph.AddElement(run);\nrun = Api.CreateRun();\nrun.AddText(\"This is the third paragraph element (it will be removed from the paragraph and we will not see it). \");\nparagraph.AddElement(run);\nparagraph.AddLineBreak();\nrun = Api.CreateRun();\nrun.AddText(\"This is the fourth paragraph element - it became the third, because we removed the previous run from the paragraph. \");\nparagraph.AddElement(run);\nparagraph.AddLineBreak();\nrun = Api.CreateRun();\nrun.AddText(\"Please note that line breaks are not counted into paragraph elements!\");\nparagraph.AddElement(run);\nparagraph.RemoveElement(3);\n```",
        "memberof": "ApiParagraph",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nPos",
                "description": "The element position which we want to remove from the paragraph.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "RemoveElement",
        "longname": "ApiParagraph#RemoveElement",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8227,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParagraph/Methods/RemoveElement.js"
        ]
    },
    {
        "comment": "/**\n\t * Removes all the elements from the current paragraph.\n\t * <note>When all the elements are removed from the paragraph, a new empty run is automatically created. If you want to add\n\t * content to this run, use the {@link ApiParagraph#GetElement} method.</note>\n\t * @memberof ApiParagraph\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @see office-js-api/Examples/{Editor}/ApiParagraph/Methods/RemoveAllElements.js\n\t */",
        "description": "Removes all the elements from the current paragraph.\n<note>When all the elements are removed from the paragraph, a new empty run is automatically created. If you want to add\ncontent to this run, use the {@link ApiParagraph#GetElement} method.</note>\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is the first text run in the current paragraph.\");\nparagraph.AddElement(run);\nparagraph.RemoveAllElements();\nrun = Api.CreateRun();\nrun.AddText(\"We removed all the paragraph elements and added a new text run inside it.\");\nparagraph.AddElement(run);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": null,
        "name": "RemoveAllElements",
        "longname": "ApiParagraph#RemoveAllElements",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8243,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParagraph/Methods/RemoveAllElements.js"
        ]
    },
    {
        "comment": "/**\n\t * Deletes the current paragraph.\n\t * @memberof ApiParagraph\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {boolean} - returns false if paragraph haven't parent.\n\t * @see office-js-api/Examples/{Editor}/ApiParagraph/Methods/Delete.js\n\t */",
        "description": "Deletes the current paragraph.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\ncontent.RemoveAllElements();\nlet paragraph = Api.CreateParagraph();\nparagraph.AddText(\"This is just a sample text.\");\ncontent.Push(paragraph);\nparagraph.Delete();\nworksheet.GetRange(\"A9\").SetValue(\"The paragraph from the shape content was removed.\");\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "Delete",
        "longname": "ApiParagraph#Delete",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8258,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParagraph/Methods/Delete.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the next paragraph.\n\t * @memberof ApiParagraph\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {ApiParagraph | null} - returns null if paragraph is last.\n\t * @see office-js-api/Examples/{Editor}/ApiParagraph/Methods/GetNext.js\n\t */",
        "description": "Returns the next paragraph.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\ncontent.RemoveAllElements();\nlet paragraph1 = Api.CreateParagraph();\nparagraph1.AddText(\"This is the first paragraph.\");\ncontent.Push(paragraph1);\nlet paragraph2 = Api.CreateParagraph();\nparagraph2.AddText(\"This is the second paragraph.\");\ncontent.Push(paragraph2);\nlet nextParagraph = paragraph1.GetNext();\nnextParagraph.SetBold(true);\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiParagraph",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiParagraph"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetNext",
        "longname": "ApiParagraph#GetNext",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8280,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParagraph/Methods/GetNext.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the previous paragraph.\n\t * @memberof ApiParagraph\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {ApiParagraph} - returns null if paragraph is first.\n\t * @see office-js-api/Examples/{Editor}/ApiParagraph/Methods/GetPrevious.js\n\t */",
        "description": "Returns the previous paragraph.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\ncontent.RemoveAllElements();\nlet paragraph1 = Api.CreateParagraph();\nparagraph1.AddText(\"This is the first paragraph.\");\ncontent.Push(paragraph1);\nlet paragraph2 = Api.CreateParagraph();\nparagraph2.AddText(\"This is the second paragraph.\");\ncontent.Push(paragraph2);\nlet previousParagraph = paragraph2.GetPrevious();\npreviousParagraph.SetBold(true);\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiParagraph"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiParagraph"
                    }
                }
            }
        ],
        "name": "GetPrevious",
        "longname": "ApiParagraph#GetPrevious",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8295,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParagraph/Methods/GetPrevious.js"
        ]
    },
    {
        "comment": "/**\n\t * Creates a paragraph copy. Ingnore comments, footnote references, complex fields.\n\t * @memberof ApiParagraph\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {ApiParagraph}\n\t * @see office-js-api/Examples/{Editor}/ApiParagraph/Methods/Copy.js\n\t */",
        "description": "Creates a paragraph copy. Ingnore comments, footnote references, complex fields.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nparagraph.SetJc(\"left\");\nparagraph.AddText(\"This is a text inside the shape aligned left.\");\nparagraph.AddLineBreak();\nparagraph.AddText(\"This is a text after the line break.\");\nlet paragraph2 = paragraph.Copy();\ncontent.Push(paragraph2);\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiParagraph"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiParagraph"
                    }
                }
            }
        ],
        "name": "Copy",
        "longname": "ApiParagraph#Copy",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8310,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParagraph/Methods/Copy.js"
        ]
    },
    {
        "comment": "/**\n\t * Adds an element to the current paragraph.\n\t * @memberof ApiParagraph\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {ParagraphContent} oElement - The document element which will be added at the current position. Returns false if the\n\t * oElement type is not supported by a paragraph.\n\t * @param {number} [nPos] - The position where the current element will be added. If this value is not\n\t * specified, then the element will be added at the end of the current paragraph.\n\t * @returns {boolean} Returns <code>false</code> if the type of <code>oElement</code> is not supported by paragraph\n\t * content.\n\t * @see office-js-api/Examples/{Editor}/ApiParagraph/Methods/AddElement.js\n\t */",
        "description": "Adds an element to the current paragraph.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text run. Nothing special.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiParagraph",
        "params": [
            {
                "type": {
                    "names": [
                        "ParagraphContent"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ParagraphContent"
                    }
                },
                "name": "oElement",
                "description": "The document element which will be added at the current position. Returns false if the\noElement type is not supported by a paragraph.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nPos",
                "description": "The position where the current element will be added. If this value is not\nspecified, then the element will be added at the end of the current paragraph.",
                "optional": true,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "AddElement",
        "longname": "ApiParagraph#AddElement",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8332,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParagraph/Methods/AddElement.js"
        ]
    },
    {
        "comment": "/**\n\t * Adds a tab stop to the current paragraph.\n\t * @memberof ApiParagraph\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {ApiRun}\n\t * @see office-js-api/Examples/{Editor}/ApiParagraph/Methods/AddTabStop.js\n\t */",
        "description": "Adds a tab stop to the current paragraph.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nparagraph.AddText(\"This is just a sample text. After it three tab stops will be added.\");\nparagraph.AddTabStop();\nparagraph.AddTabStop();\nparagraph.AddTabStop();\nparagraph.AddText(\"This is the text which starts after the tab stops.\");\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRun"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRun"
                    }
                }
            }
        ],
        "name": "AddTabStop",
        "longname": "ApiParagraph#AddTabStop",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8360,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParagraph/Methods/AddTabStop.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the ApiRun class.\n\t * @memberof ApiRun\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {\"run\"}\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/GetClassType.js\n\t */",
        "description": "Returns a type of the ApiRun class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nlet classType = run.GetClassType();\nrun.SetFontSize(30);\nrun.AddText(\"Class Type = \" + classType);\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"run\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"run\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiRun#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9911,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRun/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the text properties of the current run.\n\t * @memberof ApiRun\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {ApiTextPr}\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/GetTextPr.js\n\t */",
        "description": "Returns the text properties of the current run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nlet textProps = run.GetTextPr();\ntextProps.SetFontSize(30);\nparagraph.SetJc(\"left\");\nrun.AddText(\"This is a sample text inside the shape with the font size set to 15 points using the text properties.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "GetTextPr",
        "longname": "ApiRun#GetTextPr",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9922,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRun/Methods/GetTextPr.js"
        ]
    },
    {
        "comment": "/**\n\t * Clears the content from the current run.\n\t * @memberof ApiRun\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/ClearContent.js\n\t */",
        "description": "Clears the content from the current run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.SetFontSize(30);\nrun.AddText(\"This is just a sample text. \");\nrun.AddText(\"But you will not see it in the resulting document, as it will be cleared.\");\nparagraph.AddElement(run);\nrun.ClearContent();\nparagraph = Api.CreateParagraph();\nrun = Api.CreateRun();\nrun.AddText(\"The text in the previous paragraph cannot be seen, as it has been cleared.\");\nparagraph.AddElement(run);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": null,
        "name": "ClearContent",
        "longname": "ApiRun#ClearContent",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9932,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRun/Methods/ClearContent.js"
        ]
    },
    {
        "comment": "/**\n\t * Removes all the elements from the current run.\n\t * @memberof ApiRun\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/RemoveAllElements.js\n\t */",
        "description": "Removes all the elements from the current run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text.\");\nrun.RemoveAllElements();\nrun.AddText(\"All elements from this run were removed before adding this text.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": null,
        "name": "RemoveAllElements",
        "longname": "ApiRun#RemoveAllElements",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9942,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRun/Methods/RemoveAllElements.js"
        ]
    },
    {
        "comment": "/**\n\t * Deletes the current run.\n\t * @memberof ApiRun\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/Delete.js\n\t */",
        "description": "Deletes the current run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text.\");\nparagraph.AddElement(run);\nrun.Delete();\nworksheet.GetRange(\"A9\").SetValue(\"The run from the shape content was removed.\");\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": null,
        "name": "Delete",
        "longname": "ApiRun#Delete",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9952,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRun/Methods/Delete.js"
        ]
    },
    {
        "comment": "/**\n\t * Adds some text to the current run.\n\t * @memberof ApiRun\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {string} sText - The text which will be added to the current run.\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/AddText.js\n\t */",
        "description": "Adds some text to the current run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.SetFontSize(30);\nrun.AddText(\"This is just a sample text. Nothing special.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sText",
                "description": "The text which will be added to the current run.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "AddText",
        "longname": "ApiRun#AddText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9972,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRun/Methods/AddText.js"
        ]
    },
    {
        "comment": "/**\n\t * Adds a line break to the current run position and starts the next element from a new line.\n\t * @memberof ApiRun\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/AddLineBreak.js\n\t */",
        "description": "Adds a line break to the current run position and starts the next element from a new line.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is the text for the first line. Nothing special.\");\nrun.AddLineBreak();\nrun.AddText(\"This is the text which starts from the beginning of the second line. \");\nrun.AddText(\"It is written in two text runs, you need a space at the end of the first run sentence to separate them.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": null,
        "name": "AddLineBreak",
        "longname": "ApiRun#AddLineBreak",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9995,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRun/Methods/AddLineBreak.js"
        ]
    },
    {
        "comment": "/**\n\t * Adds a tab stop to the current run.\n\t * @memberof ApiRun\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/AddTabStop.js\n\t */",
        "description": "Adds a tab stop to the current run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.SetFontSize(30);\nrun.AddText(\"This is just a sample text. After it three tab stops will be added.\");\nrun.AddTabStop();\nrun.AddTabStop();\nrun.AddTabStop();\nrun.AddText(\"This is the text which starts after the tab stops.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": null,
        "name": "AddTabStop",
        "longname": "ApiRun#AddTabStop",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10015,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRun/Methods/AddTabStop.js"
        ]
    },
    {
        "comment": "/**\n\t * Creates a copy of the current run.\n\t * @memberof ApiRun\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {ApiRun}\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/Copy.js\n\t */",
        "description": "Creates a copy of the current run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text that was copied. \");\nparagraph.AddElement(run);\nlet copyRun = run.Copy();\nparagraph.AddElement(copyRun);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRun"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRun"
                    }
                }
            }
        ],
        "name": "Copy",
        "longname": "ApiRun#Copy",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10152,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRun/Methods/Copy.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the text properties to the current run.\n\t * @memberof ApiRun\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {ApiTextPr} oTextPr - The text properties that will be set to the current run.\n\t * @return {ApiTextPr}  \n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetTextPr.js\n\t */",
        "description": "Sets the text properties to the current run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is a sample text with the font size set to 15 points and the font weight set to bold.\");\nlet textProps = run.GetTextPr();\ntextProps.SetFontSize(30);\ntextProps.SetBold(true);\nrun.SetTextPr(textProps);\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                },
                "name": "oTextPr",
                "description": "The text properties that will be set to the current run.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetTextPr",
        "longname": "ApiRun#SetTextPr",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10249,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRun/Methods/SetTextPr.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the bold property to the text character.\n\t * @memberof ApiRun\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {boolean} isBold - Specifies that the contents of the current run are displayed bold.\n\t * @returns {ApiTextPr}\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetBold.js\n\t */",
        "description": "Sets the bold property to the text character.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nparagraph.AddElement(run);\nrun = Api.CreateRun();\nrun.SetBold(true);\nrun.AddText(\"This is a text run with the font set to bold.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isBold",
                "description": "Specifies that the contents of the current run are displayed bold.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetBold",
        "longname": "ApiRun#SetBold",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10265,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRun/Methods/SetBold.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies that any lowercase characters in the current text run are formatted for display only as their capital letter character equivalents.\n\t * @memberof ApiRun\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {boolean} isCaps - Specifies that the contents of the current run are displayed capitalized.\n\t * @returns {ApiTextPr}\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetCaps.js\n\t */",
        "description": "Specifies that any lowercase characters in the current text run are formatted for display only as their capital letter character equivalents.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nparagraph.AddElement(run);\nrun = Api.CreateRun();\nrun.SetCaps(true);\nrun.AddText(\"This is a text run with the font set to capitalized letters.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isCaps",
                "description": "Specifies that the contents of the current run are displayed capitalized.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetCaps",
        "longname": "ApiRun#SetCaps",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10280,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRun/Methods/SetCaps.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the text color for the current text run in the RGB format.\n\t * @memberof ApiRun\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {byte} r - Red color component value.\n\t * @param {byte} g - Green color component value.\n\t * @param {byte} b - Blue color component value.\n\t * @param {boolean} [isAuto=false] - If this parameter is set to \"true\", then r,g,b parameters will be ignored.\n\t * @returns {ApiTextPr}\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetColor.js\n\t */",
        "description": "Sets the text color for the current text run in the RGB format.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is a text run with the font color set to gray.\");\nparagraph.AddElement(run);\nrun.SetColor(128, 128, 128);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "byte"
                    }
                },
                "name": "r",
                "description": "Red color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "byte"
                    }
                },
                "name": "g",
                "description": "Green color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "byte"
                    }
                },
                "name": "b",
                "description": "Blue color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isAuto",
                "description": "If this parameter is set to \"true\", then r,g,b parameters will be ignored.",
                "optional": true,
                "defaultvalue": false
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetColor",
        "longname": "ApiRun#SetColor",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10298,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRun/Methods/SetColor.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies that the contents of the current run are displayed with two horizontal lines through each character displayed on the line.\n\t * @memberof ApiRun\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {boolean} isDoubleStrikeout - Specifies that the contents of the current run are displayed double struck through.\n\t * @returns {ApiTextPr}\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetDoubleStrikeout.js\n\t */",
        "description": "Specifies that the contents of the current run are displayed with two horizontal lines through each character displayed on the line.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nparagraph.AddElement(run);\nrun = Api.CreateRun();\nrun.SetDoubleStrikeout(true);\nrun.AddText(\"This is a text run with the text struck out with two lines.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isDoubleStrikeout",
                "description": "Specifies that the contents of the current run are displayed double struck through.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetDoubleStrikeout",
        "longname": "ApiRun#SetDoubleStrikeout",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10313,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRun/Methods/SetDoubleStrikeout.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the text color to the current text run.\n\t * @memberof ApiRun\n\t * @typeofeditors [\"CSE\", \"CPE\"]\n\t * @param {ApiFill} oApiFill - The color or pattern used to fill the text color.\n\t * @returns {ApiTextPr}\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetFill.js\n\t */",
        "description": "Sets the text color to the current text run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nparagraph.AddElement(run);\nrun = Api.CreateRun();\nfill = Api.CreateSolidFill(Api.CreateRGBColor(128, 128, 128));\nrun.SetFill(fill);\nrun.AddText(\"This is a text run with the font color set to gray.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                },
                "name": "oApiFill",
                "description": "The color or pattern used to fill the text color.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetFill",
        "longname": "ApiRun#SetFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10328,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRun/Methods/SetFill.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets all 4 font slots with the specified font family.\n\t * @memberof ApiRun\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {string} sFontFamily - The font family or families used for the current text run.\n\t * @returns {ApiTextPr}\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetFontFamily.js\n\t */",
        "description": "Sets all 4 font slots with the specified font family.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nparagraph.AddElement(run);\nrun = Api.CreateRun();\nrun.SetFontFamily(\"Comic Sans MS\");\nrun.AddText(\"This is a text run with the font family set to 'Comic Sans MS'.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sFontFamily",
                "description": "The font family or families used for the current text run.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetFontFamily",
        "longname": "ApiRun#SetFontFamily",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10343,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRun/Methods/SetFontFamily.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns all font names from all elements inside the current run.\n\t * @memberof ApiRun\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {string[]} - The font names used for the current run.\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/GetFontNames.js\n\t */",
        "description": "Returns all font names from all elements inside the current run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nparagraph.AddElement(run);\nrun = Api.CreateRun();\nrun.SetFontFamily(\"Comic Sans MS\");\nrun.AddText(\"This is a text run with the font family set to 'Comic Sans MS'.\");\nparagraph.AddElement(run);\nparagraph.AddLineBreak();\nlet fontNames = run.GetFontNames();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Run font names: \");\nparagraph.AddLineBreak();\nfor (let i = 0; i < fontNames.length; i++) {\n    paragraph.AddText(fontNames[i]);\n    paragraph.AddLineBreak();\n}\ncontent.Push(paragraph);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "string",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetFontNames",
        "longname": "ApiRun#GetFontNames",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10357,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRun/Methods/GetFontNames.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the font size to the characters of the current text run.\n\t * @memberof ApiRun\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {hps} nSize - The text size value measured in half-points (1/144 of an inch).\n\t * @returns {ApiTextPr}\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetFontSize.js\n\t */",
        "description": "Sets the font size to the characters of the current text run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nparagraph.AddElement(run);\nrun = Api.CreateRun();\nrun.SetFontSize(30);\nrun.AddText(\"This is a text run with the font size set to 15 points (30 half-points).\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "hps"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "hps"
                    }
                },
                "name": "nSize",
                "description": "The text size value measured in half-points (1/144 of an inch).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetFontSize",
        "longname": "ApiRun#SetFontSize",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10377,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRun/Methods/SetFontSize.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies a highlighting color which is applied as a background to the contents of the current run.\n\t * @memberof ApiRun\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {highlightColor} sColor - Available highlight color.\n\t * @returns {ApiTextPr}\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetHighlight.js\n\t */",
        "description": "Specifies a highlighting color which is applied as a background to the contents of the current run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nparagraph.AddElement(run);\nrun = Api.CreateRun();\nrun.SetHighlight(\"lightGray\");\nrun.AddText(\"This is a text run with the text highlighted with light gray color.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "highlightColor"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "highlightColor"
                    }
                },
                "name": "sColor",
                "description": "Available highlight color.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetHighlight",
        "longname": "ApiRun#SetHighlight",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10392,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRun/Methods/SetHighlight.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the italic property to the text character.\n\t * @memberof ApiRun\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {boolean} isItalic - Specifies that the contents of the current run are displayed italicized.\n\t * @returns {ApiTextPr}\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetItalic.js\n\t */",
        "description": "Sets the italic property to the text character.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nparagraph.AddElement(run);\nrun = Api.CreateRun();\nrun.SetItalic(true);\nrun.AddText(\"This is a text run with the font set to italicized letters.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isItalic",
                "description": "Specifies that the contents of the current run are displayed italicized.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetItalic",
        "longname": "ApiRun#SetItalic",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10407,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRun/Methods/SetItalic.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies the languages which will be used to check spelling and grammar (if requested) when processing\n\t * the contents of this text run.\n\t * @memberof ApiRun\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {string} sLangId - The possible value for this parameter is a language identifier as defined by\n\t * RFC 4646/BCP 47. Example: \"en-CA\".\n\t * @returns {ApiTextPr}\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetLanguage.js\n\t */",
        "description": "Specifies the languages which will be used to check spelling and grammar (if requested) when processing\nthe contents of this text run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is a text run with the text language set to English (Canada).\");\nrun.SetLanguage(\"en-CA\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sLangId",
                "description": "The possible value for this parameter is a language identifier as defined by\nRFC 4646/BCP 47. Example: \"en-CA\".",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetLanguage",
        "longname": "ApiRun#SetLanguage",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10424,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRun/Methods/SetLanguage.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies an amount by which text is raised or lowered for this run in relation to the default\n\t * baseline of the surrounding non-positioned text.\n\t * @memberof ApiRun\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {hps} nPosition - Specifies a positive (raised text) or negative (lowered text)\n\t * measurement in half-points (1/144 of an inch).\n\t * @returns {ApiTextPr}\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetPosition.js\n\t */",
        "description": "Specifies an amount by which text is raised or lowered for this run in relation to the default\nbaseline of the surrounding non-positioned text.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text.\");\nparagraph.AddElement(run);\nrun = Api.CreateRun();\nrun.AddText(\"This is a text run with the text raised 10 half-points.\");\nrun.SetPosition(10);\nparagraph.AddElement(run);\nrun = Api.CreateRun();\nrun.AddText(\"This is a text run with the text lowered 16 half-points.\");\nrun.SetPosition(-16);\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "hps"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "hps"
                    }
                },
                "name": "nPosition",
                "description": "Specifies a positive (raised text) or negative (lowered text)\nmeasurement in half-points (1/144 of an inch).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetPosition",
        "longname": "ApiRun#SetPosition",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10441,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRun/Methods/SetPosition.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies the shading applied to the contents of the current text run.\n\t * @memberof ApiRun\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {ShdType} sType - The shading type applied to the contents of the current text run.\n\t * @param {byte} r - Red color component value.\n\t * @param {byte} g - Green color component value.\n\t * @param {byte} b - Blue color component value.\n\t * @returns {ApiTextPr}\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetShd.js\n\t */",
        "description": "Specifies the shading applied to the contents of the current text run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nparagraph.AddElement(run);\nrun = Api.CreateRun();\nrun.SetShd(\"clear\", 255, 111, 61);\nrun.AddText(\"This is a text run with the text shading set to orange.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "ShdType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ShdType"
                    }
                },
                "name": "sType",
                "description": "The shading type applied to the contents of the current text run.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "byte"
                    }
                },
                "name": "r",
                "description": "Red color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "byte"
                    }
                },
                "name": "g",
                "description": "Green color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "byte"
                    }
                },
                "name": "b",
                "description": "Blue color component value.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetShd",
        "longname": "ApiRun#SetShd",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10459,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRun/Methods/SetShd.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies that all the small letter characters in this text run are formatted for display only as their capital\n\t * letter character equivalents which are two points smaller than the actual font size specified for this text.\n\t * @memberof ApiRun\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {boolean} isSmallCaps - Specifies if the contents of the current run are displayed capitalized two points smaller or not.\n\t * @returns {ApiTextPr}\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetSmallCaps.js\n\t */",
        "description": "Specifies that all the small letter characters in this text run are formatted for display only as their capital\nletter character equivalents which are two points smaller than the actual font size specified for this text.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nparagraph.AddElement(run);\nrun = Api.CreateRun();\nrun.SetSmallCaps(true);\nrun.AddText(\"This is a text run with the font set to small capitalized letters.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isSmallCaps",
                "description": "Specifies if the contents of the current run are displayed capitalized two points smaller or not.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetSmallCaps",
        "longname": "ApiRun#SetSmallCaps",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10475,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRun/Methods/SetSmallCaps.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the text spacing measured in twentieths of a point.\n\t * @memberof ApiRun\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {twips} nSpacing - The value of the text spacing measured in twentieths of a point (1/1440 of an inch).\n\t * @returns {ApiTextPr}\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetSpacing.js\n\t */",
        "description": "Sets the text spacing measured in twentieths of a point.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nparagraph.AddElement(run);\nrun = Api.CreateRun();\nrun.SetSpacing(80);\nrun.AddText(\"This is a text run with the text spacing set to 4 points (20 twentieths of a point).\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "twips"
                    }
                },
                "name": "nSpacing",
                "description": "The value of the text spacing measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetSpacing",
        "longname": "ApiRun#SetSpacing",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10490,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRun/Methods/SetSpacing.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies that the contents of the current run are displayed with a single horizontal line through the center of the line.\n\t * @memberof ApiRun\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {boolean} isStrikeout - Specifies that the contents of the current run are displayed struck through.\n\t * @returns {ApiTextPr}\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetStrikeout.js\n\t */",
        "description": "Specifies that the contents of the current run are displayed with a single horizontal line through the center of the line.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nparagraph.AddElement(run);\nrun = Api.CreateRun();\nrun.SetStrikeout(true);\nrun.AddText(\"This is a text run with the text struck out with a single line.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isStrikeout",
                "description": "Specifies that the contents of the current run are displayed struck through.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetStrikeout",
        "longname": "ApiRun#SetStrikeout",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10505,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRun/Methods/SetStrikeout.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets a style to the current run.\n\t * @memberof ApiRun\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {ApiStyle} oStyle - The style which must be applied to the text run.\n\t * @returns {ApiTextPr}\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetStyle.js\n\t */",
        "description": "Sets a style to the current run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nrun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\nparagraph.AddElement(run);\n// todo_example in cells we don't have ability to create a style\nrun = Api.CreateRun();\nrun.AddText(\"This is a text run with its own style.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiStyle"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiStyle"
                    }
                },
                "name": "oStyle",
                "description": "The style which must be applied to the text run.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetStyle",
        "longname": "ApiRun#SetStyle",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10520,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRun/Methods/SetStyle.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies that the contents of the current run are displayed along with a line appearing directly below the character\n\t * (less than all the spacing above and below the characters on the line).\n\t * @memberof ApiRun\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {boolean} isUnderline - Specifies that the contents of the current run are displayed underlined.\n\t * @returns {ApiTextPr}\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetUnderline.js\n\t */",
        "description": "Specifies that the contents of the current run are displayed along with a line appearing directly below the character\n(less than all the spacing above and below the characters on the line).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nparagraph.AddElement(run);\nrun = Api.CreateRun();\nrun.SetUnderline(true);\nrun.AddText(\"This is a text run with the text underlined with a single line.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isUnderline",
                "description": "Specifies that the contents of the current run are displayed underlined.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetUnderline",
        "longname": "ApiRun#SetUnderline",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10536,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRun/Methods/SetUnderline.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies the alignment which will be applied to the contents of the current run in relation to the default appearance of the text run:\n\t * <b>\"baseline\"</b> - the characters in the current text run will be aligned by the default text baseline.\n\t * <b>\"subscript\"</b> - the characters in the current text run will be aligned below the default text baseline.\n\t * <b>\"superscript\"</b> - the characters in the current text run will be aligned above the default text baseline.\n\t * @memberof ApiRun\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {(\"baseline\" | \"subscript\" | \"superscript\")} sType - The vertical alignment type applied to the text contents.\n\t * @returns {ApiTextPr}\n\t * @see office-js-api/Examples/{Editor}/ApiRun/Methods/SetVertAlign.js\n\t */",
        "description": "Specifies the alignment which will be applied to the contents of the current run in relation to the default appearance of the text run:\n<b>\"baseline\"</b> - the characters in the current text run will be aligned by the default text baseline.\n<b>\"subscript\"</b> - the characters in the current text run will be aligned below the default text baseline.\n<b>\"superscript\"</b> - the characters in the current text run will be aligned above the default text baseline.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nparagraph.AddElement(run);\nrun = Api.CreateRun();\nrun.SetVertAlign(\"subscript\");\nrun.AddText(\"This is a text run with the text aligned below the baseline vertically. \");\nparagraph.AddElement(run);\nrun = Api.CreateRun();\nrun.SetVertAlign(\"baseline\");\nrun.AddText(\"This is a text run with the text aligned by the baseline vertically. \");\nparagraph.AddElement(run);\nrun = Api.CreateRun();\nrun.SetVertAlign(\"superscript\");\nrun.AddText(\"This is a text run with the text aligned above the baseline vertically.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "\"baseline\"",
                        "\"subscript\"",
                        "\"superscript\""
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "\"baseline\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"subscript\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"superscript\""
                            }
                        ]
                    }
                },
                "name": "sType",
                "description": "The vertical alignment type applied to the text contents.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetVertAlign",
        "longname": "ApiRun#SetVertAlign",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10554,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRun/Methods/SetVertAlign.js"
        ]
    },
    {
        "comment": "/**\n\t * The section break type which defines how the contents of the current section are placed relative to the previous section.\n\t * WordprocessingML supports five distinct types of section breaks:\n\t * <b>Next page</b> (\"nextPage\") - starts a new section on the next page (the default value).\n\t * <b>Odd</b> (\"oddPage\") - starts a new section on the next odd-numbered page.\n\t * <b>Even</b> (\"evenPage\") - starts a new section on the next even-numbered page.\n\t * <b>Continuous</b> (\"continuous\") - starts a new section in the next paragraph.\n\t * This means that continuous section breaks might not specify certain page-level section properties,\n\t * since they shall be inherited from the following section.\n\t * However, these breaks can specify other section properties, such as line numbering and footnote/endnote settings.\n\t * <b>Column</b> (\"nextColumn\") - starts a new section in the next column on the page.\n\t * @typedef {(\"nextPage\" | \"oddPage\" | \"evenPage\" | \"continuous\" | \"nextColumn\")} SectionBreakType\n\t* @see office-js-api/Examples/Enumerations/SectionBreakType.js\n\t*/",
        "description": "The section break type which defines how the contents of the current section are placed relative to the previous section.\nWordprocessingML supports five distinct types of section breaks:\n<b>Next page</b> (\"nextPage\") - starts a new section on the next page (the default value).\n<b>Odd</b> (\"oddPage\") - starts a new section on the next odd-numbered page.\n<b>Even</b> (\"evenPage\") - starts a new section on the next even-numbered page.\n<b>Continuous</b> (\"continuous\") - starts a new section in the next paragraph.\nThis means that continuous section breaks might not specify certain page-level section properties,\nsince they shall be inherited from the following section.\nHowever, these breaks can specify other section properties, such as line numbering and footnote/endnote settings.\n<b>Column</b> (\"nextColumn\") - starts a new section in the next column on the page.",
        "name": "SectionBreakType",
        "longname": "SectionBreakType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 10723,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/SectionBreakType.js"
        ],
        "type": {
            "names": [
                "\"nextPage\"",
                "\"oddPage\"",
                "\"evenPage\"",
                "\"continuous\"",
                "\"nextColumn\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"nextPage\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"oddPage\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"evenPage\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"continuous\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"nextColumn\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Returns a type of the ApiTextPr class.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {\"textPr\"}\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetClassType.js\n\t */",
        "description": "Returns a type of the ApiTextPr class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet docContent = shape.GetContent();\nlet paragraph = docContent.GetElement(0);\nlet run = Api.CreateRun();\nlet textProps = run.GetTextPr();\ntextProps.SetFontSize(30);\nparagraph.SetJc(\"left\");\nlet classType = textProps.GetClassType();\nrun.AddText(\"Class Type = \" + classType);\nparagraph.AddElement(run);\n```",
        "memberof": "ApiTextPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"textPr\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"textPr\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiTextPr#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13040,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the bold property to the text character.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {boolean} isBold - Specifies that the contents of the run are displayed bold.\n\t * @return {ApiTextPr} - this text properties.\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetBold.js\n\t */",
        "description": "Sets the bold property to the text character.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nlet textProps = run.GetTextPr();\ntextProps.SetFontSize(30);\ntextProps.SetBold(true);\nparagraph.SetJc(\"left\");\nrun.AddText(\"This is a sample text inside the shape with the font weight set to bold using the text properties.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiTextPr",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isBold",
                "description": "Specifies that the contents of the run are displayed bold.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetBold",
        "longname": "ApiTextPr#SetBold",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13093,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/SetBold.js"
        ]
    },
    {
        "comment": "/**\n\t * Gets the bold property from the current text properties.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @return {?boolean}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetBold.js\n\t */",
        "description": "Gets the bold property from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nrun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\nrun.AddLineBreak();\nparagraph.AddElement(run);\nlet textProps = run.GetTextPr();\ntextProps.SetBold(true);\nparagraph = Api.CreateParagraph();\nlet isBold = textProps.GetBold();\nparagraph.AddText(\"Bold property: \" + isBold);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiTextPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetBold",
        "longname": "ApiTextPr#GetBold",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13108,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/GetBold.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the italic property to the text character.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {boolean} isItalic - Specifies that the contents of the current run are displayed italicized.\n\t * @return {ApiTextPr} - this text properties.\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetItalic.js\n\t */",
        "description": "Sets the italic property to the text character.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nlet textProps = run.GetTextPr();\ntextProps.SetFontSize(30);\ntextProps.SetItalic(true);\nparagraph.SetJc(\"left\");\nrun.AddText(\"This is a sample text inside the shape with the font set to italicized letters using the text properties.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiTextPr",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isItalic",
                "description": "Specifies that the contents of the current run are displayed italicized.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetItalic",
        "longname": "ApiTextPr#SetItalic",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13121,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/SetItalic.js"
        ]
    },
    {
        "comment": "/**\n\t * Gets the italic property from the current text properties.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @return {?boolean}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetItalic.js\n\t */",
        "description": "Gets the italic property from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nrun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\nrun.AddLineBreak();\nparagraph.AddElement(run);\nlet textProps = run.GetTextPr();\ntextProps.SetItalic(true);\nparagraph = Api.CreateParagraph();\nlet isItalic = textProps.GetItalic();\nparagraph.AddText(\"Italic property: \" + isItalic);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiTextPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetItalic",
        "longname": "ApiTextPr#GetItalic",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13136,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/GetItalic.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies that the contents of the run are displayed with a single horizontal line through the center of the line.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {boolean} isStrikeout - Specifies that the contents of the current run are displayed struck through.\n\t * @return {ApiTextPr} - this text properties.\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetStrikeout.js\n\t */",
        "description": "Specifies that the contents of the run are displayed with a single horizontal line through the center of the line.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nlet textProps = run.GetTextPr();\ntextProps.SetFontSize(30);\ntextProps.SetStrikeout(true);\nparagraph.SetJc(\"left\");\nrun.AddText(\"This is a struck out text inside the shape.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiTextPr",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isStrikeout",
                "description": "Specifies that the contents of the current run are displayed struck through.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetStrikeout",
        "longname": "ApiTextPr#SetStrikeout",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13149,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/SetStrikeout.js"
        ]
    },
    {
        "comment": "/**\n\t * Gets the strikeout property from the current text properties.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @return {?boolean}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetStrikeout.js\n\t */",
        "description": "Gets the strikeout property from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nrun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\nrun.AddLineBreak();\nparagraph.AddElement(run);\nlet textProps = run.GetTextPr();\ntextProps.SetStrikeout(true);\nparagraph = Api.CreateParagraph();\nlet isStrikeout = textProps.GetStrikeout();\nparagraph.AddText(\"Strikeout property: \" + isStrikeout);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiTextPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetStrikeout",
        "longname": "ApiTextPr#GetStrikeout",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13164,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/GetStrikeout.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies that the contents of the run are displayed along with a line appearing directly below the character\n\t * (less than all the spacing above and below the characters on the line).\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {boolean} isUnderline - Specifies that the contents of the current run are displayed underlined.\n\t * @return {ApiTextPr} - this text properties.\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetUnderline.js\n\t */",
        "description": "Specifies that the contents of the run are displayed along with a line appearing directly below the character\n(less than all the spacing above and below the characters on the line).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nlet textProps = run.GetTextPr();\ntextProps.SetFontSize(30);\ntextProps.SetUnderline(true);\nparagraph.SetJc(\"left\");\nrun.AddText(\"This is an underlined text inside the shape.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiTextPr",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isUnderline",
                "description": "Specifies that the contents of the current run are displayed underlined.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetUnderline",
        "longname": "ApiTextPr#SetUnderline",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13178,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/SetUnderline.js"
        ]
    },
    {
        "comment": "/**\n\t * Gets the underline property from the current text properties.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @return {?boolean}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetUnderline.js\n\t */",
        "description": "Gets the underline property from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nrun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\nrun.AddLineBreak();\nparagraph.AddElement(run);\nlet textProps = run.GetTextPr();\ntextProps.SetUnderline(true);\nparagraph = Api.CreateParagraph();\nlet isUnderline = textProps.GetUnderline();\nparagraph.AddText(\"Underline property: \" + isUnderline);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiTextPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetUnderline",
        "longname": "ApiTextPr#GetUnderline",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13193,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/GetUnderline.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets all 4 font slots with the specified font family.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {string} sFontFamily - The font family or families used for the current text run.\n\t * @return {ApiTextPr} - this text properties.\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetFontFamily.js\n\t */",
        "description": "Sets all 4 font slots with the specified font family.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nlet textProps = run.GetTextPr();\ntextProps.SetFontSize(30);\ntextProps.SetFontFamily(\"Comic Sans MS\");\nparagraph.SetJc(\"left\");\nrun.AddText(\"This is a sample text inside the shape with the font family set to 'Comic Sans MS' using the text properties.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiTextPr",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sFontFamily",
                "description": "The font family or families used for the current text run.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetFontFamily",
        "longname": "ApiTextPr#SetFontFamily",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13206,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/SetFontFamily.js"
        ]
    },
    {
        "comment": "/**\n\t * Gets the font family from the current text properties.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @return {?string}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetFontFamily.js\n\t */",
        "description": "Gets the font family from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nrun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\nrun.AddLineBreak();\nparagraph.AddElement(run);\nlet textProps = run.GetTextPr();\ntextProps.SetFontFamily(\"Arial\");\nparagraph = Api.CreateParagraph();\nlet fontFamily = textProps.GetFontFamily();\nparagraph.AddText(\"Font family: \" + fontFamily);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiTextPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetFontFamily",
        "longname": "ApiTextPr#GetFontFamily",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13222,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/GetFontFamily.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the font size to the characters of the current text run.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {hps} nSize - The text size value measured in half-points (1/144 of an inch).\n\t * @return {ApiTextPr} - this text properties.\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetFontSize.js\n\t */",
        "description": "Sets the font size to the characters of the current text run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nlet textProps = run.GetTextPr();\ntextProps.SetFontSize(30);\nparagraph.SetJc(\"left\");\nrun.AddText(\"This is a sample text inside the shape with the font size set to 15 points using the text properties.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiTextPr",
        "params": [
            {
                "type": {
                    "names": [
                        "hps"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "hps"
                    }
                },
                "name": "nSize",
                "description": "The text size value measured in half-points (1/144 of an inch).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetFontSize",
        "longname": "ApiTextPr#SetFontSize",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13235,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/SetFontSize.js"
        ]
    },
    {
        "comment": "/**\n\t * Gets the font size from the current text properties.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @return {?hps}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetFontSize.js\n\t */",
        "description": "Gets the font size from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nrun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\nrun.AddLineBreak();\nparagraph.AddElement(run);\nlet textProps = run.GetTextPr();\ntextProps.SetFontSize(30);\nparagraph = Api.CreateParagraph();\nlet fontSize = textProps.GetFontSize();\nparagraph.AddText(\"Font size: \" + fontSize);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiTextPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "hps"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "hps",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetFontSize",
        "longname": "ApiTextPr#GetFontSize",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13250,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/GetFontSize.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies the alignment which will be applied to the contents of the run in relation to the default appearance of the run text:\n\t * <b>\"baseline\"</b> - the characters in the current text run will be aligned by the default text baseline.\n\t * <b>\"subscript\"</b> - the characters in the current text run will be aligned below the default text baseline.\n\t * <b>\"superscript\"</b> - the characters in the current text run will be aligned above the default text baseline.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {(\"baseline\" | \"subscript\" | \"superscript\")} sType - The vertical alignment type applied to the text contents.\n\t * @return {ApiTextPr} - this text properties.\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetVertAlign.js\n\t */",
        "description": "Specifies the alignment which will be applied to the contents of the run in relation to the default appearance of the run text:\n<b>\"baseline\"</b> - the characters in the current text run will be aligned by the default text baseline.\n<b>\"subscript\"</b> - the characters in the current text run will be aligned below the default text baseline.\n<b>\"superscript\"</b> - the characters in the current text run will be aligned above the default text baseline.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nlet textProps = run.GetTextPr();\ntextProps.SetVertAlign(\"superscript\");\nparagraph.SetJc(\"left\");\nrun.AddText(\"This is a text inside the shape with vertical alignment set to 'superscript'.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiTextPr",
        "params": [
            {
                "type": {
                    "names": [
                        "\"baseline\"",
                        "\"subscript\"",
                        "\"superscript\""
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "\"baseline\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"subscript\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"superscript\""
                            }
                        ]
                    }
                },
                "name": "sType",
                "description": "The vertical alignment type applied to the text contents.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetVertAlign",
        "longname": "ApiTextPr#SetVertAlign",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13306,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/SetVertAlign.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the text spacing measured in twentieths of a point.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {twips} nSpacing - The value of the text spacing measured in twentieths of a point (1/1440 of an inch).\n\t * @return {ApiTextPr} - this text properties.\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetSpacing.js\n\t */",
        "description": "Sets the text spacing measured in twentieths of a point.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nlet textProps = run.GetTextPr();\ntextProps.SetFontSize(30);\ntextProps.SetSpacing(80);\nparagraph.SetJc(\"left\");\nrun.AddText(\"This is a sample text inside the shape with the spacing set to 4 points (80 twentieths of a point).\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiTextPr",
        "params": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "twips"
                    }
                },
                "name": "nSpacing",
                "description": "The value of the text spacing measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetSpacing",
        "longname": "ApiTextPr#SetSpacing",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13402,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/SetSpacing.js"
        ]
    },
    {
        "comment": "/**\n\t * Gets the text spacing from the current text properties measured in twentieths of a point.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @return {?twips}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetSpacing.js\n\t */",
        "description": "Gets the text spacing from the current text properties measured in twentieths of a point.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nrun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\nrun.AddLineBreak();\nparagraph.AddElement(run);\nlet textProps = run.GetTextPr();\ntextProps.SetSpacing(80);\nparagraph = Api.CreateParagraph();\nlet spacing = textProps.GetSpacing();\nparagraph.AddText(\"Text spacing: \" + spacing);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiTextPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "twips",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetSpacing",
        "longname": "ApiTextPr#GetSpacing",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13417,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/GetSpacing.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies that the contents of the run are displayed with two horizontal lines through each character displayed on the line.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {boolean} isDoubleStrikeout - Specifies that the contents of the current run are displayed double struck through.\n\t * @return {ApiTextPr} - this text properties.\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetDoubleStrikeout.js\n\t */",
        "description": "Specifies that the contents of the run are displayed with two horizontal lines through each character displayed on the line.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nlet textProps = run.GetTextPr();\ntextProps.SetFontSize(30);\ntextProps.SetDoubleStrikeout(true);\nparagraph.SetJc(\"left\");\nrun.AddText(\"This is a sample text inside the shape struck out with two lines using the text properties.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiTextPr",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isDoubleStrikeout",
                "description": "Specifies that the contents of the current run are displayed double struck through.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetDoubleStrikeout",
        "longname": "ApiTextPr#SetDoubleStrikeout",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13435,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/SetDoubleStrikeout.js"
        ]
    },
    {
        "comment": "/**\n\t * Gets the double strikeout property from the current text properties.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @return {?boolean}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetDoubleStrikeout.js\n\t */",
        "description": "Gets the double strikeout property from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nrun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\nrun.AddLineBreak();\nparagraph.AddElement(run);\nlet textProps = run.GetTextPr();\ntextProps.SetDoubleStrikeout(true);\nparagraph = Api.CreateParagraph();\nlet isDoubleStrikeout = textProps.GetDoubleStrikeout();\nparagraph.AddText(\"Double strikeout property: \" + isDoubleStrikeout);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiTextPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetDoubleStrikeout",
        "longname": "ApiTextPr#GetDoubleStrikeout",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13450,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/GetDoubleStrikeout.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies that any lowercase characters in the text run are formatted for display only as their capital letter character equivalents.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {boolean} isCaps - Specifies that the contents of the current run are displayed capitalized.\n\t * @return {ApiTextPr} - this text properties.\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetCaps.js\n\t */",
        "description": "Specifies that any lowercase characters in the text run are formatted for display only as their capital letter character equivalents.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nlet textProps = run.GetTextPr();\ntextProps.SetFontSize(30);\ntextProps.SetCaps(true);\nparagraph.SetJc(\"left\");\nrun.AddText(\"This is a sample text inside the shape set to capital letters using the text properties.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiTextPr",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isCaps",
                "description": "Specifies that the contents of the current run are displayed capitalized.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetCaps",
        "longname": "ApiTextPr#SetCaps",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13463,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/SetCaps.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies whether the text with the current text properties are capitalized.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @return {?boolean}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetCaps.js\n\t */",
        "description": "Specifies whether the text with the current text properties are capitalized.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nrun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\nrun.AddLineBreak();\nparagraph.AddElement(run);\nlet textProps = run.GetTextPr();\ntextProps.SetCaps(true);\nparagraph = Api.CreateParagraph();\nlet isCaps = textProps.GetCaps();\nparagraph.AddText(\"Property of the capitalized letters: \" + isCaps);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiTextPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetCaps",
        "longname": "ApiTextPr#GetCaps",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13478,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/GetCaps.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies that all the small letter characters in the text run are formatted for display only as their capital\n\t * letter character equivalents which are two points smaller than the actual font size specified for this text.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {boolean} isSmallCaps - Specifies if the contents of the current run are displayed capitalized two points smaller or not.\n\t * @return {ApiTextPr} - this text properties.\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetSmallCaps.js\n\t */",
        "description": "Specifies that all the small letter characters in the text run are formatted for display only as their capital\nletter character equivalents which are two points smaller than the actual font size specified for this text.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nlet textProps = run.GetTextPr();\ntextProps.SetFontSize(30);\ntextProps.SetSmallCaps(true);\nparagraph.SetJc(\"left\");\nrun.AddText(\"This is a sample text inside the shape with the font set to small capitalized letters.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiTextPr",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isSmallCaps",
                "description": "Specifies if the contents of the current run are displayed capitalized two points smaller or not.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetSmallCaps",
        "longname": "ApiTextPr#SetSmallCaps",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13492,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/SetSmallCaps.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies whether the text with the current text properties are displayed capitalized two points smaller than the actual font size.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @return {?boolean}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetSmallCaps.js\n\t */",
        "description": "Specifies whether the text with the current text properties are displayed capitalized two points smaller than the actual font size.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nrun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\nrun.AddLineBreak();\nparagraph.AddElement(run);\nlet textProps = run.GetTextPr();\ntextProps.SetSmallCaps(true);\nparagraph = Api.CreateParagraph();\nlet isSmallCaps = textProps.GetSmallCaps();\nparagraph.AddText(\"Property of the small capitalized letters: \" + isSmallCaps);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiTextPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetSmallCaps",
        "longname": "ApiTextPr#GetSmallCaps",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13507,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/GetSmallCaps.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the text color to the current text run.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CSE\", \"CPE\"]\n\t * @param {ApiFill} oApiFill - The color or pattern used to fill the text color.\n\t * @return {ApiTextPr} - this text properties.\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetFill.js\n\t */",
        "description": "Sets the text color to the current text run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nlet textProps = run.GetTextPr();\nfill = Api.CreateSolidFill(Api.CreateRGBColor(128, 128, 128));\ntextProps.SetFill(fill);\nrun.AddText(\"This is a text run with the font color set to gray.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiTextPr",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                },
                "name": "oApiFill",
                "description": "The color or pattern used to fill the text color.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetFill",
        "longname": "ApiTextPr#SetFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13633,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/SetFill.js"
        ]
    },
    {
        "comment": "/**\n\t * Gets the text color from the current text properties.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CSE\", \"CPE\"]\n\t * @return {ApiFill}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetFill.js\n\t */",
        "description": "Gets the text color from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nrun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\nrun.AddLineBreak();\nparagraph.AddElement(run);\nlet textProps = run.GetTextPr();\nfill = Api.CreateSolidFill(Api.CreateRGBColor(128, 128, 128));\ntextProps.SetFill(fill);\nparagraph = Api.CreateParagraph();\nfill = textProps.GetFill();\nlet type = fill.GetClassType();\nparagraph.AddText(\"Text color type: \" + type);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiTextPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                }
            }
        ],
        "name": "GetFill",
        "longname": "ApiTextPr#GetFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13648,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/GetFill.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the text fill to the current text run.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\n\t * @param {ApiFill} oApiFill - The color or pattern used to fill the text color.\n\t * @return {ApiTextPr} - this text properties.\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetTextFill.js\n\t */",
        "description": "Sets the text fill to the current text run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nlet textProps = run.GetTextPr();\ntextProps.SetFontSize(30);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(128, 128, 128));\nrun.SetTextFill(fill);\nparagraph.SetJc(\"left\");\nrun.AddText(\"This is a text run with the gray text set using the text properties.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiTextPr",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                },
                "name": "oApiFill",
                "description": "The color or pattern used to fill the text color.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetTextFill",
        "longname": "ApiTextPr#SetTextFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13666,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/SetTextFill.js"
        ]
    },
    {
        "comment": "/**\n\t * Gets the text fill from the current text properties.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @return {ApiFill}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetTextFill.js\n\t */",
        "description": "Gets the text fill from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nrun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\nrun.AddLineBreak();\nparagraph.AddElement(run);\nlet textProps = run.GetTextPr();\nfill = Api.CreateSolidFill(Api.CreateRGBColor(128, 128, 128));\nrun.SetTextFill(fill);\nparagraph = Api.CreateParagraph();\nfill = textProps.GetTextFill();\nlet type = fill.GetClassType();\nparagraph.AddText(\"Text fill type: \" + type);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiTextPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                }
            }
        ],
        "name": "GetTextFill",
        "longname": "ApiTextPr#GetTextFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13681,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/GetTextFill.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the text outline to the current text run.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\n\t * @param {ApiStroke} oStroke - The stroke used to create the text outline.\n\t * @return {ApiTextPr} - this text properties.\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetOutLine.js\n\t */",
        "description": "Sets the text outline to the current text run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nlet textProps = run.GetTextPr();\ntextProps.SetFontSize(30);\nstroke = Api.CreateStroke(0.2 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(128, 128, 128)));\ntextProps.SetOutLine(stroke);\nparagraph.SetJc(\"left\");\nrun.AddText(\"This is a text run with the gray text outline set using the text properties.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiTextPr",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiStroke"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiStroke"
                    }
                },
                "name": "oStroke",
                "description": "The stroke used to create the text outline.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "SetOutLine",
        "longname": "ApiTextPr#SetOutLine",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13699,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/SetOutLine.js"
        ]
    },
    {
        "comment": "/**\n\t * Gets the text outline from the current text properties.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @return {ApiStroke}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetOutLine.js\n\t */",
        "description": "Gets the text outline from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nrun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\nrun.AddLineBreak();\nparagraph.AddElement(run);\nlet textProps = run.GetTextPr();\nstroke = Api.CreateStroke(0.2 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(128, 128, 128)));\ntextProps.SetOutLine(stroke);\nparagraph = Api.CreateParagraph();\nstroke = textProps.GetOutLine();\nlet type = stroke.GetClassType();\nparagraph.AddText(\"Text outline type: \" + type);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiTextPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiStroke"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiStroke"
                    }
                }
            }
        ],
        "name": "GetOutLine",
        "longname": "ApiTextPr#GetOutLine",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13714,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/GetOutLine.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the ApiParaPr class.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {\"paraPr\"}\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetClassType.js\n\t */",
        "description": "Returns a type of the ApiParaPr class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet paraPr = paragraph.GetParaPr();\nlet classType = paraPr.GetClassType();\nparaPr.SetIndFirstLine(1440);\nparagraph.AddText(\"This is the first paragraph with the indent of 1 inch set to the first line. \");\nparagraph.AddText(\"This indent is set by the paragraph style. No paragraph inline style is applied. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Class Type = \" + classType);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiParaPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"paraPr\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"paraPr\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiParaPr#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13762,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the paragraph left side indentation.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {twips} nValue - The paragraph left side indentation value measured in twentieths of a point (1/1440 of an inch).\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetIndLeft.js\n\t */",
        "description": "Sets the paragraph left side indentation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet paraPr = paragraph.GetParaPr();\nparaPr.SetIndLeft(2880);\nparagraph.AddText(\"This is the first paragraph with the indent of 2 inches set to it. \");\nparagraph.AddText(\"This indent is set by the paragraph style. No paragraph inline style is applied. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\n```",
        "memberof": "ApiParaPr",
        "params": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "twips"
                    }
                },
                "name": "nValue",
                "description": "The paragraph left side indentation value measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetIndLeft",
        "longname": "ApiParaPr#SetIndLeft",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13831,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/SetIndLeft.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the paragraph left side indentation.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {twips | undefined} - The paragraph left side indentation value measured in twentieths of a point (1/1440 of an inch).\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetIndLeft.js\n\t */",
        "description": "Returns the paragraph left side indentation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet paraPr = paragraph.GetParaPr();\nparaPr.SetIndLeft(2880);\nparagraph.AddText(\"This is the first paragraph with the indent of 2 inches set to it. \");\nparagraph.AddText(\"This indent is set by the paragraph style. No paragraph inline style is applied. \");\nlet indLeft = paraPr.GetIndLeft();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Left indent: \" + indLeft);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiParaPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "twips",
                        "undefined"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "twips"
                            },
                            {
                                "type": "UndefinedLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetIndLeft",
        "longname": "ApiParaPr#GetIndLeft",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13843,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/GetIndLeft.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the paragraph right side indentation.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {twips} nValue - The paragraph right side indentation value measured in twentieths of a point (1/1440 of an inch).\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetIndRight.js\n\t */",
        "description": "Sets the paragraph right side indentation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet paraPr = paragraph.GetParaPr();\nparaPr.SetIndRight(2880);\nparagraph.AddText(\"This is the first paragraph with the right offset of 2 inches set to it. \");\nparagraph.AddText(\"This offset is set by the paragraph style. No paragraph inline style is applied. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\n```",
        "memberof": "ApiParaPr",
        "params": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "twips"
                    }
                },
                "name": "nValue",
                "description": "The paragraph right side indentation value measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetIndRight",
        "longname": "ApiParaPr#SetIndRight",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13860,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/SetIndRight.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the paragraph right side indentation.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {twips | undefined} - The paragraph right side indentation value measured in twentieths of a point (1/1440 of an inch).\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetIndRight.js\n\t */",
        "description": "Returns the paragraph right side indentation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet paraPr = paragraph.GetParaPr();\nparaPr.SetIndRight(2880);\nparaPr.SetJc(\"right\");\nparagraph.AddText(\"This is the first paragraph with the right offset of 2 inches set to it. \");\nparagraph.AddText(\"This indent is set by the paragraph style. No paragraph inline style is applied. \");\nlet indRight = paraPr.GetIndRight();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Right indent: \" + indRight);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiParaPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "twips",
                        "undefined"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "twips"
                            },
                            {
                                "type": "UndefinedLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetIndRight",
        "longname": "ApiParaPr#GetIndRight",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13872,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/GetIndRight.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the paragraph first line indentation.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {twips} nValue - The paragraph first line indentation value measured in twentieths of a point (1/1440 of an inch).\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetIndFirstLine.js\n\t */",
        "description": "Sets the paragraph first line indentation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet paraPr = paragraph.GetParaPr();\nparaPr.SetIndFirstLine(1440);\nparagraph.AddText(\"This is the first paragraph with the indent of 1 inch set to the first line. \");\nparagraph.AddText(\"This indent is set by the paragraph style. No paragraph inline style is applied. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\n```",
        "memberof": "ApiParaPr",
        "params": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "twips"
                    }
                },
                "name": "nValue",
                "description": "The paragraph first line indentation value measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetIndFirstLine",
        "longname": "ApiParaPr#SetIndFirstLine",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13890,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/SetIndFirstLine.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the paragraph first line indentation.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {twips | undefined} - The paragraph first line indentation value measured in twentieths of a point (1/1440 of an inch).\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetIndFirstLine.js\n\t */",
        "description": "Returns the paragraph first line indentation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet paraPr = paragraph.GetParaPr();\nparaPr.SetIndFirstLine(1440);\nparagraph.AddText(\"This is the first paragraph with the indent of 1 inch set to the first line. \");\nparagraph.AddText(\"This indent is set by the paragraph style. No paragraph inline style is applied. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\nlet indFirstLine = paraPr.GetIndFirstLine();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"First line indent: \" + indFirstLine);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiParaPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "twips",
                        "undefined"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "twips"
                            },
                            {
                                "type": "UndefinedLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetIndFirstLine",
        "longname": "ApiParaPr#GetIndFirstLine",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13902,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/GetIndFirstLine.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the paragraph contents justification.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {(\"left\" | \"right\" | \"both\" | \"center\")} sJc - The justification type that\n\t * will be applied to the paragraph contents.\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetJc.js\n\t */",
        "description": "Sets the paragraph contents justification.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet paraPr = paragraph.GetParaPr();\nparaPr.SetJc(\"center\");\nparagraph.AddText(\"This is a paragraph with the text in it aligned by the center. \");\nparagraph.AddText(\"The justification is specified in the paragraph style. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\n```",
        "memberof": "ApiParaPr",
        "params": [
            {
                "type": {
                    "names": [
                        "\"left\"",
                        "\"right\"",
                        "\"both\"",
                        "\"center\""
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "\"left\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"right\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"both\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"center\""
                            }
                        ]
                    }
                },
                "name": "sJc",
                "description": "The justification type that\nwill be applied to the paragraph contents.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetJc",
        "longname": "ApiParaPr#SetJc",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13922,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/SetJc.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the paragraph contents justification.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {(\"left\" | \"right\" | \"both\" | \"center\" | undefined)} \n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetJc.js\n\t */",
        "description": "Returns the paragraph contents justification.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet paraPr = paragraph.GetParaPr();\nparaPr.SetJc(\"center\");\nparagraph.AddText(\"This is a paragraph with the text in it aligned by the center. \");\nparagraph.AddText(\"The justification is specified in the paragraph style. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\nlet justification = paraPr.GetJc();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Justification: \" + justification);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiParaPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"left\"",
                        "\"right\"",
                        "\"both\"",
                        "\"center\"",
                        "undefined"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "\"left\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"right\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"both\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"center\""
                            },
                            {
                                "type": "UndefinedLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetJc",
        "longname": "ApiParaPr#GetJc",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13934,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/GetJc.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the paragraph line spacing. If the value of the sLineRule parameter is either \n\t * \"atLeast\" or \"exact\", then the value of nLine will be interpreted as twentieths of a point. If \n\t * the value of the sLineRule parameter is \"auto\", then the value of the \n\t * nLine parameter will be interpreted as 240ths of a line.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {(twips | line240)} nLine - The line spacing value measured either in twentieths of a point (1/1440 of an inch) or in 240ths of a line.\n\t * @param {(\"auto\" | \"atLeast\" | \"exact\")} sLineRule - The rule that determines the measuring units of the line spacing.\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetSpacingLine.js\n\t */",
        "description": "Sets the paragraph line spacing. If the value of the sLineRule parameter is either \n\"atLeast\" or \"exact\", then the value of nLine will be interpreted as twentieths of a point. If \nthe value of the sLineRule parameter is \"auto\", then the value of the \nnLine parameter will be interpreted as 240ths of a line.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet paraPr = paragraph.GetParaPr();\nparaPr.SetSpacingLine(3 * 240, \"auto\");\nparagraph.AddText(\"Paragraph 1. Spacing: 3 times of a common paragraph line spacing.\");\nparagraph.AddLineBreak();\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\n```",
        "memberof": "ApiParaPr",
        "params": [
            {
                "type": {
                    "names": [
                        "twips",
                        "line240"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "twips"
                            },
                            {
                                "type": "NameExpression",
                                "name": "line240"
                            }
                        ]
                    }
                },
                "name": "nLine",
                "description": "The line spacing value measured either in twentieths of a point (1/1440 of an inch) or in 240ths of a line.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "\"auto\"",
                        "\"atLeast\"",
                        "\"exact\""
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "\"auto\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"atLeast\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"exact\""
                            }
                        ]
                    }
                },
                "name": "sLineRule",
                "description": "The rule that determines the measuring units of the line spacing.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetSpacingLine",
        "longname": "ApiParaPr#SetSpacingLine",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14014,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/SetSpacingLine.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the paragraph line spacing value.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {twips | line240 | undefined} - to know is twips or line240 use ApiParaPr.prototype.GetSpacingLineRule().\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetSpacingLineValue.js\n\t */",
        "description": "Returns the paragraph line spacing value.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet paraPr = paragraph.GetParaPr();\nparaPr.SetSpacingLine(3 * 240, \"auto\");\nparagraph.AddText(\"Paragraph 1. Spacing: 3 times of a common paragraph line spacing.\");\nparagraph.AddLineBreak();\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\nlet spacingLineValue = paraPr.GetSpacingLineValue();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Spacing line value : \" + spacingLineValue);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiParaPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "twips",
                        "line240",
                        "undefined"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "twips"
                            },
                            {
                                "type": "NameExpression",
                                "name": "line240"
                            },
                            {
                                "type": "UndefinedLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetSpacingLineValue",
        "longname": "ApiParaPr#GetSpacingLineValue",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14045,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/GetSpacingLineValue.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the paragraph line spacing rule.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {\"auto\" | \"atLeast\" | \"exact\" | undefined} \n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetSpacingLineRule.js\n\t */",
        "description": "Returns the paragraph line spacing rule.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet paraPr = paragraph.GetParaPr();\nparaPr.SetSpacingLine(3 * 240, \"auto\");\nparagraph.AddText(\"Paragraph 1. Spacing: 3 times of a common paragraph line spacing.\");\nparagraph.AddLineBreak();\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\nlet spacingRule = paraPr.GetSpacingLineRule();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Spacing line rule : \" + spacingRule);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiParaPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"auto\"",
                        "\"atLeast\"",
                        "\"exact\"",
                        "undefined"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "\"auto\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"atLeast\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"exact\""
                            },
                            {
                                "type": "UndefinedLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetSpacingLineRule",
        "longname": "ApiParaPr#GetSpacingLineRule",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14078,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/GetSpacingLineRule.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the spacing before the current paragraph. If the value of the isBeforeAuto parameter is true, then \n\t * any value of the nBefore is ignored. If isBeforeAuto parameter is not specified, then \n\t * it will be interpreted as false.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {twips} nBefore - The value of the spacing before the current paragraph measured in twentieths of a point (1/1440 of an inch).\n\t * @param {boolean} [isBeforeAuto=false] - The true value disables the spacing before the current paragraph.\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetSpacingBefore.js\n\t */",
        "description": "Sets the spacing before the current paragraph. If the value of the isBeforeAuto parameter is true, then \nany value of the nBefore is ignored. If isBeforeAuto parameter is not specified, then \nit will be interpreted as false.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nparagraph.AddText(\"This is an example of setting a space before a paragraph. \");\nparagraph.AddText(\"The second paragraph will have an offset of one inch from the top. \");\nparagraph.AddText(\"This is due to the fact that the second paragraph has this offset enabled.\");\nparagraph = Api.CreateParagraph();\nlet paraPr = paragraph.GetParaPr();\nparaPr.SetSpacingBefore(1440);\nparagraph.AddText(\"This is the second paragraph and it is one inch away from the first paragraph.\");\ncontent.Push(paragraph);\n```",
        "memberof": "ApiParaPr",
        "params": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "twips"
                    }
                },
                "name": "nBefore",
                "description": "The value of the spacing before the current paragraph measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isBeforeAuto",
                "description": "The true value disables the spacing before the current paragraph.",
                "optional": true,
                "defaultvalue": false
            }
        ],
        "returns": null,
        "name": "SetSpacingBefore",
        "longname": "ApiParaPr#SetSpacingBefore",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14116,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/SetSpacingBefore.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the spacing before value of the current paragraph.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {twips} - The value of the spacing before the current paragraph measured in twentieths of a point (1/1440 of an inch).\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetSpacingBefore.js\n\t */",
        "description": "Returns the spacing before value of the current paragraph.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nparagraph.AddText(\"This is an example of setting a space before a paragraph.\");\nparagraph.AddText(\"The second paragraph will have an offset of one inch from the top. \");\nparagraph.AddText(\"This is due to the fact that the second paragraph has this offset enabled.\");\nlet paragraph2 = Api.CreateParagraph();\nparagraph2.AddText(\"This is the second paragraph and it is one inch away from the first paragraph.\");\ncontent.Push(paragraph2);\nlet paraPr = paragraph2.GetParaPr();\nparaPr.SetSpacingBefore(1440);\nlet spacingBefore = paraPr.GetSpacingBefore();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Spacing before: \" + spacingBefore);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiParaPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "twips"
                    }
                }
            }
        ],
        "name": "GetSpacingBefore",
        "longname": "ApiParaPr#GetSpacingBefore",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14133,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/GetSpacingBefore.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the spacing after the current paragraph. If the value of the isAfterAuto parameter is true, then \n\t * any value of the nAfter is ignored. If isAfterAuto parameter is not specified, then it \n\t * will be interpreted as false.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {twips} nAfter - The value of the spacing after the current paragraph measured in twentieths of a point (1/1440 of an inch).\n\t * @param {boolean} [isAfterAuto=false] - The true value disables the spacing after the current paragraph.\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetSpacingAfter.js\n\t */",
        "description": "Sets the spacing after the current paragraph. If the value of the isAfterAuto parameter is true, then \nany value of the nAfter is ignored. If isAfterAuto parameter is not specified, then it \nwill be interpreted as false.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet paraPr = paragraph.GetParaPr();\nparaPr.SetSpacingAfter(1440);\nparagraph.AddText(\"This is an example of setting a space after a paragraph. \");\nparagraph.AddText(\"The second paragraph will have an offset of one inch from the top. \");\nparagraph.AddText(\"This is due to the fact that the first paragraph has this offset enabled.\");\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"This is the second paragraph and it is one inch away from the first paragraph.\");\ncontent.Push(paragraph);\n```",
        "memberof": "ApiParaPr",
        "params": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "twips"
                    }
                },
                "name": "nAfter",
                "description": "The value of the spacing after the current paragraph measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isAfterAuto",
                "description": "The true value disables the spacing after the current paragraph.",
                "optional": true,
                "defaultvalue": false
            }
        ],
        "returns": null,
        "name": "SetSpacingAfter",
        "longname": "ApiParaPr#SetSpacingAfter",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14155,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/SetSpacingAfter.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the spacing after value of the current paragraph. \n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {twips} - The value of the spacing after the current paragraph measured in twentieths of a point (1/1440 of an inch).\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetSpacingAfter.js\n\t */",
        "description": "Returns the spacing after value of the current paragraph.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet paraPr = paragraph.GetParaPr();\nparaPr.SetSpacingAfter(1440);\nparagraph.AddText(\"This is an example of setting a space after a paragraph. \");\nparagraph.AddText(\"The second paragraph will have an offset of one inch from the top. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\nlet spacingAfter = paraPr.GetSpacingAfter();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Spacing after : \" + spacingAfter);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiParaPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "twips"
                    }
                }
            }
        ],
        "name": "GetSpacingAfter",
        "longname": "ApiParaPr#GetSpacingAfter",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14172,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/GetSpacingAfter.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies a sequence of custom tab stops which will be used for any tab characters in the current paragraph.\n\t * <b>Warning</b>: The lengths of aPos array and aVal array <b>MUST BE</b> equal to each other.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {twips[]} aPos - An array of the positions of custom tab stops with respect to the current page margins\n\t * measured in twentieths of a point (1/1440 of an inch).\n\t * @param {TabJc[]} aVal - An array of the styles of custom tab stops, which determines the behavior of the tab\n\t * stop and the alignment which will be applied to text entered at the current custom tab stop.\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetTabs.js\n\t */",
        "description": "Specifies a sequence of custom tab stops which will be used for any tab characters in the current paragraph.\n<b>Warning</b>: The lengths of aPos array and aVal array <b>MUST BE</b> equal to each other.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 150 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet paraPr = paragraph.GetParaPr();\nparaPr.SetTabs([1440, 2880, 4320], [\"left\", \"center\", \"right\"]);\nparagraph.AddTabStop();\nparagraph.AddText(\"Custom tab - 1 inch left\");\nparagraph.AddLineBreak();\nparagraph.AddTabStop();\nparagraph.AddTabStop();\nparagraph.AddText(\"Custom tab - 2 inches center\");\nparagraph.AddLineBreak();\nparagraph.AddTabStop();\nparagraph.AddTabStop();\nparagraph.AddTabStop();\nparagraph.AddText(\"Custom tab - 3 inches right\");\n```",
        "memberof": "ApiParaPr",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<twips>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "twips",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "aPos",
                "description": "An array of the positions of custom tab stops with respect to the current page margins\nmeasured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "Array.<TabJc>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "TabJc",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "aVal",
                "description": "An array of the styles of custom tab stops, which determines the behavior of the tab\nstop and the alignment which will be applied to text entered at the current custom tab stop.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetTabs",
        "longname": "ApiParaPr#SetTabs",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14345,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/SetTabs.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the bullet or numbering to the current paragraph.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CSE\", \"CPE\"]\n\t * @param {?ApiBullet} oBullet - The bullet object created with the {@link Api#CreateBullet} or {@link Api#CreateNumbering} method.\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetBullet.js\n\t */",
        "description": "Sets the bullet or numbering to the current paragraph.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet paraPr = paragraph.GetParaPr();\nlet bullet = Api.CreateBullet(\"-\");\nparaPr.SetBullet(bullet);\nparagraph.AddText(\" This is an example of the bulleted paragraph.\");\n```",
        "memberof": "ApiParaPr",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiBullet"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiBullet",
                        "nullable": true
                    }
                },
                "name": "oBullet",
                "description": "The bullet object created with the {@link Api#CreateBullet} or {@link Api#CreateNumbering} method.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetBullet",
        "longname": "ApiParaPr#SetBullet",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14389,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/SetBullet.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the outline level for the specified properties.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {Number?} [nLvl=undefined] - The outline level. Possible values: 0-8. The 0 value means the basic outline level.\n\t * To set no outline level, use this method without a parameter.\n\t * @returns {boolean}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetOutlineLvl.js\n\t */",
        "description": "Sets the outline level for the specified properties.",
        "memberof": "ApiParaPr",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Number",
                        "nullable": true
                    }
                },
                "name": "nLvl",
                "description": "The outline level. Possible values: 0-8. The 0 value means the basic outline level.\nTo set no outline level, use this method without a parameter.",
                "optional": true,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetOutlineLvl",
        "longname": "ApiParaPr#SetOutlineLvl",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14409,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/SetOutlineLvl.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the outline level of the specified properties.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {Number?}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetOutlineLvl.js\n\t */",
        "description": "Returns the outline level of the specified properties.",
        "memberof": "ApiParaPr",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Number",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetOutlineLvl",
        "longname": "ApiParaPr#GetOutlineLvl",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14433,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/GetOutlineLvl.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the shape inner contents where a paragraph or text runs can be inserted if it exists.\n\t * @memberof ApiDrawing\n\t * @typeofeditors [\"CDE\", \"CSE\"]\n\t * @returns {?ApiDocumentContent}\n\t * @see office-js-api/Examples/{Editor}/ApiDrawing/Methods/GetContent.js\n\t */",
        "description": "Returns the shape inner contents where a paragraph or text runs can be inserted if it exists.",
        "memberof": "ApiDrawing",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiDocumentContent"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiDocumentContent",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetContent",
        "longname": "ApiDrawing#GetContent",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15547,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiDrawing/Methods/GetContent.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the width of the current drawing.\n\t * @memberof ApiDrawing\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\n\t * @returns {EMU}\n\t * @see office-js-api/Examples/{Editor}/ApiDrawing/Methods/GetWidth.js\n\t */",
        "description": "Returns the width of the current drawing.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet drawing = worksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\ndrawing.SetSize(120 * 36000, 70 * 36000);\ndrawing.SetPosition(0, 2 * 36000, 1, 3 * 36000);\nlet width = drawing.GetWidth();\nworksheet.GetRange(\"A1\").SetValue(\"Drawing width = \" + width);\n```",
        "memberof": "ApiDrawing",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                }
            }
        ],
        "name": "GetWidth",
        "longname": "ApiDrawing#GetWidth",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 11992,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiDrawing/Methods/GetWidth.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the height of the current drawing.\n\t * @memberof ApiDrawing\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\n\t * @returns {EMU}\n\t * @see office-js-api/Examples/{Editor}/ApiDrawing/Methods/GetHeight.js\n\t */",
        "description": "Returns the height of the current drawing.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet drawing = worksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\ndrawing.SetSize(120 * 36000, 70 * 36000);\ndrawing.SetPosition(0, 2 * 36000, 1, 3 * 36000);\nlet height = drawing.GetHeight();\nworksheet.GetRange(\"A1\").SetValue(\"Drawing height = \" + height);\n```",
        "memberof": "ApiDrawing",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                }
            }
        ],
        "name": "GetHeight",
        "longname": "ApiDrawing#GetHeight",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12002,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiDrawing/Methods/GetHeight.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the ApiOleObject class.\n\t * @memberof ApiOleObject\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\n\t * @returns {\"oleObject\"}\n\t * @see office-js-api/Examples/{Editor}/ApiOleObject/Methods/GetClassType.js\n\t */",
        "description": "Returns a type of the ApiOleObject class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet oleObject = worksheet.AddOleObject(\"https://api.onlyoffice.com/content/img/docbuilder/examples/ole-object-image.png\", 130 * 36000, 90 * 36000, \"https://youtu.be/SKGz4pmnpgY\", \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\", 0, 2 * 36000, 4, 3 * 36000);\nlet type = oleObject.GetClassType();\nworksheet.GetRange(\"A1\").SetValue(\"Class type: \" + type);\n```",
        "memberof": "ApiOleObject",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"oleObject\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"oleObject\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiOleObject#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12334,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiOleObject/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the data to the current OLE object.\n\t * @memberof ApiOleObject\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\n\t * @param {string} sData - The OLE object string data.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiOleObject/Methods/SetData.js\n\t */",
        "description": "Sets the data to the current OLE object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet oleObject = worksheet.AddOleObject(\"https://api.onlyoffice.com/content/img/docbuilder/examples/ole-object-image.png\", 130 * 36000, 90 * 36000, \"https://youtu.be/SKGz4pmnpgY\", \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\", 0, 2 * 36000, 4, 3 * 36000);\noleObject.SetData(\"https://youtu.be/eJxpkjQG6Ew\");\n```",
        "memberof": "ApiOleObject",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sData",
                "description": "The OLE object string data.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetData",
        "longname": "ApiOleObject#SetData",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12346,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiOleObject/Methods/SetData.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the string data from the current OLE object.\n\t * @memberof ApiOleObject\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiOleObject/Methods/GetData.js\n\t */",
        "description": "Returns the string data from the current OLE object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet oleObject = worksheet.AddOleObject(\"https://api.onlyoffice.com/content/img/docbuilder/examples/ole-object-image.png\", 130 * 36000, 90 * 36000, \"https://youtu.be/SKGz4pmnpgY\", \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\", 0, 2 * 36000, 4, 3 * 36000);\nlet data = oleObject.GetData();\nworksheet.GetRange(\"A1\").SetValue(\"The OLE object data: \" + data);\n```",
        "memberof": "ApiOleObject",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetData",
        "longname": "ApiOleObject#GetData",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12361,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiOleObject/Methods/GetData.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the application ID to the current OLE object.\n\t * @memberof ApiOleObject\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\n\t * @param {string} sAppId - The application ID associated with the current OLE object.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiOleObject/Methods/SetApplicationId.js\n\t */",
        "description": "Sets the application ID to the current OLE object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet oleObject = worksheet.AddOleObject(\"https://api.onlyoffice.com/content/img/docbuilder/examples/ole-object-image.png\", 130 * 36000, 90 * 36000, \"https://youtu.be/SKGz4pmnpgY\", \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\", 0, 2 * 36000, 4, 3 * 36000);\noleObject.SetApplicationId(\"asc.{E5773A43-F9B3-4E81-81D9-CE0A132470E7}\");\n```",
        "memberof": "ApiOleObject",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sAppId",
                "description": "The application ID associated with the current OLE object.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetApplicationId",
        "longname": "ApiOleObject#SetApplicationId",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12376,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiOleObject/Methods/SetApplicationId.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the application ID from the current OLE object.\n\t * @memberof ApiOleObject\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiOleObject/Methods/GetApplicationId.js\n\t */",
        "description": "Returns the application ID from the current OLE object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet oleObject = worksheet.AddOleObject(\"https://api.onlyoffice.com/content/img/docbuilder/examples/ole-object-image.png\", 130 * 36000, 90 * 36000, \"https://youtu.be/SKGz4pmnpgY\", \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\", 0, 2 * 36000, 4, 3 * 36000);\nlet appId = oleObject.GetApplicationId();\nworksheet.GetRange(\"A1\").SetValue(\"The OLE object application ID: \" + appId);\n```",
        "memberof": "ApiOleObject",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetApplicationId",
        "longname": "ApiOleObject#GetApplicationId",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12391,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiOleObject/Methods/GetApplicationId.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the ApiShape class.\n\t * @memberof ApiShape\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {\"shape\"}\n\t * @see office-js-api/Examples/{Editor}/ApiShape/Methods/GetClassType.js\n\t */",
        "description": "Returns a type of the ApiShape class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 2, 3 * 36000);\nlet classType = shape.GetClassType();\nworksheet.SetColumnWidth(0, 15);\nworksheet.SetColumnWidth(1, 10);\nworksheet.GetRange(\"A1\").SetValue(\"Class Type = \");\nworksheet.GetRange(\"B1\").SetValue(classType);\n```",
        "memberof": "ApiShape",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"shape\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"shape\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiShape#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12145,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiShape/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the shape inner contents where a paragraph or text runs can be inserted.\n\t * @memberof ApiShape\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {?ApiDocumentContent}\n\t * @see office-js-api/Examples/{Editor}/ApiShape/Methods/GetDocContent.js\n\t */",
        "description": "Returns the shape inner contents where a paragraph or text runs can be inserted.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetDocContent();\ncontent.RemoveAllElements();\nlet paragraph = Api.CreateParagraph();\nparagraph.SetJc(\"left\");\nparagraph.AddText(\"We removed all elements from the shape and added a new paragraph inside it.\");\ncontent.Push(paragraph);\n```",
        "memberof": "ApiShape",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiDocumentContent"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiDocumentContent",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetDocContent",
        "longname": "ApiShape#GetDocContent",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12171,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiShape/Methods/GetDocContent.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the vertical alignment to the shape content where a paragraph or text runs can be inserted.\n\t * @memberof ApiShape\n\t * @typeofeditors [\"CSE\"]\n\t * @param {\"top\" | \"center\" | \"bottom\" } sVerticalAlign - The vertical alignment type for the shape inner contents.\n\t * @returns {boolean} - returns false if shape or aligment doesn't exist.\n\t * @see office-js-api/Examples/{Editor}/ApiShape/Methods/SetVerticalTextAlign.js\n\t */",
        "description": "Sets the vertical alignment to the shape content where a paragraph or text runs can be inserted.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 50 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\ncontent.RemoveAllElements();\nshape.SetVerticalTextAlign(\"bottom\");\nlet paragraph = Api.CreateParagraph();\nparagraph.SetJc(\"left\");\nparagraph.AddText(\"We removed all elements from the shape and added a new paragraph inside it \");\nparagraph.AddText(\"aligning it vertically by the bottom.\");\ncontent.Push(paragraph);\n```",
        "memberof": "ApiShape",
        "params": [
            {
                "type": {
                    "names": [
                        "\"top\"",
                        "\"center\"",
                        "\"bottom\""
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "\"top\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"center\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"bottom\""
                            }
                        ]
                    }
                },
                "name": "sVerticalAlign",
                "description": "The vertical alignment type for the shape inner contents.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetVerticalTextAlign",
        "longname": "ApiShape#SetVerticalTextAlign",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12187,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiShape/Methods/SetVerticalTextAlign.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the text paddings to the current shape.\n\t * @memberof ApiShape\n\t * @typeofeditors [\"CDE\", \"CSE\"]\n\t * @param {?EMU} nLeft - Left padding.\n\t * @param {?EMU} nTop - Top padding.\n\t * @param {?EMU} nRight - Right padding.\n\t * @param {?EMU} nBottom - Bottom padding.\n\t * @see office-js-api/Examples/{Editor}/ApiShape/Methods/SetPaddings.js\n\t */",
        "description": "Sets the text paddings to the current shape.",
        "memberof": "ApiShape",
        "params": [
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU",
                        "nullable": true
                    }
                },
                "name": "nLeft",
                "description": "Left padding.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU",
                        "nullable": true
                    }
                },
                "name": "nTop",
                "description": "Top padding.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU",
                        "nullable": true
                    }
                },
                "name": "nRight",
                "description": "Right padding.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU",
                        "nullable": true
                    }
                },
                "name": "nBottom",
                "description": "Bottom padding.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetPaddings",
        "longname": "ApiShape#SetPaddings",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16422,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiShape/Methods/SetPaddings.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the ApiChart class.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {\"chart\"}\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/GetClassType.js\n\t */",
        "description": "Returns a type of the ApiChart class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\nlet classType = chart.GetClassType();\nworksheet.GetRange(\"F1\").SetValue(\"Class Type: \" + classType);\n```",
        "memberof": "ApiChart",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"chart\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"chart\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiChart#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16501,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the chart object.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {ChartType}\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/GetChartType.js\n\t */",
        "description": "Returns a type of the chart object.",
        "memberof": "ApiChart",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ChartType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ChartType"
                    }
                }
            }
        ],
        "name": "GetChartType",
        "longname": "ApiChart#GetChartType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16513,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/GetChartType.js"
        ]
    },
    {
        "comment": "/**\n\t *  Specifies the chart title.\n\t *  @memberof ApiChart\n\t *  @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t *  @param {string} sTitle - The title which will be displayed for the current chart.\n\t *  @param {pt} nFontSize - The text size value measured in points.\n\t *  @param {?bool} bIsBold - Specifies if the chart title is written in bold font or not.\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetTitle.js\n\t */",
        "description": "Specifies the chart title.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sTitle",
                "description": "The title which will be displayed for the current chart.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "pt"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "pt"
                    }
                },
                "name": "nFontSize",
                "description": "The text size value measured in points.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "bool"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "bool",
                        "nullable": true
                    }
                },
                "name": "bIsBold",
                "description": "Specifies if the chart title is written in bold font or not.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetTitle",
        "longname": "ApiChart#SetTitle",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16532,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/SetTitle.js"
        ]
    },
    {
        "comment": "/**\n\t *  Specifies the chart horizontal axis title.\n\t *  @memberof ApiChart\n\t *  @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t *  @param {string} sTitle - The title which will be displayed for the horizontal axis of the current chart.\n\t *  @param {pt} nFontSize - The text size value measured in points.\n\t *  @param {?bool} bIsBold - Specifies if the horizontal axis title is written in bold font or not.\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetHorAxisTitle.js\n\t */",
        "description": "Specifies the chart horizontal axis title.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nchart.SetHorAxisTitle(\"Year\", 11);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sTitle",
                "description": "The title which will be displayed for the horizontal axis of the current chart.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "pt"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "pt"
                    }
                },
                "name": "nFontSize",
                "description": "The text size value measured in points.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "bool"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "bool",
                        "nullable": true
                    }
                },
                "name": "bIsBold",
                "description": "Specifies if the horizontal axis title is written in bold font or not.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetHorAxisTitle",
        "longname": "ApiChart#SetHorAxisTitle",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16546,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/SetHorAxisTitle.js"
        ]
    },
    {
        "comment": "/**\n\t *  Specifies the chart vertical axis title.\n\t *  @memberof ApiChart\n\t *  @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t *  @param {string} sTitle - The title which will be displayed for the vertical axis of the current chart.\n\t *  @param {pt} nFontSize - The text size value measured in points.\n\t *  @param {?bool} bIsBold - Specifies if the vertical axis title is written in bold font or not.\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetVerAxisTitle.js\n\t */",
        "description": "Specifies the chart vertical axis title.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nchart.SetVerAxisTitle(\"USD In Hundred Thousands\", 10);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sTitle",
                "description": "The title which will be displayed for the vertical axis of the current chart.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "pt"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "pt"
                    }
                },
                "name": "nFontSize",
                "description": "The text size value measured in points.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "bool"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "bool",
                        "nullable": true
                    }
                },
                "name": "bIsBold",
                "description": "Specifies if the vertical axis title is written in bold font or not.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetVerAxisTitle",
        "longname": "ApiChart#SetVerAxisTitle",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16560,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/SetVerAxisTitle.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies the vertical axis orientation.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {boolean} bIsMinMax - The <code>true</code> value will set the normal data direction for the vertical axis (from minimum to maximum).\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetVerAxisOrientation.js\n\t */",
        "description": "Specifies the vertical axis orientation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nchart.SetVerAxisOrientation(false);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bIsMinMax",
                "description": "The <code>true</code> value will set the normal data direction for the vertical axis (from minimum to maximum).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetVerAxisOrientation",
        "longname": "ApiChart#SetVerAxisOrientation",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16572,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/SetVerAxisOrientation.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies the horizontal axis orientation.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {boolean} bIsMinMax - The <code>true</code> value will set the normal data direction for the horizontal axis (from minimum to maximum).\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetHorAxisOrientation.js\n\t */",
        "description": "Specifies the horizontal axis orientation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nchart.SetHorAxisOrientation(false);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bIsMinMax",
                "description": "The <code>true</code> value will set the normal data direction for the horizontal axis (from minimum to maximum).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetHorAxisOrientation",
        "longname": "ApiChart#SetHorAxisOrientation",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16583,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/SetHorAxisOrientation.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies the chart legend position.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {\"left\" | \"top\" | \"right\" | \"bottom\" | \"none\"} sLegendPos - The position of the chart legend inside the chart window.\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetLegendPos.js\n\t */",
        "description": "Specifies the chart legend position.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nchart.SetLegendPos(\"right\");\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "\"left\"",
                        "\"top\"",
                        "\"right\"",
                        "\"bottom\"",
                        "\"none\""
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "\"left\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"top\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"right\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"bottom\""
                            },
                            {
                                "type": "NameExpression",
                                "name": "\"none\""
                            }
                        ]
                    }
                },
                "name": "sLegendPos",
                "description": "The position of the chart legend inside the chart window.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetLegendPos",
        "longname": "ApiChart#SetLegendPos",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16594,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/SetLegendPos.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies the legend font size.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {pt} nFontSize - The text size value measured in points.\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetLegendFontSize.js\n\t */",
        "description": "Specifies the legend font size.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nchart.SetLegendFontSize(13);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "pt"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "pt"
                    }
                },
                "name": "nFontSize",
                "description": "The text size value measured in points.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetLegendFontSize",
        "longname": "ApiChart#SetLegendFontSize",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16655,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/SetLegendFontSize.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies which chart data labels are shown for the chart.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {boolean} bShowSerName - Whether to show or hide the source table column names used for the data which the chart will be build from.\n\t * @param {boolean} bShowCatName - Whether to show or hide the source table row names used for the data which the chart will be build from.\n\t * @param {boolean} bShowVal - Whether to show or hide the chart data values.\n\t * @param {boolean} bShowPercent - Whether to show or hide the percent for the data values (works with stacked chart types).\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetShowDataLabels.js\n\t */",
        "description": "Specifies which chart data labels are shown for the chart.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nchart.SetShowDataLabels(false, false, true, false);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bShowSerName",
                "description": "Whether to show or hide the source table column names used for the data which the chart will be build from.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bShowCatName",
                "description": "Whether to show or hide the source table row names used for the data which the chart will be build from.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bShowVal",
                "description": "Whether to show or hide the chart data values.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bShowPercent",
                "description": "Whether to show or hide the percent for the data values (works with stacked chart types).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetShowDataLabels",
        "longname": "ApiChart#SetShowDataLabels",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16670,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/SetShowDataLabels.js"
        ]
    },
    {
        "comment": "/**\n\t * Spicifies the show options for data labels.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {number} nSeriesIndex - The series index from the array of the data used to build the chart from.\n\t * @param {number} nPointIndex - The point index from this series.\n\t * @param {boolean} bShowSerName - Whether to show or hide the source table column names used for the data which the chart will be build from.\n\t * @param {boolean} bShowCatName - Whether to show or hide the source table row names used for the data which the chart will be build from.\n\t * @param {boolean} bShowVal - Whether to show or hide the chart data values.\n\t * @param {boolean} bShowPercent - Whether to show or hide the percent for the data values (works with stacked chart types).\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetShowPointDataLabel.js\n\t */",
        "description": "Spicifies the show options for data labels.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nchart.SetShowPointDataLabel(1, 0, false, false, true, false);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nSeriesIndex",
                "description": "The series index from the array of the data used to build the chart from.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nPointIndex",
                "description": "The point index from this series.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bShowSerName",
                "description": "Whether to show or hide the source table column names used for the data which the chart will be build from.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bShowCatName",
                "description": "Whether to show or hide the source table row names used for the data which the chart will be build from.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bShowVal",
                "description": "Whether to show or hide the chart data values.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bShowPercent",
                "description": "Whether to show or hide the percent for the data values (works with stacked chart types).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetShowPointDataLabel",
        "longname": "ApiChart#SetShowPointDataLabel",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16688,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/SetShowPointDataLabel.js"
        ]
    },
    {
        "comment": "/**\n\t * Spicifies tick labels position for the vertical axis.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {TickLabelPosition} sTickLabelPosition - The type for the position of chart vertical tick labels.\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetVertAxisTickLabelPosition.js\n\t */",
        "description": "Spicifies tick labels position for the vertical axis.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nchart.SetVertAxisTickLabelPosition(\"high\");\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "TickLabelPosition"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "TickLabelPosition"
                    }
                },
                "name": "sTickLabelPosition",
                "description": "The type for the position of chart vertical tick labels.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetVertAxisTickLabelPosition",
        "longname": "ApiChart#SetVertAxisTickLabelPosition",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16700,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/SetVertAxisTickLabelPosition.js"
        ]
    },
    {
        "comment": "/**\n\t * Spicifies tick labels position for the horizontal axis.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {TickLabelPosition} sTickLabelPosition - The type for the position of chart horizontal tick labels.\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetHorAxisTickLabelPosition.js\n\t */",
        "description": "Spicifies tick labels position for the horizontal axis.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nchart.SetHorAxisTickLabelPosition(\"high\");\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "TickLabelPosition"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "TickLabelPosition"
                    }
                },
                "name": "sTickLabelPosition",
                "description": "The type for the position of chart horizontal tick labels.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetHorAxisTickLabelPosition",
        "longname": "ApiChart#SetHorAxisTickLabelPosition",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16712,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/SetHorAxisTickLabelPosition.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies major tick mark for the horizontal axis.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {TickMark} sTickMark - The type of tick mark appearance.\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetHorAxisMajorTickMark.js\n\t */",
        "description": "Specifies major tick mark for the horizontal axis.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"scatter\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nchart.SetHorAxisMajorTickMark(\"cross\");\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetMarkerFill(fill, 0, 0, true);\nlet stroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\nchart.SetMarkerOutLine(stroke, 0, 0, true);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetMarkerFill(fill, 1, 0, true);\nstroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\nchart.SetMarkerOutLine(stroke, 1, 0, true);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "TickMark"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "TickMark"
                    }
                },
                "name": "sTickMark",
                "description": "The type of tick mark appearance.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetHorAxisMajorTickMark",
        "longname": "ApiChart#SetHorAxisMajorTickMark",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16724,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/SetHorAxisMajorTickMark.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies minor tick mark for the horizontal axis.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {TickMark} sTickMark - The type of tick mark appearance.\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetHorAxisMinorTickMark.js\n\t */",
        "description": "Specifies minor tick mark for the horizontal axis.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"scatter\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nchart.SetHorAxisMinorTickMark(\"out\");\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetMarkerFill(fill, 0, 0, true);\nlet stroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\nchart.SetMarkerOutLine(stroke, 0, 0, true);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetMarkerFill(fill, 1, 0, true);\nstroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\nchart.SetMarkerOutLine(stroke, 1, 0, true);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "TickMark"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "TickMark"
                    }
                },
                "name": "sTickMark",
                "description": "The type of tick mark appearance.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetHorAxisMinorTickMark",
        "longname": "ApiChart#SetHorAxisMinorTickMark",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16735,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/SetHorAxisMinorTickMark.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies major tick mark for the vertical axis.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {TickMark} sTickMark - The type of tick mark appearance.\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetVertAxisMajorTickMark.js\n\t */",
        "description": "Specifies major tick mark for the vertical axis.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"scatter\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nchart.SetVertAxisMajorTickMark(\"cross\");\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetMarkerFill(fill, 0, 0, true);\nlet stroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\nchart.SetMarkerOutLine(stroke, 0, 0, true);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetMarkerFill(fill, 1, 0, true);\nstroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\nchart.SetMarkerOutLine(stroke, 1, 0, true);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "TickMark"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "TickMark"
                    }
                },
                "name": "sTickMark",
                "description": "The type of tick mark appearance.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetVertAxisMajorTickMark",
        "longname": "ApiChart#SetVertAxisMajorTickMark",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16747,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/SetVertAxisMajorTickMark.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies minor tick mark for the vertical axis.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {TickMark} sTickMark - The type of tick mark appearance.\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetVertAxisMinorTickMark.js\n\t */",
        "description": "Specifies minor tick mark for the vertical axis.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"scatter\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nchart.SetVertAxisMinorTickMark(\"out\");\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetMarkerFill(fill, 0, 0, true);\nlet stroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\nchart.SetMarkerOutLine(stroke, 0, 0, true);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetMarkerFill(fill, 1, 0, true);\nstroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\nchart.SetMarkerOutLine(stroke, 1, 0, true);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "TickMark"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "TickMark"
                    }
                },
                "name": "sTickMark",
                "description": "The type of tick mark appearance.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetVertAxisMinorTickMark",
        "longname": "ApiChart#SetVertAxisMinorTickMark",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16758,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/SetVertAxisMinorTickMark.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies major vertical gridline visual properties.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {?ApiStroke} oStroke - The stroke used to create the element shadow.\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetMajorVerticalGridlines.js\n\t */",
        "description": "Specifies major vertical gridline visual properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\nlet stroke = Api.CreateStroke(1 * 15000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\nchart.SetMajorVerticalGridlines(stroke);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiStroke"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiStroke",
                        "nullable": true
                    }
                },
                "name": "oStroke",
                "description": "The stroke used to create the element shadow.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetMajorVerticalGridlines",
        "longname": "ApiChart#SetMajorVerticalGridlines",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16769,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/SetMajorVerticalGridlines.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies minor vertical gridline visual properties.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {?ApiStroke} oStroke - The stroke used to create the element shadow.\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetMinorVerticalGridlines.js\n\t */",
        "description": "Specifies minor vertical gridline visual properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\nlet stroke = Api.CreateStroke(1 * 5000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\nchart.SetMinorVerticalGridlines(stroke);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiStroke"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiStroke",
                        "nullable": true
                    }
                },
                "name": "oStroke",
                "description": "The stroke used to create the element shadow.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetMinorVerticalGridlines",
        "longname": "ApiChart#SetMinorVerticalGridlines",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16781,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/SetMinorVerticalGridlines.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies major horizontal gridline visual properties.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {?ApiStroke} oStroke - The stroke used to create the element shadow.\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetMajorHorizontalGridlines.js\n\t */",
        "description": "Specifies major horizontal gridline visual properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\nlet stroke = Api.CreateStroke(1 * 15000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\nchart.SetMajorHorizontalGridlines(stroke);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiStroke"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiStroke",
                        "nullable": true
                    }
                },
                "name": "oStroke",
                "description": "The stroke used to create the element shadow.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetMajorHorizontalGridlines",
        "longname": "ApiChart#SetMajorHorizontalGridlines",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16794,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/SetMajorHorizontalGridlines.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies minor horizontal gridline visual properties.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {?ApiStroke} oStroke - The stroke used to create the element shadow.\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetMinorHorizontalGridlines.js\n\t */",
        "description": "Specifies minor horizontal gridline visual properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\nlet stroke = Api.CreateStroke(1 * 5000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\nchart.SetMinorHorizontalGridlines(stroke);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiStroke"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiStroke",
                        "nullable": true
                    }
                },
                "name": "oStroke",
                "description": "The stroke used to create the element shadow.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetMinorHorizontalGridlines",
        "longname": "ApiChart#SetMinorHorizontalGridlines",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16806,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/SetMinorHorizontalGridlines.js"
        ]
    },
    {
        "comment": "/**\n\t * Removes the specified series from the current chart.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\n\t * @param {number} nSeria - The index of the chart series.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/RemoveSeria.js\n\t */",
        "description": "Removes the specified series from the current chart.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nchart.RemoveSeria(1);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 0, false);\nworksheet.GetRange(\"A5\").SetValue(\"The Estimated Costs series was removed from the current chart.\");\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nSeria",
                "description": "The index of the chart series.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "RemoveSeria",
        "longname": "ApiChart#RemoveSeria",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16898,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/RemoveSeria.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets a style to the current chart by style ID.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\n\t * @param nStyleId - One of the styles available in the editor.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/ApplyChartStyle.js\n\t */",
        "description": "Sets a style to the current chart by style ID.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nchart.ApplyChartStyle(2);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nlet stroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\nchart.SetSeriesOutLine(stroke, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\nstroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\nchart.SetSeriesOutLine(stroke, 1, false);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": null,
                "name": "nStyleId",
                "description": "One of the styles available in the editor.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "ApplyChartStyle",
        "longname": "ApiChart#ApplyChartStyle",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16968,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/ApplyChartStyle.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the fill to the chart plot area.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\n\t * @param {ApiFill} oFill - The fill type used to fill the plot area.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetPlotAreaFill.js\n\t */",
        "description": "Sets the fill to the chart plot area.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(128, 128, 128));\nchart.SetPlotAreaFill(fill);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                },
                "name": "oFill",
                "description": "The fill type used to fill the plot area.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetPlotAreaFill",
        "longname": "ApiChart#SetPlotAreaFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16993,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/SetPlotAreaFill.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the outline to the chart plot area.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\n\t * @param {ApiStroke} oStroke - The stroke used to create the plot area outline.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetPlotAreaOutLine.js\n\t */",
        "description": "Sets the outline to the chart plot area.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\nlet stroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\nchart.SetPlotAreaOutLine(stroke);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiStroke"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiStroke"
                    }
                },
                "name": "oStroke",
                "description": "The stroke used to create the plot area outline.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetPlotAreaOutLine",
        "longname": "ApiChart#SetPlotAreaOutLine",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17010,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/SetPlotAreaOutLine.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the fill to the specified chart series.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\n\t * @param {ApiFill} oFill - The fill type used to fill the series.\n\t * @param {number} nSeries - The index of the chart series.\n\t * @param {boolean} [bAll=false] - Specifies if the fill will be applied to all series.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetSeriesFill.js\n\t */",
        "description": "Sets the fill to the specified chart series.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                },
                "name": "oFill",
                "description": "The fill type used to fill the series.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nSeries",
                "description": "The index of the chart series.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bAll",
                "description": "Specifies if the fill will be applied to all series.",
                "optional": true,
                "defaultvalue": false
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetSeriesFill",
        "longname": "ApiChart#SetSeriesFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17029,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/SetSeriesFill.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the outline to the specified chart series.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\n\t * @param {ApiStroke} oStroke - The stroke used to create the series outline.\n\t * @param {number} nSeries - The index of the chart series.\n\t * @param {boolean} [bAll=false] - Specifies if the outline will be applied to all series.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetSeriesOutLine.js\n\t */",
        "description": "Sets the outline to the specified chart series.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\nlet stroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\nchart.SetSeriesOutLine(stroke, 1, false);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiStroke"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiStroke"
                    }
                },
                "name": "oStroke",
                "description": "The stroke used to create the series outline.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nSeries",
                "description": "The index of the chart series.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bAll",
                "description": "Specifies if the outline will be applied to all series.",
                "optional": true,
                "defaultvalue": false
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetSeriesOutLine",
        "longname": "ApiChart#SetSeriesOutLine",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17047,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/SetSeriesOutLine.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the fill to the data point in the specified chart series.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\n\t * @param {ApiFill} oFill - The fill type used to fill the data point.\n\t * @param {number} nSeries - The index of the chart series.\n\t * @param {number} nDataPoint - The index of the data point in the specified chart series.\n\t * @param {boolean} [bAllSeries=false] - Specifies if the fill will be applied to the specified data point in all series.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetDataPointFill.js\n\t */",
        "description": "Sets the fill to the data point in the specified chart series.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(128, 128, 128));\nchart.SetDataPointFill(fill, 0, 0, false);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                },
                "name": "oFill",
                "description": "The fill type used to fill the data point.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nSeries",
                "description": "The index of the chart series.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nDataPoint",
                "description": "The index of the data point in the specified chart series.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bAllSeries",
                "description": "Specifies if the fill will be applied to the specified data point in all series.",
                "optional": true,
                "defaultvalue": false
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetDataPointFill",
        "longname": "ApiChart#SetDataPointFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17066,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/SetDataPointFill.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the outline to the data point in the specified chart series.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\n\t * @param {ApiStroke} oStroke - The stroke used to create the data point outline.\n\t * @param {number} nSeries - The index of the chart series.\n\t * @param {number} nDataPoint - The index of the data point in the specified chart series.\n\t * @param {boolean} bAllSeries - Specifies if the outline will be applied to the specified data point in all series.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetDataPointOutLine.js\n\t */",
        "description": "Sets the outline to the data point in the specified chart series.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\nlet stroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\nchart.SetDataPointOutLine(stroke, 1, 0, false);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiStroke"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiStroke"
                    }
                },
                "name": "oStroke",
                "description": "The stroke used to create the data point outline.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nSeries",
                "description": "The index of the chart series.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nDataPoint",
                "description": "The index of the data point in the specified chart series.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bAllSeries",
                "description": "Specifies if the outline will be applied to the specified data point in all series.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetDataPointOutLine",
        "longname": "ApiChart#SetDataPointOutLine",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17085,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/SetDataPointOutLine.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the fill to the marker in the specified chart series.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\n\t * @param {ApiFill} oFill - The fill type used to fill the marker.\n\t * @param {number} nSeries - The index of the chart series.\n\t * @param {number} nMarker - The index of the marker in the specified chart series.\n\t * @param {boolean} [bAllMarkers=false] - Specifies if the fill will be applied to all markers in the specified chart series.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetMarkerFill.js\n\t */",
        "description": "Sets the fill to the marker in the specified chart series.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"scatter\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetMarkerFill(fill, 0, 0, true);\nlet stroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\nchart.SetMarkerOutLine(stroke, 0, 0, true);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetMarkerFill(fill, 1, 0, true);\nstroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\nchart.SetMarkerOutLine(stroke, 1, 0, true);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                },
                "name": "oFill",
                "description": "The fill type used to fill the marker.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nSeries",
                "description": "The index of the chart series.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nMarker",
                "description": "The index of the marker in the specified chart series.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bAllMarkers",
                "description": "Specifies if the fill will be applied to all markers in the specified chart series.",
                "optional": true,
                "defaultvalue": false
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetMarkerFill",
        "longname": "ApiChart#SetMarkerFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17104,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/SetMarkerFill.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the outline to the marker in the specified chart series.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\n\t * @param {ApiStroke} oStroke - The stroke used to create the marker outline.\n\t * @param {number} nSeries - The index of the chart series.\n\t * @param {number} nMarker - The index of the marker in the specified chart series.\n\t * @param {boolean} [bAllMarkers=false] - Specifies if the outline will be applied to all markers in the specified chart series.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetMarkerOutLine.js\n\t */",
        "description": "Sets the outline to the marker in the specified chart series.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"scatter\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetMarkerFill(fill, 0, 0, true);\nlet stroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\nchart.SetMarkerOutLine(stroke, 0, 0, true);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetMarkerFill(fill, 1, 0, true);\nchart.SetMarkerOutLine(stroke, 1, 0, true);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiStroke"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiStroke"
                    }
                },
                "name": "oStroke",
                "description": "The stroke used to create the marker outline.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nSeries",
                "description": "The index of the chart series.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nMarker",
                "description": "The index of the marker in the specified chart series.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bAllMarkers",
                "description": "Specifies if the outline will be applied to all markers in the specified chart series.",
                "optional": true,
                "defaultvalue": false
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetMarkerOutLine",
        "longname": "ApiChart#SetMarkerOutLine",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17123,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/SetMarkerOutLine.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the fill to the chart title.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\n\t * @param {ApiFill} oFill - The fill type used to fill the title.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetTitleFill.js\n\t */",
        "description": "Sets the fill to the chart title.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(128, 128, 128));\nchart.SetTitleFill(fill);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                },
                "name": "oFill",
                "description": "The fill type used to fill the title.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetTitleFill",
        "longname": "ApiChart#SetTitleFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17139,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/SetTitleFill.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the outline to the chart title.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\n\t * @param {ApiStroke} oStroke - The stroke used to create the title outline.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetTitleOutLine.js\n\t */",
        "description": "Sets the outline to the chart title.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\nlet stroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\nchart.SetTitleOutLine(stroke);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiStroke"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiStroke"
                    }
                },
                "name": "oStroke",
                "description": "The stroke used to create the title outline.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetTitleOutLine",
        "longname": "ApiChart#SetTitleOutLine",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17155,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/SetTitleOutLine.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the fill to the chart legend.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\n\t * @param {ApiFill} oFill - The fill type used to fill the legend.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetLegendFill.js\n\t */",
        "description": "Sets the fill to the chart legend.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(128, 128, 128));\nchart.SetLegendFill(fill);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                },
                "name": "oFill",
                "description": "The fill type used to fill the legend.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetLegendFill",
        "longname": "ApiChart#SetLegendFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17171,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/SetLegendFill.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the outline to the chart legend.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\n\t * @param {ApiStroke} oStroke - The stroke used to create the legend outline.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetLegendOutLine.js\n\t */",
        "description": "Sets the outline to the chart legend.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\nlet stroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\nchart.SetLegendOutLine(stroke);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiStroke"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiStroke"
                    }
                },
                "name": "oStroke",
                "description": "The stroke used to create the legend outline.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetLegendOutLine",
        "longname": "ApiChart#SetLegendOutLine",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17187,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/SetLegendOutLine.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the specified numeric format to the axis values.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\n\t * @param {NumFormat | String} sFormat - Numeric format (can be custom format).\n\t * @param {AxisPos} - Axis position in the chart.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetAxieNumFormat.js\n\t */",
        "description": "Sets the specified numeric format to the axis values.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nchart.SetAxieNumFormat(\"0.00\", \"left\");\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "NumFormat",
                        "String"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "NumFormat"
                            },
                            {
                                "type": "NameExpression",
                                "name": "String"
                            }
                        ]
                    }
                },
                "name": "sFormat",
                "description": "Numeric format (can be custom format).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "AxisPos"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "AxisPos"
                    }
                },
                "name": "sAxiePos",
                "description": "Axis position in the chart.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetAxieNumFormat",
        "longname": "ApiChart#SetAxieNumFormat",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17204,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/SetAxieNumFormat.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns all series from the chart space.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\n\t * @returns {ApiChartSeries[]}\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/GetAllSeries.js\n\t */",
        "description": "Returns all series from the chart space.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"comboBarLine\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\nlet allSeries = chart.GetAllSeries();\nlet series, seriesType;\nfor(let seriesIndex = 0; seriesIndex < allSeries.length; ++seriesIndex) {\n    series = allSeries[seriesIndex];\n    seriesType = series.GetChartType();\n    worksheet.GetRange(\"F\" + (seriesIndex + 1)).SetValue((seriesIndex + 1) + \" Series Type = \" + seriesType);\n}\n```",
        "memberof": "ApiChart",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ApiChartSeries>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiChartSeries",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetAllSeries",
        "longname": "ApiChart#GetAllSeries",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17265,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/GetAllSeries.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the series with a specific index.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\n\t * @param {number} nIdx - Series index.\n\t * @returns {?ApiChartSeries}\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/GetSeries.js\n\t */",
        "description": "Returns the series with a specific index.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"comboBarLine\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\nlet series = chart.GetSeries(0);\nlet seriesType = series.GetChartType();\nworksheet.GetRange(\"F1\").SetValue(\"1 Series Type = \" + seriesType);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nIdx",
                "description": "Series index.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiChartSeries"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiChartSeries",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetSeries",
        "longname": "ApiChart#GetSeries",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17287,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/GetSeries.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the ApiChartSeries class.\n\t * @memberof ApiChartSeries\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\n\t * @returns {\"chartSeries\"}\n\t * @see office-js-api/Examples/{Editor}/ApiChartSeries/Methods/GetClassType.js\n\t */",
        "description": "Returns a type of the ApiChartSeries class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"comboBarLine\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\nlet series = chart.GetSeries(0);\nlet classType = series.GetClassType();\nworksheet.GetRange(\"F1\").SetValue(\"Class Type = \" + classType);\n```",
        "memberof": "ApiChartSeries",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"chartSeries\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"chartSeries\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiChartSeries#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17314,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChartSeries/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\n\t * Tries to change the series type. Returns true if successful.\n\t * @memberof ApiChartSeries\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\n\t * @param {ChartType} sType - Chart type.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiChartSeries/Methods/ChangeChartType.js\n\t */",
        "description": "Tries to change the series type. Returns true if successful.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"comboBarLine\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\nlet series = chart.GetSeries(0);\nlet seriesType = series.GetChartType();\nworksheet.GetRange(\"F1\").SetValue(\"Old Series Type = \" + seriesType);\nseries.ChangeChartType(\"area\");\nseriesType = series.GetChartType();\nworksheet.GetRange(\"F2\").SetValue(\"New Series Type = \" + seriesType);\n```",
        "memberof": "ApiChartSeries",
        "params": [
            {
                "type": {
                    "names": [
                        "ChartType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ChartType"
                    }
                },
                "name": "sType",
                "description": "Chart type.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "ChangeChartType",
        "longname": "ApiChartSeries#ChangeChartType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17327,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChartSeries/Methods/ChangeChartType.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a chart type of the current series.\n\t * @memberof ApiChartSeries\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\n\t * @returns {ChartType}\n\t * @see office-js-api/Examples/{Editor}/ApiChartSeries/Methods/GetChartType.js\n\t */",
        "description": "Returns a chart type of the current series.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"comboBarLine\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 5, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\nlet series = chart.GetSeries(0);\nlet seriesType = series.GetChartType();\nworksheet.GetRange(\"F1\").SetValue(\"Series Type = \" + seriesType);\n```",
        "memberof": "ApiChartSeries",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ChartType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ChartType"
                    }
                }
            }
        ],
        "name": "GetChartType",
        "longname": "ApiChartSeries#GetChartType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17346,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChartSeries/Methods/GetChartType.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the ApiFill class.\n\t * @memberof ApiFill\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {\"fill\"}\n\t * @see office-js-api/Examples/{Editor}/ApiFill/Methods/GetClassType.js\n\t */",
        "description": "Returns a type of the ApiFill class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet gradientStop1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nlet gradientStop2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nlet fill = Api.CreateLinearGradientFill([gradientStop1, gradientStop2], 5400000);\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nworksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 1, 3 * 36000);\nlet classType = fill.GetClassType();\nworksheet.SetColumnWidth(0, 15);\nworksheet.SetColumnWidth(1, 10);\nworksheet.GetRange(\"A1\").SetValue(\"Class Type = \" + classType);\n```",
        "memberof": "ApiFill",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"fill\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"fill\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiFill#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17414,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiFill/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the ApiStroke class.\n\t * @memberof ApiStroke\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {\"stroke\"}\n\t * @see office-js-api/Examples/{Editor}/ApiStroke/Methods/GetClassType.js\n\t */",
        "description": "Returns a type of the ApiStroke class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet gradientStop1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nlet gradientStop2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nlet fill = Api.CreateLinearGradientFill([gradientStop1, gradientStop2], 5400000);\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nworksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 1, 3 * 36000);\nlet classType = stroke.GetClassType();\nworksheet.SetColumnWidth(0, 15);\nworksheet.SetColumnWidth(1, 10);\nworksheet.GetRange(\"A1\").SetValue(\"Class Type = \");\nworksheet.GetRange(\"B1\").SetValue(classType);\n```",
        "memberof": "ApiStroke",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"stroke\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"stroke\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiStroke#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17444,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiStroke/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the ApiGradientStop class.\n\t * @memberof ApiGradientStop\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {\"gradientStop\"}\n\t * @see office-js-api/Examples/{Editor}/ApiGradientStop/Methods/GetClassType.js\n\t */",
        "description": "Returns a type of the ApiGradientStop class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet gradientStop1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nlet gradientStop2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nlet fill = Api.CreateLinearGradientFill([gradientStop1, gradientStop2], 5400000);\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nworksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 1, 3 * 36000);\nlet classType = gradientStop1.GetClassType();\nworksheet.SetColumnWidth(0, 15);\nworksheet.SetColumnWidth(1, 10);\nworksheet.GetRange(\"A1\").SetValue(\"Class Type = \" + classType);\n```",
        "memberof": "ApiGradientStop",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"gradientStop\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"gradientStop\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiGradientStop#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17474,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiGradientStop/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the ApiUniColor class.\n\t * @memberof ApiUniColor\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {\"uniColor\"}\n\t * @see office-js-api/Examples/{Editor}/ApiUniColor/Methods/GetClassType.js\n\t */",
        "description": "Returns a type of the ApiUniColor class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nvar oWorksheet = Api.GetActiveSheet();\nvar oPresetColor = Api.CreatePresetColor(\"peachPuff\");\nvar oGs1 = Api.CreateGradientStop(oPresetColor, 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateLinearGradientFill([oGs1, oGs2], 5400000);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\noWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 1, 3 * 36000);\nvar sClassType = oPresetColor.GetClassType();\noWorksheet.SetColumnWidth(0, 15);\noWorksheet.SetColumnWidth(1, 10);\noWorksheet.GetRange(\"A1\").SetValue(\"Class Type = \");\noWorksheet.GetRange(\"B1\").SetValue(sClassType);\n```",
        "memberof": "ApiUniColor",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"uniColor\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"uniColor\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiUniColor#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17504,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiUniColor/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the ApiRGBColor class.\n\t * @memberof ApiRGBColor\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {\"rgbColor\"}\n\t * @see office-js-api/Examples/{Editor}/ApiRGBColor/Methods/GetClassType.js\n\t */",
        "description": "Returns a type of the ApiRGBColor class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nvar oWorksheet = Api.GetActiveSheet();\nvar oRGBColor = Api.CreateRGBColor(255, 213, 191);\nvar oGs1 = Api.CreateGradientStop(oRGBColor, 0);\nvar oGs2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nvar oFill = Api.CreateLinearGradientFill([oGs1, oGs2], 5400000);\nvar oStroke = Api.CreateStroke(0, Api.CreateNoFill());\noWorksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, oFill, oStroke, 0, 2 * 36000, 1, 3 * 36000);\nvar sClassType = oRGBColor.GetClassType();\noWorksheet.SetColumnWidth(0, 15);\noWorksheet.SetColumnWidth(1, 10);\noWorksheet.GetRange(\"A1\").SetValue(\"Class Type = \");\noWorksheet.GetRange(\"B1\").SetValue(sClassType);\n```",
        "memberof": "ApiRGBColor",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"rgbColor\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"rgbColor\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiRGBColor#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17553,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRGBColor/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the ApiSchemeColor class.\n\t * @memberof ApiSchemeColor\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {\"schemeColor\"}\n\t * @see office-js-api/Examples/{Editor}/ApiSchemeColor/Methods/GetClassType.js\n\t */",
        "description": "Returns a type of the ApiSchemeColor class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet schemeColor = Api.CreateSchemeColor(\"dk1\");\nlet fill = Api.CreateSolidFill(schemeColor);\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nworksheet.AddShape(\"curvedUpArrow\", 60 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 1, 3 * 36000);\nlet classType = schemeColor.GetClassType();\nworksheet.SetColumnWidth(0, 15);\nworksheet.SetColumnWidth(1, 10);\nworksheet.GetRange(\"A1\").SetValue(\"Class Type = \");\nworksheet.GetRange(\"B1\").SetValue(classType);\n```",
        "memberof": "ApiSchemeColor",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"schemeColor\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"schemeColor\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiSchemeColor#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17583,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiSchemeColor/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the ApiPresetColor class.\n\t * @memberof ApiPresetColor\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {\"presetColor\"}\n\t * @see office-js-api/Examples/{Editor}/ApiPresetColor/Methods/GetClassType.js\n\t */",
        "description": "Returns a type of the ApiPresetColor class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet presetColor = Api.CreatePresetColor(\"peachPuff\");\nlet gradientStop1 = Api.CreateGradientStop(presetColor, 0);\nlet gradientStop2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nlet fill = Api.CreateLinearGradientFill([gradientStop1, gradientStop2], 5400000);\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nworksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 1, 3 * 36000);\nlet classType = presetColor.GetClassType();\nworksheet.SetColumnWidth(0, 15);\nworksheet.SetColumnWidth(1, 10);\nworksheet.GetRange(\"A1\").SetValue(\"Class Type = \");\nworksheet.GetRange(\"B1\").SetValue(classType);\n```",
        "memberof": "ApiPresetColor",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"presetColor\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"presetColor\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiPresetColor#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17613,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPresetColor/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the ApiBullet class.\n\t * @memberof ApiBullet\n\t * @typeofeditors [\"CSE\", \"CPE\"]\n\t * @returns {\"bullet\"}\n\t * @see office-js-api/Examples/{Editor}/ApiBullet/Methods/GetClassType.js\n\t */",
        "description": "Returns a type of the ApiBullet class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet docContent = shape.GetContent();\nlet paragraph = docContent.GetElement(0);\nlet bullet = Api.CreateNumbering(\"ArabicParenR\", 1);\nparagraph.SetBullet(bullet);\nparagraph.AddText(\" This is an example of the bulleted paragraph.\");\nparagraph = Api.CreateParagraph();\nparagraph.SetBullet(bullet);\nparagraph.AddText(\" This is an example of the bulleted paragraph.\");\ndocContent.Push(paragraph);\nlet classType = bullet.GetClassType();\nparagraph = Api.CreateParagraph();\nparagraph.SetJc(\"left\");\nparagraph.AddText(\"Class Type = \" + classType);\ndocContent.Push(paragraph);\n```",
        "memberof": "ApiBullet",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"bullet\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"bullet\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiBullet#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17637,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiBullet/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\n\t * Replaces each paragraph (or text in cell) in the select with the corresponding text from an array of strings.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {Array} textStrings - An array of replacement strings.\n\t * @param {string} [tab=\"\\t\"] - A character which is used to specify the tab in the source text.\n\t * @param {string} [newLine=\"\\r\\n\"] - A character which is used to specify the line break character in the source text.\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/ReplaceTextSmart.js\n\t */",
        "description": "Replaces each paragraph (or text in cell) in the select with the corresponding text from an array of strings.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nworksheet.GetRange(\"A2\").SetValue(\"2\");\nlet range = worksheet.GetRange(\"A1:A2\");\nrange.Select();\nApi.ReplaceTextSmart([\"Cell 1\", \"Cell 2\"]);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Array"
                    }
                },
                "name": "textStrings",
                "description": "An array of replacement strings.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "tab",
                "description": "A character which is used to specify the tab in the source text.",
                "optional": true,
                "defaultvalue": "\"\\t\""
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "newLine",
                "description": "A character which is used to specify the line break character in the source text.",
                "optional": true,
                "defaultvalue": "\"\\r\\n\""
            }
        ],
        "returns": null,
        "name": "ReplaceTextSmart",
        "longname": "Api#ReplaceTextSmart",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 20677,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/ReplaceTextSmart.js"
        ]
    },
    {
        "comment": "/**\n\t * Creates the empty text properties.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {ApiTextPr}\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/CreateTextPr.js\n\t */",
        "description": "Creates the empty text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 80 * 36000, 50 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet docContent = shape.GetContent();\ndocContent.RemoveAllElements();\nlet textPr = Api.CreateTextPr();\ntextPr.SetFontSize(30);\ntextPr.SetBold(true);\nlet paragraph = Api.CreateParagraph();\nparagraph.SetJc(\"left\");\nparagraph.AddText(\"This is a sample text with the font size set to 30 and the font weight set to bold.\");\nparagraph.SetTextPr(textPr);\ndocContent.Push(paragraph);\n```",
        "memberof": "Api",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "CreateTextPr",
        "longname": "Api#CreateTextPr",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 21128,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/CreateTextPr.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the full name of the currently opened file.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/GetFullName.js\n\t */",
        "description": "Returns the full name of the currently opened file.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet name = Api.GetFullName();\nworksheet.GetRange(\"B1\").SetValue(\"File name: \" + name);\n```",
        "memberof": "Api",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetFullName",
        "longname": "Api#GetFullName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 21173,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/GetFullName.js"
        ]
    },
    {
        "comment": "/**\n    * A bullet type which will be added to the paragraph in spreadsheet or presentation.\n    * @typedef {(\"None\" | \"ArabicPeriod\"  | \"ArabicParenR\"  | \"RomanUcPeriod\" | \"RomanLcPeriod\" | \"AlphaLcParenR\" | \"AlphaLcPeriod\" | \"AlphaUcParenR\" | \"AlphaUcPeriod\")} BulletType\n    * @see office-js-api/Examples/Enumerations/BulletType.js\n\t */",
        "description": "A bullet type which will be added to the paragraph in spreadsheet or presentation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n// The paragraph will be starting with the Arabic numeral which has parenthesis\nlet bullet = Api.CreateNumbering(\"ArabicParenR\");\n```",
        "name": "BulletType",
        "longname": "BulletType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 271,
            "columnno": 4
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/BulletType.js"
        ],
        "type": {
            "names": [
                "\"None\"",
                "\"ArabicPeriod\"",
                "\"ArabicParenR\"",
                "\"RomanUcPeriod\"",
                "\"RomanLcPeriod\"",
                "\"AlphaLcParenR\"",
                "\"AlphaLcPeriod\"",
                "\"AlphaUcParenR\"",
                "\"AlphaUcPeriod\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"None\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ArabicPeriod\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ArabicParenR\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"RomanUcPeriod\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"RomanLcPeriod\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"AlphaLcParenR\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"AlphaLcPeriod\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"AlphaUcParenR\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"AlphaUcPeriod\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n     * @typedef {(\"body\" | \"chart\" | \"clipArt\" | \"ctrTitle\" | \"diagram\" | \"date\" | \"footer\" | \"header\" | \"media\" | \"object\" | \"picture\" | \"sldImage\" | \"sldNumber\" | \"subTitle\" | \"table\" | \"title\")} PlaceholderType - Available placeholder types.\n     */",
        "description": "Available placeholder types.",
        "name": "PlaceholderType",
        "longname": "PlaceholderType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 355,
            "columnno": 4
        },
        "properties": null,
        "see": null,
        "type": {
            "names": [
                "\"body\"",
                "\"chart\"",
                "\"clipArt\"",
                "\"ctrTitle\"",
                "\"diagram\"",
                "\"date\"",
                "\"footer\"",
                "\"header\"",
                "\"media\"",
                "\"object\"",
                "\"picture\"",
                "\"sldImage\"",
                "\"sldNumber\"",
                "\"subTitle\"",
                "\"table\"",
                "\"title\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"body\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"chart\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"clipArt\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ctrTitle\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"diagram\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"date\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"footer\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"header\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"media\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"object\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"picture\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"sldImage\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"sldNumber\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"subTitle\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"table\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"title\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Represents the type of objects in a selection.\n\t * @typedef {(\"none\" | \"shapes\" | \"slides\" | \"text\")} SelectionType - Available selection types.\n\t *\n\t */",
        "description": "Represents the type of objects in a selection.",
        "name": "SelectionType",
        "longname": "SelectionType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 389,
            "columnno": 4
        },
        "properties": null,
        "see": null,
        "type": {
            "names": [
                "\"none\"",
                "\"shapes\"",
                "\"slides\"",
                "\"text\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"none\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"shapes\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"slides\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"text\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Class representing a sheet.\n\t * @constructor\n\t * @property {boolean} Visible - Returns or sets the state of sheet visibility.\n\t * @property {number} Active - Makes the current sheet active.\n\t * @property {ApiRange} ActiveCell - Returns an object that represents an active cell.\n\t * @property {ApiRange} Selection - Returns an object that represents the selected range.\n\t * @property {ApiRange} Cells - Returns ApiRange that represents all the cells on the worksheet (not just the cells that are currently in use).\n\t * @property {ApiRange} Rows - Returns ApiRange that represents all the cells of the rows range.\n\t * @property {ApiRange} Cols - Returns ApiRange that represents all the cells of the columns range.\n\t * @property {ApiRange} UsedRange - Returns ApiRange that represents the used range on the specified worksheet.\n\t * @property {string} Name - Returns or sets a name of the active sheet.\n\t * @property {number} Index - Returns a sheet index.\n\t * @property {number} LeftMargin - Returns or sets the size of the sheet left margin measured in points.\n\t * @property {number} RightMargin - Returns or sets the size of the sheet right margin measured in points.\n\t * @property {number} TopMargin - Returns or sets the size of the sheet top margin measured in points.\n\t * @property {number} BottomMargin - Returns or sets the size of the sheet bottom margin measured in points.\n\t * @property {PageOrientation} PageOrientation - Returns or sets the page orientation.\n\t * @property {boolean} PrintHeadings - Returns or sets the page PrintHeadings property.\n\t * @property {boolean} PrintGridlines - Returns or sets the page PrintGridlines property.\n\t * @property {Array} Defnames - Returns an array of the ApiName objects.\n\t * @property {Array} Comments - Returns all comments from the current worksheet.\n\t * @property {ApiFreezePanes} FreezePanes - Returns the freeze panes for the current worksheet.\n\t * @property {ApiProtectedRange[]} AllProtectedRanges - Returns all protected ranges from the current worksheet.\n\t * @property {ApiPivotTable[]} PivotTables - Returns all pivot tables from the current worksheet.\n\t */",
        "description": "Class representing a sheet.",
        "name": "ApiWorksheet",
        "longname": "ApiWorksheet",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 94,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "Visible",
                "description": "Returns or sets the state of sheet visibility.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "Active",
                "description": "Makes the current sheet active.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                },
                "name": "ActiveCell",
                "description": "Returns an object that represents an active cell.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                },
                "name": "Selection",
                "description": "Returns an object that represents the selected range.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                },
                "name": "Cells",
                "description": "Returns ApiRange that represents all the cells on the worksheet (not just the cells that are currently in use).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                },
                "name": "Rows",
                "description": "Returns ApiRange that represents all the cells of the rows range.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                },
                "name": "Cols",
                "description": "Returns ApiRange that represents all the cells of the columns range.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                },
                "name": "UsedRange",
                "description": "Returns ApiRange that represents the used range on the specified worksheet.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Name",
                "description": "Returns or sets a name of the active sheet.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "Index",
                "description": "Returns a sheet index.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "LeftMargin",
                "description": "Returns or sets the size of the sheet left margin measured in points.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "RightMargin",
                "description": "Returns or sets the size of the sheet right margin measured in points.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "TopMargin",
                "description": "Returns or sets the size of the sheet top margin measured in points.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "BottomMargin",
                "description": "Returns or sets the size of the sheet bottom margin measured in points.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "PageOrientation"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PageOrientation"
                    }
                },
                "name": "PageOrientation",
                "description": "Returns or sets the page orientation.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "PrintHeadings",
                "description": "Returns or sets the page PrintHeadings property.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "PrintGridlines",
                "description": "Returns or sets the page PrintGridlines property.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Array"
                    }
                },
                "name": "Defnames",
                "description": "Returns an array of the ApiName objects.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Array"
                    }
                },
                "name": "Comments",
                "description": "Returns all comments from the current worksheet.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiFreezePanes"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFreezePanes"
                    }
                },
                "name": "FreezePanes",
                "description": "Returns the freeze panes for the current worksheet.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "Array.<ApiProtectedRange>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiProtectedRange",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "AllProtectedRanges",
                "description": "Returns all protected ranges from the current worksheet.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "Array.<ApiPivotTable>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiPivotTable",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "PivotTables",
                "description": "Returns all pivot tables from the current worksheet.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "see": null
    },
    {
        "comment": "/**\n\t * The page orientation type.\n\t * @typedef {(\"xlLandscape\" | \"xlPortrait\")} PageOrientation\n\t * @see office-js-api/Examples/Enumerations/PageOrientation.js\n\t */",
        "description": "The page orientation type.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nworksheet.SetPageOrientation(\"xlPortrait\");\n```",
        "name": "PageOrientation",
        "longname": "PageOrientation",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 238,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/PageOrientation.js"
        ],
        "type": {
            "names": [
                "\"xlLandscape\"",
                "\"xlPortrait\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"xlLandscape\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlPortrait\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * The cell reference type.\n\t * @typedef {('xlA1' | 'xlR1C1')} ReferenceStyle\n\t * @see office-js-api/Examples/Enumerations/ReferenceStyle.js\n\t */",
        "description": "The cell reference type.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nbuilder.CreateFile(\"xlsx\");\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(Api.GetReferenceStyle());\nbuilder.SaveFile(\"xlsx\", \"ReferenceStyle.xlsx\");\nbuilder.CloseFile();\n```",
        "name": "ReferenceStyle",
        "longname": "ReferenceStyle",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 276,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/ReferenceStyle.js"
        ],
        "type": {
            "names": [
                "'xlA1'",
                "'xlR1C1'"
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "'xlA1'"
                    },
                    {
                        "type": "NameExpression",
                        "name": "'xlR1C1'"
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Specifies the part of the range to be pasted.\n\t * @typedef {(\"xlPasteAll\" | \"xlPasteAllExceptBorders\"\n\t * | \"xlPasteColumnWidths\" | \"xlPasteComments\"\n\t * | \"xlPasteFormats\" | \"xlPasteFormulas\" | \"xlPasteFormulasAndNumberFormats\"\n\t * | \"xlPasteValues\" | \"xlPasteValuesAndNumberFormats\" )} PasteType\n\t * @see office-js-api/Examples/Enumerations/PasteType.js\n\t */",
        "description": "Specifies the part of the range to be pasted.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nrange.PasteSpecial(\"xlPasteAll\");\n```",
        "name": "PasteType",
        "longname": "PasteType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 283,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/PasteType.js"
        ],
        "type": {
            "names": [
                "\"xlPasteAll\"",
                "\"xlPasteAllExceptBorders\"",
                "\"xlPasteColumnWidths\"",
                "\"xlPasteComments\"",
                "\"xlPasteFormats\"",
                "\"xlPasteFormulas\"",
                "\"xlPasteFormulasAndNumberFormats\"",
                "\"xlPasteValues\"",
                "\"xlPasteValuesAndNumberFormats\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"xlPasteAll\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlPasteAllExceptBorders\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlPasteColumnWidths\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlPasteComments\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlPasteFormats\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlPasteFormulas\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlPasteFormulasAndNumberFormats\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlPasteValues\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlPasteValuesAndNumberFormats\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * The mathematical operation which will be applied to the copied data.\n\t * @typedef {(\"xlPasteSpecialOperationAdd\" | \"xlPasteSpecialOperationDivide\" | \"xlPasteSpecialOperationMultiply\"|\n\t * \"xlPasteSpecialOperationNone\" | \"xlPasteSpecialOperationSubtract\" )} PasteSpecialOperation\n\t * @see office-js-api/Examples/Enumerations/PasteSpecialOperation.js\n\t */",
        "description": "The mathematical operation which will be applied to the copied data.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nrange.PasteSpecial(\"xlPasteAll\", \"xlPasteSpecialOperationAdd\");\n```",
        "name": "PasteSpecialOperation",
        "longname": "PasteSpecialOperation",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 292,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/PasteSpecialOperation.js"
        ],
        "type": {
            "names": [
                "\"xlPasteSpecialOperationAdd\"",
                "\"xlPasteSpecialOperationDivide\"",
                "\"xlPasteSpecialOperationMultiply\"",
                "\"xlPasteSpecialOperationNone\"",
                "\"xlPasteSpecialOperationSubtract\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"xlPasteSpecialOperationAdd\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlPasteSpecialOperationDivide\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlPasteSpecialOperationMultiply\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlPasteSpecialOperationNone\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlPasteSpecialOperationSubtract\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t* Specifies how to shift cells to replace deleted cells.\n\t* @typedef {(\"up\" | \"left\")} DeleteShiftDirection\n\t* @see office-js-api/Examples/Enumerations/DeleteShiftDirection.js\n\t*/",
        "description": "Specifies how to shift cells to replace deleted cells.",
        "name": "DeleteShiftDirection",
        "longname": "DeleteShiftDirection",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 299,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/DeleteShiftDirection.js"
        ],
        "type": {
            "names": [
                "\"up\"",
                "\"left\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"up\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"left\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * @typedef {object} PivotTableFilterAreaInfo\n\t * @property {FieldsInReportFilterType} Type - Specifies how the report filter fields are located.\n\t * @property {number} ReportFilterFields - Defines the number of the report filter fields.\n\t */",
        "description": null,
        "name": "PivotTableFilterAreaInfo",
        "longname": "PivotTableFilterAreaInfo",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 317,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "FieldsInReportFilterType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "FieldsInReportFilterType"
                    }
                },
                "name": "Type",
                "description": "Specifies how the report filter fields are located.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "ReportFilterFields",
                "description": "Defines the number of the report filter fields.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "see": null,
        "type": {
            "names": [
                "object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "object"
            }
        }
    },
    {
        "comment": "/**\n\t * @typedef {object} PivotTableFieldOptions\n\t * @property {number | string | number[] | string[]} [rows] - An array of field names or IDs to be added as rows or added to the category axis.\n\t * @property {number | string | number[] | string[]} [columns] - An array of field names or IDs to be added as columns or added to the series axis.\n\t * @property {number | string | number[] | string[]} [pages] - An array of field names or IDs to be added as pages or added to the page area.\n\t * @property {boolean} [addToTable=false] - Specifies whether to apply fields only to the pivot table reports. If `true`, the specified fields will be added to the report \n\t * without replacing existing fields. If `false`, existing fields will be replaced with the new fields.\n\t */",
        "description": null,
        "name": "PivotTableFieldOptions",
        "longname": "PivotTableFieldOptions",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 323,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number",
                        "string",
                        "Array.<number>",
                        "Array.<string>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "string",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "rows",
                "description": "An array of field names or IDs to be added as rows or added to the category axis.",
                "optional": true,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number",
                        "string",
                        "Array.<number>",
                        "Array.<string>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "string",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "columns",
                "description": "An array of field names or IDs to be added as columns or added to the series axis.",
                "optional": true,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number",
                        "string",
                        "Array.<number>",
                        "Array.<string>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "string",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "pages",
                "description": "An array of field names or IDs to be added as pages or added to the page area.",
                "optional": true,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "addToTable",
                "description": "Specifies whether to apply fields only to the pivot table reports. If `true`, the specified fields will be added to the report \nwithout replacing existing fields. If `false`, existing fields will be replaced with the new fields.",
                "optional": true,
                "defaultvalue": false
            }
        ],
        "see": null,
        "type": {
            "names": [
                "object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "object"
            }
        }
    },
    {
        "comment": "/**\n\t * Class representing a base class for the color types.\n\t * @constructor\n\t */",
        "description": "Class representing a base class for the color types.",
        "name": "ApiColor",
        "longname": "ApiColor",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 348,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\n\t * Returns a color value in RGB format.\n\t * @memberof ApiColor\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiColor/Methods/GetRGB.js\n\t */",
        "description": "Returns a color value in RGB format.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet color = Api.CreateColorFromRGB(255, 111, 61);\nworksheet.GetRange(\"A2\").SetValue(\"Text with color\");\nworksheet.GetRange(\"A2\").SetFontColor(color);\nlet rgbColor = color.GetRGB();\nworksheet.GetRange(\"A4\").SetValue(\"Cell color in RGB format: \" + rgbColor);\n```",
        "memberof": "ApiColor",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GetRGB",
        "longname": "ApiColor#GetRGB",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 358,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiColor/Methods/GetRGB.js"
        ]
    },
    {
        "comment": "/**\n\t * Class representing a name.\n\t * @constructor\n\t * @property {string} Name - Sets a name to the active sheet.\n\t * @property {string} RefersTo - Returns or sets a formula that the name is defined to refer to.\n\t * @property {ApiRange} RefersToRange - Returns the ApiRange object by reference.\n\t */",
        "description": "Class representing a name.",
        "name": "ApiName",
        "longname": "ApiName",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 372,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Name",
                "description": "Sets a name to the active sheet.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "RefersTo",
                "description": "Returns or sets a formula that the name is defined to refer to.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                },
                "name": "RefersToRange",
                "description": "Returns the ApiRange object by reference.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "see": null
    },
    {
        "comment": "/**\n\t * Class representing the areas.\n\t * @constructor\n\t * @property {number} Count - Returns a value that represents the number of objects in the collection.\n\t * @property {ApiRange} Parent - Returns the parent object for the specified collection.\n\t */",
        "description": "Class representing the areas.",
        "name": "ApiAreas",
        "longname": "ApiAreas",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 414,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "Count",
                "description": "Returns a value that represents the number of objects in the collection.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                },
                "name": "Parent",
                "description": "Returns the parent object for the specified collection.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "see": null
    },
    {
        "comment": "/**\n\t * Class representing a pivot table.\n\t * @constructor\n\t * @property {string} Name - Returns or sets a name of the pivot table.\n\t * @property {boolean} ColumnGrand - Returns or sets the <b>Grand Totals</b> setting for the pivot table columns.\n\t * @property {boolean} RowGrand - Returns or sets the <b>Grand Totals</b> setting for the pivot table rows.\n\t * @property {boolean} DisplayFieldCaptions - Returns or sets the setting which specifies whether to display field headers for rows and columns.\n\t * @property {string} Title - Returns or sets the pivot table title.\n\t * @property {string} Description - Returns or sets the pivot table description.\n\t * @property {string} StyleName - Returns or sets the pivot table style name.\n\t * @property {ApiWorksheet} Parent - Returns the parent object for the current pivot table.\n\t * @property {boolean} ShowTableStyleRowHeaders - Returns or sets the setting which specifies whether the row headers of the pivot table will be highlighted with the special formatting.\n\t * @property {boolean} ShowTableStyleColumnHeaders - Returns or sets the setting which specifies whether the column headers of the pivot table will be highlighted with the special formatting.\n\t * @property {boolean} ShowTableStyleRowStripes - Returns or sets the setting which specifies whether the background color alternation for odd and even rows will be enabled for the pivot table.\n\t * @property {boolean} ShowTableStyleColumnStripes - Returns or sets the setting which specifies whether the background color alternation for odd and even columns will be enabled for the pivot table.\n\t * @property {ApiRange} Source - Returns or sets the source range for the pivot table.\n\t * @property {ApiRange | null} ColumnRange - Returns a Range object that represents the column area in the pivot table report.\n\t * @property {ApiRange | null} RowRange - Returns a Range object that represents the row area in the pivot table report.\n\t * @property {ApiRange} DataBodyRange - Returns a Range object that represents the range of values in the pivot table.\n\t * @property {ApiRange | null} TableRange1 - Returns a Range object that represents the entire pivot table report, but doesn't include page fields.\n\t * @property {ApiRange | null} TableRange2 - Returns a Range object that represents the entire pivot table report, including page fields.\n\t * @property {string} GrandTotalName - Returns or sets the text string label that is displayed in the grand total column or row heading in the specified pivot table report.\n\t * @property {boolean} RepeatAllLabels - Specifies whether to repeat item labels for all pivot fields in the specified pivot table.\n\t * @property {object} RowAxisLayout - Sets the way the specified pivot table items appear — in table format or in outline format.\n\t * @property {boolean} LayoutBlankLine - Sets the setting which specifies whether to insert blank rows after each item in the pivot table.\n\t * @property {boolean} LayoutSubtotals - Sets the setting which specifies whether to show subtotals in the pivot table.\n\t * @property {number} SubtotalLocation - Sets the layout subtotal location.\n\t * @property {ApiPivotField[]} PivotFields - Returns all pivot fields in the pivot table.\n\t * @property {ApiPivotField[]} ColumnFields - Returns an array that is currently displayed as column fields in the pivot table.\n\t * @property {ApiPivotField[]} DataFields - Returns an array that is currently displayed as data fields in the pivot table.\n\t * @property {ApiPivotField[]} HiddenFields - Returns an array that represents all hidden fields in the pivot table.\n\t * @property {ApiPivotField[]} VisibleFields - Returns an array that represents all visible fields in the pivot table.\n\t * @property {ApiPivotField[]} PageFields - Returns an array that is currently displayed as page fields in the pivot table.\n\t * @property {ApiPivotField[]} RowFields - Returns an array that is currently displayed as row fields in the pivot table.\n\t */",
        "description": "Class representing a pivot table.",
        "name": "ApiPivotTable",
        "longname": "ApiPivotTable",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 457,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Name",
                "description": "Returns or sets a name of the pivot table.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "ColumnGrand",
                "description": "Returns or sets the <b>Grand Totals</b> setting for the pivot table columns.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "RowGrand",
                "description": "Returns or sets the <b>Grand Totals</b> setting for the pivot table rows.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "DisplayFieldCaptions",
                "description": "Returns or sets the setting which specifies whether to display field headers for rows and columns.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Title",
                "description": "Returns or sets the pivot table title.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Description",
                "description": "Returns or sets the pivot table description.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "StyleName",
                "description": "Returns or sets the pivot table style name.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiWorksheet"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiWorksheet"
                    }
                },
                "name": "Parent",
                "description": "Returns the parent object for the current pivot table.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "ShowTableStyleRowHeaders",
                "description": "Returns or sets the setting which specifies whether the row headers of the pivot table will be highlighted with the special formatting.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "ShowTableStyleColumnHeaders",
                "description": "Returns or sets the setting which specifies whether the column headers of the pivot table will be highlighted with the special formatting.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "ShowTableStyleRowStripes",
                "description": "Returns or sets the setting which specifies whether the background color alternation for odd and even rows will be enabled for the pivot table.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "ShowTableStyleColumnStripes",
                "description": "Returns or sets the setting which specifies whether the background color alternation for odd and even columns will be enabled for the pivot table.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                },
                "name": "Source",
                "description": "Returns or sets the source range for the pivot table.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                },
                "name": "ColumnRange",
                "description": "Returns a Range object that represents the column area in the pivot table report.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                },
                "name": "RowRange",
                "description": "Returns a Range object that represents the row area in the pivot table report.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                },
                "name": "DataBodyRange",
                "description": "Returns a Range object that represents the range of values in the pivot table.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                },
                "name": "TableRange1",
                "description": "Returns a Range object that represents the entire pivot table report, but doesn't include page fields.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                },
                "name": "TableRange2",
                "description": "Returns a Range object that represents the entire pivot table report, including page fields.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "GrandTotalName",
                "description": "Returns or sets the text string label that is displayed in the grand total column or row heading in the specified pivot table report.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "RepeatAllLabels",
                "description": "Specifies whether to repeat item labels for all pivot fields in the specified pivot table.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "name": "RowAxisLayout",
                "description": "Sets the way the specified pivot table items appear — in table format or in outline format.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "LayoutBlankLine",
                "description": "Sets the setting which specifies whether to insert blank rows after each item in the pivot table.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "LayoutSubtotals",
                "description": "Sets the setting which specifies whether to show subtotals in the pivot table.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "SubtotalLocation",
                "description": "Sets the layout subtotal location.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "Array.<ApiPivotField>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiPivotField",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "PivotFields",
                "description": "Returns all pivot fields in the pivot table.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "Array.<ApiPivotField>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiPivotField",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "ColumnFields",
                "description": "Returns an array that is currently displayed as column fields in the pivot table.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "Array.<ApiPivotField>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiPivotField",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "DataFields",
                "description": "Returns an array that is currently displayed as data fields in the pivot table.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "Array.<ApiPivotField>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiPivotField",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "HiddenFields",
                "description": "Returns an array that represents all hidden fields in the pivot table.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "Array.<ApiPivotField>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiPivotField",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "VisibleFields",
                "description": "Returns an array that represents all visible fields in the pivot table.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "Array.<ApiPivotField>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiPivotField",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "PageFields",
                "description": "Returns an array that is currently displayed as page fields in the pivot table.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "Array.<ApiPivotField>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiPivotField",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "RowFields",
                "description": "Returns an array that is currently displayed as row fields in the pivot table.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "see": null
    },
    {
        "comment": "/**\n\t * Class representing a pivot table field.\n\t * @constructor\n\t * @property {number} Position - Returns or sets a value that represents the position of the field (first, second, third, and so on) among all the fields in its orientation (Rows, Columns, Pages, Data).\n\t * @property {number} Orientation - Returns or sets a pivot field orientation value that represents the location of the field in the specified pivot table report.\n\t * @property {string} Caption - Returns or sets a value that represents the label text for the pivot field.\n\t * @property {string} Name - Returns or sets a value representing the object name.\n\t * @property {string} Value - Returns or sets a value representing the name of the specified field in the pivot table report.\n\t * @property {string} SourceName - Returns a source name for the pivot table field.\n\t * @property {number} Index - Returns an index for the pivot table field.\n\t * @property {ApiPivotTable} Table - Returns the ApiPivotTable object which represents the pivot table for the current field.\n\t * @property {ApiPivotTable} Parent - Returns the parent object for the current field.\n\t * @property {boolean} LayoutCompactRow - Returns or sets the setting which specifies whether a pivot table field is compacted.\n\t * @property {number} LayoutForm - Returns or sets the way the specified pivot table items appear — in table format or in outline format.\n\t * @property {boolean} LayoutPageBreak - Returns or sets the setting which specifies whether to insert a page break after each field.\n\t * @property {boolean} ShowingInAxis - Returns the setting which specifies whether the pivot table field is currently visible in the pivot table.\n\t * @property {boolean} RepeatLabels - Returns or sets the setting which specifies whether to repeat items labels at each row.\n\t * @property {boolean} LayoutBlankLine - Returns and sets the setting which specifies whether to insert blank rows after each item.\n\t * @property {boolean} ShowAllItems - Returns or sets the setting which specifies whether to show items with no data.\n\t * @property {boolean} LayoutSubtotals - Returns or sets the setting which specifies whether to show subtotals.\n\t * @property {number} LayoutSubtotalLocation - Returns or sets the layout subtotal location.\n\t * @property {string} SubtotalName - Returns or sets the text label displayed in the subtotal column or row heading in the specified pivot table report.\n\t * @property {object} Subtotals - Returns or sets the subtotals.\n\t * @property {number} Formula - Returns or sets a value that represents the object's formula.\n\t * @property {boolean} DragToColumn - Returns or sets the setting which specifies whether the specified field can be dragged to the column position.\n\t * @property {boolean} DragToRow - Returns or sets the setting which specifies whether the specified field can be dragged to the row position.\n\t * @property {boolean} DragToData - Returns or sets the setting which specifies whether the specified field can be dragged to the data position.\n\t * @property {boolean} DragToPage - Returns or sets the setting which specifies whether the specified field can be dragged to the page position.\n\t * @property {string | null} NumberFormat - Returns or sets a value that represents the format code for the object.\n\t * @property {string | number} CurrentPage - Returns the current page which is displayed for the page field (valid only for page fields).\n\t * @property {ApiPivotItem | ApiPivotItem[]} PivotItems - Returns an object that represents either a single pivot table item (the ApiPivotItem object)\n\t * or a collection of all the visible and hidden items (an array of the ApiPivotItem objects) in the specified field.\n\t */",
        "description": "Class representing a pivot table field.",
        "name": "ApiPivotField",
        "longname": "ApiPivotField",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 496,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "Position",
                "description": "Returns or sets a value that represents the position of the field (first, second, third, and so on) among all the fields in its orientation (Rows, Columns, Pages, Data).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "Orientation",
                "description": "Returns or sets a pivot field orientation value that represents the location of the field in the specified pivot table report.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Caption",
                "description": "Returns or sets a value that represents the label text for the pivot field.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Name",
                "description": "Returns or sets a value representing the object name.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Value",
                "description": "Returns or sets a value representing the name of the specified field in the pivot table report.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "SourceName",
                "description": "Returns a source name for the pivot table field.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "Index",
                "description": "Returns an index for the pivot table field.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiPivotTable"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiPivotTable"
                    }
                },
                "name": "Table",
                "description": "Returns the ApiPivotTable object which represents the pivot table for the current field.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiPivotTable"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiPivotTable"
                    }
                },
                "name": "Parent",
                "description": "Returns the parent object for the current field.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "LayoutCompactRow",
                "description": "Returns or sets the setting which specifies whether a pivot table field is compacted.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "LayoutForm",
                "description": "Returns or sets the way the specified pivot table items appear — in table format or in outline format.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "LayoutPageBreak",
                "description": "Returns or sets the setting which specifies whether to insert a page break after each field.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "ShowingInAxis",
                "description": "Returns the setting which specifies whether the pivot table field is currently visible in the pivot table.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "RepeatLabels",
                "description": "Returns or sets the setting which specifies whether to repeat items labels at each row.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "LayoutBlankLine",
                "description": "Returns and sets the setting which specifies whether to insert blank rows after each item.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "ShowAllItems",
                "description": "Returns or sets the setting which specifies whether to show items with no data.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "LayoutSubtotals",
                "description": "Returns or sets the setting which specifies whether to show subtotals.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "LayoutSubtotalLocation",
                "description": "Returns or sets the layout subtotal location.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "SubtotalName",
                "description": "Returns or sets the text label displayed in the subtotal column or row heading in the specified pivot table report.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "name": "Subtotals",
                "description": "Returns or sets the subtotals.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "Formula",
                "description": "Returns or sets a value that represents the object's formula.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "DragToColumn",
                "description": "Returns or sets the setting which specifies whether the specified field can be dragged to the column position.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "DragToRow",
                "description": "Returns or sets the setting which specifies whether the specified field can be dragged to the row position.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "DragToData",
                "description": "Returns or sets the setting which specifies whether the specified field can be dragged to the data position.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "DragToPage",
                "description": "Returns or sets the setting which specifies whether the specified field can be dragged to the page position.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                },
                "name": "NumberFormat",
                "description": "Returns or sets a value that represents the format code for the object.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "CurrentPage",
                "description": "Returns the current page which is displayed for the page field (valid only for page fields).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiPivotItem",
                        "Array.<ApiPivotItem>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiPivotItem"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "ApiPivotItem",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "PivotItems",
                "description": "Returns an object that represents either a single pivot table item (the ApiPivotItem object)\nor a collection of all the visible and hidden items (an array of the ApiPivotItem objects) in the specified field.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "see": null
    },
    {
        "comment": "/**\n\t * Class representing a pivot table data field.\n\t * @constructor\n\t * @extends ApiPivotField\n\t * @property {DataConsolidateFunctionType} Function - Returns or sets a function for the data field.\n\t * @property {number} Position - Returns or sets a value that represents the data field position within a category.\n\t * @property {PivotFieldOrientationType} Orientation - Returns a data field orientation value\n\t * that represents the data field location in the specified pivot table report.\n\t * @property {string} Name - Returns or sets a value representing the object name.\n\t * @property {string} Value - Returns or sets a value representing the name of the specified data field in the pivot table report.\n\t * @property {string} Caption - Returns or sets a value that represents the label text for the data field.\n\t * @property {string | null} NumberFormat - Returns or sets a value that represents the format code for the object.\n\t * @property {number} Index - Returns an index of the data field.\n\t * @property {ApiPivotField} PivotField - Returns the pivot field from which the data field was created.\n\t */",
        "description": "Class representing a pivot table data field.",
        "name": "ApiPivotDataField",
        "longname": "ApiPivotDataField",
        "kind": "class",
        "scope": "global",
        "augments": [
            "ApiPivotField"
        ],
        "meta": {
            "lineno": 520,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "DataConsolidateFunctionType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "DataConsolidateFunctionType"
                    }
                },
                "name": "Function",
                "description": "Returns or sets a function for the data field.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "Position",
                "description": "Returns or sets a value that represents the data field position within a category.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "PivotFieldOrientationType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PivotFieldOrientationType"
                    }
                },
                "name": "Orientation",
                "description": "Returns a data field orientation value\nthat represents the data field location in the specified pivot table report.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Name",
                "description": "Returns or sets a value representing the object name.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Value",
                "description": "Returns or sets a value representing the name of the specified data field in the pivot table report.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Caption",
                "description": "Returns or sets a value that represents the label text for the data field.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                },
                "name": "NumberFormat",
                "description": "Returns or sets a value that represents the format code for the object.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "Index",
                "description": "Returns an index of the data field.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiPivotField"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiPivotField"
                    }
                },
                "name": "PivotField",
                "description": "Returns the pivot field from which the data field was created.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "see": null
    },
    {
        "comment": "/**\n\t * Class representing a pivot table field item.\n\t * @constructor\n\t * @property {string} Name - Returns a name of the pivot item.\n\t * @property {string} Caption - Returns a caption of the pivot item.\n\t * @property {string} Value - Returns a name of the specified item in the pivot table field.\n\t * @property {string} Parent - Returns a parent of the pivot item.\n\t * @property {string} Field - Returns a field of the pivot item.\n\t */",
        "description": "Class representing a pivot table field item.",
        "name": "ApiPivotItem",
        "longname": "ApiPivotItem",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 542,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Name",
                "description": "Returns a name of the pivot item.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Caption",
                "description": "Returns a caption of the pivot item.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Value",
                "description": "Returns a name of the specified item in the pivot table field.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Parent",
                "description": "Returns a parent of the pivot item.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Field",
                "description": "Returns a field of the pivot item.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "see": null
    },
    {
        "comment": "/**\n\t * Class representing characters in an object that contains text.\n\t * @constructor\n\t * @property {number} Count - The number of characters in the collection.\n\t * @property {ApiRange} Parent - The parent object of the specified characters.\n\t * @property {string} Caption - The text of the specified range of characters.\n\t * @property {string} Text - The string value representing the text of the specified range of characters.\n\t * @property {ApiFont} Font - The font of the specified characters.\n\t */",
        "description": "Class representing characters in an object that contains text.",
        "name": "ApiCharacters",
        "longname": "ApiCharacters",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 559,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "Count",
                "description": "The number of characters in the collection.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                },
                "name": "Parent",
                "description": "The parent object of the specified characters.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Caption",
                "description": "The text of the specified range of characters.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Text",
                "description": "The string value representing the text of the specified range of characters.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiFont"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFont"
                    }
                },
                "name": "Font",
                "description": "The font of the specified characters.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "see": null
    },
    {
        "comment": "/**\n\t * Class that contains the font attributes (font name, font size, color, and so on).\n\t * @constructor\n\t * @property {ApiCharacters} Parent - The parent object of the specified font object.\n\t * @property {boolean | null} Bold - The font bold property.\n\t * @property {boolean | null} Italic - The font italic property.\n\t * @property {number | null} Size - The font size property.\n\t * @property {boolean | null} Strikethrough - The font strikethrough property.\n\t * @property {string | null} Underline - The font type of underline.\n\t * @property {boolean | null} Subscript - The font subscript property.\n\t * @property {boolean | null} Superscript - The font superscript property.\n\t * @property {string | null} Name - The font name.\n\t * @property {ApiColor | null} Color - The font color property.\n\t */",
        "description": "Class that contains the font attributes (font name, font size, color, and so on).",
        "name": "ApiFont",
        "longname": "ApiFont",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 578,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "ApiCharacters"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiCharacters"
                    }
                },
                "name": "Parent",
                "description": "The parent object of the specified font object.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                },
                "name": "Bold",
                "description": "The font bold property.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                },
                "name": "Italic",
                "description": "The font italic property.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                },
                "name": "Size",
                "description": "The font size property.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                },
                "name": "Strikethrough",
                "description": "The font strikethrough property.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                },
                "name": "Underline",
                "description": "The font type of underline.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                },
                "name": "Subscript",
                "description": "The font subscript property.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                },
                "name": "Superscript",
                "description": "The font superscript property.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                },
                "name": "Name",
                "description": "The font name.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiColor",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiColor"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                },
                "name": "Color",
                "description": "The font color property.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "see": null
    },
    {
        "comment": "/**\n\t * Class representing freeze panes.\n\t * @constructor\n\t */",
        "description": "Class representing freeze panes.",
        "name": "ApiFreezePanes",
        "longname": "ApiFreezePanes",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 586,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\n\t * Returns a class formatted according to the instructions contained in the format expression.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} expression - Any valid expression.\n\t * @param {string} [format] - A valid named or user-defined format expression.\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/Format.js\n\t */",
        "description": "Returns a class formatted according to the instructions contained in the format expression.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet format = Api.Format(\"123456\", \"$#,##0\");\nworksheet.GetRange(\"A1\").SetValue(format);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "expression",
                "description": "Any valid expression.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "format",
                "description": "A valid named or user-defined format expression.",
                "optional": true,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "Format",
        "longname": "Api#Format",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 599,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/Format.js"
        ]
    },
    {
        "comment": "/**\n\t * Creates a new custom function.\n\t * The description of the function parameters and result is specified using JSDoc. The <em>@customfunction</em> tag is required in JSDoc.\n\t * Parameters and results can be specified as the <em>number / string / bool / any / number[][] / string[][] / bool[][] / any[][]</em> types.\n\t * Parameters can be required or optional. A user can also set a default value.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @param {Function} fCustom - A new function for calculating.\n\t */",
        "description": "Creates a new custom function.\nThe description of the function parameters and result is specified using JSDoc. The <em>@customfunction</em> tag is required in JSDoc.\nParameters and results can be specified as the <em>number / string / bool / any / number[][] / string[][] / bool[][] / any[][]</em> types.\nParameters can be required or optional. A user can also set a default value.",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ],
                    "parsedType": {
                        "type": "FunctionType",
                        "params": []
                    }
                },
                "name": "fCustom",
                "description": "A new function for calculating.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "AddCustomFunction",
        "longname": "Api#AddCustomFunction",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 627,
            "columnno": 1
        },
        "see": null
    },
    {
        "comment": "/**\n\t * Registers a new custom functions library (see the <b>SetCustomFunctions</b> plugin method).\n\t * The description of the function parameters and result is specified using JSDoc. The <em>@customfunction</em> tag is required in JSDoc.\n\t * Parameters and results can be specified as the <em>number / string / bool / any / number[][] / string[][] / bool[][] / any[][]</em> types.\n\t * Parameters can be required or optional. A user can also set a default value.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sName - The library name.\n\t * @param {Function} Func - The custom functions library code.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/AddCustomFunction.js\n\t */",
        "description": "Registers a new custom functions library (see the <b>SetCustomFunctions</b> plugin method).\nThe description of the function parameters and result is specified using JSDoc. The <em>@customfunction</em> tag is required in JSDoc.\nParameters and results can be specified as the <em>number / string / bool / any / number[][] / string[][] / bool[][] / any[][]</em> types.\nParameters can be required or optional. A user can also set a default value.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nApi.AddCustomFunctionLibrary(\"LibraryName\", function(){\n    /**\n     * Function that returns the argument\n     * @customfunction\n     * @param {any} first First argument.\n     * @returns {any} second Second argument.\n    */\n    Api.AddCustomFunction(function ADD(first, second) {\n        return first + second;\n    });\n});\n\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange('A1').SetValue('=ADD(1,2)');\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sName",
                "description": "The library name.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "function"
                    ],
                    "parsedType": {
                        "type": "FunctionType",
                        "params": []
                    }
                },
                "name": "Func",
                "description": "The custom functions library code.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "AddCustomFunctionLibrary",
        "longname": "Api#AddCustomFunctionLibrary",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 720,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/AddCustomFunction.js"
        ]
    },
    {
        "comment": "/**\n\t * Removes a custom function.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sName - The name of a custom function.\n\t * @returns {boolean} - returns false if such a function does not exist.\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/RemoveCustomFunction.js\n\t */",
        "description": "Removes a custom function.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nApi.AddCustomFunctionLibrary(\"LibraryName\", function(){\n    /**\n     * Function that returns the argument\n     * @customfunction\n     * @param {any} first First argument.\n     * @returns {any} second Second argument.\n     */\n    Api.AddCustomFunction(function ADD(first, second) {\n        return first + second;\n    });\n});\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"=ADD(1, 2)\");\nApi.RemoveCustomFunction(\"add\");\nworksheet.GetRange(\"A3\").SetValue(\"The ADD custom function was removed.\");\n\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sName",
                "description": "The name of a custom function.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "RemoveCustomFunction",
        "longname": "Api#RemoveCustomFunction",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 732,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/RemoveCustomFunction.js"
        ]
    },
    {
        "comment": "/**\n\t * Clears all custom functions.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean} - returns false if such functions do not exist.\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/ClearCustomFunctions.js\n\t */",
        "description": "Clears all custom functions.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nApi.AddCustomFunctionLibrary(\"LibraryName\", function(){\n    /**\n     * Function that returns the argument\n     * @customfunction\n     * @param {any} first First argument.\n     * @returns {any} second Second argument.\n     */\n    Api.AddCustomFunction(function ADD(first, second) {\n        return first + second;\n    });\n});\n\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"=ADD(1, 2)\");\nApi.ClearCustomFunctions();\nworksheet.GetRange(\"A3\").SetValue(\"All the custom functions were removed.\");\n\n```",
        "memberof": "Api",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "ClearCustomFunctions",
        "longname": "Api#ClearCustomFunctions",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 742,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/ClearCustomFunctions.js"
        ]
    },
    {
        "comment": "/**\n\t * Creates a new worksheet. The new worksheet becomes the active sheet.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sName - The name of a new worksheet.\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/AddSheet.js\n\t */",
        "description": "Creates a new worksheet. The new worksheet becomes the active sheet.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet sheet = Api.AddSheet(\"New sheet\");\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sName",
                "description": "The name of a new worksheet.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "AddSheet",
        "longname": "Api#AddSheet",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 753,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/AddSheet.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a sheet collection that represents all the sheets in the active workbook.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiWorksheet[]}\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/GetSheets.js\n\t */",
        "description": "Returns a sheet collection that represents all the sheets in the active workbook.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nApi.AddSheet(\"new_sheet_name\");\nlet sheets = Api.GetSheets();\nlet sheetName1 = sheets[0].GetName();\nlet sheetName2 = sheets[1].GetName();\nsheets[1].GetRange(\"A1\").SetValue(sheetName1);\nsheets[1].GetRange(\"A2\").SetValue(sheetName2);\n```",
        "memberof": "Api",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ApiWorksheet>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiWorksheet",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetSheets",
        "longname": "Api#GetSheets",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 767,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/GetSheets.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets a locale to the document.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number} LCID - The locale specified.\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/SetLocale.js\n\t */",
        "description": "Sets a locale to the document.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nApi.SetLocale(\"en-CA\");\nworksheet.GetRange(\"A1\").SetValue(\"A sample spreadsheet with the language set to English (Canada).\");\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "LCID",
                "description": "The locale specified.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetLocale",
        "longname": "Api#SetLocale",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 787,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/SetLocale.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the current locale ID.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/GetLocale.js\n\t */",
        "description": "Returns the current locale ID.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nApi.SetLocale(\"en-CA\");\nlet locale = Api.GetLocale();\nworksheet.GetRange(\"A1\").SetValue(\"Locale: \" + locale);\n```",
        "memberof": "Api",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GetLocale",
        "longname": "Api#GetLocale",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 798,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/GetLocale.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns an object that represents the active sheet.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiWorksheet}\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/GetActiveSheet.js\n\t */",
        "description": "Returns an object that represents the active sheet.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(\"2\");\nworksheet.GetRange(\"B2\").SetValue(\"2\");\nworksheet.GetRange(\"A3\").SetValue(\"2x2=\");\nworksheet.GetRange(\"B3\").SetValue(\"=B1*B2\");\n```",
        "memberof": "Api",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiWorksheet"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiWorksheet"
                    }
                }
            }
        ],
        "name": "GetActiveSheet",
        "longname": "Api#GetActiveSheet",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 809,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/GetActiveSheet.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns an object that represents a sheet.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string | number} nameOrIndex - Sheet name or sheet index.\n\t * @returns {ApiWorksheet | null}\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/GetSheet.js\n\t */",
        "description": "Returns an object that represents a sheet.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetSheet(\"Sheet1\");\nworksheet.GetRange(\"A1\").SetValue(\"This is a sample text on 'Sheet1'.\");\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "nameOrIndex",
                "description": "Sheet name or sheet index.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiWorksheet",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiWorksheet"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetSheet",
        "longname": "Api#GetSheet",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 827,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/GetSheet.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a list of all the available theme colors for the spreadsheet.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string[]}\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/GetThemesColors.js\n\t */",
        "description": "Returns a list of all the available theme colors for the spreadsheet.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet themes = Api.GetThemesColors();\nfor (let i = 0; i < themes.length; ++i) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(themes[i]);\n}\n```",
        "memberof": "Api",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "string",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetThemesColors",
        "longname": "Api#GetThemesColors",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 840,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/GetThemesColors.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the theme colors to the current spreadsheet.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sTheme - The color scheme that will be set to the current spreadsheet.\n\t * @returns {boolean} - returns false if sTheme isn't a string.\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/SetThemeColors.js\n\t */",
        "description": "Sets the theme colors to the current spreadsheet.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet themes = Api.GetThemesColors();\nfor (let i = 0; i < themes.length; ++i) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(themes[i]);\n}\nApi.SetThemeColors(themes[3]);\nworksheet.GetRange(\"C3\").SetValue(\"The 'Apex' theme colors were set to the current spreadsheet.\");\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sTheme",
                "description": "The color scheme that will be set to the current spreadsheet.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetThemeColors",
        "longname": "Api#SetThemeColors",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 857,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/SetThemeColors.js"
        ]
    },
    {
        "comment": "/**\n\t * Creates a new history point.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/CreateNewHistoryPoint.js\n\t */",
        "description": "Creates a new history point.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"This is just a sample text.\");\nApi.CreateNewHistoryPoint();\nworksheet.GetRange(\"A3\").SetValue(\"New history point was just created.\");\n```",
        "memberof": "Api",
        "params": null,
        "returns": null,
        "name": "CreateNewHistoryPoint",
        "longname": "Api#CreateNewHistoryPoint",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 871,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/CreateNewHistoryPoint.js"
        ]
    },
    {
        "comment": "/**\n\t * Creates an RGB color setting the appropriate values for the red, green and blue color components.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @param {byte} r - Red color component value.\n\t * @param {byte} g - Green color component value.\n\t * @param {byte} b - Blue color component value.\n\t * @returns {ApiColor}\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/CreateColorFromRGB.js\n\t */",
        "description": "Creates an RGB color setting the appropriate values for the red, green and blue color components.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet color = Api.CreateColorFromRGB(255, 111, 61);\nworksheet.GetRange(\"A2\").SetValue(\"Text with color\");\nworksheet.GetRange(\"A2\").SetFontColor(color);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "byte"
                    }
                },
                "name": "r",
                "description": "Red color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "byte"
                    }
                },
                "name": "g",
                "description": "Green color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "byte"
                    }
                },
                "name": "b",
                "description": "Blue color component value.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiColor"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiColor"
                    }
                }
            }
        ],
        "name": "CreateColorFromRGB",
        "longname": "Api#CreateColorFromRGB",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 885,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/CreateColorFromRGB.js"
        ]
    },
    {
        "comment": "/**\n\t * Creates a color selecting it from one of the available color presets.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @param {PresetColor} sPresetColor - A preset selected from the list of the available color preset names.\n\t * @returns {ApiColor}\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/CreateColorByName.js\n\t */",
        "description": "Creates a color selecting it from one of the available color presets.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet color = Api.CreateColorByName(\"peachPuff\");\nworksheet.GetRange(\"A2\").SetValue(\"Text with color\");\nworksheet.GetRange(\"A2\").SetFontColor(color);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "PresetColor"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PresetColor"
                    }
                },
                "name": "sPresetColor",
                "description": "A preset selected from the list of the available color preset names.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiColor"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiColor"
                    }
                }
            }
        ],
        "name": "CreateColorByName",
        "longname": "Api#CreateColorByName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 897,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/CreateColorByName.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the ApiRange object that represents the rectangular intersection of two or more ranges. If one or more ranges from a different worksheet are specified, an error will be returned.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange} Range1 - One of the intersecting ranges. At least two Range objects must be specified.\n\t * @param {ApiRange} Range2 - One of the intersecting ranges. At least two Range objects must be specified.\n\t * @returns {ApiRange | null}\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/Intersect.js\n\t */",
        "description": "Returns the ApiRange object that represents the rectangular intersection of two or more ranges. If one or more ranges from a different worksheet are specified, an error will be returned.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range1 = worksheet.GetRange(\"A1:C5\");\nlet range2 = worksheet.GetRange(\"B2:B4\");\nlet range = Api.Intersect(range1, range2);\nrange.SetFillColor(Api.CreateColorFromRGB(255, 213, 191));\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                },
                "name": "Range1",
                "description": "One of the intersecting ranges. At least two Range objects must be specified.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                },
                "name": "Range2",
                "description": "One of the intersecting ranges. At least two Range objects must be specified.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "Intersect",
        "longname": "Api#Intersect",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 911,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/Intersect.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns an object that represents the selected range.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiRange}\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/GetSelection.js\n\t */",
        "description": "Returns an object that represents the selected range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nApi.GetSelection().SetValue(\"selected\");\n```",
        "memberof": "Api",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                }
            }
        ],
        "name": "GetSelection",
        "longname": "Api#GetSelection",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 933,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/GetSelection.js"
        ]
    },
    {
        "comment": "/**\n\t * Adds a new name to a range of cells.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sName - The range name.\n\t * @param {string} sRef - The reference to the specified range. It must contain the sheet name, followed by sign ! and a range of cells.\n\t * Example: \"Sheet1!$A$1:$B$2\".\n\t * @param {boolean} isHidden - Defines if the range name is hidden or not.\n\t * @returns {boolean} - returns false if sName or sRef are invalid.\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/AddDefName.js\n\t */",
        "description": "Adds a new name to a range of cells.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nworksheet.GetRange(\"B1\").SetValue(\"2\");\nApi.AddDefName(\"numbers\", \"Sheet1!$A$1:$B$1\");\nworksheet.GetRange(\"A3\").SetValue(\"We defined a name 'numbers' for a range of cells A1:B1.\");\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sName",
                "description": "The range name.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sRef",
                "description": "The reference to the specified range. It must contain the sheet name, followed by sign ! and a range of cells.\nExample: \"Sheet1!$A$1:$B$2\".",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isHidden",
                "description": "Defines if the range name is hidden or not.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "AddDefName",
        "longname": "Api#AddDefName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 953,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/AddDefName.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the ApiName object by the range name.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} defName - The range name.\n\t * @returns {ApiName}\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/GetDefName.js\n\t */",
        "description": "Returns the ApiName object by the range name.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nworksheet.GetRange(\"B1\").SetValue(\"2\");\nApi.AddDefName(\"numbers\", \"Sheet1!$A$1:$B$1\");\nlet defName = Api.GetDefName(\"numbers\");\nworksheet.GetRange(\"A3\").SetValue(\"DefName: \" + defName.GetName());\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "defName",
                "description": "The range name.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiName"
                    }
                }
            }
        ],
        "name": "GetDefName",
        "longname": "Api#GetDefName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 965,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/GetDefName.js"
        ]
    },
    {
        "comment": "/**\n\t * Saves changes to the specified document.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/Save.js\n\t */",
        "description": "Saves changes to the specified document.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"This sample text is saved to the worksheet.\");\nApi.Save();\n```",
        "memberof": "Api",
        "params": null,
        "returns": null,
        "name": "Save",
        "longname": "Api#Save",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 978,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/Save.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the ApiRange object by the range reference.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sRange - The range of cells from the current sheet.\n\t * @returns {ApiRange}\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/GetRange.js\n\t */",
        "description": "Returns the ApiRange object by the range reference.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = Api.GetRange(\"A1:C1\");\nrange.SetFillColor(Api.CreateColorFromRGB(255, 213, 191));\nworksheet.GetRange(\"A3\").SetValue(\"The color was set to the background of cells A1:C1.\");\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sRange",
                "description": "The range of cells from the current sheet.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                }
            }
        ],
        "name": "GetRange",
        "longname": "Api#GetRange",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 990,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/GetRange.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the ApiWorksheetFunction object.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiWorksheetFunction}\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/GetWorksheetFunction.js\n\t */",
        "description": "Returns the ApiWorksheetFunction object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.ASC(\"text\"));\n```",
        "memberof": "Api",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiWorksheetFunction"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiWorksheetFunction"
                    }
                }
            }
        ],
        "name": "GetWorksheetFunction",
        "longname": "Api#GetWorksheetFunction",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1009,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/GetWorksheetFunction.js"
        ]
    },
    {
        "comment": "/**\n\t * Class representing a worksheet function.\n\t * @constructor\n\t */",
        "description": "Class representing a worksheet function.",
        "name": "ApiWorksheetFunction",
        "longname": "ApiWorksheetFunction",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 1485,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\n\t * For double-byte character set (DBCS) languages, the function changes full-width (double-byte) characters to half-width (single-byte) characters.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | string} arg1 - The text or a reference to a cell containing the text to change.\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ASC.js\n\t */",
        "description": "For double-byte character set (DBCS) languages, the function changes full-width (double-byte) characters to half-width (single-byte) characters.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.ASC(\"text\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The text or a reference to a cell containing the text to change.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "ASC",
        "longname": "ApiWorksheetFunction#ASC",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1755,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ASC.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the character specified by the code number from your computer's character set.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A number between 1 and 255 specifying a character from the computer character set.\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/CHAR.js\n\t */",
        "description": "Returns the character specified by the code number from your computer's character set.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.CHAR(234));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A number between 1 and 255 specifying a character from the computer character set.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "CHAR",
        "longname": "ApiWorksheetFunction#CHAR",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1766,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/CHAR.js"
        ]
    },
    {
        "comment": "/**\n\t * Removes all the nonprintable characters from the text.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | string} arg1 - A string from which nonprintable characters will be removed.\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/CLEAN.js\n\t */",
        "description": "Removes all the nonprintable characters from the text.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.CLEAN(\"\\ntext\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A string from which nonprintable characters will be removed.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "CLEAN",
        "longname": "ApiWorksheetFunction#CLEAN",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1777,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/CLEAN.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the code number from your computer's character set for the first character in the specified text string.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | string} arg1 - The text for which to get the code of the first character.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/CODE.js\n\t */",
        "description": "Returns the code number from your computer's character set for the first character in the specified text string.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.CODE(\"office\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The text for which to get the code of the first character.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "CODE",
        "longname": "ApiWorksheetFunction#CODE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1788,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/CODE.js"
        ]
    },
    {
        "comment": "/**\n\t * Combines multiple text strings into one text string.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | string} arg_n - Up to 255 data values that will be combined.\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/CONCATENATE.js\n\t */",
        "description": "Combines multiple text strings into one text string.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.CONCATENATE(\"John\", \" \", \"Adams\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg_n",
                "description": "Up to 255 data values that will be combined.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "CONCATENATE",
        "longname": "ApiWorksheetFunction#CONCATENATE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1799,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/CONCATENATE.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts a number to text, using a currency format $#.##.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number | string} arg1 - A number, a reference to a cell containing a number, or a formula that returns a number.\n\t * @param {?ApiRange | ?ApiName | ?number} arg2 - A number of digits to the right of the decimal point. The number is rounded as necessary.\n\t * If it is omitted, the function will assume it to be 2.\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/DOLLAR.js\n\t */",
        "description": "Converts a number to text, using a currency format $#.##.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.DOLLAR(98.9997, 3));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A number, a reference to a cell containing a number, or a formula that returns a number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "A number of digits to the right of the decimal point. The number is rounded as necessary.\nIf it is omitted, the function will assume it to be 2.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "DOLLAR",
        "longname": "ApiWorksheetFunction#DOLLAR",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1812,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/DOLLAR.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks whether two text strings are exactly the same, and returns <b>true</b> or <b>false</b>. This function is case-sensitive.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | string} arg1 - The first text string.\n\t * @param {ApiRange | ApiName | string} arg2 - The second text string.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/EXACT.js\n\t */",
        "description": "Checks whether two text strings are exactly the same, and returns <b>true</b> or <b>false</b>. This function is case-sensitive.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.EXACT(\"MyPassword\", \"mypassword\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The first text string.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The second text string.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "EXACT",
        "longname": "ApiWorksheetFunction#EXACT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1824,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/EXACT.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the starting position of one text string within another text string. This function is case-sensitive.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | string} arg1 - The text to find. Use double quotes (empty text) to match the first character in the search string.\n\t * Wildcard characters are not allowed.\n\t * @param {ApiRange | ApiName | string} arg2 - The text containing the text to find.\n\t * @param {?ApiRange | ?ApiName | ?number} arg3 - Specifies the character at which to start the search. The first character in the search string is character number 1.\n\t * If omitted, this parameter is equal to 1.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/FIND.js\n\t */",
        "description": "Returns the starting position of one text string within another text string. This function is case-sensitive.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.FIND(\"line\", \"Online Office\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The text to find. Use double quotes (empty text) to match the first character in the search string.\nWildcard characters are not allowed.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The text containing the text to find.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "Specifies the character at which to start the search. The first character in the search string is character number 1.\nIf omitted, this parameter is equal to 1.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "FIND",
        "longname": "ApiWorksheetFunction#FIND",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1839,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/FIND.js"
        ]
    },
    {
        "comment": "/**\n\t * Finds the specified substring within another string and is intended for languages that use the double-byte character set (DBCS) like Japanese, Chinese, Korean etc.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | string} arg1 - The text to find. Use double quotes (empty text) to match the first character in the search string.\n\t * Wildcard characters are not allowed.\n\t * @param {ApiRange | ApiName | string} arg2 - The text containing the text to find.\n\t * @param {?ApiRange | ?ApiName | ?number} arg3 - Specifies the character at which to start the search. The first character in the search string is character number 1.\n\t * If omitted, this parameter is equal to 1.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/FINDB.js\n\t */",
        "description": "Finds the specified substring within another string and is intended for languages that use the double-byte character set (DBCS) like Japanese, Chinese, Korean etc.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.FINDB(\"line\", \"Online Office\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The text to find. Use double quotes (empty text) to match the first character in the search string.\nWildcard characters are not allowed.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The text containing the text to find.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "Specifies the character at which to start the search. The first character in the search string is character number 1.\nIf omitted, this parameter is equal to 1.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "FINDB",
        "longname": "ApiWorksheetFunction#FINDB",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1854,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/FINDB.js"
        ]
    },
    {
        "comment": "/**\n\t * Rounds a number to the specified number of decimals and returns the result as text with or without commas.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The number to round and convert to text.\n\t * @param {?ApiRange | ?ApiName | ?number} arg2 - The number of digits to the right of the decimal point. If omitted, the function will assume it to be 2.\n\t * @param {?ApiRange | ?ApiName | ?boolean} arg3 - Specifies whether do display commas in the returned text (<b>false</b> or omitted) or not (<b>true</b>).\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/FIXED.js\n\t */",
        "description": "Rounds a number to the specified number of decimals and returns the result as text with or without commas.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.FIXED(1234.9, 1, false));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The number to round and convert to text.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The number of digits to the right of the decimal point. If omitted, the function will assume it to be 2.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "Specifies whether do display commas in the returned text (<b>false</b> or omitted) or not (<b>true</b>).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "FIXED",
        "longname": "ApiWorksheetFunction#FIXED",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1867,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/FIXED.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the specified number of characters from the start of a text string.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | string} arg1 - The text string containing the characters to extract.\n\t * @param {?ApiRange | ?ApiName | ?number} arg2 - A number of the substring characters. It must be greater than or equal to 0.\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/LEFT.js\n\t */",
        "description": "Returns the specified number of characters from the start of a text string.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.LEFT(\"Online Office\", 6));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The text string containing the characters to extract.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "A number of the substring characters. It must be greater than or equal to 0.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "LEFT",
        "longname": "ApiWorksheetFunction#LEFT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1879,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/LEFT.js"
        ]
    },
    {
        "comment": "/**\n\t * Extracts the substring from the specified string starting from the left character and is intended for languages that use the double-byte character set (DBCS) like Japanese, Chinese, Korean etc.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | string} arg1 - The text string containing the characters to extract.\n\t * @param {?ApiRange | ?ApiName | ?number} arg2 - A number of the substring characters, based on bytes.\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/LEFTB.js\n\t */",
        "description": "Extracts the substring from the specified string starting from the left character and is intended for languages that use the double-byte character set (DBCS) like Japanese, Chinese, Korean etc.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.LEFTB(\"Online Office\", 6));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The text string containing the characters to extract.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "A number of the substring characters, based on bytes.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "LEFTB",
        "longname": "ApiWorksheetFunction#LEFTB",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1891,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/LEFTB.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the number of characters in a text string.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | string} arg1 - The text whose length will be returned. Spaces are considered as characters.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/LEN.js\n\t */",
        "description": "Returns the number of characters in a text string.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.LEN(\"Online Office\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The text whose length will be returned. Spaces are considered as characters.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "LEN",
        "longname": "ApiWorksheetFunction#LEN",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1902,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/LEN.js"
        ]
    },
    {
        "comment": "/**\n\t * Analyses the specified string and returns the number of characters it contains and is intended for languages that use the double-byte character set (DBCS) like Japanese, Chinese, Korean etc.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | string} arg1 - The text whose length will be returned. Spaces are considered as characters.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/LENB.js\n\t */",
        "description": "Analyses the specified string and returns the number of characters it contains and is intended for languages that use the double-byte character set (DBCS) like Japanese, Chinese, Korean etc.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.LENB(\"Online Office\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The text whose length will be returned. Spaces are considered as characters.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "LENB",
        "longname": "ApiWorksheetFunction#LENB",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1913,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/LENB.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts all letters in a text string to lowercase.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | string} arg1 - The text to convert to lowercase. The text characters that are not letters are not changed.\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/LOWER.js\n\t */",
        "description": "Converts all letters in a text string to lowercase.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.LOWER(\"Day\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The text to convert to lowercase. The text characters that are not letters are not changed.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "LOWER",
        "longname": "ApiWorksheetFunction#LOWER",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1924,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/LOWER.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the characters from the middle of a text string, given a starting position and length.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | string} arg1 - The text string from which to extract the characters.\n\t * @param {ApiRange | ApiName | number} arg2 - The position of the first character to extract. The first text character is 1.\n\t * @param {ApiRange | ApiName | number} arg3 - A number of the characters to extract.\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/MID.js\n\t */",
        "description": "Returns the characters from the middle of a text string, given a starting position and length.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.MID(\"Online Office\", 3, 4));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The text string from which to extract the characters.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The position of the first character to extract. The first text character is 1.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "A number of the characters to extract.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "MID",
        "longname": "ApiWorksheetFunction#MID",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1937,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/MID.js"
        ]
    },
    {
        "comment": "/**\n\t * Extracts the characters from the specified string starting from any position and is intended for languages that use the double-byte character set (DBCS) like Japanese, Chinese, Korean etc.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | string} arg1 - The text string from which to extract the characters.\n\t * @param {ApiRange | ApiName | number} arg2 - The position of the first character to extract. The first text character is 1.\n\t * @param {ApiRange | ApiName | number} arg3 - A number of the characters to extract, based on bytes.\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/MIDB.js\n\t */",
        "description": "Extracts the characters from the specified string starting from any position and is intended for languages that use the double-byte character set (DBCS) like Japanese, Chinese, Korean etc.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.MIDB(\"Online Office\", 3, 4));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The text string from which to extract the characters.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The position of the first character to extract. The first text character is 1.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "A number of the characters to extract, based on bytes.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "MIDB",
        "longname": "ApiWorksheetFunction#MIDB",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1950,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/MIDB.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts text to a number, in a locale-independent way.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | string} arg1 - The string representing a number to convert.\n\t * @param {?ApiRange | ?ApiName | ?string} arg2 - The character used as the decimal separator in the string.\n\t * @param {?ApiRange | ?ApiName | ?string} arg3 - The character used as the group separator in the string.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/NUMBERVALUE.js\n\t */",
        "description": "Converts text to a number, in a locale-independent way.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.NUMBERVALUE(\"2.500,27\", \",\", \".\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The string representing a number to convert.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "string",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The character used as the decimal separator in the string.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "string",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The character used as the group separator in the string.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "NUMBERVALUE",
        "longname": "ApiWorksheetFunction#NUMBERVALUE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1963,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/NUMBERVALUE.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts a text string to proper case: the first letter in each word to uppercase, and all other letters to lowercase.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | string} arg1 - The text enclosed in quotation marks, a formula that returns text, or a reference to a cell containing text to partially capitalize.\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/PROPER.js\n\t */",
        "description": "Converts a text string to proper case: the first letter in each word to uppercase, and all other letters to lowercase.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.PROPER(\"dAVID CONNOR\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The text enclosed in quotation marks, a formula that returns text, or a reference to a cell containing text to partially capitalize.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "PROPER",
        "longname": "ApiWorksheetFunction#PROPER",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1974,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/PROPER.js"
        ]
    },
    {
        "comment": "/**\n\t * Replaces part of a text string with a different text string.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | string} arg1 - The text where some characters will be replaced.\n\t * @param {ApiRange | ApiName | number} arg2 - The position of the character in the original text that will be replaced with the new text.\n\t * @param {ApiRange | ApiName | number} arg3 - The number of characters in the original text that will be replaced.\n\t * @param {ApiRange | ApiName | string} arg4 - The text that will replace characters in the original text.\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/REPLACE.js\n\t */",
        "description": "Replaces part of a text string with a different text string.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.REPLACE(\"Online Office\", 8, 6, \"portal\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The text where some characters will be replaced.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The position of the character in the original text that will be replaced with the new text.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The number of characters in the original text that will be replaced.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The text that will replace characters in the original text.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "REPLACE",
        "longname": "ApiWorksheetFunction#REPLACE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 1988,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/REPLACE.js"
        ]
    },
    {
        "comment": "/**\n\t * Replaces a set of characters, based on the number of characters and the start position specified, with a new set of characters and is intended for languages that use the double-byte character set (DBCS) like Japanese, Chinese, Korean etc.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | string} arg1 - The text where some characters will be replaced.\n\t * @param {ApiRange | ApiName | number} arg2 - The position of the character in the original text that will be replaced with the new text.\n\t * @param {ApiRange | ApiName | number} arg3 - The number of characters in the original text that will be replaced, based on bytes.\n\t * @param {ApiRange | ApiName | string} arg4 - The text that will replace characters in the original text.\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/REPLACEB.js\n\t */",
        "description": "Replaces a set of characters, based on the number of characters and the start position specified, with a new set of characters and is intended for languages that use the double-byte character set (DBCS) like Japanese, Chinese, Korean etc.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.REPLACEB(\"Online Office\", 8, 6, \"portal\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The text where some characters will be replaced.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The position of the character in the original text that will be replaced with the new text.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The number of characters in the original text that will be replaced, based on bytes.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The text that will replace characters in the original text.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "REPLACEB",
        "longname": "ApiWorksheetFunction#REPLACEB",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2002,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/REPLACEB.js"
        ]
    },
    {
        "comment": "/**\n\t * Repeats text a given number of times. Use this function to fill a cell with a number of instances of a text string.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | string} arg1 - The text that will be repeated.\n\t * @param {ApiRange | ApiName | number} arg2 - A positive number specifying the number of times to repeat text.\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/REPT.js\n\t */",
        "description": "Repeats text a given number of times. Use this function to fill a cell with a number of instances of a text string.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.REPT(\"Text\", 3));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The text that will be repeated.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "A positive number specifying the number of times to repeat text.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "REPT",
        "longname": "ApiWorksheetFunction#REPT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2014,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/REPT.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the specified number of characters from the end of a text string.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | string} arg1 - The text string that contains the characters to extract.\n\t * @param {?ApiRange | ?ApiName | ?number} arg2 - A number of the substring characters. If it is omitted, the function will assume it to be 1.\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/RIGHT.js\n\t */",
        "description": "Returns the specified number of characters from the end of a text string.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.RIGHT(\"Online Office\", 2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The text string that contains the characters to extract.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "A number of the substring characters. If it is omitted, the function will assume it to be 1.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "RIGHT",
        "longname": "ApiWorksheetFunction#RIGHT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2026,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/RIGHT.js"
        ]
    },
    {
        "comment": "/**\n\t * Extracts a substring from a string starting from the right-most character, based on the specified number of characters and is intended for languages that use the double-byte character set (DBCS) like Japanese, Chinese, Korean etc.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | string} arg1 - The text string that contains the characters to extract.\n\t * @param {?ApiRange | ?ApiName | ?number} arg2 - A number of the substring characters, based on bytes.\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/RIGHTB.js\n\t */",
        "description": "Extracts a substring from a string starting from the right-most character, based on the specified number of characters and is intended for languages that use the double-byte character set (DBCS) like Japanese, Chinese, Korean etc.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.RIGHTB(\"Online Office\", 2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The text string that contains the characters to extract.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "A number of the substring characters, based on bytes.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "RIGHTB",
        "longname": "ApiWorksheetFunction#RIGHTB",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2038,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/RIGHTB.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the number of the character at which a specific character or text string is first found, reading left to right (not case-sensitive).\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | string} arg1 - The text to find. The ? and * wildcard characters can be used. Use ~? and ~* to find the ? and * characters.\n\t * @param {ApiRange | ApiName | string} arg2 - The text where to search for the specified text.\n\t * @param {?ApiRange | ?ApiName | ?number} arg3 - The character number in the search text, counting from the left, at which to start searching. If omitted, 1 is used.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/SEARCH.js\n\t */",
        "description": "Returns the number of the character at which a specific character or text string is first found, reading left to right (not case-sensitive).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.SEARCH(\"line\", \"Online Office\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The text to find. The ? and * wildcard characters can be used. Use ~? and ~* to find the ? and * characters.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The text where to search for the specified text.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The character number in the search text, counting from the left, at which to start searching. If omitted, 1 is used.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "SEARCH",
        "longname": "ApiWorksheetFunction#SEARCH",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2051,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/SEARCH.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the location of the specified substring in a string and is intended for languages that use the double-byte character set (DBCS) like Japanese, Chinese, Korean etc.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | string} arg1 - The text to find. The ? and * wildcard characters can be used. Use ~? and ~* to find the ? and * characters.\n\t * @param {ApiRange | ApiName | string} arg2 - The text where to search for the specified text.\n\t * @param {?ApiRange | ApiName | ?number} arg3 - The character number in the search text, counting from the left, at which to start searching. If omitted, 1 is used.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/SEARCHB.js\n\t */",
        "description": "Returns the location of the specified substring in a string and is intended for languages that use the double-byte character set (DBCS) like Japanese, Chinese, Korean etc.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.SEARCHB(\"line\", \"Online Office\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The text to find. The ? and * wildcard characters can be used. Use ~? and ~* to find the ? and * characters.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The text where to search for the specified text.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The character number in the search text, counting from the left, at which to start searching. If omitted, 1 is used.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "SEARCHB",
        "longname": "ApiWorksheetFunction#SEARCHB",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2064,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/SEARCHB.js"
        ]
    },
    {
        "comment": "/**\n\t * Replaces existing text with new text in a text string.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | string} arg1 - The text or the reference to a cell containing text in which the characters will be substituted.\n\t * @param {ApiRange | ApiName | string} arg2 - The existing text to replace. If the case of the original text does not match the case of text, the function will not replace the text.\n\t * @param {ApiRange | ApiName | string} arg3 - The text to replace the original text with.\n\t * @param {?ApiRange | ?ApiName | ?string} arg4 - Specifies which occurrence of the original text to replace. If omitted, every instance of the original text will be replaced.\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/SUBSTITUTE.js\n\t */",
        "description": "Replaces existing text with new text in a text string.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.SUBSTITUTE(\"Online Office is a cloud business service portal\", \"Office\", \"portal\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The text or the reference to a cell containing text in which the characters will be substituted.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The existing text to replace. If the case of the original text does not match the case of text, the function will not replace the text.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The text to replace the original text with.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "string",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "Specifies which occurrence of the original text to replace. If omitted, every instance of the original text will be replaced.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "SUBSTITUTE",
        "longname": "ApiWorksheetFunction#SUBSTITUTE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2078,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/SUBSTITUTE.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks whether a value is text, and returns the text if it is, or returns double quotes (empty text) if it is not.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number | string | boolean} arg1 - The value to test.\n\t * @returns {ApiRange | ApiName | string}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/T.js\n\t */",
        "description": "Checks whether a value is text, and returns the text if it is, or returns double quotes (empty text) if it is not.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.T(\"date and time\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value to test.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "T",
        "longname": "ApiWorksheetFunction#T",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2089,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/T.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts a value to text in a specific number format.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number | string} arg1 - A number, a formula that evaluates to a numeric value, or a reference to a cell containing a numeric value.\n\t * @param {ApiRange | ApiName | string} arg2 - A number format in the text form from the <b>Number format</b> combo box on the <b>Home</b> tab.\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/TEXT.js\n\t */",
        "description": "Converts a value to text in a specific number format.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.TEXT(45.5, \"$0.00\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A number, a formula that evaluates to a numeric value, or a reference to a cell containing a numeric value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "A number format in the text form from the <b>Number format</b> combo box on the <b>Home</b> tab.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "TEXT",
        "longname": "ApiWorksheetFunction#TEXT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2101,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/TEXT.js"
        ]
    },
    {
        "comment": "/**\n\t * Removes all spaces from a text string except for single spaces between words.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | string} arg1 - The text from which the spaces will be removed.\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/TRIM.js\n\t */",
        "description": "Removes all spaces from a text string except for single spaces between words.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.TRIM(\"  Online Office\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The text from which the spaces will be removed.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "TRIM",
        "longname": "ApiWorksheetFunction#TRIM",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2112,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/TRIM.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the Unicode character referenced by the given numeric value.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The Unicode number representing a character.\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/UNICHAR.js\n\t */",
        "description": "Returns the Unicode character referenced by the given numeric value.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.UNICHAR(378));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The Unicode number representing a character.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "UNICHAR",
        "longname": "ApiWorksheetFunction#UNICHAR",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2123,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/UNICHAR.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the number (code point) corresponding to the first character of the text.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | string} arg1 - The character for which the Unicode value will be returned.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/UNICODE.js\n\t */",
        "description": "Returns the number (code point) corresponding to the first character of the text.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.UNICODE(\"example\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The character for which the Unicode value will be returned.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "UNICODE",
        "longname": "ApiWorksheetFunction#UNICODE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2134,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/UNICODE.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts a text string to all uppercase letters.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | string} arg1 - The text which will be converted to uppercase, a reference or a text string.\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/UPPER.js\n\t */",
        "description": "Converts a text string to all uppercase letters.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.UPPER(\"Online Office\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The text which will be converted to uppercase, a reference or a text string.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "UPPER",
        "longname": "ApiWorksheetFunction#UPPER",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2145,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/UPPER.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts a text string that represents a number to a number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | string} arg1 - The text enclosed in quotation marks or a reference to a cell containing the text which will be converted to a number.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/VALUE.js\n\t */",
        "description": "Converts a text string that represents a number to a number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.VALUE(\"$3.50\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The text enclosed in quotation marks or a reference to a cell containing the text which will be converted to a number.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "VALUE",
        "longname": "ApiWorksheetFunction#VALUE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2156,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/VALUE.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the average of the absolute deviations of data points from their mean.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number | number[]} args - Up to 255 numeric values for which the average of the absolute deviations will be returned. The first argument is required,\n\t * subsequent arguments are optional. Arguments can be numbers, names, or arrays of numbers.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/AVEDEV.js\n\t */",
        "description": "Returns the average of the absolute deviations of data points from their mean.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.AVEDEV(78, 98, 123, 45, 70, 67, 3, 9, 289));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 numeric values for which the average of the absolute deviations will be returned. The first argument is required,\nsubsequent arguments are optional. Arguments can be numbers, names, or arrays of numbers.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "AVEDEV",
        "longname": "ApiWorksheetFunction#AVEDEV",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2168,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/AVEDEV.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the average (arithmetic mean) of the specified arguments.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number | number[]} args - Up to 255 numeric values for which the average value will be returned. The first argument is required,\n\t * subsequent arguments are optional. Arguments can be numbers, names, or arrays of numbers.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/AVERAGE.js\n\t */",
        "description": "Returns the average (arithmetic mean) of the specified arguments.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ans = func.AVERAGE(123, 197, 46, 345, 67, 456);\nworksheet.GetRange(\"B2\").SetValue(ans);\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 numeric values for which the average value will be returned. The first argument is required,\nsubsequent arguments are optional. Arguments can be numbers, names, or arrays of numbers.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "AVERAGE",
        "longname": "ApiWorksheetFunction#AVERAGE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2180,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/AVERAGE.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the average (arithmetic mean) of the specified arguments, evaluating text and <b>false</b> in arguments as 0; <b>true</b> evaluates as 1.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number | string | number[]} args - Up to 255 numeric values for which the average value will be returned. The first argument is required,\n\t * subsequent arguments are optional. Arguments can be numbers, text, or logical values, such as <b>true</b> and <b>false</b>, names, or arrays of numbers.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/AVERAGEA.js\n\t */",
        "description": "Returns the average (arithmetic mean) of the specified arguments, evaluating text and <b>false</b> in arguments as 0; <b>true</b> evaluates as 1.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ans = func.AVERAGEA(78, 98, 46, 123, 45, true, false);\nworksheet.GetRange(\"B2\").SetValue(ans);\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 numeric values for which the average value will be returned. The first argument is required,\nsubsequent arguments are optional. Arguments can be numbers, text, or logical values, such as <b>true</b> and <b>false</b>, names, or arrays of numbers.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "AVERAGEA",
        "longname": "ApiWorksheetFunction#AVERAGEA",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2192,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/AVERAGEA.js"
        ]
    },
    {
        "comment": "/**\n\t * Finds the average (arithmetic mean) for the cells specified by a given condition or criteria.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName} arg1 - The range of cells which will be evaluated.\n\t * @param {ApiRange | ApiName | number | string} arg2 - The condition or criteria in the form of a number, expression, or text that defines which cells will be used to find the average.\n\t * @param {?ApiRange | ?ApiName} arg3 - The actual cells to be used to find the average. If omitted, the cells in the range are used.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/AVERAGEIF.js\n\t */",
        "description": "Finds the average (arithmetic mean) for the cells specified by a given condition or criteria.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet numbers = [67, 87, 98, 45];\n\nfor (let i = 0; i < numbers.length; i++) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(numbers[i]);\n}\n\nlet range = worksheet.GetRange(\"A1:A4\");\nworksheet.GetRange(\"C1\").SetValue(func.AVERAGEIF(range, \">45\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The range of cells which will be evaluated.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The condition or criteria in the form of a number, expression, or text that defines which cells will be used to find the average.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The actual cells to be used to find the average. If omitted, the cells in the range are used.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "AVERAGEIF",
        "longname": "ApiWorksheetFunction#AVERAGEIF",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2205,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/AVERAGEIF.js"
        ]
    },
    {
        "comment": "/**\n\t * Finds the average (arithmetic mean) for the cells specified by a given set of conditions or criteria.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName} arg1 - The range of cells which will be evaluated.\n\t * @param {ApiRange | ApiName | number | string} arg2 - The first condition or criteria in the form of a number, expression, or text that defines which cells will be used to find the average.\n\t * @param {?ApiRange | ?ApiName} arg3 - The actual cells to be used to find the average. If omitted, the cells in the range are used.\n\t * @param {?ApiRange | ?ApiName | ?number | ?string} arg4 - Up to 127 additional conditions or criteria in the form of a number, expression, or text that defines which cells will be used to find the average.\n\t * These arguments are optional.\n\t * @param {?ApiRange | ?ApiName} arg5 - Up to 127 actual ranges to be used to find the average. If omitted, the cells in the range are used. These arguments are optional.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/AVERAGEIFS.js\n\t */",
        "description": "Finds the average (arithmetic mean) for the cells specified by a given set of conditions or criteria.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet year = [2016, 2016, 2016, 2017, 2017, 2017];\nlet products = [\"Apples\", \"Red apples\", \"ranges\", \"Green apples\", \"Apples\", \"Bananas\"];\nlet income = [\"$100.00\", \"$150.00\", \"$250.00\", \"$50.00\", \"$150.00\", \"$200.00\"];\n\nfor (let i = 0; i < year.length; i++) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(year[i]);\n}\nfor (let j = 0; j < products.length; j++) {\n    worksheet.GetRange(\"B\" + (j + 1)).SetValue(products[j]);\n}\nfor (let n = 0; n < income.length; n++) {\n    worksheet.GetRange(\"C\" + (n + 1)).SetValue(income[n]);\n}\n\nlet range1 = worksheet.GetRange(\"C1:C6\");\nlet range2 = worksheet.GetRange(\"B1:B6\");\nlet range3 = worksheet.GetRange(\"A1:A6\");\nworksheet.GetRange(\"E6\").SetValue(func.AVERAGEIFS(range1, range2, \"*Apples\", range3, 2016));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The range of cells which will be evaluated.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The first condition or criteria in the form of a number, expression, or text that defines which cells will be used to find the average.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The actual cells to be used to find the average. If omitted, the cells in the range are used.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "string",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "Up to 127 additional conditions or criteria in the form of a number, expression, or text that defines which cells will be used to find the average.\nThese arguments are optional.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "Up to 127 actual ranges to be used to find the average. If omitted, the cells in the range are used. These arguments are optional.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "AVERAGEIFS",
        "longname": "ApiWorksheetFunction#AVERAGEIFS",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2221,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/AVERAGEIFS.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the cumulative beta probability density function.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value between A and B at which to evaluate the function.\n\t * @param {ApiRange | ApiName | number} arg2 - The alpha parameter of the distribution which must be greater than 0.\n\t * @param {ApiRange | ApiName | number} arg3 - The beta parameter of the distribution which must be greater than 0.\n\t * @param {?ApiRange | ?ApiName | ?number} arg4 - An optional lower bound to the interval of x (A). If omitted, it is equal to 0.\n\t * @param {?ApiRange | ?ApiName | ?number} arg5 - An optional upper bound to the interval of x (B). If omitted, it is equal to 1.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/BETADIST.js\n\t */",
        "description": "Returns the cumulative beta probability density function.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ans = func.BETADIST(0.4, 4, 5);\nworksheet.GetRange(\"B2\").SetValue(ans);\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value between A and B at which to evaluate the function.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The alpha parameter of the distribution which must be greater than 0.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The beta parameter of the distribution which must be greater than 0.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "An optional lower bound to the interval of x (A). If omitted, it is equal to 0.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "An optional upper bound to the interval of x (B). If omitted, it is equal to 1.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "BETADIST",
        "longname": "ApiWorksheetFunction#BETADIST",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2236,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/BETADIST.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the beta probability distribution function.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value between A and B at which to evaluate the function.\n\t * @param {ApiRange | ApiName | number} arg2 - The alpha parameter of the distribution which must be greater than 0.\n\t * @param {ApiRange | ApiName | number} arg3 - The beta parameter of the distribution which must be greater than 0.\n\t * @param {ApiRange | ApiName | boolean} arg4 - Specifies if this is the cumulative distribution function (<b>true</b>) or the probability density function (<b>false</b>).\n\t * @param {?ApiRange | ?ApiName | ?number} arg5 - An optional lower bound to the interval of x (A). If omitted, it is equal to 0.\n\t * @param {?ApiRange | ?ApiName | ?number} arg6 - An optional upper bound to the interval of x (B). If omitted, it is equal to 1.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/BETA_DIST.js\n\t */",
        "description": "Returns the beta probability distribution function.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ans = func.BETA_DIST(0.4, 4, 5, false);\nworksheet.GetRange(\"B2\").SetValue(ans);\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value between A and B at which to evaluate the function.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The alpha parameter of the distribution which must be greater than 0.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The beta parameter of the distribution which must be greater than 0.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "Specifies if this is the cumulative distribution function (<b>true</b>) or the probability density function (<b>false</b>).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "An optional lower bound to the interval of x (A). If omitted, it is equal to 0.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg6",
                "description": "An optional upper bound to the interval of x (B). If omitted, it is equal to 1.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "BETA_DIST",
        "longname": "ApiWorksheetFunction#BETA_DIST",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2252,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/BETA_DIST.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the inverse of the cumulative beta probability density function (BETA_DIST).\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A probability associated with the beta distribution.\n\t * @param {ApiRange | ApiName | number} arg2 - The alpha parameter of the distribution which must be greater than 0.\n\t * @param {ApiRange | ApiName | number} arg3 - The beta parameter of the distribution which must be greater than 0.\n\t * @param {?ApiRange | ?ApiName | ?number} arg4 - An optional lower bound to the interval of x (A). If omitted, it is equal to 0.\n\t * @param {?ApiRange | ?ApiName | ?number} arg5 - An optional upper bound to the interval of x (B). If omitted, it is equal to 1.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/BETA_INV.js\n\t */",
        "description": "Returns the inverse of the cumulative beta probability density function (BETA_DIST).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ans = func.BETA_INV(0.2, 4, 5);\nworksheet.GetRange(\"B2\").SetValue(ans);\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A probability associated with the beta distribution.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The alpha parameter of the distribution which must be greater than 0.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The beta parameter of the distribution which must be greater than 0.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "An optional lower bound to the interval of x (A). If omitted, it is equal to 0.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "An optional upper bound to the interval of x (B). If omitted, it is equal to 1.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "BETA_INV",
        "longname": "ApiWorksheetFunction#BETA_INV",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2267,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/BETA_INV.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the inverse of the cumulative beta probability density function for a specified beta distribution (BETADIST).\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A probability associated with the beta distribution.\n\t * @param {ApiRange | ApiName | number} arg2 - The alpha parameter of the distribution which must be greater than 0.\n\t * @param {ApiRange | ApiName | number} arg3 - The beta parameter of the distribution which must be greater than 0.\n\t * @param {?ApiRange | ?ApiName | ?number} arg4 - An optional lower bound to the interval of x (A). If omitted, it is equal to 0.\n\t * @param {?ApiRange | ?ApiName | ?number} arg5 - An optional upper bound to the interval of x (B). If omitted, it is equal to 1.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/BETAINV.js\n\t */",
        "description": "Returns the inverse of the cumulative beta probability density function for a specified beta distribution (BETADIST).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.BETAINV(0.2, 4, 5));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A probability associated with the beta distribution.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The alpha parameter of the distribution which must be greater than 0.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The beta parameter of the distribution which must be greater than 0.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "An optional lower bound to the interval of x (A). If omitted, it is equal to 0.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "An optional upper bound to the interval of x (B). If omitted, it is equal to 1.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "BETAINV",
        "longname": "ApiWorksheetFunction#BETAINV",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2282,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/BETAINV.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the individual term binomial distribution probability.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The number of successes in trials.\n\t * @param {ApiRange | ApiName | number} arg2 - The number of independent trials.\n\t * @param {ApiRange | ApiName | number} arg3 - The probability of success on each trial.\n\t * @param {ApiRange | ApiName | boolean} arg4 - Specifies if this is the cumulative distribution function (<b>true</b>) or the probability mass function (<b>false</b>).\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/BINOMDIST.js\n\t */",
        "description": "Returns the individual term binomial distribution probability.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.BINOMDIST(50, 67, 0.45, false));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The number of successes in trials.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The number of independent trials.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The probability of success on each trial.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "Specifies if this is the cumulative distribution function (<b>true</b>) or the probability mass function (<b>false</b>).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "BINOMDIST",
        "longname": "ApiWorksheetFunction#BINOMDIST",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2296,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/BINOMDIST.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the individual term binomial distribution probability.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The number of successes in trials.\n\t * @param {ApiRange | ApiName | number} arg2 - The number of independent trials.\n\t * @param {ApiRange | ApiName | number} arg3 - The probability of success on each trial.\n\t * @param {ApiRange | ApiName | boolean} arg4 - Specifies if this is the cumulative distribution function (<b>true</b>) or the probability mass function (<b>false</b>).\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/BINOM_DIST.js\n\t */",
        "description": "Returns the individual term binomial distribution probability.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.BINOM_DIST(50, 67, 0.45, false));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The number of successes in trials.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The number of independent trials.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The probability of success on each trial.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "Specifies if this is the cumulative distribution function (<b>true</b>) or the probability mass function (<b>false</b>).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "BINOM_DIST",
        "longname": "ApiWorksheetFunction#BINOM_DIST",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2310,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/BINOM_DIST.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the probability of a trial result using a binomial distribution.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The number of independent trials.\n\t * @param {ApiRange | ApiName | number} arg2 - The probability of success on each trial.\n\t * @param {ApiRange | ApiName | number} arg3 - The minimum number of successes in the trials to calculate probability for, a numeric value greater than or equal to 0.\n\t * @param {?ApiRange | ?ApiName | ?number} arg4 - The maximum number of successes in the trials to calculate probability for,\n\t * a numeric value greater than the minimum number of successes and less than or equal to trials.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/BINOM_DIST_RANGE.js\n\t */",
        "description": "Returns the probability of a trial result using a binomial distribution.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.BINOM_DIST_RANGE(60, 0.75, 45, 50));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The number of independent trials.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The probability of success on each trial.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The minimum number of successes in the trials to calculate probability for, a numeric value greater than or equal to 0.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The maximum number of successes in the trials to calculate probability for,\na numeric value greater than the minimum number of successes and less than or equal to trials.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "BINOM_DIST_RANGE",
        "longname": "ApiWorksheetFunction#BINOM_DIST_RANGE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2325,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/BINOM_DIST_RANGE.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the smallest value for which the cumulative binomial distribution is greater than or equal to a criterion value.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The number of Bernoulli trials.\n\t * @param {ApiRange | ApiName | number} arg2 - The probability of success on each trial, a number between 0 and 1 inclusive.\n\t * @param {ApiRange | ApiName | number} arg3 - The criterion value, a number between 0 and 1 inclusive.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/BINOM_INV.js\n\t */",
        "description": "Returns the smallest value for which the cumulative binomial distribution is greater than or equal to a criterion value.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ans = func.BINOM_INV(678, 0.1, 0.007);\nworksheet.GetRange(\"B2\").SetValue(ans);\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The number of Bernoulli trials.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The probability of success on each trial, a number between 0 and 1 inclusive.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The criterion value, a number between 0 and 1 inclusive.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "BINOM_INV",
        "longname": "ApiWorksheetFunction#BINOM_INV",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2338,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/BINOM_INV.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the right-tailed probability of the chi-squared distribution.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value at which the distribution will be evaluated, a nonnegative number.\n\t * @param {ApiRange | ApiName | number} arg2 - The number of degrees of freedom, a number between 1 and 10^10, excluding 10^10.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/CHIDIST.js\n\t */",
        "description": "Returns the right-tailed probability of the chi-squared distribution.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet avg = func.CHIDIST(12, 10);\nworksheet.GetRange(\"B2\").SetValue(avg);\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value at which the distribution will be evaluated, a nonnegative number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The number of degrees of freedom, a number between 1 and 10^10, excluding 10^10.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "CHIDIST",
        "longname": "ApiWorksheetFunction#CHIDIST",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2350,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/CHIDIST.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the inverse of the right-tailed probability of the chi-squared distribution.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A probability associated with the chi-squared distribution, a value between 0 and 1 inclusive.\n\t * @param {ApiRange | ApiName | number} arg2 - The number of degrees of freedom, a number between 1 and 10^10, excluding 10^10.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/CHIINV.js\n\t */",
        "description": "Returns the inverse of the right-tailed probability of the chi-squared distribution.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ans = func.CHIDIST(0.4, 10);\nworksheet.GetRange(\"B2\").SetValue(ans);\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A probability associated with the chi-squared distribution, a value between 0 and 1 inclusive.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The number of degrees of freedom, a number between 1 and 10^10, excluding 10^10.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "CHIINV",
        "longname": "ApiWorksheetFunction#CHIINV",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2362,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/CHIINV.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the left-tailed probability of the chi-squared distribution.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value at which the distribution will be evaluated, a nonnegative number.\n\t * @param {ApiRange | ApiName | number} arg2 - The number of degrees of freedom, a number between 1 and 10^10, excluding 10^10.\n\t * @param {ApiRange | ApiName | boolean} arg3 - A logical value that determines the form of the function. If this argument is equal to <b>true</b>,\n\t * the cumulative distribution function is returned; if  it is equal to <b>false</b>, the probability density function is returned.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/CHISQ_DIST.js\n\t */",
        "description": "Returns the left-tailed probability of the chi-squared distribution.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.CHISQ_DIST(2, 3, false));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value at which the distribution will be evaluated, a nonnegative number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The number of degrees of freedom, a number between 1 and 10^10, excluding 10^10.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "A logical value that determines the form of the function. If this argument is equal to <b>true</b>,\nthe cumulative distribution function is returned; if  it is equal to <b>false</b>, the probability density function is returned.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "CHISQ_DIST",
        "longname": "ApiWorksheetFunction#CHISQ_DIST",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2376,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/CHISQ_DIST.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the right-tailed probability of the chi-squared distribution.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value at which the distribution will be evaluated, a nonnegative number.\n\t * @param {ApiRange | ApiName | number} arg2 - The number of degrees of freedom, a number between 1 and 10^10, excluding 10^10.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/CHISQ_DIST_RT.js\n\t */",
        "description": "Returns the right-tailed probability of the chi-squared distribution.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.CHISQ_DIST_RT(12, 10));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value at which the distribution will be evaluated, a nonnegative number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The number of degrees of freedom, a number between 1 and 10^10, excluding 10^10.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "CHISQ_DIST_RT",
        "longname": "ApiWorksheetFunction#CHISQ_DIST_RT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2388,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/CHISQ_DIST_RT.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the inverse of the left-tailed probability of the chi-squared distribution.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A probability associated with the chi-squared distribution, a value between 0 and 1 inclusive.\n\t * @param {ApiRange | ApiName | number} arg2- The number of degrees of freedom, a number between 1 and 10^10, excluding 10^10.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/CHISQ_INV.js\n\t */",
        "description": "Returns the inverse of the left-tailed probability of the chi-squared distribution.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ans = func.CHISQ_INV(0.4, 10);\nworksheet.GetRange(\"B2\").SetValue(ans);\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A probability associated with the chi-squared distribution, a value between 0 and 1 inclusive.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2-",
                "description": "The number of degrees of freedom, a number between 1 and 10^10, excluding 10^10.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "CHISQ_INV",
        "longname": "ApiWorksheetFunction#CHISQ_INV",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2400,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/CHISQ_INV.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the inverse of the right-tailed probability of the chi-squared distribution.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A probability associated with the chi-squared distribution, a value between 0 and 1 inclusive.\n\t * @param {ApiRange | ApiName | number} arg2 - The number of degrees of freedom, a number between 1 and 10^10, excluding 10^10.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/CHISQ_INV_RT.js\n\t */",
        "description": "Returns the inverse of the right-tailed probability of the chi-squared distribution.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ans = func.CHISQ_INV_RT(0.4, 10);\nworksheet.GetRange(\"B2\").SetValue(ans);\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A probability associated with the chi-squared distribution, a value between 0 and 1 inclusive.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The number of degrees of freedom, a number between 1 and 10^10, excluding 10^10.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "CHISQ_INV_RT",
        "longname": "ApiWorksheetFunction#CHISQ_INV_RT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2412,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/CHISQ_INV_RT.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the test for independence: the value from the chi-squared distribution for the statistic and the appropriate degrees of freedom.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number | string | boolean} arg1 - The range of data that contains observations to test against expected values.\n\t * @param {ApiRange | ApiName | number | string | boolean} arg2 - The range of data that contains the ratio of the product of row totals and column totals to the grand total.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/CHITEST.js\n\t */",
        "description": "Returns the test for independence: the value from the chi-squared distribution for the statistic and the appropriate degrees of freedom.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet actual1 = [\"Actual\", 58, 11, 10];\nlet actual2 = [\"Actual\", 35, 25, 23];\nlet expected1 = [\"Expected\", 45.35, 17.56, 16.09];\nlet expected2 = [\"Expected\", 47.65, 18.44, 16.91];\n\nfor (let i = 0; i < actual1.length; i++) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(actual1[i]);\n}\nfor (let j = 0; j < actual2.length; j++) {\n    worksheet.GetRange(\"B\" + (j + 1)).SetValue(actual2[j]);\n}\nfor (let n = 0; n < expected1.length; n++) {\n    worksheet.GetRange(\"C\" + (n + 1)).SetValue(expected1[n]);\n}\nfor (let m = 0; m < expected2.length; m++) {\n    worksheet.GetRange(\"D\" + (m + 1)).SetValue(expected2[m]);\n}\n\nlet range1 = worksheet.GetRange(\"A2:B4\");\nlet range2 = worksheet.GetRange(\"C2:D4\");\nworksheet.GetRange(\"D6\").SetValue(func.CHITEST(range1, range2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The range of data that contains observations to test against expected values.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The range of data that contains the ratio of the product of row totals and column totals to the grand total.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "CHITEST",
        "longname": "ApiWorksheetFunction#CHITEST",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2439,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/CHITEST.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the confidence interval for a population mean, using a normal distribution.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The significance level used to compute the confidence level, a number greater than 0 and less than 1.\n\t * @param {ApiRange | ApiName | number} arg2 - The population standard deviation for the data range and is assumed to be known. This value must be greater than 0.\n\t * @param {ApiRange | ApiName | number} arg3 - The sample size.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/CONFIDENCE.js\n\t */",
        "description": "Returns the confidence interval for a population mean, using a normal distribution.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ans = func.CONFIDENCE(0.5, 57, 8);\nworksheet.GetRange(\"B2\").SetValue(ans);\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The significance level used to compute the confidence level, a number greater than 0 and less than 1.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The population standard deviation for the data range and is assumed to be known. This value must be greater than 0.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The sample size.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "CONFIDENCE",
        "longname": "ApiWorksheetFunction#CONFIDENCE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2464,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/CONFIDENCE.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the confidence interval for a population mean, using a normal distribution.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The significance level used to compute the confidence level, a number greater than 0 and less than 1.\n\t * @param {ApiRange | ApiName | number} arg2 - The population standard deviation for the data range and is assumed to be known. This value must be greater than 0.\n\t * @param {ApiRange | ApiName | number} arg3 - The sample size.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/CONFIDENCE_NORM.js\n\t */",
        "description": "Returns the confidence interval for a population mean, using a normal distribution.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ans = func.CONFIDENCE_NORM(0.5, 57, 8);\nworksheet.GetRange(\"B2\").SetValue(ans);\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The significance level used to compute the confidence level, a number greater than 0 and less than 1.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The population standard deviation for the data range and is assumed to be known. This value must be greater than 0.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The sample size.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "CONFIDENCE_NORM",
        "longname": "ApiWorksheetFunction#CONFIDENCE_NORM",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2477,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/CONFIDENCE_NORM.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the confidence interval for a population mean, using a Student's t distribution.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The significance level used to compute the confidence level, a number greater than 0 and less than 1.\n\t * @param {ApiRange | ApiName | number} arg2 - The population standard deviation for the data range and is assumed to be known. This value must be greater than 0.\n\t * @param {ApiRange | ApiName | number} arg3 - The sample size.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/CONFIDENCE_T.js\n\t */",
        "description": "Returns the confidence interval for a population mean, using a Student's t distribution.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ans = func.CONFIDENCE_T(0.5, 57, 8);\nworksheet.GetRange(\"B2\").SetValue(ans);\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The significance level used to compute the confidence level, a number greater than 0 and less than 1.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The population standard deviation for the data range and is assumed to be known. This value must be greater than 0.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The sample size.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "CONFIDENCE_T",
        "longname": "ApiWorksheetFunction#CONFIDENCE_T",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2490,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/CONFIDENCE_T.js"
        ]
    },
    {
        "comment": "/**\n\t * Counts a number of cells in a range that contains numbers ignoring empty cells or those contaning text.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string | number | boolean | ApiRange | array | ApiName} args - Up to 255 items, or ranges to count numbers.\n\t * The first argument is required, subsequent arguments are optional. Arguments can be numbers, logical values and text representations of numbers, ranges, names, or arrays.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/COUNT.js\n\t */",
        "description": "Counts a number of cells in a range that contains numbers ignoring empty cells or those contaning text.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet numbersArr = [45, 6, 8];\nlet stringsArr = [\"Apples\", \"ranges\", \"Bananas\"]\n\n// Place the numbers in cells\nfor (let i = 0; i < numbersArr.length; i++) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(numbersArr[i]);\n}\n\n// Place the strings in cells\nfor (let n = 0; n < stringsArr.length; n++) {\n    worksheet.GetRange(\"B\" + (n + 1)).SetValue(stringsArr[n]);\n}\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.COUNT(worksheet.GetRange(\"A1:C3\"));\nworksheet.GetRange(\"D3\").SetValue(ans);\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "number",
                        "boolean",
                        "ApiRange",
                        "array",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "array"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 items, or ranges to count numbers.\nThe first argument is required, subsequent arguments are optional. Arguments can be numbers, logical values and text representations of numbers, ranges, names, or arrays.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "COUNT",
        "longname": "ApiWorksheetFunction#COUNT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2514,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/COUNT.js"
        ]
    },
    {
        "comment": "/**\n\t * Counts a number of cells in a range that are not empty.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string | number | boolean | ApiRange | array | ApiName} args - Up to 255 items, or ranges to count values.\n\t * The first argument is required, subsequent arguments are optional. Arguments can be numbers, logical values, text strings, ranges, names, or arrays.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/COUNTA.js\n\t */",
        "description": "Counts a number of cells in a range that are not empty.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet numbersArr = [45, 6, 8];\nlet stringsArr = [\"Apples\", \"ranges\", \"Bananas\"]\n\n// Place the numbers in cells\nfor (let i = 0; i < numbersArr.length; i++) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(numbersArr[i]);\n}\n\n// Place the strings in cells\nfor (let n = 0; n < stringsArr.length; n++) {\n    worksheet.GetRange(\"B\" + (n + 1)).SetValue(stringsArr[n]);\n}\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.COUNTA(worksheet.GetRange(\"A1:C3\"));\nworksheet.GetRange(\"D3\").SetValue(ans);\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "number",
                        "boolean",
                        "ApiRange",
                        "array",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "array"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 items, or ranges to count values.\nThe first argument is required, subsequent arguments are optional. Arguments can be numbers, logical values, text strings, ranges, names, or arrays.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "COUNTA",
        "longname": "ApiWorksheetFunction#COUNTA",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2526,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/COUNTA.js"
        ]
    },
    {
        "comment": "/**\n\t * Counts a number of empty cells in a specified range of cells.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName} arg1 - The range to count the empty cells.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/COUNTBLANK.js\n\t */",
        "description": "Counts a number of empty cells in a specified range of cells.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet numbersArr = [45, 6, 8];\nlet stringsArr = [\"Apples\", \"ranges\", \"Bananas\"]\n\n// Place the numbers in cells\nfor (let i = 0; i < numbersArr.length; i++) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(numbersArr[i]);\n}\n\n// Place the strings in cells\nfor (let n = 0; n < stringsArr.length; n++) {\n    worksheet.GetRange(\"B\" + (n + 1)).SetValue(stringsArr[n]);\n}\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.COUNTBLANK(worksheet.GetRange(\"A1:C3\"));\nworksheet.GetRange(\"D3\").SetValue(ans);\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The range to count the empty cells.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "COUNTBLANK",
        "longname": "ApiWorksheetFunction#COUNTBLANK",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2537,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/COUNTBLANK.js"
        ]
    },
    {
        "comment": "/**\n\t * Counts a number of cells within a range that meet the given condition.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName} arg1 - The range of cells to count nonblank cells.\n\t * @param {ApiRange | ApiName | number | string} arg2 - The condition in the form of a number, expression, or text that defines which cells will be counted.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/COUNTIF.js\n\t */",
        "description": "Counts a number of cells within a range that meet the given condition.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet fruits = [\"Apples\", \"ranges\", \"Bananas\"];\nlet numbers = [45, 6, 8];\n\nfor (let i = 0; i < fruits.length; i++) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(fruits[i]);\n}\nfor (let j = 0; j < numbers.length; j++) {\n    worksheet.GetRange(\"B\" + (j + 1)).SetValue(numbers[j]);\n}\n\nlet range = worksheet.GetRange(\"A1:B3\");\nworksheet.GetRange(\"D3\").SetValue(func.COUNTIF(range, \"*es\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The range of cells to count nonblank cells.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The condition in the form of a number, expression, or text that defines which cells will be counted.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "COUNTIF",
        "longname": "ApiWorksheetFunction#COUNTIF",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2549,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/COUNTIF.js"
        ]
    },
    {
        "comment": "/**\n\t * Counts a number of cells specified by a given set of conditions or criteria.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName} arg1 - The first range of cells to count nonblank cells.\n\t * @param {ApiRange | ApiName | number | string} arg2 - The first condition in the form of a number, expression, or text that defines which cells will be counted.\n\t * @param {ApiRange | ApiName} arg3 - Up to 127 additional ranges of cells to count nonblank cells. This argument is optional.\n\t * @param {ApiRange | ApiName | number | string} arg4 - Up to 127 additional conditions in the form of a number, expression, or text that define which cells will be counted.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/COUNTIFS.js\n\t */",
        "description": "Counts a number of cells specified by a given set of conditions or criteria.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet buyer = [\"Buyer\", \"Tom\", \"Bob\", \"Ann\", \"Kate\", \"John\"];\nlet product = [\"Product\", \"Apples\", \"Red apples\", \"ranges\", \"Green apples\", \"ranges\"];\nlet quantity = [\"Quantity\", 12, 45, 18, 26, 10];\n\nfor (let i = 0; i < buyer.length; i++) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(buyer[i]);\n}\nfor (let j = 0; j < product.length; j++) {\n    worksheet.GetRange(\"B\" + (j + 1)).SetValue(product[j]);\n}\nfor (let n = 0; n < quantity.length; n++) {\n    worksheet.GetRange(\"C\" + (n + 1)).SetValue(quantity[n]);\n}\n\nlet range1 = worksheet.GetRange(\"B2:B6\");\nlet range2 = worksheet.GetRange(\"C2:C6\");\nworksheet.GetRange(\"E6\").SetValue(func.COUNTIFS(range1, \"*apples\", range2, \"45\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The first range of cells to count nonblank cells.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The first condition in the form of a number, expression, or text that defines which cells will be counted.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "Up to 127 additional ranges of cells to count nonblank cells. This argument is optional.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "Up to 127 additional conditions in the form of a number, expression, or text that define which cells will be counted.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "COUNTIFS",
        "longname": "ApiWorksheetFunction#COUNTIFS",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2563,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/COUNTIFS.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the smallest value for which the cumulative binomial distribution is greater than or equal to a criterion value.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The number of Bernoulli trials.\n\t * @param {ApiRange | ApiName | number} arg2 - The probability of success on each trial, a number between 0 and 1 inclusive.\n\t * @param {ApiRange | ApiName | number} arg3 - The criterion value, a number between 0 and 1 inclusive.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/CRITBINOM.js\n\t */",
        "description": "Returns the smallest value for which the cumulative binomial distribution is greater than or equal to a criterion value.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ans = func.CRITBINOM(678, 0.1, 0.007);\nworksheet.GetRange(\"B2\").SetValue(ans);\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The number of Bernoulli trials.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The probability of success on each trial, a number between 0 and 1 inclusive.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The criterion value, a number between 0 and 1 inclusive.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "CRITBINOM",
        "longname": "ApiWorksheetFunction#CRITBINOM",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2615,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/CRITBINOM.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the sum of squares of deviations of data points from their sample mean.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number | number[]} args - Up to 255 numerical values for which to find the sum of squares of deviations.\n\t * The first argument is required, subsequent arguments are optional. Arguments can be numbers, names, or arrays of numbers.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/DEVSQ.js\n\t */",
        "description": "Returns the sum of squares of deviations of data points from their sample mean.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet argumentsArrA = [34, 244];\nlet argumentsArrB = [769, 445];\nlet argumentsArrC = [76, 677];\nlet argumentsArrD = [89, 56];\nlet argumentsArrE = [98, 13];\n\n// Place the numbers in cells\nfor (let a = 0; a < argumentsArrA.length; a++) {\n    worksheet.GetRange(\"A\" + (a + 1)).SetValue(argumentsArrA[a]);\n}\nfor (let b = 0; b < argumentsArrB.length; b++) {\n    worksheet.GetRange(\"B\" + (b + 1)).SetValue(argumentsArrB[b]);\n}\nfor (let c = 0; c < argumentsArrC.length; c++) {\n    worksheet.GetRange(\"C\" + (c + 1)).SetValue(argumentsArrC[c]);\n}\nfor (let d = 0; d < argumentsArrD.length; d++) {\n    worksheet.GetRange(\"D\" + (d + 1)).SetValue(argumentsArrD[d]);\n}\nfor (let e = 0; e < argumentsArrE.length; e++) {\n    worksheet.GetRange(\"E\" + (e + 1)).SetValue(argumentsArrE[e]);\n}\n\n// Analyze the range of data \nlet func = Api.GetWorksheetFunction();\nlet ans = func.DEVSQ(worksheet.GetRange(\"A1:E2\"));\nworksheet.GetRange(\"E3\").SetValue(ans);\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 numerical values for which to find the sum of squares of deviations.\nThe first argument is required, subsequent arguments are optional. Arguments can be numbers, names, or arrays of numbers.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "DEVSQ",
        "longname": "ApiWorksheetFunction#DEVSQ",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2627,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/DEVSQ.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the exponential distribution.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value of the x function, a nonnegative number.\n\t * @param {ApiRange | ApiName | number} arg2 - The lambda parameter value, a positive number.\n\t * @param {ApiRange | ApiName | boolean} arg3 - A logical value that determines the function form. If this parameter is <b>true</b>,\n\t * the function will return the cumulative distribution function, if it is <b>false</b>, it will return the probability density function.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/EXPON_DIST.js\n\t */",
        "description": "Returns the exponential distribution.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ans = func.EXPON_DIST(0.5, 3, false);\nworksheet.GetRange(\"B2\").SetValue(ans);\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value of the x function, a nonnegative number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The lambda parameter value, a positive number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "A logical value that determines the function form. If this parameter is <b>true</b>,\nthe function will return the cumulative distribution function, if it is <b>false</b>, it will return the probability density function.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "EXPON_DIST",
        "longname": "ApiWorksheetFunction#EXPON_DIST",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2641,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/EXPON_DIST.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the exponential distribution.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value of the x function, a nonnegative number.\n\t * @param {ApiRange | ApiName | number} arg2 - The lambda parameter value, a positive number.\n\t * @param {ApiRange | ApiName | boolean} arg3 - A logical value that determines the function form. If this parameter is <b>true</b>,\n\t * the function will return the cumulative distribution function, if it is <b>false</b>, it will return the probability density function.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/EXPONDIST.js\n\t */",
        "description": "Returns the exponential distribution.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ans = func.F_DIST(10, 6, 4, false);\nworksheet.GetRange(\"B2\").SetValue(ans);\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value of the x function, a nonnegative number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The lambda parameter value, a positive number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "A logical value that determines the function form. If this parameter is <b>true</b>,\nthe function will return the cumulative distribution function, if it is <b>false</b>, it will return the probability density function.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "EXPONDIST",
        "longname": "ApiWorksheetFunction#EXPONDIST",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2655,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/EXPONDIST.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the (left-tailed) F probability distribution (degree of diversity) for two data sets.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value at which to evaluate the function, a nonnegative number.\n\t * @param {ApiRange | ApiName | number} arg2 - The numerator degrees of freedom, a number between 1 and 10^10, excluding 10^10.\n\t * @param {ApiRange | ApiName | number} arg3 - The denominator degrees of freedom, a number between 1 and 10^10, excluding 10^10.\n\t * @param {ApiRange | ApiName | boolean} arg4 - A logical value that determines the function form. If this parameter is <b>true</b>,\n\t * the function will return the cumulative distribution function, if it is <b>false</b>, it will return the probability density function.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/F_DIST.js\n\t */",
        "description": "Returns the (left-tailed) F probability distribution (degree of diversity) for two data sets.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ans = func.F_DIST(10, 6, 4, false);\nworksheet.GetRange(\"B2\").SetValue(ans);\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value at which to evaluate the function, a nonnegative number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The numerator degrees of freedom, a number between 1 and 10^10, excluding 10^10.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The denominator degrees of freedom, a number between 1 and 10^10, excluding 10^10.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "A logical value that determines the function form. If this parameter is <b>true</b>,\nthe function will return the cumulative distribution function, if it is <b>false</b>, it will return the probability density function.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "F_DIST",
        "longname": "ApiWorksheetFunction#F_DIST",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2670,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/F_DIST.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the (right-tailed) F probability distribution (degree of diversity) for two data sets.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value at which to evaluate the function, a nonnegative number.\n\t * @param {ApiRange | ApiName | number} arg2 - The numerator degrees of freedom, a number between 1 and 10^10, excluding 10^10.\n\t * @param {ApiRange | ApiName | number} arg3 - The denominator degrees of freedom, a number between 1 and 10^10, excluding 10^10.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/FDIST.js\n\t */",
        "description": "Returns the (right-tailed) F probability distribution (degree of diversity) for two data sets.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ans = func.FDIST(10, 6, 4);\nworksheet.GetRange(\"B2\").SetValue(ans);\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value at which to evaluate the function, a nonnegative number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The numerator degrees of freedom, a number between 1 and 10^10, excluding 10^10.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The denominator degrees of freedom, a number between 1 and 10^10, excluding 10^10.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "FDIST",
        "longname": "ApiWorksheetFunction#FDIST",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2683,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/FDIST.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the (right-tailed) F probability distribution (degree of diversity) for two data sets.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value at which to evaluate the function, a nonnegative number.\n\t * @param {ApiRange | ApiName | number} arg2 - The numerator degrees of freedom, a number between 1 and 10^10, excluding 10^10.\n\t * @param {ApiRange | ApiName | number} arg3 - The denominator degrees of freedom, a number between 1 and 10^10, excluding 10^10.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/F_DIST_RT.js\n\t */",
        "description": "Returns the (right-tailed) F probability distribution (degree of diversity) for two data sets.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ans = func.F_DIST_RT(10, 6, 4);\nworksheet.GetRange(\"B2\").SetValue(ans);\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value at which to evaluate the function, a nonnegative number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The numerator degrees of freedom, a number between 1 and 10^10, excluding 10^10.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The denominator degrees of freedom, a number between 1 and 10^10, excluding 10^10.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "F_DIST_RT",
        "longname": "ApiWorksheetFunction#F_DIST_RT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2696,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/F_DIST_RT.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the inverse of the (left-tailed) F probability distribution: if p = F.DIST(x,...), then F.INV(p,...) = x.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A probability associated with the F cumulative distribution, a number between 0 and 1 inclusive.\n\t * @param {ApiRange | ApiName | number} arg2 - The numerator degrees of freedom, a number between 1 and 10^10, excluding 10^10.\n\t * @param {ApiRange | ApiName | number} arg3 - The denominator degrees of freedom, a number between 1 and 10^10, excluding 10^10.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/F_INV.js\n\t */",
        "description": "Returns the inverse of the (left-tailed) F probability distribution: if p = F.DIST(x,...), then F.INV(p,...) = x.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ans = func.F_INV(0.01, 6, 4);\nworksheet.GetRange(\"B2\").SetValue(ans);\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A probability associated with the F cumulative distribution, a number between 0 and 1 inclusive.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The numerator degrees of freedom, a number between 1 and 10^10, excluding 10^10.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The denominator degrees of freedom, a number between 1 and 10^10, excluding 10^10.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "F_INV",
        "longname": "ApiWorksheetFunction#F_INV",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2709,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/F_INV.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the inverse of the (right-tailed) F probability distribution: if p = FDIST(x,...), then FINV(p,...) = x.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A probability associated with the F cumulative distribution, a number between 0 and 1 inclusive.\n\t * @param {ApiRange | ApiName | number} arg2 - The numerator degrees of freedom, a number between 1 and 10^10, excluding 10^10.\n\t * @param {ApiRange | ApiName | number} arg3 - The denominator degrees of freedom, a number between 1 and 10^10, excluding 10^10.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/FINV.js\n\t */",
        "description": "Returns the inverse of the (right-tailed) F probability distribution: if p = FDIST(x,...), then FINV(p,...) = x.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ans = func.FINV(0.01, 6, 4);\nworksheet.GetRange(\"B2\").SetValue(ans);\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A probability associated with the F cumulative distribution, a number between 0 and 1 inclusive.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The numerator degrees of freedom, a number between 1 and 10^10, excluding 10^10.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The denominator degrees of freedom, a number between 1 and 10^10, excluding 10^10.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "FINV",
        "longname": "ApiWorksheetFunction#FINV",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2722,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/FINV.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the inverse of the (right-tailed) F probability distribution: if p = F.DIST.RT(x,...), then F.INV.RT(p,...) = x.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A probability associated with the F cumulative distribution, a number between 0 and 1 inclusive.\n\t * @param {ApiRange | ApiName | number} arg2 - The numerator degrees of freedom, a number between 1 and 10^10, excluding 10^10.\n\t * @param {ApiRange | ApiName | number} arg3 - The denominator degrees of freedom, a number between 1 and 10^10, excluding 10^10.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/F_INV_RT.js\n\t */",
        "description": "Returns the inverse of the (right-tailed) F probability distribution: if p = F.DIST.RT(x,...), then F.INV.RT(p,...) = x.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.F_INV_RT(0.01, 6, 4));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A probability associated with the F cumulative distribution, a number between 0 and 1 inclusive.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The numerator degrees of freedom, a number between 1 and 10^10, excluding 10^10.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The denominator degrees of freedom, a number between 1 and 10^10, excluding 10^10.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "F_INV_RT",
        "longname": "ApiWorksheetFunction#F_INV_RT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2735,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/F_INV_RT.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the Fisher transformation.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value for the transformation, a number between -1 and 1, excluding -1 and 1.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/FISHER.js\n\t */",
        "description": "Returns the Fisher transformation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ans = func.FISHER(0.56);\nworksheet.GetRange(\"B2\").SetValue(ans);\n\n\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value for the transformation, a number between -1 and 1, excluding -1 and 1.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "FISHER",
        "longname": "ApiWorksheetFunction#FISHER",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2746,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/FISHER.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the inverse of the Fisher transformation: if y = FISHER(x), then FISHERINV(y) = x.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value to perform the inverse of the transformation.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/FISHERINV.js\n\t */",
        "description": "Returns the inverse of the Fisher transformation: if y = FISHER(x), then FISHERINV(y) = x.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ans = func.FISHERINV(0.56);\nworksheet.GetRange(\"B2\").SetValue(ans);\n\n\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value to perform the inverse of the transformation.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "FISHERINV",
        "longname": "ApiWorksheetFunction#FISHERINV",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2757,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/FISHERINV.js"
        ]
    },
    {
        "comment": "/**\n\t * A numeric value that specifies which function should be used to aggregate identical time values in the timeline data range.\n\t * <b>1</b> (or omitted) - AVERAGE.\n\t * <b>2</b> - COUNT.\n\t * <b>3</b> - COUNTA.\n\t * <b>4</b> - MAX.\n\t * <b>5</b> - MEDIAN.\n\t * <b>6</b> - MIN.\n\t * <b>7</b> - SUM.\n\t * @typedef {(1 | 2 | 3 | 4 | 5 | 6 | 7)} Aggregation\n\t * @see office-js-api/Examples/Enumerations/Aggregation.js\n\t */",
        "description": "A numeric value that specifies which function should be used to aggregate identical time values in the timeline data range.\n<b>1</b> (or omitted) - AVERAGE.\n<b>2</b> - COUNT.\n<b>3</b> - COUNTA.\n<b>4</b> - MAX.\n<b>5</b> - MEDIAN.\n<b>6</b> - MIN.\n<b>7</b> - SUM.",
        "name": "Aggregation",
        "longname": "Aggregation",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 2773,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/Aggregation.js"
        ],
        "type": {
            "names": [
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7"
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "1"
                    },
                    {
                        "type": "NameExpression",
                        "name": "2"
                    },
                    {
                        "type": "NameExpression",
                        "name": "3"
                    },
                    {
                        "type": "NameExpression",
                        "name": "4"
                    },
                    {
                        "type": "NameExpression",
                        "name": "5"
                    },
                    {
                        "type": "NameExpression",
                        "name": "6"
                    },
                    {
                        "type": "NameExpression",
                        "name": "7"
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Сalculates or predicts a future value based on existing (historical) values by using the AAA version of the Exponential Smoothing (ETS) algorithm.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A date for which a new value will be predicted. Must be after the last date in the timeline.\n\t * @param {ApiRange | ApiName | number[]} arg2 - A range or an array of numeric data that determines the historical values for which a new point will be predicted.\n\t * @param {ApiRange | ApiName} arg3 - A range of date/time values that correspond to the historical values.\n\t * The timeline range must be of the same size as the second argument. Date/time values must have a constant step between them and can't be zero.\n\t * @param {?ApiRange | ?ApiName | ?number} arg4 - An optional numeric value that specifies the length of the seasonal pattern. The default value of 1 indicates seasonality is detected automatically.\n\t * The 0 value means no seasonality.\n\t * @param {?ApiRange | ?ApiName | ?number} arg5 - An optional numeric value to handle missing values. The default value of 1 replaces missing values by interpolation, and 0 replaces them with zeros.\n\t * @param {?ApiRange | ?ApiName | ?number} arg6 - An optional numeric value to aggregate multiple values with the same time stamp.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/FORECAST_ETS.js\n\t */",
        "description": "Сalculates or predicts a future value based on existing (historical) values by using the AAA version of the Exponential Smoothing (ETS) algorithm.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet dates = [\"10/1/2017\", \"11/1/2017\", \"12/1/2017\", \"1/1/2018\", \"2/1/2018\", \"3/1/2018\"];\nlet numbers = [12558, 14356, 16345, 18678, 14227];\n\nfor (let i = 0; i < dates.length; i++) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(dates[i]);\n}\nfor (let j = 0; j < numbers.length; j++) {\n    worksheet.GetRange(\"B\" + (j + 1)).SetValue(numbers[j]);\n}\n\nworksheet.GetRange(\"A1\").SetColumnWidth(15);\nlet range1 = worksheet.GetRange(\"B1:B5\");\nlet range2 = worksheet.GetRange(\"A1:A5\");\nworksheet.GetRange(\"B6\").SetValue(func.FORECAST_ETS(\"3/1/2018\", range1, range2, 0, 1, 1));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A date for which a new value will be predicted. Must be after the last date in the timeline.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "A range or an array of numeric data that determines the historical values for which a new point will be predicted.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "A range of date/time values that correspond to the historical values.\nThe timeline range must be of the same size as the second argument. Date/time values must have a constant step between them and can't be zero.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "An optional numeric value that specifies the length of the seasonal pattern. The default value of 1 indicates seasonality is detected automatically.\nThe 0 value means no seasonality.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "An optional numeric value to handle missing values. The default value of 1 replaces missing values by interpolation, and 0 replaces them with zeros.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg6",
                "description": "An optional numeric value to aggregate multiple values with the same time stamp.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "FORECAST_ETS",
        "longname": "ApiWorksheetFunction#FORECAST_ETS",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2801,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/FORECAST_ETS.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a confidence interval for the forecast value at the specified target date.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A date for which a new value will be predicted. Must be after the last date in the timeline.\n\t * @param {ApiRange | ApiName | number[]} arg2 - A range or an array of numeric data that determines the historical values for which a new point will be predicted.\n\t * @param {ApiRange | ApiName} arg3 - A range of date/time values that correspond to the historical values.\n\t * The timeline range must be of the same size as the second argument. Date/time values must have a constant step between them and can't be zero.\n\t * @param {?ApiRange | ?ApiName | ?number} arg4 - A number between 0 and 1 that shows the confidence level for the calculated confidence interval. The default value is .95.\n\t * @param {?ApiRange | ?ApiName | ?number} arg5 - An optional numeric value that specifies the length of the seasonal pattern. The default value of 1 indicates seasonality is detected automatically.\n\t * The 0 value means no seasonality.\n\t * @param {?ApiRange | ?ApiName | ?number} arg6 - An optional numeric value to handle missing values. The default value of 1 replaces missing values by interpolation, and 0 replaces them with zeros.\n\t * @param {?ApiRange | ?ApiName | ?number} arg7 - An optional numeric value to aggregate multiple values with the same time stamp.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/FORECAST_ETS_CONFINT.js\n\t */",
        "description": "Returns a confidence interval for the forecast value at the specified target date.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet dates = [\"10/1/2017\", \"11/1/2017\", \"12/1/2017\", \"1/1/2018\", \"2/1/2018\", \"3/1/2018\"];\nlet numbers = [12558, 14356, 16345, 18678, 14227];\n\nfor (let i = 0; i < dates.length; i++) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(dates[i]);\n}\nfor (let j = 0; j < numbers.length; j++) {\n    worksheet.GetRange(\"B\" + (j + 1)).SetValue(numbers[j]);\n}\n\nlet range1 = worksheet.GetRange(\"B1:B5\");\nlet range2 = worksheet.GetRange(\"A1:A5\");\nworksheet.GetRange(\"B6\").SetValue(func.FORECAST_ETS_CONFINT(\"3/1/2018\", range1, range2, 0.95, 1, 1, 1));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A date for which a new value will be predicted. Must be after the last date in the timeline.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "A range or an array of numeric data that determines the historical values for which a new point will be predicted.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "A range of date/time values that correspond to the historical values.\nThe timeline range must be of the same size as the second argument. Date/time values must have a constant step between them and can't be zero.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "A number between 0 and 1 that shows the confidence level for the calculated confidence interval. The default value is .95.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "An optional numeric value that specifies the length of the seasonal pattern. The default value of 1 indicates seasonality is detected automatically.\nThe 0 value means no seasonality.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg6",
                "description": "An optional numeric value to handle missing values. The default value of 1 replaces missing values by interpolation, and 0 replaces them with zeros.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg7",
                "description": "An optional numeric value to aggregate multiple values with the same time stamp.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "FORECAST_ETS_CONFINT",
        "longname": "ApiWorksheetFunction#FORECAST_ETS_CONFINT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2820,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/FORECAST_ETS_CONFINT.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the length of the repetitive pattern an application detects for the specified time series.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number[]} arg1 - A range or an array of numeric data that determines the historical values for which a new point will be predicted.\n\t * @param {ApiRange | ApiName} arg2 - A range of date/time values that correspond to the historical values.\n\t * The timeline range must be of the same size as the second argument. Date/time values must have a constant step between them and can't be zero.\n\t * @param {?ApiRange | ?ApiName | ?number} arg3 - An optional numeric value to handle missing values. The default value of 1 replaces missing values by interpolation, and 0 replaces them with zeros.\n\t * @param {?ApiRange | ?ApiName | ?number} arg4 - An optional numeric value to aggregate multiple values with the same time stamp.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/FORECAST_ETS_SEASONALITY.js\n\t */",
        "description": "Returns the length of the repetitive pattern an application detects for the specified time series.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet dates = [\"10/1/2017\", \"11/1/2017\", \"12/1/2017\", \"1/1/2018\", \"2/1/2018\"];\nlet numbers = [12558, 14356, 16345, 18678, 14227];\n\nfor (let i = 0; i < dates.length; i++) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(dates[i]);\n}\nfor (let j = 0; j < numbers.length; j++) {\n    worksheet.GetRange(\"B\" + (j + 1)).SetValue(numbers[j]);\n}\n\nlet range1 = worksheet.GetRange(\"B1:B5\");\nlet range2 = worksheet.GetRange(\"A1:A5\");\nworksheet.GetRange(\"B6\").SetValue(func.FORECAST_ETS_SEASONALITY(range1, range2, 1, 1));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A range or an array of numeric data that determines the historical values for which a new point will be predicted.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "A range of date/time values that correspond to the historical values.\nThe timeline range must be of the same size as the second argument. Date/time values must have a constant step between them and can't be zero.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "An optional numeric value to handle missing values. The default value of 1 replaces missing values by interpolation, and 0 replaces them with zeros.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "An optional numeric value to aggregate multiple values with the same time stamp.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "FORECAST_ETS_SEASONALITY",
        "longname": "ApiWorksheetFunction#FORECAST_ETS_SEASONALITY",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2835,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/FORECAST_ETS_SEASONALITY.js"
        ]
    },
    {
        "comment": "/**\n\t * A numeric value between 1 and 8 that specifies which statistic will be returned.\n\t * <b>1</b> - Alpha parameter of ETS algorithm - the base value parameter.\n\t * <b>2</b> - Beta parameter of ETS algorithm - the trend value parameter.\n\t * <b>3</b> - Gamma parameter of ETS algorithm - the seasonality value parameter.\n\t * <b>4</b> - MASE (mean absolute scaled error) metric - a measure of the accuracy of forecasts.\n\t * <b>5</b> - SMAPE (symmetric mean absolute percentage error) metric - a measure of the accuracy based on percentage errors.\n\t * <b>6</b> - MAE (mean absolute error) metric - a measure of the accuracy of forecasts.\n\t * <b>7</b> - RMSE (root mean squared error) metric - a measure of the differences between predicted and observed values.\n\t * <b>8</b> - Step size detected in the timeline.\n\t * @typedef {(1 | 2 | 3 | 4 | 5 | 6 | 7 | 8)} StatisticType\n\t * @see office-js-api/Examples/Enumerations/StatisticType.js\n\t */",
        "description": "A numeric value between 1 and 8 that specifies which statistic will be returned.\n<b>1</b> - Alpha parameter of ETS algorithm - the base value parameter.\n<b>2</b> - Beta parameter of ETS algorithm - the trend value parameter.\n<b>3</b> - Gamma parameter of ETS algorithm - the seasonality value parameter.\n<b>4</b> - MASE (mean absolute scaled error) metric - a measure of the accuracy of forecasts.\n<b>5</b> - SMAPE (symmetric mean absolute percentage error) metric - a measure of the accuracy based on percentage errors.\n<b>6</b> - MAE (mean absolute error) metric - a measure of the accuracy of forecasts.\n<b>7</b> - RMSE (root mean squared error) metric - a measure of the differences between predicted and observed values.\n<b>8</b> - Step size detected in the timeline.",
        "name": "StatisticType",
        "longname": "StatisticType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 2839,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/StatisticType.js"
        ],
        "type": {
            "names": [
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8"
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "1"
                    },
                    {
                        "type": "NameExpression",
                        "name": "2"
                    },
                    {
                        "type": "NameExpression",
                        "name": "3"
                    },
                    {
                        "type": "NameExpression",
                        "name": "4"
                    },
                    {
                        "type": "NameExpression",
                        "name": "5"
                    },
                    {
                        "type": "NameExpression",
                        "name": "6"
                    },
                    {
                        "type": "NameExpression",
                        "name": "7"
                    },
                    {
                        "type": "NameExpression",
                        "name": "8"
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Returns the requested statistic for the forecast.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number[]} arg1 - A range or an array of numeric data that determines the historical values for which a new point will be predicted.\n\t * @param {ApiRange | ApiName} arg2 - A range of date/time values that correspond to the historical values.\n\t * The timeline range must be of the same size as the second argument. Date/time values must have a constant step between them and can't be zero.\n\t * @param {ApiRange | ApiName | number} arg3 - A number between 1 and 8, indicating which statistic will be returned for the calculated forecast.\n\t * @param {?ApiRange | ?ApiName | ?number} arg4 - An optional numeric value that specifies the length of the seasonal pattern. The default value of 1 indicates seasonality is detected automatically.\n\t * The 0 value means no seasonality.\n\t * @param {?ApiRange | ?ApiName | ?number} arg5 - An optional numeric value to handle missing values. The default value of 1 replaces missing values by interpolation, and 0 replaces them with zeros.\n\t * @param {?ApiRange | ?ApiName | ?number} arg6 - An optional numeric value to aggregate multiple values with the same time stamp.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/FORECAST_ETS_STAT.js\n\t */",
        "description": "Returns the requested statistic for the forecast.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet dates = [\"10/1/2017\", \"11/1/2017\", \"12/1/2017\", \"1/1/2018\", \"2/1/2018\"];\nlet numbers = [12558, 14356, 16345, 18678, 14227];\n\nfor (let i = 0; i < dates.length; i++) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(dates[i]);\n}\nfor (let j = 0; j < numbers.length; j++) {\n    worksheet.GetRange(\"B\" + (j + 1)).SetValue(numbers[j]);\n}\n\nlet range1 = worksheet.GetRange(\"B1:B5\");\nlet range2 = worksheet.GetRange(\"A1:A5\");\nworksheet.GetRange(\"B6\").SetValue(func.FORECAST_ETS_STAT(range1, range2, 4));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A range or an array of numeric data that determines the historical values for which a new point will be predicted.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "A range of date/time values that correspond to the historical values.\nThe timeline range must be of the same size as the second argument. Date/time values must have a constant step between them and can't be zero.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "A number between 1 and 8, indicating which statistic will be returned for the calculated forecast.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "An optional numeric value that specifies the length of the seasonal pattern. The default value of 1 indicates seasonality is detected automatically.\nThe 0 value means no seasonality.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "An optional numeric value to handle missing values. The default value of 1 replaces missing values by interpolation, and 0 replaces them with zeros.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg6",
                "description": "An optional numeric value to aggregate multiple values with the same time stamp.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "FORECAST_ETS_STAT",
        "longname": "ApiWorksheetFunction#FORECAST_ETS_STAT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2868,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/FORECAST_ETS_STAT.js"
        ]
    },
    {
        "comment": "/**\n\t * Calculates how often values occur within a range of values and then returns the first value of the returned vertical array of numbers.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number[]} arg1 - An array of values or the selected range for which the frequencies will be counted (blanks and text are ignored).\n\t * @param {ApiRange | ApiName | number[]} arg2 - An array of intervals or the selected range into which the values in the first range will be grouped.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/FREQUENCY.js\n\t */",
        "description": "Calculates how often values occur within a range of values and then returns the first value of the returned vertical array of numbers.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\n// Configure function parameters\nlet data_array = [78, 74, 13, 17, 60]; // Historical data_array\nlet bins_array = [78, 56, 87, 0, 19]; // Corresponding bins_array in Excel serial number format\n\n\n// Set data_array and bins_array in cells\nfor (let i = 0; i < data_array.length; i++) {\n  worksheet.GetRange(\"A\" + (i + 1)).SetValue(bins_array[i])\n  worksheet.GetRange(\"B\" + (i + 1)).SetValue(data_array[i]);\n}\n\n// Get the ranges for data_array and bins_array\nlet data_arrayRange = worksheet.GetRange(\"A1:A5\");\nlet bins_arrayRange = worksheet.GetRange(\"B1:B5\");\n\n// Get the worksheet function object\nlet func = Api.GetWorksheetFunction();\n\n// Ensure the ranges are properly passed to the function\nlet forecast = func.FREQUENCY(data_arrayRange, bins_arrayRange);\n\n// Print the forecast result\nworksheet.GetRange(\"D1\").SetValue(forecast);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "An array of values or the selected range for which the frequencies will be counted (blanks and text are ignored).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "An array of intervals or the selected range into which the values in the first range will be grouped.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "FREQUENCY",
        "longname": "ApiWorksheetFunction#FREQUENCY",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2893,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/FREQUENCY.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the gamma function value.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value for which the gamma function will be calculated.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/GAMMA.js\n\t */",
        "description": "Returns the gamma function value.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ans = func.GAMMA(2.7);\nworksheet.GetRange(\"B2\").SetValue(ans);\n\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value for which the gamma function will be calculated.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GAMMA",
        "longname": "ApiWorksheetFunction#GAMMA",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2928,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/GAMMA.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the gamma distribution.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value at which the distribution will be calculated, a nonnegative number.\n\t * @param {ApiRange | ApiName | number} arg2 - The alpha parameter of the distribution, a positive number.\n\t * @param {ApiRange | ApiName | number} arg3 - The beta parameter of the distribution, a positive number. If this parameter is equal to 1, the function returns the standard gamma distribution.\n\t * @param {ApiRange | ApiName | boolean} arg4 - A logical value (<b>true</b>> or <b>false</b>) that determines the function form.\n\t * If it is <b>true</b>, the function returns the cumulative distribution function. If it is <b>false</b>, the function returns the probability density function.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/GAMMA_DIST.js\n\t */",
        "description": "Returns the gamma distribution.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ans = func.GAMMA_DIST(10, 9, 2, false);\nworksheet.GetRange(\"B2\").SetValue(ans);\n\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value at which the distribution will be calculated, a nonnegative number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The alpha parameter of the distribution, a positive number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The beta parameter of the distribution, a positive number. If this parameter is equal to 1, the function returns the standard gamma distribution.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "A logical value (<b>true</b>> or <b>false</b>) that determines the function form.\nIf it is <b>true</b>, the function returns the cumulative distribution function. If it is <b>false</b>, the function returns the probability density function.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GAMMA_DIST",
        "longname": "ApiWorksheetFunction#GAMMA_DIST",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2943,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/GAMMA_DIST.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the gamma distribution.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value at which the distribution will be calculated, a nonnegative number.\n\t * @param {ApiRange | ApiName | number} arg2 - The alpha parameter of the distribution, a positive number.\n\t * @param {ApiRange | ApiName | number} arg3 - The beta parameter of the distribution, a positive number. If this parameter is equal to 1, the function returns the standard gamma distribution.\n\t * @param {ApiRange | ApiName | boolean} arg4 - A logical value (<b>true</b>> or <b>false</b>) that determines the function form.\n\t * If it is <b>true</b>, the function returns the cumulative distribution function. If it is <b>false</b>, the function returns the probability density function.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/GAMMADIST.js\n\t */",
        "description": "Returns the gamma distribution.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ans = func.GAMMADIST(10, 9, 2, false);\nworksheet.GetRange(\"B2\").SetValue(ans);\n\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value at which the distribution will be calculated, a nonnegative number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The alpha parameter of the distribution, a positive number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The beta parameter of the distribution, a positive number. If this parameter is equal to 1, the function returns the standard gamma distribution.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "A logical value (<b>true</b>> or <b>false</b>) that determines the function form.\nIf it is <b>true</b>, the function returns the cumulative distribution function. If it is <b>false</b>, the function returns the probability density function.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GAMMADIST",
        "longname": "ApiWorksheetFunction#GAMMADIST",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2958,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/GAMMADIST.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the inverse of the gamma cumulative distribution: if p = GAMMA.DIST(x,...), then GAMMA.INV(p,...) = x.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The probability associated with the gamma distribution, a number between 0 and 1, inclusive.\n\t * @param {ApiRange | ApiName | number} arg2 - The alpha parameter of the distribution, a positive number.\n\t * @param {ApiRange | ApiName | number} arg3 - The beta parameter of the distribution, a positive number. If this parameter is equal to 1, the function returns the standard gamma distribution.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/GAMMA_INV.js\n\t */",
        "description": "Returns the inverse of the gamma cumulative distribution: if p = GAMMA.DIST(x,...), then GAMMA.INV(p,...) = x.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ans = func.GAMMA_INV(0.4, 9, 2);\nworksheet.GetRange(\"B2\").SetValue(ans);\n\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The probability associated with the gamma distribution, a number between 0 and 1, inclusive.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The alpha parameter of the distribution, a positive number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The beta parameter of the distribution, a positive number. If this parameter is equal to 1, the function returns the standard gamma distribution.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GAMMA_INV",
        "longname": "ApiWorksheetFunction#GAMMA_INV",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2971,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/GAMMA_INV.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the inverse of the gamma cumulative distribution: if p = GAMMADIST(x,...), then GAMMAINV(p,...) = x.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The probability associated with the gamma distribution, a number between 0 and 1, inclusive.\n\t * @param {ApiRange | ApiName | number} arg2 - The alpha parameter of the distribution, a positive number.\n\t * @param {ApiRange | ApiName | number} arg3 - The beta parameter of the distribution, a positive number. If this parameter is equal to 1, the function returns the standard gamma distribution.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/GAMMAINV.js\n\t */",
        "description": "Returns the inverse of the gamma cumulative distribution: if p = GAMMADIST(x,...), then GAMMAINV(p,...) = x.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ans = func.GAMMAINV(0.4, 9, 2);\nworksheet.GetRange(\"B2\").SetValue(ans);\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The probability associated with the gamma distribution, a number between 0 and 1, inclusive.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The alpha parameter of the distribution, a positive number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The beta parameter of the distribution, a positive number. If this parameter is equal to 1, the function returns the standard gamma distribution.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GAMMAINV",
        "longname": "ApiWorksheetFunction#GAMMAINV",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2984,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/GAMMAINV.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the natural logarithm of the gamma function.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value for which the natural logarithm of the gamma function will be calculated, a positive number.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/GAMMALN.js\n\t */",
        "description": "Returns the natural logarithm of the gamma function.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ans = func.GAMMALN(0.5);\nworksheet.GetRange(\"B2\").SetValue(ans);\n\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value for which the natural logarithm of the gamma function will be calculated, a positive number.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GAMMALN",
        "longname": "ApiWorksheetFunction#GAMMALN",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 2995,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/GAMMALN.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the natural logarithm of the gamma function.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value for which the natural logarithm of the gamma function will be calculated, a positive number.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/GAMMALN_PRECISE.js\n\t */",
        "description": "Returns the natural logarithm of the gamma function.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ans = func.GAMMALN_PRECISE(0.5);\nworksheet.GetRange(\"B2\").SetValue(ans);\n\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value for which the natural logarithm of the gamma function will be calculated, a positive number.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GAMMALN_PRECISE",
        "longname": "ApiWorksheetFunction#GAMMALN_PRECISE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3006,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/GAMMALN_PRECISE.js"
        ]
    },
    {
        "comment": "/**\n\t * Calculates the probability that a member of a standard normal population will fall between the mean and arg1 standard deviations from the mean.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value for which the distribution will be calculated.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/GAUSS.js\n\t */",
        "description": "Calculates the probability that a member of a standard normal population will fall between the mean and arg1 standard deviations from the mean.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ans = func.GAUSS(2);\nworksheet.GetRange(\"B2\").SetValue(ans);\n\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value for which the distribution will be calculated.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GAUSS",
        "longname": "ApiWorksheetFunction#GAUSS",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3017,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/GAUSS.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the geometric mean of positive numeric data.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | number[] | ApiName} args - Up to 255 numeric values for which the geometric mean will be calculated.\n\t * Arguments can be numbers, names, ranges, or arrays of numbers.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/GEOMEAN.js\n\t */",
        "description": "Returns the geometric mean of positive numeric data.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ans = func.GEOMEAN(28, 16, 878, 800, 1650, 2000);\nworksheet.GetRange(\"B2\").SetValue(ans);\n\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "Array.<number>",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 numeric values for which the geometric mean will be calculated.\nArguments can be numbers, names, ranges, or arrays of numbers.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GEOMEAN",
        "longname": "ApiWorksheetFunction#GEOMEAN",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3029,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/GEOMEAN.js"
        ]
    },
    {
        "comment": "/**\n\t * Calculates predicted exponential growth by using existing data.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number[]} arg1 - The set of y-values from the <em>y = b*m^x</em> equation, an array or range of positive numbers.\n\t * @param {?ApiRange | ?ApiName | ?number[]} arg2 - An optional set of x-values from the <em>y = b*m^x</em> equation, an array or range of positive numbers that has the same size as the set of y-values.\n\t * @param {?ApiRange | ?ApiName | ?number[]} arg3 - New x-values for which the function will return the corresponding y-values.\n\t * @param {?ApiRange | ?ApiName | ?boolean} arg4 - A logical value: the constant <em>b</em> is calculated normally if this parameter is set to <b>true</b>,\n\t * and <em>b</em> is set equal to 1 if the parameter is <b>false</b> or omitted.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/GROWTH.js\n\t */",
        "description": "Calculates predicted exponential growth by using existing data.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\n// Configure function parameters\nlet data_array = [1289, 1590, 1652, 1107, 903]; \nlet months_array = [1, 2, 3, 4, 5]\n\n// Set data_array and months_array in cells\nfor (let i = 0; i < months_array.length; i++) {\n  worksheet.GetRange(\"A\" + (i + 1)).SetValue(months_array[i]);\n}\nfor (let i = 0; i < data_array.length; i++) {\n  worksheet.GetRange(\"B\" + (i + 1)).SetValue(data_array[i]);\n  worksheet.GetRange(\"B\" + (i + 1)).SetNumberFormat(\"$#,##0.00\");\n}\n\n// Get the ranges for data_array and bins_array\nlet data_arrayRange = worksheet.GetRange(\"A1:A5\");\nlet months_arrayRange = worksheet.GetRange(\"B1:B5\");\n\n// Get the worksheet function object\nlet func = Api.GetWorksheetFunction();\n\n// Ensure the ranges are properly passed to the function\nlet growth = func.GROWTH(data_arrayRange, months_arrayRange);\n\n// Print the growth result\nworksheet.GetRange(\"D1\").SetValue(growth);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The set of y-values from the <em>y = b*m^x</em> equation, an array or range of positive numbers.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "?Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ],
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "An optional set of x-values from the <em>y = b*m^x</em> equation, an array or range of positive numbers that has the same size as the set of y-values.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "?Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ],
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "New x-values for which the function will return the corresponding y-values.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "A logical value: the constant <em>b</em> is calculated normally if this parameter is set to <b>true</b>,\nand <em>b</em> is set equal to 1 if the parameter is <b>false</b> or omitted.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GROWTH",
        "longname": "ApiWorksheetFunction#GROWTH",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3044,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/GROWTH.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the harmonic mean of a data set of positive numbers: the reciprocal of the arithmetic mean of reciprocals.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | number[] | ApiName} args - Up to 255 numeric values for which the harmonic mean will be calculated.\n\t * Arguments can be numbers, names, ranges, or arrays of numbers.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/HARMEAN.js\n\t */",
        "description": "Returns the harmonic mean of a data set of positive numbers: the reciprocal of the arithmetic mean of reciprocals.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ans = func.HARMEAN(28, 16, 878, 800, 1650, 2000);\nworksheet.GetRange(\"B2\").SetValue(ans);\n\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "Array.<number>",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 numeric values for which the harmonic mean will be calculated.\nArguments can be numbers, names, ranges, or arrays of numbers.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "HARMEAN",
        "longname": "ApiWorksheetFunction#HARMEAN",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3056,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/HARMEAN.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the hypergeometric distribution.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The number of successes in the sample.\n\t * @param {ApiRange | ApiName | number} arg2 - The size of the sample.\n\t * @param {ApiRange | ApiName | number} arg3 - The number of successes in the population.\n\t * @param {ApiRange | ApiName | number} arg4 - The population size.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/HYPGEOMDIST.js\n\t */",
        "description": "Returns the hypergeometric distribution.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.HYPGEOMDIST(2, 3, 3, 12));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The number of successes in the sample.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The size of the sample.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The number of successes in the population.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The population size.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "HYPGEOMDIST",
        "longname": "ApiWorksheetFunction#HYPGEOMDIST",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3070,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/HYPGEOMDIST.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the hypergeometric distribution.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The number of successes in the sample.\n\t * @param {ApiRange | ApiName | number} arg2 - The size of the sample.\n\t * @param {ApiRange | ApiName | number} arg3 - The number of successes in the population.\n\t * @param {ApiRange | ApiName | number} arg4 - The population size.\n\t * @param {ApiRange | ApiName | boolean} arg5 - A logical value (<b>true</b> or <b>false</b>) that determines the function form.\n\t * If it is <b>true</b>, the function returns the cumulative distribution function. If it is <b>false</b>, the function returns the probability mass function.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/HYPGEOM_DIST.js\n\t */",
        "description": "Returns the hypergeometric distribution.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.HYPGEOM_DIST(2, 3, 3, 12, true));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The number of successes in the sample.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The size of the sample.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The number of successes in the population.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The population size.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "A logical value (<b>true</b> or <b>false</b>) that determines the function form.\nIf it is <b>true</b>, the function returns the cumulative distribution function. If it is <b>false</b>, the function returns the probability mass function.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "HYPGEOM_DIST",
        "longname": "ApiWorksheetFunction#HYPGEOM_DIST",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3086,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/HYPGEOM_DIST.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the kurtosis of a data set.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | number[] | ApiName} args - Up to 255 numeric values for which the kurtosis will be calculated.\n\t * Arguments can be numbers, names, ranges, or arrays of numbers.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/KURT.js\n\t */",
        "description": "Returns the kurtosis of a data set.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nconst worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet kurtosis = func.KURT(3, 89, 34, 2, 45, 4, 45, 13);\nworksheet.GetRange(\"C1\").SetValue(kurtosis);\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "Array.<number>",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 numeric values for which the kurtosis will be calculated.\nArguments can be numbers, names, ranges, or arrays of numbers.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "KURT",
        "longname": "ApiWorksheetFunction#KURT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3110,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/KURT.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the k-th largest value in a data set. For example, the fifth largest number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number[]} arg1 - The array or range of data for which the k-th largest value will be determined.\n\t * @param {ApiRange | ApiName | number} arg2 - The position (from the largest) in the array or cell range of data to return.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/LARGE.js\n\t */",
        "description": "Returns the k-th largest value in a data set. For example, the fifth largest number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nconst worksheet = Api.GetActiveSheet();\n\nlet numbersArr = [4, 13, 27, 56, 46, 79, 22, 12];\n\n// Place the numbers in cells\nfor (let i = 0; i < numbersArr.length; i++) {\n  worksheet.GetRange(\"A\" + (i + 1)).SetValue(numbersArr[i]);\n}\n\nlet func = Api.GetWorksheetFunction();\nlet range = worksheet.GetRange(\"A1:A8\");\nlet largePostion = 4;\nlet kLargest = func.LARGE(range, largePostion);\nworksheet.GetRange(\"C1\").SetValue(kLargest);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The array or range of data for which the k-th largest value will be determined.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The position (from the largest) in the array or cell range of data to return.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "LARGE",
        "longname": "ApiWorksheetFunction#LARGE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3122,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/LARGE.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns statistics that describe a linear trend matching known data points, by fitting a straight line using the least squares method.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName} arg1 - The set of y-values from the <em>y = mx + b</em> equation.\n\t * @param {?ApiRange | ?ApiName} arg2 - An optional set of x-values from the <em>y = mx + b</em> equation.\n\t * @param {?ApiRange | ?ApiName | ?boolean} arg3 - A logical value: the constant <em>b</em> is calculated normally if this parameter is set to <b>true</b> or omitted,\n\t * and <em>b</em> is set equal to 0 if the parameter is <b>false</b>.\n\t * @param {?ApiRange | ?ApiName | ?boolean} arg4 - A logical value: return additional regression statistics if this parameter is set to <b>true</b>,\n\t * and return m-coefficients and the constant <em>b</em> if the parameter is <b>false</b> or omitted.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/LINEST.js\n\t */",
        "description": "Returns statistics that describe a linear trend matching known data points, by fitting a straight line using the least squares method.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\n\nconst worksheet = Api.GetActiveSheet();\n\n//configure function parameters\nlet yValues = [1.5, 2, 3];\nlet xValues = [2, 3.1, 3.5];\nlet constant = true;\nlet stats = true;\n\n//set values in cells\nfor (let i = 0; i < yValues.length; i++) {\n  worksheet.GetRange(\"A\" + (i + 1)).SetValue(yValues[i]);\n}\nfor (let n = 0; n < xValues.length; n++) {\n  worksheet.GetRange(\"B\" + (n + 1)).SetValue(xValues[n]);\n}\n\n//get x and y ranges\nlet yRange = worksheet.GetRange(\"A1:A3\");\nlet xRange = worksheet.GetRange(\"B1:B3\");\nlet func = Api.GetWorksheetFunction();\n\n//invoke LINEST method\nlet ans = func.LINEST(yRange, xRange, constant, stats);\n\n//print answer \n worksheet.GetRange(\"D1\").SetValue(ans);\n\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The set of y-values from the <em>y = mx + b</em> equation.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "An optional set of x-values from the <em>y = mx + b</em> equation.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "A logical value: the constant <em>b</em> is calculated normally if this parameter is set to <b>true</b> or omitted,\nand <em>b</em> is set equal to 0 if the parameter is <b>false</b>.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "A logical value: return additional regression statistics if this parameter is set to <b>true</b>,\nand return m-coefficients and the constant <em>b</em> if the parameter is <b>false</b> or omitted.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "LINEST",
        "longname": "ApiWorksheetFunction#LINEST",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3138,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/LINEST.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns statistics that describe an exponential curve matching known data points.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | ApiRange} arg1 - The set of y-values from the <em>y = b*m^x</em> equation.\n\t * @param {?ApiRange | ?ApiName | ?ApiRange} arg2 - An optional set of x-values from the <em>y = b*m^x</em> equation.\n\t * @param {?ApiRange | ?ApiName | ?boolean} arg3 - A logical value: the constant <em>b</em> is calculated normally if this parameter is set to <b>true</b> or omitted,\n\t * and <em>b</em> is set equal to 1 if the parameter is <b>false</b>.\n\t * @param {?ApiRange | ?ApiName | ?boolean} arg4 - A logical value: return additional regression statistics if this parameter is set to <b>true</b>,\n\t * and return m-coefficients and the constant <em>b</em> if the parameter is <b>false</b> or omitted.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/LOGEST.js\n\t */",
        "description": "Returns statistics that describe an exponential curve matching known data points.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\n//configure function parameters\nlet yValues = [1500, 1230, 1700, 1000, 980, 1470, 1560, 1640, 1420, 1100];\nlet xValues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet constant = true;\nlet stats = false;\n\n//set values in cells\nfor (let i = 0; i < yValues.length; i++) {\n  worksheet.GetRange(\"A\" + (i + 1)).SetValue(yValues[i]);\n}\nfor (let i = 0; i < xValues.length; i++) {\n  worksheet.GetRange(\"B\" + (i + 1)).SetValue(xValues[i]);\n}\n\n//get x and y ranges\nlet yRange = worksheet.GetRange(\"A1:A10\");\nlet xRange = worksheet.GetRange(\"B1:B10\");\n\nlet func = Api.GetWorksheetFunction();\n//invoke LOGEST method\nlet ans = func.LOGEST(yRange, xRange, constant, stats);\n\n//print answer\nworksheet.GetRange(\"D1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The set of y-values from the <em>y = b*m^x</em> equation.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "An optional set of x-values from the <em>y = b*m^x</em> equation.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "A logical value: the constant <em>b</em> is calculated normally if this parameter is set to <b>true</b> or omitted,\nand <em>b</em> is set equal to 1 if the parameter is <b>false</b>.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "A logical value: return additional regression statistics if this parameter is set to <b>true</b>,\nand return m-coefficients and the constant <em>b</em> if the parameter is <b>false</b> or omitted.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "LOGEST",
        "longname": "ApiWorksheetFunction#LOGEST",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3154,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/LOGEST.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the inverse of the lognormal cumulative distribution function of x, where ln(x) is normally distributed with the specified parameters.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A probability associated with the lognormal distribution, a number between 0 and 1, inclusive.\n\t * @param {ApiRange | ApiName | number} arg2 - The mean of ln(x).\n\t * @param {ApiRange | ApiName | number} arg3 - The standard deviation of ln(x), a positive number.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/LOGINV.js\n\t */",
        "description": "Returns the inverse of the lognormal cumulative distribution function of x, where ln(x) is normally distributed with the specified parameters.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\n//configure function parameters\nlet numbersArr = [0.5, 4, 7];\n\n//set values in cells\nfor (let i = 0; i < numbersArr.length; i++) {\n  worksheet.GetRange(\"A\" + (i + 1)).SetValue(numbersArr[i]);\n}\n\n//get parameters\nlet probability = worksheet.GetRange(\"A1\");\nlet mean = worksheet.GetRange(\"A2\");\nlet standardDeviation = worksheet.GetRange(\"A3\");\n\n//invoke LOGINV method\nlet func = Api.GetWorksheetFunction();\nlet ans = func.LOGINV(probability, mean, standardDeviation);\n\n//print answer\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A probability associated with the lognormal distribution, a number between 0 and 1, inclusive.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The mean of ln(x).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The standard deviation of ln(x), a positive number.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "LOGINV",
        "longname": "ApiWorksheetFunction#LOGINV",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3167,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/LOGINV.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the lognormal distribution of x, where ln(x) is normally distributed with the specified parameters.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value at which to evaluate the function, a positive number.\n\t * @param {ApiRange | ApiName | number} arg2 - The mean of ln(x).\n\t * @param {ApiRange | ApiName | number} arg3 - The standard deviation of ln(x), a positive number.\n\t * @param {ApiRange | ApiName | boolean} arg4 - A logical value (<b>true</b> or <b>false</b>) that determines the function form.\n\t * If it is <b>true</b>, the function returns the cumulative distribution function.\n\t * If it is <b>false</b>, the function returns the probability density function.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/LOGNORM_DIST.js\n\t */",
        "description": "Returns the lognormal distribution of x, where ln(x) is normally distributed with the specified parameters.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nconst worksheet = Api.GetActiveSheet();\n\n//configure function parameters\nlet numbersArr = [4, 3.5, 1.2];\n\n//set values in cells\nfor (let i = 0; i < numbersArr.length; i++) {\n  worksheet.GetRange(\"A\" + (i + 1)).SetValue(numbersArr[i]);\n}\n\n//get parameters\nlet xValue = worksheet.GetRange(\"A1\");\nlet mean = worksheet.GetRange(\"A2\");\nlet standardDeviation = worksheet.GetRange(\"A3\");\nlet cummulative = true;\n\n//invoke LOGNORM.DIST method\nlet func = Api.GetWorksheetFunction();\nlet ans = func.LOGNORM_DIST(xValue, mean, standardDeviation, cummulative);\n\n//print answer\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value at which to evaluate the function, a positive number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The mean of ln(x).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The standard deviation of ln(x), a positive number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "A logical value (<b>true</b> or <b>false</b>) that determines the function form.\nIf it is <b>true</b>, the function returns the cumulative distribution function.\nIf it is <b>false</b>, the function returns the probability density function.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "LOGNORM_DIST",
        "longname": "ApiWorksheetFunction#LOGNORM_DIST",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3183,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/LOGNORM_DIST.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the inverse of the lognormal cumulative distribution function of x, where ln(x) is normally distributed with the specified parameters.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A probability associated with the lognormal distribution, a number between 0 and 1, inclusive.\n\t * @param {ApiRange | ApiName | number} arg2 - The mean of ln(x).\n\t * @param {ApiRange | ApiName | number} arg3 - The standard deviation of ln(x), a positive number.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/LOGNORM_INV.js\n\t */",
        "description": "Returns the inverse of the lognormal cumulative distribution function of x, where ln(x) is normally distributed with the specified parameters.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.LOGNORM_INV(0.3, 2, 0.2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A probability associated with the lognormal distribution, a number between 0 and 1, inclusive.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The mean of ln(x).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The standard deviation of ln(x), a positive number.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "LOGNORM_INV",
        "longname": "ApiWorksheetFunction#LOGNORM_INV",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3196,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/LOGNORM_INV.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the cumulative lognormal distribution of x, where ln(x) is normally distributed with the specified parameters.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value at which to evaluate the function, a positive number.\n\t * @param {ApiRange | ApiName | number} arg2 - The mean of ln(x).\n\t * @param {ApiRange | ApiName | number} arg3 - The standard deviation of ln(x), a positive number.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/LOGNORMDIST.js\n\t */",
        "description": "Returns the cumulative lognormal distribution of x, where ln(x) is normally distributed with the specified parameters.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\n//configure function parameters\nlet numbersArr = [4, 7, 40];\n\n//set values in cells\nfor (let i = 0; i < numbersArr.length; i++) {\n  worksheet.GetRange(\"A\" + (i + 1)).SetValue(numbersArr[i]);\n}\n\n//get parameters\nlet xValue = worksheet.GetRange(\"A1\");\nlet mean = worksheet.GetRange(\"A2\");\nlet standardDeviation = worksheet.GetRange(\"A3\");\n\n//invoke LOGNORMDIST method\nlet func = Api.GetWorksheetFunction();\nlet ans = func.LOGNORMDIST(xValue, mean, standardDeviation);\n\n//print answer\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value at which to evaluate the function, a positive number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The mean of ln(x).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The standard deviation of ln(x), a positive number.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "LOGNORMDIST",
        "longname": "ApiWorksheetFunction#LOGNORMDIST",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3209,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/LOGNORMDIST.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the largest value in a set of values. Ignores logical values and text.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number | array | ApiRange | ApiName} args - Up to 255 numeric values for which the largest number will be returned.\n\t * The first argument is required, subsequent arguments are optional. Arguments can be numbers, names, ranges, or arrays of numbers.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/MAX.js\n\t */",
        "description": "Returns the largest value in a set of values. Ignores logical values and text.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet max = func.MAX(123, 197, 46, 354, 67, 456);\nworksheet.GetRange(\"C1\").SetValue(max);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "number",
                        "array",
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "array"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 numeric values for which the largest number will be returned.\nThe first argument is required, subsequent arguments are optional. Arguments can be numbers, names, ranges, or arrays of numbers.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "MAX",
        "longname": "ApiWorksheetFunction#MAX",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3221,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/MAX.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the largest value in a set of values. Does not ignore logical values and text.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number | string | boolean | ApiRange | array | ApiName} args - Up to 255 values (number, text, logical value) for which the largest value will be returned.\n\t * The first argument is required, subsequent arguments are optional. Arguments can be numbers, logical values and text representations of numbers, names, ranges, or arrays.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/MAXA.js\n\t */",
        "description": "Returns the largest value in a set of values. Does not ignore logical values and text.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"A1:A5\").GetValue();\nlet func = Api.GetWorksheetFunction();\nlet maxA = func.MAX(23, 45, true, \"text\", 0.89);\nworksheet.GetRange(\"C1\").SetValue(maxA);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "number",
                        "string",
                        "boolean",
                        "ApiRange",
                        "array",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "array"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 values (number, text, logical value) for which the largest value will be returned.\nThe first argument is required, subsequent arguments are optional. Arguments can be numbers, logical values and text representations of numbers, names, ranges, or arrays.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "MAXA",
        "longname": "ApiWorksheetFunction#MAXA",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3233,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/MAXA.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the median, or the number in the middle of the set of given numbers.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number | ApiRange | array | ApiName} args - Up to 255 numeric values for which the median will be calculated.\n\t * The first argument is required, subsequent arguments are optional. Arguments can be numbers, names, ranges, or arrays of numbers.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/MEDIAN.js\n\t */",
        "description": "Returns the median, or the number in the middle of the set of given numbers.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\n\nconst worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet median = func.MEDIAN(4,45,12,34,3,54,2,2);\nworksheet.GetRange(\"C1\").SetValue(median);\n\n\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "number",
                        "ApiRange",
                        "array",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "array"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 numeric values for which the median will be calculated.\nThe first argument is required, subsequent arguments are optional. Arguments can be numbers, names, ranges, or arrays of numbers.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "MEDIAN",
        "longname": "ApiWorksheetFunction#MEDIAN",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3245,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/MEDIAN.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the smallest number in a set of values. Ignores logical values and text.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number | ApiRange | array | ApiName} args - Up to 255 numeric values for which the smallest number will be returned.\n\t * The first argument is required, subsequent arguments are optional. Arguments can be numbers, names, ranges, or arrays of numbers.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/MIN.js\n\t */",
        "description": "Returns the smallest number in a set of values. Ignores logical values and text.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet min = func.MIN(123, 197, 46, 345, 67, 456);\nworksheet.GetRange(\"C1\").SetValue(min);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "number",
                        "ApiRange",
                        "array",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "array"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 numeric values for which the smallest number will be returned.\nThe first argument is required, subsequent arguments are optional. Arguments can be numbers, names, ranges, or arrays of numbers.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "MIN",
        "longname": "ApiWorksheetFunction#MIN",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3257,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/MIN.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the smallest value in a set of values. Does not ignore logical values and text.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number | string | boolean | ApiRange | array | ApiName} args - Up to 255 values (number, text, logical value) for which the smallest value will be returned.\n\t * The first argument is required, subsequent arguments are optional. Arguments can be numbers, logical values and text representations of numbers, names, ranges, or arrays.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/MINA.js\n\t */",
        "description": "Returns the smallest value in a set of values. Does not ignore logical values and text.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet minA = func.MINA(23, 45, true, \"text\", 0.89);\nworksheet.GetRange(\"C1\").SetValue(minA);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "number",
                        "string",
                        "boolean",
                        "ApiRange",
                        "array",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "array"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 values (number, text, logical value) for which the smallest value will be returned.\nThe first argument is required, subsequent arguments are optional. Arguments can be numbers, logical values and text representations of numbers, names, ranges, or arrays.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "MINA",
        "longname": "ApiWorksheetFunction#MINA",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3269,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/MINA.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the negative binomial distribution, the probability that there will be the specified number of failures before the last success, with the specified probability of a success.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The number of failures.\n\t * @param {ApiRange | ApiName | number} arg2 - The threshold number of successes.\n\t * @param {ApiRange | ApiName | number} arg3 - The probability of a success; a number between 0 and 1.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/NEGBINOMDIST.js\n\t */",
        "description": "Returns the negative binomial distribution, the probability that there will be the specified number of failures before the last success, with the specified probability of a success.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet valueArr = [6, 32, 0.7];\n\n// Place the numbers in cells\nfor (let i = 0; i < valueArr.length; i++) {\n  worksheet.GetRange(\"A\" + (i + 1)).SetValue(valueArr[i]);\n}\n\n//method params\nlet numberF = worksheet.GetRange(\"A1\").GetValue();\nlet numberS = worksheet.GetRange(\"A2\").GetValue();\nlet probabilityS = worksheet.GetRange(\"A3\").GetValue();\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.NEGBINOMDIST(numberF, numberS, probabilityS);\n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The number of failures.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The threshold number of successes.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The probability of a success; a number between 0 and 1.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "NEGBINOMDIST",
        "longname": "ApiWorksheetFunction#NEGBINOMDIST",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3312,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/NEGBINOMDIST.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the negative binomial distribution, the probability that there will be the specified number of failures before the last success, with the specified probability of a success.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The number of failures.\n\t * @param {ApiRange | ApiName | number} arg2 - The threshold number of successes.\n\t * @param {ApiRange | ApiName | number} arg3 - The probability of a success; a number between 0 and 1.\n\t * @param {ApiRange | ApiName | boolean} arg4 - A logical value (<b>true</b> or <b>false</b>) that determines the function form.\n\t * If it is <b>true</b>, the function returns the cumulative distribution function.\n\t * If it is <b>false</b>, the function returns the probability density function.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/NEGBINOM_DIST.js\n\t */",
        "description": "Returns the negative binomial distribution, the probability that there will be the specified number of failures before the last success, with the specified probability of a success.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.NEGBINOM_DIST(6, 32, 0.7, true));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The number of failures.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The threshold number of successes.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The probability of a success; a number between 0 and 1.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "A logical value (<b>true</b> or <b>false</b>) that determines the function form.\nIf it is <b>true</b>, the function returns the cumulative distribution function.\nIf it is <b>false</b>, the function returns the probability density function.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "NEGBINOM_DIST",
        "longname": "ApiWorksheetFunction#NEGBINOM_DIST",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3328,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/NEGBINOM_DIST.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the normal cumulative distribution for the specified mean and standard deviation.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value for which the distribution will be returned.\n\t * @param {ApiRange | ApiName | number} arg2 - The arithmetic mean of the distribution.\n\t * @param {ApiRange | ApiName | number} arg3 - The standard deviation of the distribution, a positive number.\n\t * @param {ApiRange | ApiName | boolean} arg4 - A logical value (<b>true</b> or <b>false</b>) that determines the function form.\n\t * If it is <b>true</b>, the function returns the cumulative distribution function.\n\t * If it is <b>false</b>, the function returns the probability mass function.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/NORMDIST.js\n\t */",
        "description": "Returns the normal cumulative distribution for the specified mean and standard deviation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.NORMDIST(36, 6, 7, false));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value for which the distribution will be returned.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The arithmetic mean of the distribution.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The standard deviation of the distribution, a positive number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "A logical value (<b>true</b> or <b>false</b>) that determines the function form.\nIf it is <b>true</b>, the function returns the cumulative distribution function.\nIf it is <b>false</b>, the function returns the probability mass function.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "NORMDIST",
        "longname": "ApiWorksheetFunction#NORMDIST",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3344,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/NORMDIST.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the normal distribution for the specified mean and standard deviation.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value for which the distribution will be returned.\n\t * @param {ApiRange | ApiName | number} arg2 - The arithmetic mean of the distribution.\n\t * @param {ApiRange | ApiName | number} arg3 - The standard deviation of the distribution, a positive number.\n\t * @param {ApiRange | ApiName | boolean} arg4 - A logical value (<b>true</b> or <b>false</b>) that determines the function form.\n\t * If it is <b>true</b>, the function returns the cumulative distribution function.\n\t * If it is <b>false</b>, the function returns the probability mass function.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/NORM_DIST.js\n\t */",
        "description": "Returns the normal distribution for the specified mean and standard deviation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\nlet valueArr = [36, 6, 7, false];\n\n// Place the numbers in cells\nfor (let i = 0; i < valueArr.length; i++) {\n  worksheet.GetRange(\"A\" + (i + 1)).SetValue(valueArr[i]);\n}\n\n//method params\nlet x = worksheet.GetRange(\"A1\").GetValue();\nlet mean = worksheet.GetRange(\"A2\").GetValue();\nlet standardDeviation = worksheet.GetRange(\"A3\").GetValue();\nlet cumulative = worksheet.GetRange(\"A4\").GetValue();\nlet func = Api.GetWorksheetFunction();\nlet normalDist = func.NORM_DIST(x, mean, standardDeviation, cumulative);\nworksheet.GetRange(\"C1\").SetValue(normalDist);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value for which the distribution will be returned.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The arithmetic mean of the distribution.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The standard deviation of the distribution, a positive number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "A logical value (<b>true</b> or <b>false</b>) that determines the function form.\nIf it is <b>true</b>, the function returns the cumulative distribution function.\nIf it is <b>false</b>, the function returns the probability mass function.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "NORM_DIST",
        "longname": "ApiWorksheetFunction#NORM_DIST",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3360,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/NORM_DIST.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the inverse of the normal cumulative distribution for the specified mean and standard deviation.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A probability corresponding to the normal distribution, a number between 0 and 1 inclusive.\n\t * @param {ApiRange | ApiName | number} arg2 - The arithmetic mean of the distribution.\n\t * @param {ApiRange | ApiName | number} arg3 - The standard deviation of the distribution, a positive number.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/NORMINV.js\n\t */",
        "description": "Returns the inverse of the normal cumulative distribution for the specified mean and standard deviation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\nlet valueArr = [0.34, 7, 3];\n\n// Place the numbers in cells\nfor (let i = 0; i < valueArr.length; i++) {\n  worksheet.GetRange(\"A\" + (i + 1)).SetValue(valueArr[i]);\n}\n\n//method params\nlet probability = worksheet.GetRange(\"A1\").GetValue();\nlet mean = worksheet.GetRange(\"A2\").GetValue();\nlet standardDeviation = worksheet.GetRange(\"A3\").GetValue();\nlet func = Api.GetWorksheetFunction();\nlet inv = func.NORMINV(probability, mean, standardDeviation);\nworksheet.GetRange(\"C1\").SetValue(inv);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A probability corresponding to the normal distribution, a number between 0 and 1 inclusive.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The arithmetic mean of the distribution.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The standard deviation of the distribution, a positive number.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "NORMINV",
        "longname": "ApiWorksheetFunction#NORMINV",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3373,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/NORMINV.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the inverse of the normal cumulative distribution for the specified mean and standard deviation.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A probability corresponding to the normal distribution, a number between 0 and 1 inclusive.\n\t * @param {ApiRange | ApiName | number} arg2 - The arithmetic mean of the distribution.\n\t * @param {ApiRange | ApiName | number} arg3 - The standard deviation of the distribution, a positive number.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/NORM_INV.js\n\t */",
        "description": "Returns the inverse of the normal cumulative distribution for the specified mean and standard deviation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange(\"A1\").SetValue(0.6);\n\n//method params\nlet value = worksheet.GetRange(\"A1\").GetValue();\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.NORMSDIST(value);\n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A probability corresponding to the normal distribution, a number between 0 and 1 inclusive.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The arithmetic mean of the distribution.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The standard deviation of the distribution, a positive number.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "NORM_INV",
        "longname": "ApiWorksheetFunction#NORM_INV",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3386,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/NORM_INV.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the standard normal cumulative distribution (has a mean of zero and a standard deviation of one).\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value for which the distribution will be returned.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/NORMSDIST.js\n\t */",
        "description": "Returns the standard normal cumulative distribution (has a mean of zero and a standard deviation of one).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\nlet valueArr = [0.34, 7, 3];\n\n// Place the numbers in cells\nfor (let i = 0; i < valueArr.length; i++) {\n  worksheet.GetRange(\"A\" + (i + 1)).SetValue(valueArr[i]);\n}\n\n//method params\nlet probability = worksheet.GetRange(\"A1\").GetValue();\nlet mean = worksheet.GetRange(\"A2\").GetValue();\nlet standardDeviation = worksheet.GetRange(\"A3\").GetValue();\n\nlet func = Api.GetWorksheetFunction();\nlet inv = func.NORM_INV(probability, mean, standardDeviation);\nworksheet.GetRange(\"C1\").SetValue(inv);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value for which the distribution will be returned.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "NORMSDIST",
        "longname": "ApiWorksheetFunction#NORMSDIST",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3397,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/NORMSDIST.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the standard normal distribution (has a mean of zero and a standard deviation of one).\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value for which the distribution will be returned.\n\t * @param {ApiRange | ApiName | boolean} arg2 - A logical value (<b>true</b> or <b>false</b>) that determines the function form.\n\t * If it is <b>true</b>, the function returns the cumulative distribution function.\n\t * If it is <b>false</b>, the function returns the probability mass function.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/NORM_S_DIST.js\n\t */",
        "description": "Returns the standard normal distribution (has a mean of zero and a standard deviation of one).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.NORM_S_DIST(1.33, true));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value for which the distribution will be returned.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "A logical value (<b>true</b> or <b>false</b>) that determines the function form.\nIf it is <b>true</b>, the function returns the cumulative distribution function.\nIf it is <b>false</b>, the function returns the probability mass function.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "NORM_S_DIST",
        "longname": "ApiWorksheetFunction#NORM_S_DIST",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3411,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/NORM_S_DIST.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the inverse of the standard normal cumulative distribution (has a mean of zero and a standard deviation of one).\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A probability corresponding to the normal distribution, a number between 0 and 1 inclusive.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/NORMSINV.js\n\t */",
        "description": "Returns the inverse of the standard normal cumulative distribution (has a mean of zero and a standard deviation of one).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange(\"A1\").SetValue(0.25);\n\n//method params\nlet value = worksheet.GetRange(\"A1\").GetValue();\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.NORMSINV(value);\n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A probability corresponding to the normal distribution, a number between 0 and 1 inclusive.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "NORMSINV",
        "longname": "ApiWorksheetFunction#NORMSINV",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3422,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/NORMSINV.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the inverse of the standard normal cumulative distribution (has a mean of zero and a standard deviation of one).\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A probability corresponding to the normal distribution, a number between 0 and 1 inclusive.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/NORM_S_INV.js\n\t */",
        "description": "Returns the inverse of the standard normal cumulative distribution (has a mean of zero and a standard deviation of one).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.NORM_S_INV(0.908));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A probability corresponding to the normal distribution, a number between 0 and 1 inclusive.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "NORM_S_INV",
        "longname": "ApiWorksheetFunction#NORM_S_INV",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3433,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/NORM_S_INV.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the k-th percentile of values in a range.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number[]} arg1 - The array or range of data that defines relative standing.\n\t * @param {ApiRange | ApiName | number} arg2 - The percentile value that is equal to 0 but less than or equal to 1.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/PERCENTILE.js\n\t */",
        "description": "Returns the k-th percentile of values in a range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet column1 = [1, 0, 7, 10];\nlet column2 = [3, 2, 5, 8];\nlet column3 = [5, 4, 3, 6];\nlet column4 = [7, 6, 5, 4];\n\nfor (let i = 0; i < column1.length; i++) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(column1[i]);\n}\nfor (let j = 0; j < column2.length; j++) {\n    worksheet.GetRange(\"B\" + (j + 1)).SetValue(column2[j]);\n}\nfor (let n = 0; n < column3.length; n++) {\n    worksheet.GetRange(\"C\" + (n + 1)).SetValue(column3[n]);\n}\nfor (let m = 0; m < column4.length; m++) {\n    worksheet.GetRange(\"D\" + (m + 1)).SetValue(column4[m]);\n}\n\nlet range = worksheet.GetRange(\"A1:D4\");\nworksheet.GetRange(\"D5\").SetValue(func.PERCENTILE(range, 0.5));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The array or range of data that defines relative standing.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The percentile value that is equal to 0 but less than or equal to 1.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "PERCENTILE",
        "longname": "ApiWorksheetFunction#PERCENTILE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3458,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/PERCENTILE.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the k-th percentile of values in a range, where k is in the range 0..1, exclusive.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number[]} arg1 - The array or range of data that defines relative standing.\n\t * @param {ApiRange | ApiName | number} arg2 - The percentile value that is greater than 0 but less than 1.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/PERCENTILE_EXC.js\n\t */",
        "description": "Returns the k-th percentile of values in a range, where k is in the range 0..1, exclusive.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet column1 = [1, 0, 7, 10];\nlet column2 = [3, 2, 5, 8];\nlet column3 = [5, 4, 3, 6];\nlet column4 = [7, 6, 5, 4];\n\nfor (let i = 0; i < column1.length; i++) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(column1[i]);\n}\nfor (let j = 0; j < column2.length; j++) {\n    worksheet.GetRange(\"B\" + (j + 1)).SetValue(column2[j]);\n}\nfor (let n = 0; n < column3.length; n++) {\n    worksheet.GetRange(\"C\" + (n + 1)).SetValue(column3[n]);\n}\nfor (let m = 0; m < column4.length; m++) {\n    worksheet.GetRange(\"D\" + (m + 1)).SetValue(column4[m]);\n}\n\nlet range = worksheet.GetRange(\"A1:D4\");\nworksheet.GetRange(\"D5\").SetValue(func.PERCENTILE_EXC(range, 0.5));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The array or range of data that defines relative standing.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The percentile value that is greater than 0 but less than 1.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "PERCENTILE_EXC",
        "longname": "ApiWorksheetFunction#PERCENTILE_EXC",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3470,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/PERCENTILE_EXC.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the k-th percentile of values in a range, where k is in the range 0..1, inclusive.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number[]} arg1 - The array or range of data that defines relative standing.\n\t * @param {ApiRange | ApiName | number} arg2 - The percentile value that is equal to 0 but less than or equal to 1.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/PERCENTILE_INC.js\n\t */",
        "description": "Returns the k-th percentile of values in a range, where k is in the range 0..1, inclusive.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet column1 = [1, 0, 7, 10];\nlet column2 = [3, 2, 5, 8];\nlet column3 = [5, 4, 3, 6];\nlet column4 = [7, 6, 5, 4];\n\nfor (let i = 0; i < column1.length; i++) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(column1[i]);\n}\nfor (let j = 0; j < column2.length; j++) {\n    worksheet.GetRange(\"B\" + (j + 1)).SetValue(column2[j]);\n}\nfor (let n = 0; n < column3.length; n++) {\n    worksheet.GetRange(\"C\" + (n + 1)).SetValue(column3[n]);\n}\nfor (let m = 0; m < column4.length; m++) {\n    worksheet.GetRange(\"D\" + (m + 1)).SetValue(column4[m]);\n}\n\nlet range = worksheet.GetRange(\"A1:D4\");\nworksheet.GetRange(\"D5\").SetValue(func.PERCENTILE_INC(range, 1));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The array or range of data that defines relative standing.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The percentile value that is equal to 0 but less than or equal to 1.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "PERCENTILE_INC",
        "longname": "ApiWorksheetFunction#PERCENTILE_INC",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3482,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/PERCENTILE_INC.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the rank of a value in a data set as a percentage of the data set.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number[]} arg1 - The array or range of data with numeric values that defines relative standing.\n\t * @param {ApiRange | ApiName | number} arg2 - The value for which the rank will be returned.\n\t * @param {?ApiRange | ?ApiName | ?number} arg3 - An optional value that identifies the number of significant digits for the returned percentage, three digits if omitted (0.xxx%).\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/PERCENTRANK.js\n\t */",
        "description": "Returns the rank of a value in a data set as a percentage of the data set.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet column1 = [1, 0, 7, 10];\nlet column2 = [3, 2, 5, 8];\nlet column3 = [5, 4, 3, 6];\nlet column4 = [7, 6, 5, 4];\n\nfor (let i = 0; i < column1.length; i++) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(column1[i]);\n}\nfor (let j = 0; j < column2.length; j++) {\n    worksheet.GetRange(\"B\" + (j + 1)).SetValue(column2[j]);\n}\nfor (let n = 0; n < column3.length; n++) {\n    worksheet.GetRange(\"C\" + (n + 1)).SetValue(column3[n]);\n}\nfor (let m = 0; m < column4.length; m++) {\n    worksheet.GetRange(\"D\" + (m + 1)).SetValue(column4[m]);\n}\n\nlet range = worksheet.GetRange(\"A1:D4\");\nworksheet.GetRange(\"D5\").SetValue(func.PERCENTRANK(range, 2, 4));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The array or range of data with numeric values that defines relative standing.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The value for which the rank will be returned.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "An optional value that identifies the number of significant digits for the returned percentage, three digits if omitted (0.xxx%).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "PERCENTRANK",
        "longname": "ApiWorksheetFunction#PERCENTRANK",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3495,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/PERCENTRANK.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the rank of a value in a data set as a percentage (0..1, exclusive) of the data set.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number[]} arg1 - The array or range of data with numeric values that defines relative standing.\n\t * @param {ApiRange | ApiName | number} arg2 - The value for which the rank will be returned.\n\t * @param {?ApiRange | ?ApiName | ?number} arg3 - An optional value that identifies the number of significant digits for the returned percentage, three digits if omitted (0.xxx%).\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/PERCENTRANK_EXC.js\n\t */",
        "description": "Returns the rank of a value in a data set as a percentage (0..1, exclusive) of the data set.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet column1 = [1, 0, 7, 10];\nlet column2 = [3, 2, 5, 8];\nlet column3 = [5, 4, 3, 6];\nlet column4 = [7, 6, 5, 4];\n\nfor (let i = 0; i < column1.length; i++) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(column1[i]);\n}\nfor (let j = 0; j < column2.length; j++) {\n    worksheet.GetRange(\"B\" + (j + 1)).SetValue(column2[j]);\n}\nfor (let n = 0; n < column3.length; n++) {\n    worksheet.GetRange(\"C\" + (n + 1)).SetValue(column3[n]);\n}\nfor (let m = 0; m < column4.length; m++) {\n    worksheet.GetRange(\"D\" + (m + 1)).SetValue(column4[m]);\n}\n\nlet range = worksheet.GetRange(\"A1:D4\");\nworksheet.GetRange(\"D5\").SetValue(func.PERCENTRANK_EXC(range, 2, 4));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The array or range of data with numeric values that defines relative standing.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The value for which the rank will be returned.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "An optional value that identifies the number of significant digits for the returned percentage, three digits if omitted (0.xxx%).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "PERCENTRANK_EXC",
        "longname": "ApiWorksheetFunction#PERCENTRANK_EXC",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3508,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/PERCENTRANK_EXC.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the rank of a value in a data set as a percentage (0..1, inclusive) of the data set.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number[]} arg1 - The array or range of data with numeric values that defines relative standing.\n\t * @param {ApiRange | ApiName | number} arg2 - The value for which the rank will be returned.\n\t * @param {?ApiRange | ?ApiName | ?number} arg3 - An optional value that identifies the number of significant digits for the returned percentage, three digits if omitted (0.xxx%).\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/PERCENTRANK_INC.js\n\t */",
        "description": "Returns the rank of a value in a data set as a percentage (0..1, inclusive) of the data set.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet column1 = [1, 0, 7, 10];\nlet column2 = [3, 2, 5, 8];\nlet column3 = [5, 4, 3, 6];\nlet column4 = [7, 6, 5, 4];\n\nfor (let i = 0; i < column1.length; i++) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(column1[i]);\n}\nfor (let j = 0; j < column2.length; j++) {\n    worksheet.GetRange(\"B\" + (j + 1)).SetValue(column2[j]);\n}\nfor (let n = 0; n < column3.length; n++) {\n    worksheet.GetRange(\"C\" + (n + 1)).SetValue(column3[n]);\n}\nfor (let m = 0; m < column4.length; m++) {\n    worksheet.GetRange(\"D\" + (m + 1)).SetValue(column4[m]);\n}\n\nlet range = worksheet.GetRange(\"A1:D4\");\nworksheet.GetRange(\"D5\").SetValue(func.PERCENTRANK_INC(range, 2, 4));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The array or range of data with numeric values that defines relative standing.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The value for which the rank will be returned.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "An optional value that identifies the number of significant digits for the returned percentage, three digits if omitted (0.xxx%).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "PERCENTRANK_INC",
        "longname": "ApiWorksheetFunction#PERCENTRANK_INC",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3521,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/PERCENTRANK_INC.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the number of permutations for a given number of objects that can be selected from the total objects.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The total number of objects.\n\t * @param {ApiRange | ApiName | number} arg2 - The number of objects in each permutation.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/PERMUT.js\n\t */",
        "description": "Returns the number of permutations for a given number of objects that can be selected from the total objects.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.PERMUT(32, 2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The total number of objects.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The number of objects in each permutation.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "PERMUT",
        "longname": "ApiWorksheetFunction#PERMUT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3533,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/PERMUT.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the number of permutations for a given number of objects (with repetitions) that can be selected from the total objects.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The total number of objects.\n\t * @param {ApiRange | ApiName | number} arg2 - The number of objects in each permutation.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/PERMUTATIONA.js\n\t */",
        "description": "Returns the number of permutations for a given number of objects (with repetitions) that can be selected from the total objects.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\n//method params\nlet number = 32;\nlet number_chosen = 2;\n\nworksheet.GetRange(\"A1\").SetValue(number);\nworksheet.GetRange(\"B1\").SetValue(number_chosen);\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.PERMUTATIONA(number, number_chosen);\n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The total number of objects.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The number of objects in each permutation.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "PERMUTATIONA",
        "longname": "ApiWorksheetFunction#PERMUTATIONA",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3545,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/PERMUTATIONA.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the value of the density function for a standard normal distribution.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The number for which the density of the standard normal distribution will be returned.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/PHI.js\n\t */",
        "description": "Returns the value of the density function for a standard normal distribution.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\n//method params\nlet number = 5;\n\nworksheet.GetRange(\"A1\").SetValue(number);\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.PHI(number);\n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The number for which the density of the standard normal distribution will be returned.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "PHI",
        "longname": "ApiWorksheetFunction#PHI",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3556,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/PHI.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the Poisson distribution.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The number of events.\n\t * @param {ApiRange | ApiName | number} arg2 - The expected numeric value, a positive number.\n\t * @param {ApiRange | ApiName | boolean} arg3 - A logical value (<b>true</b> or <b>false</b>) that determines the function form.\n\t * If it is <b>true</b>, the function returns the cumulative Poisson probability.\n\t * If it is <b>false</b>, the function returns the Poisson probability mass function.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/POISSON.js\n\t */",
        "description": "Returns the Poisson distribution.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\n//method params\nlet x = 9;\nlet mean = 12;\nlet cumulative = false;\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.POISSON(x, mean, cumulative);\n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The number of events.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The expected numeric value, a positive number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "A logical value (<b>true</b> or <b>false</b>) that determines the function form.\nIf it is <b>true</b>, the function returns the cumulative Poisson probability.\nIf it is <b>false</b>, the function returns the Poisson probability mass function.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "POISSON",
        "longname": "ApiWorksheetFunction#POISSON",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3571,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/POISSON.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the Poisson distribution.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The number of events.\n\t * @param {ApiRange | ApiName | number} arg2 - The expected numeric value, a positive number.\n\t * @param {ApiRange | ApiName | boolean} arg3 - A logical value (<b>true</b> or <b>false</b>) that determines the function form.\n\t * If it is <b>true</b>, the function returns the cumulative Poisson probability.\n\t * If it is <b>false</b>, the function returns the Poisson probability mass function.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/POISSON_DIST.js\n\t */",
        "description": "Returns the Poisson distribution.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\n//method params\nlet x = 9;\nlet mean = 12;\nlet cumulative = false;\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.POISSON_DIST(x, mean, cumulative);\n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The number of events.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The expected numeric value, a positive number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "A logical value (<b>true</b> or <b>false</b>) that determines the function form.\nIf it is <b>true</b>, the function returns the cumulative Poisson probability.\nIf it is <b>false</b>, the function returns the Poisson probability mass function.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "POISSON_DIST",
        "longname": "ApiWorksheetFunction#POISSON_DIST",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3586,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/POISSON_DIST.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the quartile of a data set.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number[]} arg1 - The array or cell range of numeric values for which the quartile value will be returned.\n\t * @param {ApiRange | ApiName | number} arg2 - The quartile value to return: minimum value = 0; 1st quartile = 1; median value = 2; 3rd quartile = 3; maximum value = 4.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/QUARTILE.js\n\t */",
        "description": "Returns the quartile of a data set.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet valueArr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nlet quart = 3; //eg: third quartile (75th percentile)\n\n// Place the numbers in cells\nfor (let i = 0; i < valueArr1.length; i++) {\n  worksheet.GetRange(\"A\" + (i + 1)).SetValue(valueArr1[i]);\n}\n\n//method params\nlet array = worksheet.GetRange(\"A1:A12\");\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.QUARTILE(array, quart);\n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The array or cell range of numeric values for which the quartile value will be returned.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The quartile value to return: minimum value = 0; 1st quartile = 1; median value = 2; 3rd quartile = 3; maximum value = 4.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "QUARTILE",
        "longname": "ApiWorksheetFunction#QUARTILE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3612,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/QUARTILE.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the quartile of a data set, based on percentile values from 0..1, exclusive.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number[]} arg1 - The array or cell range of numeric values for which the quartile value will be returned.\n\t * @param {ApiRange | ApiName | number} arg2 - The quartile value to return: 1st quartile = 1; median value = 2; 3rd quartile = 3.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/QUARTILE_EXC.js\n\t */",
        "description": "Returns the quartile of a data set, based on percentile values from 0..1, exclusive.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet valueArr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nlet quart = 2; \n\n// Place the numbers in cells\nfor (let i = 0; i < valueArr1.length; i++) {\n  worksheet.GetRange(\"A\" + (i + 1)).SetValue(valueArr1[i]);\n}\n\n//method params\nlet array = worksheet.GetRange(\"A1:A12\");\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.QUARTILE_EXC(array, quart); //0...1 exclusive\n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The array or cell range of numeric values for which the quartile value will be returned.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The quartile value to return: 1st quartile = 1; median value = 2; 3rd quartile = 3.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "QUARTILE_EXC",
        "longname": "ApiWorksheetFunction#QUARTILE_EXC",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3624,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/QUARTILE_EXC.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the quartile of a data set, based on percentile values from 0..1, inclusive.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number[]} arg1 - The array or cell range of numeric values for which the quartile value will be returned.\n\t * @param {ApiRange | ApiName | number} arg2 - The quartile value to return: minimum value = 0; 1st quartile = 1; median value = 2; 3rd quartile = 3; maximum value = 4.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/QUARTILE_INC.js\n\t */",
        "description": "Returns the quartile of a data set, based on percentile values from 0..1, inclusive.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet valueArr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nlet quart = 1;\n\n// Place the numbers in cells\nfor (let i = 0; i < valueArr1.length; i++) {\n  worksheet.GetRange(\"A\" + (i + 1)).SetValue(valueArr1[i]);\n}\n\n//method params\nlet array = worksheet.GetRange(\"A1:A12\");\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.QUARTILE_INC(array, quart); //0...1 inclusive\n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The array or cell range of numeric values for which the quartile value will be returned.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The quartile value to return: minimum value = 0; 1st quartile = 1; median value = 2; 3rd quartile = 3; maximum value = 4.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "QUARTILE_INC",
        "longname": "ApiWorksheetFunction#QUARTILE_INC",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3636,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/QUARTILE_INC.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the rank of a number in a list of numbers: its size relative to other values in the list.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The number for which the rank will be returned.\n\t * @param {ApiRange | ApiName | number[]} arg2 - An array or range of numbers. Nonnumeric values are ignored.\n\t * @param {?ApiRange | ?ApiName | ?boolean} arg3 - The numeric value that specifyes how to order the numbers. If it is 0 or omitted, the rank in the list will be sorted in descending order.\n\t * Any other numeric value means that the rank in the list will be sorted in ascending order.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/RANK.js\n\t */",
        "description": "Returns the rank of a number in a list of numbers: its size relative to other values in the list.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet valueArr = [7,6,5,5];\n\n// Place the numbers in cells\nfor (let i = 0; i < valueArr.length; i++) {\n  worksheet.GetRange(\"A\" + (i + 1)).SetValue(valueArr[i]);\n}\n\n//method params\nlet number = worksheet.GetRange(\"A3\");\nlet range = worksheet.GetRange(\"A1:A4\");\nlet order = 0;\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.RANK(number,range,order); \n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The number for which the rank will be returned.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "An array or range of numbers. Nonnumeric values are ignored.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The numeric value that specifyes how to order the numbers. If it is 0 or omitted, the rank in the list will be sorted in descending order.\nAny other numeric value means that the rank in the list will be sorted in ascending order.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "RANK",
        "longname": "ApiWorksheetFunction#RANK",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3650,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/RANK.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the rank of a number in a list of numbers: its size relative to other values in the list. If more than one value has the same rank, the average rank is returned.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The number for which the rank will be returned.\n\t * @param {ApiRange | ApiName | number[]} arg2 - An array or range of numbers. Nonnumeric values are ignored.\n\t * @param {?ApiRange | ?ApiName | ?boolean} arg3 - The numeric value that specifyes how to order the numbers. If it is 0 or omitted, the rank in the list will be sorted in descending order.\n\t * Any other numeric value means that the rank in the list will be sorted in ascending order.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/RANK_AVG.js\n\t */",
        "description": "Returns the rank of a number in a list of numbers: its size relative to other values in the list. If more than one value has the same rank, the average rank is returned.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet valueArr = [7, 6, 5, 5];\n\n// Place the numbers in cells\nfor (let i = 0; i < valueArr.length; i++) {\n  worksheet.GetRange(\"A\" + (i + 1)).SetValue(valueArr[i]);\n}\n\n//method params\nlet number = worksheet.GetRange(\"A3\");\nlet range = worksheet.GetRange(\"A1:A4\");\nlet order = 0;\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.RANK_AVG(number, range, order);\n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The number for which the rank will be returned.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "An array or range of numbers. Nonnumeric values are ignored.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The numeric value that specifyes how to order the numbers. If it is 0 or omitted, the rank in the list will be sorted in descending order.\nAny other numeric value means that the rank in the list will be sorted in ascending order.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "RANK_AVG",
        "longname": "ApiWorksheetFunction#RANK_AVG",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3664,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/RANK_AVG.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the rank of a number in a list of numbers: its size relative to other values in the list. If more than one value has the same rank, the top rank of that set of values is returned.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The number for which the rank will be returned.\n\t * @param {ApiRange | ApiName | number[]} arg2 - An array or range of numbers. Nonnumeric values are ignored.\n\t * @param {?ApiRange | ?ApiName | ?boolean} arg3 - The numeric value that specifyes how to order the numbers. If it is 0 or omitted, the rank in the list will be sorted in descending order.\n\t * Any other numeric value means that the rank in the list will be sorted in ascending order.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/RANK_EQ.js\n\t */",
        "description": "Returns the rank of a number in a list of numbers: its size relative to other values in the list. If more than one value has the same rank, the top rank of that set of values is returned.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet valueArr = [7, 6, 5, 5];\n\n// Place the numbers in cells\nfor (let i = 0; i < valueArr.length; i++) {\n  worksheet.GetRange(\"A\" + (i + 1)).SetValue(valueArr[i]);\n}\n\n//method params\nlet number = worksheet.GetRange(\"A3\");\nlet range = worksheet.GetRange(\"A1:A4\");\nlet order = 0;\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.RANK_EQ(number, range, order);\n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The number for which the rank will be returned.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "An array or range of numbers. Nonnumeric values are ignored.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The numeric value that specifyes how to order the numbers. If it is 0 or omitted, the rank in the list will be sorted in descending order.\nAny other numeric value means that the rank in the list will be sorted in ascending order.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "RANK_EQ",
        "longname": "ApiWorksheetFunction#RANK_EQ",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3678,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/RANK_EQ.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the skewness of a distribution: a characterization of the degree of asymmetry of a distribution around its mean.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number | ApiName | number[] | ApiRange} args - Up to 255 numeric values for which the skewness of a distribution will be returned.\n\t * The first argument is required, subsequent arguments are optional. Arguments can be numbers, names, ranges, or arrays of numbers.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/SKEW.js\n\t */",
        "description": "Returns the skewness of a distribution: a characterization of the degree of asymmetry of a distribution around its mean.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet valueArr = [1, 0, 0, 0, 0, 1, 0, 0, 2, 3, 4, 5, 6, 8, 10, 12];\n\n// Place the numbers in cells\nfor (let i = 0; i < valueArr.length; i++) {\n  worksheet.GetRange(\"A\" + (i + 1)).SetValue(valueArr[i]);\n}\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.SKEW(1, 0, 0, 0, 0, 1, 0, 0, 2, 3, 4, 5, 6, 8, 10, 12);\n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "number",
                        "ApiName",
                        "Array.<number>",
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 numeric values for which the skewness of a distribution will be returned.\nThe first argument is required, subsequent arguments are optional. Arguments can be numbers, names, ranges, or arrays of numbers.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "SKEW",
        "longname": "ApiWorksheetFunction#SKEW",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3703,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/SKEW.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the skewness of a distribution based on a population: a characterization of the degree of asymmetry of a distribution around its mean.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number | ApiName | number[] | ApiRange} args - Up to 255 numeric values for which the skewness of a distribution will be returned.\n\t * The first argument is required, subsequent arguments are optional. Arguments can be numbers, names, ranges, or arrays of numbers.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/SKEW_P.js\n\t */",
        "description": "Returns the skewness of a distribution based on a population: a characterization of the degree of asymmetry of a distribution around its mean.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet valueArr = [1, 0, 0, 0, 0, 1, 0, 0, 2, 3, 4, 5, 6, 8, 10, 12];\n\n// Place the numbers in cells\nfor (let i = 0; i < valueArr.length; i++) {\n  worksheet.GetRange(\"A\" + (i + 1)).SetValue(valueArr[i]);\n}\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.SKEW_P(1, 0, 0, 0, 0, 1, 0, 0, 2, 3, 4, 5, 6, 8, 10, 12);\n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "number",
                        "ApiName",
                        "Array.<number>",
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 numeric values for which the skewness of a distribution will be returned.\nThe first argument is required, subsequent arguments are optional. Arguments can be numbers, names, ranges, or arrays of numbers.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "SKEW_P",
        "longname": "ApiWorksheetFunction#SKEW_P",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3715,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/SKEW_P.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the k-th smallest value in a data set. For example, the fifth smallest number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number[]} arg1 - An array or range of numerical data for which the k-th smallest value will be determined.\n\t * @param {ApiRange | ApiName | number} arg2 - The position (from the smallest) in the range of the value to return.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/SMALL.js\n\t */",
        "description": "Returns the k-th smallest value in a data set. For example, the fifth smallest number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet valueArr = [1, 0, 0, 0, 0, 1, 0, 0, 2, 3, 4, 5, 6, 8, 10, 12];\n\n// Place the numbers in cells\nfor (let i = 0; i < valueArr.length; i++) {\n  worksheet.GetRange(\"A\" + (i + 1)).SetValue(valueArr[i]);\n}\n\n// method params\nlet range = worksheet.GetRange(\"A1:A16\");\nlet position = 8;\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.SMALL(range, position);\n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "An array or range of numerical data for which the k-th smallest value will be determined.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The position (from the smallest) in the range of the value to return.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "SMALL",
        "longname": "ApiWorksheetFunction#SMALL",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3739,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/SMALL.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a normalised value from a distribution characterised by a mean and standard deviation.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value to normalize.\n\t * @param {ApiRange | ApiName | number} arg2 - The arithmetic mean of the distribution.\n\t * @param {ApiRange | ApiName | number} arg3 - The standard deviation of the distribution, a positive number.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/STANDARDIZE.js\n\t */",
        "description": "Returns a normalised value from a distribution characterised by a mean and standard deviation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet valueArr = [5, -2, 10];\n\n// Place the numbers in cells\nfor (let i = 0; i < valueArr.length; i++) {\n  worksheet.GetRange(\"A\" + (i + 1)).SetValue(valueArr[i]);\n}\n\n// method params\nlet x = worksheet.GetRange(\"A1\");\nlet mean = worksheet.GetRange(\"A2\");\nlet stdDev = worksheet.GetRange(\"A3\");\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.STANDARDIZE(x, mean, stdDev);\n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value to normalize.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The arithmetic mean of the distribution.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The standard deviation of the distribution, a positive number.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "STANDARDIZE",
        "longname": "ApiWorksheetFunction#STANDARDIZE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3752,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/STANDARDIZE.js"
        ]
    },
    {
        "comment": "/**\n\t * Estimates standard deviation based on a sample (ignores logical values and text in the sample).\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number[] | number | ApiName | ApiRange} args - Up to 255 numeric values for which the standard deviation will be calculated.\n\t * The first argument is required, subsequent arguments are optional. Arguments can be numbers, names, ranges, or arrays of numbers.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/STDEV.js\n\t */",
        "description": "Estimates standard deviation based on a sample (ignores logical values and text in the sample).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet valueArr = [3, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 13, 14];\n\n// Place the numbers in cells\nfor (let i = 0; i < valueArr.length; i++) {\n  worksheet.GetRange(\"A\" + (i + 1)).SetValue(valueArr[i]);\n}\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.STDEV(3, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 13, 14);\n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<number>",
                        "number",
                        "ApiName",
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 numeric values for which the standard deviation will be calculated.\nThe first argument is required, subsequent arguments are optional. Arguments can be numbers, names, ranges, or arrays of numbers.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "STDEV",
        "longname": "ApiWorksheetFunction#STDEV",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3764,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/STDEV.js"
        ]
    },
    {
        "comment": "/**\n\t * Estimates standard deviation based on a sample (ignores logical values and text in the sample).\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number[] | number | ApiName | ApiRange} args - Up to 255 numeric values for which the standard deviation will be calculated.\n\t * The first argument is required, subsequent arguments are optional. Arguments can be numbers, names, ranges, or arrays of numbers.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/STDEV_S.js\n\t */",
        "description": "Estimates standard deviation based on a sample (ignores logical values and text in the sample).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nconst worksheet = Api.GetActiveSheet();\n\nlet valueArr = [3, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 13, 14];\n\n// Place the numbers in cells\nfor (let i = 0; i < valueArr.length; i++) {\n  worksheet.GetRange(\"A\" + (i + 1)).SetValue(valueArr[i]);\n}\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.STDEV_S(3, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 13, 14); //ignores logical values and text\n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<number>",
                        "number",
                        "ApiName",
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 numeric values for which the standard deviation will be calculated.\nThe first argument is required, subsequent arguments are optional. Arguments can be numbers, names, ranges, or arrays of numbers.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "STDEV_S",
        "longname": "ApiWorksheetFunction#STDEV_S",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3776,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/STDEV_S.js"
        ]
    },
    {
        "comment": "/**\n\t * Estimates standard deviation based on a sample, including logical values and text. Text and the <b>false</b> logical value have the value 0; the <b>true</b> logical value has the value 1.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number[] | number | string | boolean | ApiRange | ApiName} args - Up to 255 values for which the standard deviation will be calculated.\n\t * The first argument is required, subsequent arguments are optional. Arguments can be numbers, logical values, text strings, names, ranges, or arrays.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/STDEVA.js\n\t */",
        "description": "Estimates standard deviation based on a sample, including logical values and text. Text and the <b>false</b> logical value have the value 0; the <b>true</b> logical value has the value 1.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nconst worksheet = Api.GetActiveSheet();\n\nlet valueArr = [1, 0, 0, 0, \"text\", 1, 0, 0, 2, 3, true, false, 6, 8, 10, 12];\n\n// Place the numbers in cells\nfor (let i = 0; i < valueArr.length; i++) {\n  worksheet.GetRange(\"A\" + (i + 1)).SetValue(valueArr[i]);\n}\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.STDEVA(\n  1,\n  0,\n  0,\n  0,\n  \"text\",\n  1,\n  0,\n  0,\n  2,\n  3,\n  true,\n  false,\n  6,\n  8,\n  10,\n  12\n); //includes logical values\n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<number>",
                        "number",
                        "string",
                        "boolean",
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 values for which the standard deviation will be calculated.\nThe first argument is required, subsequent arguments are optional. Arguments can be numbers, logical values, text strings, names, ranges, or arrays.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "STDEVA",
        "longname": "ApiWorksheetFunction#STDEVA",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3788,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/STDEVA.js"
        ]
    },
    {
        "comment": "/**\n\t * Calculates standard deviation based on the entire population given as arguments (ignores logical values and text).\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number[] | number | ApiName | ApiRange} args - Up to 255 numeric values for which the standard deviation will be calculated.\n\t * The first argument is required, subsequent arguments are optional. Arguments can be numbers, names, ranges, or arrays of numbers.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/STDEVP.js\n\t */",
        "description": "Calculates standard deviation based on the entire population given as arguments (ignores logical values and text).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet valueArr = [1, 0, 0, 0, 4, 1, 0, 0, 2, 3, 6, 7, 6, 8, 10, 12];\n\n// Place the numbers in cells\nfor (let i = 0; i < valueArr.length; i++) {\n  worksheet.GetRange(\"A\" + (i + 1)).SetValue(valueArr[i]);\n}\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.STDEVP(1, 0, 0, 0, 4, 1, 0, 0, 2, 3, 6, 7, 6, 8, 10, 12); \n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<number>",
                        "number",
                        "ApiName",
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 numeric values for which the standard deviation will be calculated.\nThe first argument is required, subsequent arguments are optional. Arguments can be numbers, names, ranges, or arrays of numbers.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "STDEVP",
        "longname": "ApiWorksheetFunction#STDEVP",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3800,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/STDEVP.js"
        ]
    },
    {
        "comment": "/**\n\t * Calculates standard deviation based on the entire population given as arguments (ignores logical values and text).\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number[] | number | ApiName | ApiRange} args - Up to 255 numeric values for which the standard deviation will be calculated.\n\t * The first argument is required, subsequent arguments are optional. Arguments can be numbers, names, ranges, or arrays of numbers.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/STDEV_P.js\n\t */",
        "description": "Calculates standard deviation based on the entire population given as arguments (ignores logical values and text).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet valueArr = [\n  3, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 13, 14, 3, 5, 17, 18,\n];\n\n// Place the numbers in cells\nfor (let i = 0; i < valueArr.length; i++) {\n  worksheet.GetRange(\"A\" + (i + 1)).SetValue(valueArr[i]);\n}\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.STDEV_P(3,2,3,4,5,6,7,8,9,10,11,12,0,1,13,14,3,5,17,18); \n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<number>",
                        "number",
                        "ApiName",
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 numeric values for which the standard deviation will be calculated.\nThe first argument is required, subsequent arguments are optional. Arguments can be numbers, names, ranges, or arrays of numbers.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "STDEV_P",
        "longname": "ApiWorksheetFunction#STDEV_P",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3812,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/STDEV_P.js"
        ]
    },
    {
        "comment": "/**\n\t * Calculates standard deviation based on the entire population, including logical values and text.\n\t * Text and the <b>false</b> logical value have the value 0; the <b>true</b> logical value has the value 1.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number[] | number | string | boolean | ApiRange | ApiName} args - Up to 255 values for which the standard deviation will be calculated.\n\t * The first argument is required, subsequent arguments are optional. Arguments can be numbers, logical values, text strings, names, ranges, or arrays.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/STDEVPA.js\n\t */",
        "description": "Calculates standard deviation based on the entire population, including logical values and text.\nText and the <b>false</b> logical value have the value 0; the <b>true</b> logical value has the value 1.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet valueArr = [1, 0, 0, false, 5, 1, 0, 0, 2, true, 6, 7, 6, 8, 10, 12];\n\n// Place the numbers in cells\nfor (let i = 0; i < valueArr.length; i++) {\n  worksheet.GetRange(\"A\" + (i + 1)).SetValue(valueArr[i]);\n}\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.STDEVPA(1, 0, 0, false, 5, 1, 0, 0, 2, true, 6, 7, 6, 8, 10, 12); //includes logical values\n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<number>",
                        "number",
                        "string",
                        "boolean",
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 values for which the standard deviation will be calculated.\nThe first argument is required, subsequent arguments are optional. Arguments can be numbers, logical values, text strings, names, ranges, or arrays.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "STDEVPA",
        "longname": "ApiWorksheetFunction#STDEVPA",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3825,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/STDEVPA.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the Student's t-distribution.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The numeric value at which to evaluate the distribution.\n\t * @param {ApiRange | ApiName | number} arg2 - An integer indicating the number of degrees of freedom that characterize the distribution.\n\t * @param {ApiRange | ApiName | number} arg3 - Specifies the number of distribution tails to return: one-tailed distribution = 1; two-tailed distribution = 2.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/TDIST.js\n\t */",
        "description": "Returns the Student's t-distribution.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\n\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ans = func.TDIST(1.5, 10, 1);\nworksheet.GetRange(\"B2\").SetValue(ans);\n\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The numeric value at which to evaluate the distribution.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "An integer indicating the number of degrees of freedom that characterize the distribution.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "Specifies the number of distribution tails to return: one-tailed distribution = 1; two-tailed distribution = 2.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "TDIST",
        "longname": "ApiWorksheetFunction#TDIST",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3850,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/TDIST.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the left-tailed Student's t-distribution.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The numeric value at which to evaluate the distribution.\n\t * @param {ApiRange | ApiName | number} arg2 - An integer indicating the number of degrees of freedom that characterize the distribution.\n\t * @param {ApiRange | ApiName | boolean} arg3 - A logical value (<b>true</b> or <b>false</b>) that determines the function form.\n\t * If it is <b>true</b>, the function returns the cumulative distribution function.\n\t * If it is <b>false</b>, the function returns the probability density function.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/T_DIST.js\n\t */",
        "description": "Returns the left-tailed Student's t-distribution.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\n\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ans = func.T_DIST(1.5, 10, false);\nworksheet.GetRange(\"B2\").SetValue(ans);\n\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The numeric value at which to evaluate the distribution.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "An integer indicating the number of degrees of freedom that characterize the distribution.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "A logical value (<b>true</b> or <b>false</b>) that determines the function form.\nIf it is <b>true</b>, the function returns the cumulative distribution function.\nIf it is <b>false</b>, the function returns the probability density function.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "T_DIST",
        "longname": "ApiWorksheetFunction#T_DIST",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3865,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/T_DIST.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the two-tailed Student's t-distribution.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The numeric value at which to evaluate the distribution.\n\t * @param {ApiRange | ApiName | number} arg2 - An integer indicating the number of degrees of freedom that characterize the distribution.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/T_DIST_2T.js\n\t */",
        "description": "Returns the two-tailed Student's t-distribution.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.T_DIST_2T(1.5, 10));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The numeric value at which to evaluate the distribution.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "An integer indicating the number of degrees of freedom that characterize the distribution.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "T_DIST_2T",
        "longname": "ApiWorksheetFunction#T_DIST_2T",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3877,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/T_DIST_2T.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the right-tailed Student's t-distribution.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The numeric value at which to evaluate the distribution.\n\t * @param {ApiRange | ApiName | number} arg2 - An integer indicating the number of degrees of freedom that characterize the distribution.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/T_DIST_RT.js\n\t */",
        "description": "Returns the right-tailed Student's t-distribution.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.T_DIST_RT(1.5, 10));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The numeric value at which to evaluate the distribution.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "An integer indicating the number of degrees of freedom that characterize the distribution.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "T_DIST_RT",
        "longname": "ApiWorksheetFunction#T_DIST_RT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3889,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/T_DIST_RT.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the left-tailed inverse of the Student's t-distribution.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The probability associated with the two-tailed Student's t-distribution, a number between 0 and 1 inclusive.\n\t * @param {ApiRange | ApiName | number} arg2 - A positive integer indicating the number of degrees of freedom to characterize the distribution.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/T_INV.js\n\t */",
        "description": "Returns the left-tailed inverse of the Student's t-distribution.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\n\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet result = func.T_INV(0.75, 2);\nworksheet.GetRange(\"B2\").SetValue(result);\n\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The probability associated with the two-tailed Student's t-distribution, a number between 0 and 1 inclusive.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "A positive integer indicating the number of degrees of freedom to characterize the distribution.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "T_INV",
        "longname": "ApiWorksheetFunction#T_INV",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3901,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/T_INV.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the two-tailed inverse of the Student's t-distribution.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The probability associated with the two-tailed Student's t-distribution, a number between 0 and 1 inclusive.\n\t * @param {ApiRange | ApiName | number} arg2 - A positive integer indicating the number of degrees of freedom to characterize the distribution.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/T_INV_2T.js\n\t */",
        "description": "Returns the two-tailed inverse of the Student's t-distribution.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.T_INV_2T(0.5, 10));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The probability associated with the two-tailed Student's t-distribution, a number between 0 and 1 inclusive.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "A positive integer indicating the number of degrees of freedom to characterize the distribution.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "T_INV_2T",
        "longname": "ApiWorksheetFunction#T_INV_2T",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3913,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/T_INV_2T.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the two-tailed inverse of the Student's t-distribution.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The probability associated with the two-tailed Student's t-distribution, a number between 0 and 1 inclusive.\n\t * @param {ApiRange | ApiName | number} arg2 - A positive integer indicating the number of degrees of freedom to characterize the distribution.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/TINV.js\n\t */",
        "description": "Returns the two-tailed inverse of the Student's t-distribution.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\n\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet result = func.TINV(0.5, 10);\nworksheet.GetRange(\"B2\").SetValue(result);\n\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The probability associated with the two-tailed Student's t-distribution, a number between 0 and 1 inclusive.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "A positive integer indicating the number of degrees of freedom to characterize the distribution.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "TINV",
        "longname": "ApiWorksheetFunction#TINV",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3925,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/TINV.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns numbers in a linear trend matching known data points, using the least squares method.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number[]} arg1 - A range or array of y-values from the <em>y = mx + b</em> equation.\n\t * @param {?ApiRange | ?ApiName | number[]} arg2 - An optional range or array of x-values from the <em>y = mx + b</em> equation, an array of the same size as an array of y-values.\n\t * @param {?ApiRange | ?ApiName | number[]} arg3 - A range or array of new x-values for which this function will return corresponding y-values.\n\t * @param {?ApiRange | ?ApiName | ?boolean} arg4 - A logical value: the constant <em>b</em> is calculated normally if this parameter is set to <b>true</b> or omitted,\n\t * and <em>b</em> is set equal to 0 if the parameter is <b>false</b>.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/TREND.js\n\t */",
        "description": "Returns numbers in a linear trend matching known data points, using the least squares method.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet month = [\"Month\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet sales = [\"Sales\", \"$1,500.00\", \"$1,230.00\", \"$1,700.00\", \"$1,000.00\", \"$980.00\", \"$1,470.00\", \"$1,560.00\", \"$1,640.00\", \"$1,420.00\", \"$1,100.00\"];\n\nfor (let i = 0; i < month.length; i++) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(month[i]);\n}\nfor (let j = 0; j < sales.length; j++) {\n    worksheet.GetRange(\"B\" + (j + 1)).SetValue(sales[j]);\n}\n\nworksheet.GetRange(\"C1\").SetValue(\"Trend\");\nlet range1 = worksheet.GetRange(\"B2:B11\");\nlet range2 = worksheet.GetRange(\"A2:A11\");\nworksheet.GetRange(\"C2:C11\").SetValue(func.TREND(range1, range2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A range or array of y-values from the <em>y = mx + b</em> equation.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "An optional range or array of x-values from the <em>y = mx + b</em> equation, an array of the same size as an array of y-values.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "A range or array of new x-values for which this function will return corresponding y-values.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "A logical value: the constant <em>b</em> is calculated normally if this parameter is set to <b>true</b> or omitted,\nand <em>b</em> is set equal to 0 if the parameter is <b>false</b>.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "TREND",
        "longname": "ApiWorksheetFunction#TREND",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3940,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/TREND.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the mean of the interior portion of a set of data values.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number[]} arg1 - The array or range of values to trim and average.\n\t * @param {ApiRange | ApiName | number} arg2 - The fractional number of data points to exclude from the top and bottom of the data set.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/TRIMMEAN.js\n\t */",
        "description": "Returns the mean of the interior portion of a set of data values.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nlet worksheet = Api.GetActiveSheet();\nlet argumentsArr = [1, 2, 3, 4];\n\n// Place the numbers in cells\nfor (let i = 0; i < argumentsArr.length; i++) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(argumentsArr[i]);\n}\n\n// Get values from the range\nlet data = worksheet.GetRange(\"A1:A4\");\n\n// Calculate the TRIMMEAN of the range A1:A6\nlet func = Api.GetWorksheetFunction();\nlet result = func.TRIMMEAN(data, 0.6);\nworksheet.GetRange(\"B1\").SetValue(result);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The array or range of values to trim and average.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The fractional number of data points to exclude from the top and bottom of the data set.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "TRIMMEAN",
        "longname": "ApiWorksheetFunction#TRIMMEAN",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3952,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/TRIMMEAN.js"
        ]
    },
    {
        "comment": "/**\n\t * Estimates variance based on a sample (ignores logical values and text in the sample).\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number | ApiName | ApiRange | number[]} args - Up to 255 numeric values for which the variance will be calculated.\n\t * The first argument is required, subsequent arguments are optional. Arguments can be numbers, names, ranges, or arrays of numbers.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/VAR.js\n\t */",
        "description": "Estimates variance based on a sample (ignores logical values and text in the sample).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\n\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet result = func.VAR(1, 4, 2, 6, 0, 1, 3, 8, 0, 0, 6, 10, 0, 0, 7, 12)\nworksheet.GetRange(\"B2\").SetValue(result);\n\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "number",
                        "ApiName",
                        "ApiRange",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 numeric values for which the variance will be calculated.\nThe first argument is required, subsequent arguments are optional. Arguments can be numbers, names, ranges, or arrays of numbers.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "VAR",
        "longname": "ApiWorksheetFunction#VAR",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 3992,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/VAR.js"
        ]
    },
    {
        "comment": "/**\n\t * Estimates variance based on a sample, including logical values and text. Text and the <b>false</b> logical value have the value 0; the <b>true</b> logical value has the value 1.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number | string | boolean | ApiRange | array | ApiName} args - Up to 255 values for which the variance will be calculated.\n\t * The first argument is required, subsequent arguments are optional. Arguments can be numbers, logical values or text representations of numbers, names, ranges, or arrays.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/VARA.js\n\t */",
        "description": "Estimates variance based on a sample, including logical values and text. Text and the <b>false</b> logical value have the value 0; the <b>true</b> logical value has the value 1.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\n\nlet worksheet = Api.GetActiveSheet();\n\n// Data array\nlet data = [\n    [1, 0, 0, false],\n    [\"text\", 1, 0, 0],\n    [2, 3, true, 7],\n    [6, 8, 10, 12]\n];\n\n// Place the data in cells A1:D4\nfor (let i = 0; i < data.length; i++) {\n    for (let j = 0; j < data[i].length; j++) {\n        worksheet.GetRangeByNumber(i, j).SetValue(data[i][j]);\n    }\n}\n\n// Calculate the letA of the range A1:D4 and place the result in cell E6\nlet func = Api.GetWorksheetFunction();\nlet letaResult = func.VARA(worksheet.GetRange(\"A1:D4\"));\nworksheet.GetRange(\"E6\").SetValue(letaResult);\n\n\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "number",
                        "string",
                        "boolean",
                        "ApiRange",
                        "array",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "array"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 values for which the variance will be calculated.\nThe first argument is required, subsequent arguments are optional. Arguments can be numbers, logical values or text representations of numbers, names, ranges, or arrays.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "VARA",
        "longname": "ApiWorksheetFunction#VARA",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4004,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/VARA.js"
        ]
    },
    {
        "comment": "/**\n\t * Calculates variance based on the entire population (ignores logical values and text in the population).\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number | ApiName | ApiRange | number[]} args - Up to 255 numeric values for which the variance will be calculated.\n\t * The first argument is required, subsequent arguments are optional. Arguments can be numbers, names, ranges, or arrays of numbers.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/VARP.js\n\t */",
        "description": "Calculates variance based on the entire population (ignores logical values and text in the population).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\n\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet result = func.VARP(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)\nworksheet.GetRange(\"B2\").SetValue(result);\n\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "number",
                        "ApiName",
                        "ApiRange",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 numeric values for which the variance will be calculated.\nThe first argument is required, subsequent arguments are optional. Arguments can be numbers, names, ranges, or arrays of numbers.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "VARP",
        "longname": "ApiWorksheetFunction#VARP",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4016,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/VARP.js"
        ]
    },
    {
        "comment": "/**\n\t * Calculates variance based on the entire population (ignores logical values and text in the population).\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number | ApiName | ApiRange | number[]} args - Up to 255 numeric values for which the variance will be calculated.\n\t * The first argument is required, subsequent arguments are optional. Arguments can be numbers, names, ranges, or arrays of numbers.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/VAR_P.js\n\t */",
        "description": "Calculates variance based on the entire population (ignores logical values and text in the population).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\n\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet result = func.VAR_P(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)\nworksheet.GetRange(\"B2\").SetValue(result);\n\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "number",
                        "ApiName",
                        "ApiRange",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 numeric values for which the variance will be calculated.\nThe first argument is required, subsequent arguments are optional. Arguments can be numbers, names, ranges, or arrays of numbers.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "VAR_P",
        "longname": "ApiWorksheetFunction#VAR_P",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4028,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/VAR_P.js"
        ]
    },
    {
        "comment": "/**\n\t * Estimates variance based on a sample (ignores logical values and text in the sample).\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number | ApiName | ApiRange | number[]} args - Up to 255 numeric values for which the variance will be calculated.\n\t * The first argument is required, subsequent arguments are optional. Arguments can be numbers, names, ranges, or arrays of numbers.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/VAR_S.js\n\t */",
        "description": "Estimates variance based on a sample (ignores logical values and text in the sample).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\n\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet result = func.VAR_S(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)\nworksheet.GetRange(\"B2\").SetValue(result);\n\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "number",
                        "ApiName",
                        "ApiRange",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 numeric values for which the variance will be calculated.\nThe first argument is required, subsequent arguments are optional. Arguments can be numbers, names, ranges, or arrays of numbers.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "VAR_S",
        "longname": "ApiWorksheetFunction#VAR_S",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4040,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/VAR_S.js"
        ]
    },
    {
        "comment": "/**\n\t * Calculates variance based on the entire population, including logical values and text. Text and the <b>false</b> logical value have the value 0; the <b>true</b> logical value has the value 1.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number | string | boolean | ApiRange | array | ApiName} args - Up to 255 values for which the variance will be calculated.\n\t * The first argument is required, subsequent arguments are optional. Arguments can be numbers, logical values or text representations of numbers, names, ranges, or arrays.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/VARPA.js\n\t */",
        "description": "Calculates variance based on the entire population, including logical values and text. Text and the <b>false</b> logical value have the value 0; the <b>true</b> logical value has the value 1.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\n\nlet worksheet = Api.GetActiveSheet();\n\n// Data array\nlet data = [\n    [1, 0, 0, false],\n    [\"text\", 1, 0, 0],\n    [2, 3, true, 7],\n    [6, 8, 10, 12]\n];\n\n// Place the data in cells A1:D4\nfor (let i = 0; i < data.length; i++) {\n    for (let j = 0; j < data[i].length; j++) {\n        worksheet.GetRangeByNumber(i, j).SetValue(data[i][j]);\n    }\n}\n\n// Calculate the letPA of the range A1:D4 and place the result in cell D5\nlet func = Api.GetWorksheetFunction();\nlet letpaResult = func.VARPA(worksheet.GetRange(\"A1:D4\"));\nworksheet.GetRange(\"D5\").SetValue(letpaResult);\n\n\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "number",
                        "string",
                        "boolean",
                        "ApiRange",
                        "array",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "array"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 values for which the variance will be calculated.\nThe first argument is required, subsequent arguments are optional. Arguments can be numbers, logical values or text representations of numbers, names, ranges, or arrays.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "VARPA",
        "longname": "ApiWorksheetFunction#VARPA",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4052,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/VARPA.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the Weibull distribution.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value at which to evaluate the function, a nonnegative number.\n\t * @param {ApiRange | ApiName | number} arg2 - The alpha parameter of the distribution, a positive number.\n\t * @param {ApiRange | ApiName | number} arg3 - The beta parameter of the distribution, a positive number.\n\t * @param {ApiRange | ApiName | boolean} arg4 - A logical value (<b>true</b> or <b>false</b>) that determines the function form.\n\t * If it is <b>true</b>, the function returns the cumulative distribution function.\n\t * If it is <b>false</b>, the function returns the probability mass function.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/WEIBULL.js\n\t */",
        "description": "Returns the Weibull distribution.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\n\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet result = func.WEIBULL(12, 2, 5, true);\nworksheet.GetRange(\"B2\").SetValue(result);\n\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value at which to evaluate the function, a nonnegative number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The alpha parameter of the distribution, a positive number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The beta parameter of the distribution, a positive number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "A logical value (<b>true</b> or <b>false</b>) that determines the function form.\nIf it is <b>true</b>, the function returns the cumulative distribution function.\nIf it is <b>false</b>, the function returns the probability mass function.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "WEIBULL",
        "longname": "ApiWorksheetFunction#WEIBULL",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4068,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/WEIBULL.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the Weibull distribution.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value at which to evaluate the function, a nonnegative number.\n\t * @param {ApiRange | ApiName | number} arg2 - The alpha parameter of the distribution, a positive number.\n\t * @param {ApiRange | ApiName | number} arg3 - The beta parameter of the distribution, a positive number.\n\t * @param {ApiRange | ApiName | boolean} arg4 - A logical value (<b>true</b> or <b>false</b>) that determines the function form.\n\t * If it is <b>true</b>, the function returns the cumulative distribution function.\n\t * If it is <b>false</b>, the function returns the probability mass function.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/WEIBULL_DIST.js\n\t */",
        "description": "Returns the Weibull distribution.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\n\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet result = func.WEIBULL_DIST(12, 2, 5, true);\nworksheet.GetRange(\"B2\").SetValue(result);\n\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value at which to evaluate the function, a nonnegative number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The alpha parameter of the distribution, a positive number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The beta parameter of the distribution, a positive number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "A logical value (<b>true</b> or <b>false</b>) that determines the function form.\nIf it is <b>true</b>, the function returns the cumulative distribution function.\nIf it is <b>false</b>, the function returns the probability mass function.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "WEIBULL_DIST",
        "longname": "ApiWorksheetFunction#WEIBULL_DIST",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4084,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/WEIBULL_DIST.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the one-tailed P-value of a z-test.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number[] | ApiRange | ApiName} arg1 - The array or range of data against which to test X.\n\t * @param {ApiRange | ApiName | number} arg2 - The value to test.\n\t * @param {?ApiRange | ?ApiName | ?number} arg3 - The population (known) standard deviation. If omitted, the sample standard deviation is used.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ZTEST.js\n\t */",
        "description": "Returns the one-tailed P-value of a z-test.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\n\nlet worksheet = Api.GetActiveSheet();\nlet argumentsArr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\n\n// Place the numbers in cells\nfor (let i = 0; i < argumentsArr.length; i++) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(argumentsArr[i]);\n}\n\n// Get values from the range\nlet data = worksheet.GetRange(\"A1:A16\");\n\n// Calculate the TRIMMEAN of the range A1:A16\nlet func = Api.GetWorksheetFunction();\nlet result = func.ZTEST(data, 0.4);\nworksheet.GetRange(\"B1\").SetValue(result);\n\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<number>",
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The array or range of data against which to test X.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The value to test.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The population (known) standard deviation. If omitted, the sample standard deviation is used.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "ZTEST",
        "longname": "ApiWorksheetFunction#ZTEST",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4097,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ZTEST.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the one-tailed P-value of a z-test.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number[] | ApiRange} arg1 - The array or range of data against which to test X.\n\t * @param {ApiRange | ApiName | number} arg2 - The value to test.\n\t * @param {?ApiRange | ?ApiName | ?number} arg3 - The population (known) standard deviation. If omitted, the sample standard deviation is used.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/Z_TEST.js\n\t */",
        "description": "Returns the one-tailed P-value of a z-test.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\n\nlet worksheet = Api.GetActiveSheet();\nlet argumentsArr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\n\n// Place the numbers in cells\nfor (let i = 0; i < argumentsArr.length; i++) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(argumentsArr[i]);\n}\n\n// Get values from the range\nlet data = worksheet.GetRange(\"A1:A16\");\n\n// Calculate the TRIMMEAN of the range A1:A16\nlet func = Api.GetWorksheetFunction();\nlet result = func.Z_TEST(data, 4);\nworksheet.GetRange(\"B1\").SetValue(result);\n\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<number>",
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The array or range of data against which to test X.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The value to test.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The population (known) standard deviation. If omitted, the sample standard deviation is used.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "Z_TEST",
        "longname": "ApiWorksheetFunction#Z_TEST",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4110,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/Z_TEST.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a number that represents the date in the date-time code.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A number from 1900 or 1904 (depending on the workbook's date system) to 9999.\n\t * @param {ApiRange | ApiName | number} arg2 - A number from 1 to 12 representing the month of the year.\n\t * @param {ApiRange | ApiName | number} arg3 - A number from 1 to 31 representing the day of the month.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/DATE.js\n\t */",
        "description": "Returns a number that represents the date in the date-time code.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.DATE(2018, 3, 16));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A number from 1900 or 1904 (depending on the workbook's date system) to 9999.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "A number from 1 to 12 representing the month of the year.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "A number from 1 to 31 representing the day of the month.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "DATE",
        "longname": "ApiWorksheetFunction#DATE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4123,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/DATE.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts a date in the form of text to a number that represents the date in the date-time code.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | string} arg1 - The text that represents a date, between 1/1/1900 or 1/1/1904 (depending on the workbook's date system) and 12/31/9999.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/DATEVALUE.js\n\t */",
        "description": "Converts a date in the form of text to a number that represents the date in the date-time code.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.DATEVALUE(\"2018-3-16\"); \n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The text that represents a date, between 1/1/1900 or 1/1/1904 (depending on the workbook's date system) and 12/31/9999.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "DATEVALUE",
        "longname": "ApiWorksheetFunction#DATEVALUE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4134,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/DATEVALUE.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the day of the date given in the numerical format, a number from 1 to 31.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A number in the date-time code.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/DAY.js\n\t */",
        "description": "Returns the day of the date given in the numerical format, a number from 1 to 31.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.DAY(\"2018/3/16\"); \n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A number in the date-time code.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "DAY",
        "longname": "ApiWorksheetFunction#DAY",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4145,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/DAY.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the number of days between the two dates.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - Start date from which days will be counted.\n\t * @param {ApiRange | ApiName | number} arg2 - End date until which days will be counted.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/DAYS.js\n\t */",
        "description": "Returns the number of days between the two dates.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.DAYS(\"3/31/2018\", \"3/16/2018\"); \n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "Start date from which days will be counted.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "End date until which days will be counted.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "DAYS",
        "longname": "ApiWorksheetFunction#DAYS",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4157,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/DAYS.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the number of days between two dates based on a 360-day year (twelve 30-day months).\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - Start date from which days will be counted.\n\t * @param {ApiRange | ApiName | number} arg2 - End date until which days will be counted.\n\t * @param {?ApiRange | ?ApiName | ?boolean} arg3 - A logical value that specifies whether to use the U.S. (NASD) (false or omitted) or European (true) method in the calculation.\n\t * According to the European method, the start and end dates that occur on the 31st of a month become equal to the 30th of the same month.\n\t * According to the U.S. method, the start date is the last day of a month, it becomes equal to the 30th of the same month.\n\t * If the end date is the last day of a month and the start date is earlier than the 30th of a month, the end date becomes equal to the 1st of the next month.\n\t * Otherwise the end date becomes equal to the 30th of the same month.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/DAYS360.js\n\t */",
        "description": "Returns the number of days between two dates based on a 360-day year (twelve 30-day months).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.DAYS360(\"3/31/2018\", \"4/30/2019\", false); \n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "Start date from which days will be counted.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "End date until which days will be counted.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "A logical value that specifies whether to use the U.S. (NASD) (false or omitted) or European (true) method in the calculation.\nAccording to the European method, the start and end dates that occur on the 31st of a month become equal to the 30th of the same month.\nAccording to the U.S. method, the start date is the last day of a month, it becomes equal to the 30th of the same month.\nIf the end date is the last day of a month and the start date is earlier than the 30th of a month, the end date becomes equal to the 1st of the next month.\nOtherwise the end date becomes equal to the 30th of the same month.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "DAYS360",
        "longname": "ApiWorksheetFunction#DAYS360",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4174,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/DAYS360.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the serial number of the date which comes the indicated number of months before or after the start date.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A serial date number that represents the start date.\n\t * @param {ApiRange | ApiName | number} arg2 - The number of months before or after the start date.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/EDATE.js\n\t */",
        "description": "Returns the serial number of the date which comes the indicated number of months before or after the start date.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.EDATE(\"3/16/2018\", 7); \n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A serial date number that represents the start date.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The number of months before or after the start date.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "EDATE",
        "longname": "ApiWorksheetFunction#EDATE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4186,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/EDATE.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the serial number of the last day of the month before or after the specified number of months.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A serial date number that represents the start date.\n\t * @param {ApiRange | ApiName | number} arg2 - The number of months before or after the start date.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/EOMONTH.js\n\t */",
        "description": "Returns the serial number of the last day of the month before or after the specified number of months.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.EOMONTH(\"3/16/2018\", 10); \n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A serial date number that represents the start date.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The number of months before or after the start date.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "EOMONTH",
        "longname": "ApiWorksheetFunction#EOMONTH",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4198,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/EOMONTH.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the hour as a number from 0 (12:00 A.M.) to 23 (11:00 P.M.).\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number | string} arg1 - A number in the date-time code, or text in the time format, such as \"16:48:00\" or \"4:48:00 PM\", or a result of other formulas or functions.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/HOUR.js\n\t */",
        "description": "Returns the hour as a number from 0 (12:00 A.M.) to 23 (11:00 P.M.).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.HOUR(\"4:17 pm\"); \n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A number in the date-time code, or text in the time format, such as \"16:48:00\" or \"4:48:00 PM\", or a result of other formulas or functions.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "HOUR",
        "longname": "ApiWorksheetFunction#HOUR",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4209,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/HOUR.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the ISO week number in the year for a given date.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The date-time code used for date and time calculation.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ISOWEEKNUM.js\n\t */",
        "description": "Returns the ISO week number in the year for a given date.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.ISOWEEKNUM(\"9/1/2017\"); \n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The date-time code used for date and time calculation.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "ISOWEEKNUM",
        "longname": "ApiWorksheetFunction#ISOWEEKNUM",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4220,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ISOWEEKNUM.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the minute, a number from 0 to 59.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number | string} arg1 - A number in the date-time code, or text in the time format, such as \"16:48:00\" or \"4:48:00 PM\", or a result of other formulas or functions.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/MINUTE.js\n\t */",
        "description": "Returns the minute, a number from 0 to 59.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.MINUTE(\"4:25 pm\"); \n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A number in the date-time code, or text in the time format, such as \"16:48:00\" or \"4:48:00 PM\", or a result of other formulas or functions.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "MINUTE",
        "longname": "ApiWorksheetFunction#MINUTE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4231,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/MINUTE.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the month, a number from 1 (January) to 12 (December).\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1- A number in the date-time code.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/MONTH.js\n\t */",
        "description": "Returns the month, a number from 1 (January) to 12 (December).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.MONTH(\"3/16/2018\"); \n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1-",
                "description": "A number in the date-time code.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "MONTH",
        "longname": "ApiWorksheetFunction#MONTH",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4242,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/MONTH.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the number of whole workdays between two dates.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A serial date number that represents the start date.\n\t * @param {ApiRange | ApiName | number} arg2 - A serial date number that represents the end date.\n\t * @param {?ApiRange | number[]} arg3 - An optional range or array of one or more serial date numbers to exclude from the working calendar, such as state and federal holidays and floating holidays.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/NETWORKDAYS.js\n\t */",
        "description": "Returns the number of whole workdays between two dates.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.NETWORKDAYS(\"3/16/2018\", \"12/31/2018\"); \n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A serial date number that represents the start date.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "A serial date number that represents the end date.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "An optional range or array of one or more serial date numbers to exclude from the working calendar, such as state and federal holidays and floating holidays.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "NETWORKDAYS",
        "longname": "ApiWorksheetFunction#NETWORKDAYS",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4255,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/NETWORKDAYS.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the number of whole workdays between two dates with custom weekend parameters.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A serial date number that represents the start date.\n\t * @param {ApiRange | ApiName | number} arg2 - A serial date number that represents the end date.\n\t * @param {?ApiRange | ?ApiName | ?number | ?string} arg3 - A number or string specifying when weekends occur.\n\t * @param {?ApiRange | number[]} arg4 - An optional range or array of one or more serial date numbers to exclude from the working calendar, such as state and federal holidays and floating holidays.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/NETWORKDAYS_INTL.js\n\t */",
        "description": "Returns the number of whole workdays between two dates with custom weekend parameters.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.NETWORKDAYS_INTL(\"8/1/2017\", \"9/1/2017\", \"0000011\", \"8/16/2017\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A serial date number that represents the start date.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "A serial date number that represents the end date.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "string",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "A number or string specifying when weekends occur.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "An optional range or array of one or more serial date numbers to exclude from the working calendar, such as state and federal holidays and floating holidays.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "NETWORKDAYS_INTL",
        "longname": "ApiWorksheetFunction#NETWORKDAYS_INTL",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4269,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/NETWORKDAYS_INTL.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the current date and time in the <em>MM/dd/yy hh:mm</em> format.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/NOW.js\n\t */",
        "description": "Returns the current date and time in the <em>MM/dd/yy hh:mm</em> format.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.NOW(); \n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "NOW",
        "longname": "ApiWorksheetFunction#NOW",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4279,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/NOW.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the second, a number from 0 to 59.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number | string} arg1 - A number in the date-time code, or text in the time format, such as \"16:48:00\" or \"4:48:00 PM\", or a result of other formulas or functions.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/SECOND.js\n\t */",
        "description": "Returns the second, a number from 0 to 59.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.SECOND(\"16:39:35\"); \n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A number in the date-time code, or text in the time format, such as \"16:48:00\" or \"4:48:00 PM\", or a result of other formulas or functions.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "SECOND",
        "longname": "ApiWorksheetFunction#SECOND",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4290,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/SECOND.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts hours, minutes and seconds given as numbers to a serial number, formatted with the time format.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A number from 0 to 23 representing the hour.\n\t * @param {ApiRange | ApiName | number} arg2 - A number from 0 to 59 representing the minute.\n\t * @param {ApiRange | ApiName | number} arg3 - A number from 0 to 59 representing the second.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/TIME.js\n\t */",
        "description": "Converts hours, minutes and seconds given as numbers to a serial number, formatted with the time format.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.TIME(23, 4, 39));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A number from 0 to 23 representing the hour.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "A number from 0 to 59 representing the minute.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "A number from 0 to 59 representing the second.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "TIME",
        "longname": "ApiWorksheetFunction#TIME",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4303,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/TIME.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts a text time to a serial number for a time, a number from 0 (12:00:00 AM) to 0.999988426 (11:59:59 PM). Format the number with a time format after entering the formula.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | string} arg1 - A text string that represents a time in one of the time formats (date information in the string is ignored).\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/TIMEVALUE.js\n\t */",
        "description": "Converts a text time to a serial number for a time, a number from 0 (12:00:00 AM) to 0.999988426 (11:59:59 PM). Format the number with a time format after entering the formula.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.TIMEVALUE(\"11/5/18 11:17:00 am\"); \n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A text string that represents a time in one of the time formats (date information in the string is ignored).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "TIMEVALUE",
        "longname": "ApiWorksheetFunction#TIMEVALUE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4314,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/TIMEVALUE.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the current date in the <em>MM/dd/yy</em> format.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/TODAY.js\n\t */",
        "description": "Returns the current date in the <em>MM/dd/yy</em> format.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.TODAY());\n```",
        "memberof": "ApiWorksheetFunction",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "TODAY",
        "longname": "ApiWorksheetFunction#TODAY",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4324,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/TODAY.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a number from 1 to 7 identifying the day of the week of the specified date.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A number that represents a date, or a result of other formulas or functions.\n\t * @param {?ApiRange | ?ApiName | ?number} arg2 - A number that determines the type of return value: <b>1</b> - returns a number from 1 (Sunday) to 7 (Saturday);\n\t * <b>2</b> - returns a number from 1 (Monday) to 7 (Sunday); <b>3</b> - returns a number from 0 (Monday) to 6 (Sunday).\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/WEEKDAY.js\n\t */",
        "description": "Returns a number from 1 to 7 identifying the day of the week of the specified date.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.WEEKDAY(\"11/5/2018\", 2); \n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A number that represents a date, or a result of other formulas or functions.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "A number that determines the type of return value: <b>1</b> - returns a number from 1 (Sunday) to 7 (Saturday);\n<b>2</b> - returns a number from 1 (Monday) to 7 (Sunday); <b>3</b> - returns a number from 0 (Monday) to 6 (Sunday).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "WEEKDAY",
        "longname": "ApiWorksheetFunction#WEEKDAY",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4337,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/WEEKDAY.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the week number in the year.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The date-time code used for date and time calculation.\n\t * @param {?ApiRange | ?ApiName | ?number} arg2 - A number (1 or 2) that determines the type of the return value: Sunday (1) or Monday (2).\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/WEEKNUM.js\n\t */",
        "description": "Returns the week number in the year.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.WEEKNUM(\"11/5/2018\", 2); \n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The date-time code used for date and time calculation.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "A number (1 or 2) that determines the type of the return value: Sunday (1) or Monday (2).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "WEEKNUM",
        "longname": "ApiWorksheetFunction#WEEKNUM",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4349,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/WEEKNUM.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the serial number of the date before or after a specified number of workdays.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A serial date number that represents the start date.\n\t * @param {ApiRange | ApiName | number} arg2 - The number of nonweekend and non-holiday days before or after the start date. A positive value for days yields a future date; a negative value yields a past date.\n\t * @param {?ApiRange | ApiName | number[]} arg3 - An optional range or array of one or more serial date numbers to exclude from the working calendar, such as state and federal holidays and floating holidays.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/WORKDAY.js\n\t */",
        "description": "Returns the serial number of the date before or after a specified number of workdays.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.WORKDAY(\"12/7/1981\", 56); \n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A serial date number that represents the start date.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The number of nonweekend and non-holiday days before or after the start date. A positive value for days yields a future date; a negative value yields a past date.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "An optional range or array of one or more serial date numbers to exclude from the working calendar, such as state and federal holidays and floating holidays.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "WORKDAY",
        "longname": "ApiWorksheetFunction#WORKDAY",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4362,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/WORKDAY.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the serial number of the date before or after a specified number of workdays with custom weekend parameters.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A serial date number that represents the start date.\n\t * @param {ApiRange | ApiName | number} arg2 - The number of nonweekend and non-holiday days before or after the start date. A positive value for days yields a future date; a negative value yields a past date.\n\t * @param {?ApiRange | ?ApiName | ?number | ?string} arg3 - A number or string specifying when weekends occur.\n\t * @param {?ApiRange | ?ApiName | ?number[]} arg4 - An optional range or array of one or more serial date numbers to exclude from the working calendar, such as state and federal holidays and floating holidays.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/WORKDAY_INTL.js\n\t */",
        "description": "Returns the serial number of the date before or after a specified number of workdays with custom weekend parameters.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.WORKDAY_INTL(\"9/8/2017\", \"-20\", \"0000011\", \"8/15/2017\");\n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A serial date number that represents the start date.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The number of nonweekend and non-holiday days before or after the start date. A positive value for days yields a future date; a negative value yields a past date.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "string",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "A number or string specifying when weekends occur.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "?Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ],
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "An optional range or array of one or more serial date numbers to exclude from the working calendar, such as state and federal holidays and floating holidays.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "WORKDAY_INTL",
        "longname": "ApiWorksheetFunction#WORKDAY_INTL",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4376,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/WORKDAY_INTL.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the year of a date, an integer in the range 1900-9999.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A number in the date-time code, or a result of other formulas or functions.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/YEAR.js\n\t */",
        "description": "Returns the year of a date, an integer in the range 1900-9999.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.YEAR(\"3/16/2018\");\n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A number in the date-time code, or a result of other formulas or functions.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "YEAR",
        "longname": "ApiWorksheetFunction#YEAR",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4387,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/YEAR.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the year fraction representing the number of whole days between the start date and end date.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A serial date number that represents the start date.\n\t * @param {ApiRange | ApiName | number} arg2 - A serial date number that represents the end date.\n\t * @param {?ApiRange | ?ApiName | ?number} arg3 - The type of day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/YEARFRAC.js\n\t */",
        "description": "Returns the year fraction representing the number of whole days between the start date and end date.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.YEARFRAC(\"12/7/1981\", \"11/5/2018\");\n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A serial date number that represents the start date.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "A serial date number that represents the end date.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The type of day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "YEARFRAC",
        "longname": "ApiWorksheetFunction#YEARFRAC",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4400,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/YEARFRAC.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the modified Bessel function In(x).\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value at which to evaluate the function.\n\t * @param {ApiRange | ApiName | number} arg2 - The order of the Bessel function.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/BESSELI.js\n\t */",
        "description": "Returns the modified Bessel function In(x).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.BESSELI(3.5, 1));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value at which to evaluate the function.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The order of the Bessel function.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "BESSELI",
        "longname": "ApiWorksheetFunction#BESSELI",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4412,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/BESSELI.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the Bessel function Jn(x).\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value at which to evaluate the function.\n\t * @param {ApiRange | ApiName | number} arg2 - The order of the Bessel function.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/BESSELJ.js\n\t */",
        "description": "Returns the Bessel function Jn(x).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.BESSELJ(1.9, 2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value at which to evaluate the function.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The order of the Bessel function.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "BESSELJ",
        "longname": "ApiWorksheetFunction#BESSELJ",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4424,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/BESSELJ.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the modified Bessel function Kn(x).\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value at which to evaluate the function.\n\t * @param {ApiRange | ApiName | number} arg2 - The order of the function.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/BESSELK.js\n\t */",
        "description": "Returns the modified Bessel function Kn(x).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.BESSELK(1.5, 1));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value at which to evaluate the function.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The order of the function.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "BESSELK",
        "longname": "ApiWorksheetFunction#BESSELK",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4436,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/BESSELK.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the Bessel function Yn(x).\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value at which to evaluate the function.\n\t * @param {ApiRange | ApiName | number} arg2 - The order of the function.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/BESSELY.js\n\t */",
        "description": "Returns the Bessel function Yn(x).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.BESSELY(2.5, 1));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value at which to evaluate the function.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The order of the function.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "BESSELY",
        "longname": "ApiWorksheetFunction#BESSELY",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4448,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/BESSELY.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts a binary number to decimal.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The binary number which will be convertrd.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/BIN2DEC.js\n\t */",
        "description": "Converts a binary number to decimal.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.BIN2DEC(1110011100));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The binary number which will be convertrd.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "BIN2DEC",
        "longname": "ApiWorksheetFunction#BIN2DEC",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4459,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/BIN2DEC.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts a binary number to hexadecimal.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The binary number which will be convertrd.\n\t * @param {?ApiRange | ?ApiName | ?number} arg2 - The number of characters to use.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/BIN2HEX.js\n\t */",
        "description": "Converts a binary number to hexadecimal.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.BIN2HEX(1110011100, 4));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The binary number which will be convertrd.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The number of characters to use.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "BIN2HEX",
        "longname": "ApiWorksheetFunction#BIN2HEX",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4471,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/BIN2HEX.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts a binary number to octal.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The binary number which will be convertrd.\n\t * @param {?ApiRange | ?ApiName | ?number} arg2 - The number of characters to use.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/BIN2OCT.js\n\t */",
        "description": "Converts a binary number to octal.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.BIN2OCT(1110011100, 4));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The binary number which will be convertrd.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The number of characters to use.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "BIN2OCT",
        "longname": "ApiWorksheetFunction#BIN2OCT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4483,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/BIN2OCT.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a bitwise \"AND\" of two numbers.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The first decimal representation of the binary number to evaluate.\n\t * @param {ApiRange | ApiName | number} arg2 - The second decimal representation of the binary number to evaluate.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/BITAND.js\n\t */",
        "description": "Returns a bitwise \"AND\" of two numbers.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.BITAND(13, 25));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The first decimal representation of the binary number to evaluate.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The second decimal representation of the binary number to evaluate.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "BITAND",
        "longname": "ApiWorksheetFunction#BITAND",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4495,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/BITAND.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a number shifted left by the specified number of bits.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The decimal representation of the binary number to evaluate.\n\t * @param {ApiRange | ApiName | number} arg2 - The number of bits by which the number will be shifted left.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/BITLSHIFT.js\n\t */",
        "description": "Returns a number shifted left by the specified number of bits.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.BITLSHIFT(4, 2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The decimal representation of the binary number to evaluate.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The number of bits by which the number will be shifted left.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "BITLSHIFT",
        "longname": "ApiWorksheetFunction#BITLSHIFT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4507,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/BITLSHIFT.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a bitwise \"OR\" of two numbers.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The first decimal representation of the binary number to evaluate.\n\t * @param {ApiRange | ApiName | number} arg2 - The second decimal representation of the binary number to evaluate.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/BITOR.js\n\t */",
        "description": "Returns a bitwise \"OR\" of two numbers.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.BITOR(23, 10));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The first decimal representation of the binary number to evaluate.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The second decimal representation of the binary number to evaluate.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "BITOR",
        "longname": "ApiWorksheetFunction#BITOR",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4519,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/BITOR.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a number shifted right by the specified number of bits.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The decimal representation of the binary number to evaluate.\n\t * @param {ApiRange | ApiName | number} arg2 - The number of bits by which the number will be shifted right.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/BITRSHIFT.js\n\t */",
        "description": "Returns a number shifted right by the specified number of bits.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.BITRSHIFT(13, 2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The decimal representation of the binary number to evaluate.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The number of bits by which the number will be shifted right.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "BITRSHIFT",
        "longname": "ApiWorksheetFunction#BITRSHIFT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4531,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/BITRSHIFT.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a bitwise \"XOR\" (Exclusive Or) of two numbers.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The first decimal representation of the binary number to evaluate.\n\t * @param {ApiRange | ApiName | number} arg2 - The second decimal representation of the binary number to evaluate.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/BITXOR.js\n\t */",
        "description": "Returns a bitwise \"XOR\" (Exclusive Or) of two numbers.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.BITXOR(5, 3));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The first decimal representation of the binary number to evaluate.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The second decimal representation of the binary number to evaluate.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "BITXOR",
        "longname": "ApiWorksheetFunction#BITXOR",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4543,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/BITXOR.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts real and imaginary coefficients into a complex number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The real coefficient of the complex number.\n\t * @param {ApiRange | ApiName | number} arg2 - The imaginary coefficient of the complex number.\n\t * @param {?ApiRange | ?ApiName | ?string} arg3 - The suffix for the imaginary component of the complex number. It can be either \"i\" or \"j\" in lowercase.\n\t * If it is omitted, the function will assume suffix to be \"i\".\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/COMPLEX.js\n\t */",
        "description": "Converts real and imaginary coefficients into a complex number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.COMPLEX(-2, 2.5, \"i\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The real coefficient of the complex number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The imaginary coefficient of the complex number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "string",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The suffix for the imaginary component of the complex number. It can be either \"i\" or \"j\" in lowercase.\nIf it is omitted, the function will assume suffix to be \"i\".",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "COMPLEX",
        "longname": "ApiWorksheetFunction#COMPLEX",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4557,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/COMPLEX.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts a number from one measurement system to another.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value in the specified units to be converted.\n\t * @param {ApiRange | ApiName | string} arg2 - The original measurement unit.\n\t * @param {ApiRange | ApiName | string} arg3 - The units for the result.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/CONVERT.js\n\t */",
        "description": "Converts a number from one measurement system to another.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.CONVERT(2, \"Ibm\", \"kg\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value in the specified units to be converted.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The original measurement unit.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The units for the result.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "CONVERT",
        "longname": "ApiWorksheetFunction#CONVERT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4570,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/CONVERT.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts a decimal number to binary.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The decimal integer to convert.\n\t * @param {?ApiRange | ?ApiName | ?number} arg2 - The number of characters to use.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/DEC2BIN.js\n\t */",
        "description": "Converts a decimal number to binary.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.DEC2BIN(-100));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The decimal integer to convert.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The number of characters to use.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "DEC2BIN",
        "longname": "ApiWorksheetFunction#DEC2BIN",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4582,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/DEC2BIN.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts a decimal number to hexadecimal.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The decimal integer to convert.\n\t * @param {?ApiRange | ?ApiName | ?number} arg2 - The number of characters to use.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/DEC2HEX.js\n\t */",
        "description": "Converts a decimal number to hexadecimal.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.DEC2HEX(-100));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The decimal integer to convert.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The number of characters to use.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "DEC2HEX",
        "longname": "ApiWorksheetFunction#DEC2HEX",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4594,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/DEC2HEX.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts a decimal number to octal.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - Te decimal integer to convert.\n\t * @param {?ApiRange | ?ApiName | ?number} arg2 - The number of characters to use.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/DEC2OCT.js\n\t */",
        "description": "Converts a decimal number to octal.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.DEC2OCT(-100));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "Te decimal integer to convert.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The number of characters to use.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "DEC2OCT",
        "longname": "ApiWorksheetFunction#DEC2OCT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4606,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/DEC2OCT.js"
        ]
    },
    {
        "comment": "/**\n\t * Tests whether two numbers are equal. The function returns 1 if the numbers are equal and 0 otherwise.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The first number.\n\t * @param {?ApiRange | ?ApiName | ?number} arg2 - The second number.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/DELTA.js\n\t */",
        "description": "Tests whether two numbers are equal. The function returns 1 if the numbers are equal and 0 otherwise.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.DELTA(23, 24));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The first number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The second number.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "DELTA",
        "longname": "ApiWorksheetFunction#DELTA",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4618,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/DELTA.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the error function integrated between the specified lower and upper limits.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The lower bound for integrating the error function.\n\t * @param {?ApiRange | ?ApiName | ?number} arg2 - The upper bound for integrating the error function.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ERF.js\n\t */",
        "description": "Returns the error function integrated between the specified lower and upper limits.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.ERF(-2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The lower bound for integrating the error function.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The upper bound for integrating the error function.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "ERF",
        "longname": "ApiWorksheetFunction#ERF",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4630,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ERF.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the error function integrated between 0 and the specified lower limit.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The lower bound for integrating the error function.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ERF_PRECISE.js\n\t */",
        "description": "Returns the error function integrated between 0 and the specified lower limit.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.ERF_PRECISE(0.745));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The lower bound for integrating the error function.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "ERF_PRECISE",
        "longname": "ApiWorksheetFunction#ERF_PRECISE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4641,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ERF_PRECISE.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the complementary error function integrated between the specified lower limit and infinity.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The lower bound for integrating the complementary error function.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ERFC.js\n\t */",
        "description": "Returns the complementary error function integrated between the specified lower limit and infinity.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.ERFC(-2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The lower bound for integrating the complementary error function.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "ERFC",
        "longname": "ApiWorksheetFunction#ERFC",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4652,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ERFC.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the complementary error function integrated between the specified lower limit and infinity.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The lower bound for integrating the complementary error function.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ERFC_PRECISE.js\n\t */",
        "description": "Returns the complementary error function integrated between the specified lower limit and infinity.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.ERFC_PRECISE(0.745));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The lower bound for integrating the complementary error function.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "ERFC_PRECISE",
        "longname": "ApiWorksheetFunction#ERFC_PRECISE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4663,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ERFC_PRECISE.js"
        ]
    },
    {
        "comment": "/**\n\t * Tests whether a number is greater than a threshold value. The function returns 1 if the number is greater than or equal to the threshold value and 0 otherwise.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value to test against step.\n\t * @param {?ApiRange | ?ApiName | ?number} arg2 - The threshold value.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/GESTEP.js\n\t */",
        "description": "Tests whether a number is greater than a threshold value. The function returns 1 if the number is greater than or equal to the threshold value and 0 otherwise.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.GESTEP(-2, 2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value to test against step.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The threshold value.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GESTEP",
        "longname": "ApiWorksheetFunction#GESTEP",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4675,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/GESTEP.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts a hexadecimal number to binary.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The hexadecimal number to convert.\n\t * @param {?ApiRange | ?ApiName | ?number} arg2 - The number of characters to use.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/HEX2BIN.js\n\t */",
        "description": "Converts a hexadecimal number to binary.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.HEX2BIN(\"FFFFFFFF9C\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The hexadecimal number to convert.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The number of characters to use.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "HEX2BIN",
        "longname": "ApiWorksheetFunction#HEX2BIN",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4687,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/HEX2BIN.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts a hexadecimal number to decimal.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The hexadecimal number to convert.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/HEX2DEC.js\n\t */",
        "description": "Converts a hexadecimal number to decimal.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.HEX2DEC(\"FFFFFFFF9C\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The hexadecimal number to convert.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "HEX2DEC",
        "longname": "ApiWorksheetFunction#HEX2DEC",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4698,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/HEX2DEC.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts a hexadecimal number to octal.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The hexadecimal number to convert.\n\t * @param {?ApiRange | ?ApiName | ?number} arg2 - The number of characters to use.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/HEX2OCT.js\n\t */",
        "description": "Converts a hexadecimal number to octal.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.HEX2OCT(\"FFFFFFFF9C\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The hexadecimal number to convert.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The number of characters to use.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "HEX2OCT",
        "longname": "ApiWorksheetFunction#HEX2OCT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4710,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/HEX2OCT.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the absolute value (modulus) of a complex number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/IMABS.js\n\t */",
        "description": "Returns the absolute value (modulus) of a complex number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.IMABS(\"-2+2.5i\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "IMABS",
        "longname": "ApiWorksheetFunction#IMABS",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4721,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/IMABS.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the imaginary coefficient of a complex number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/IMAGINARY.js\n\t */",
        "description": "Returns the imaginary coefficient of a complex number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.IMAGINARY(\"-2+2.5i\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "IMAGINARY",
        "longname": "ApiWorksheetFunction#IMAGINARY",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4732,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/IMAGINARY.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the argument Theta, an angle expressed in radians.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/IMARGUMENT.js\n\t */",
        "description": "Returns the argument Theta, an angle expressed in radians.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.IMARGUMENT(\"-2+2.5i\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "IMARGUMENT",
        "longname": "ApiWorksheetFunction#IMARGUMENT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4743,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/IMARGUMENT.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the complex conjugate of a complex number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/IMCONJUGATE.js\n\t */",
        "description": "Returns the complex conjugate of a complex number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.IMCONJUGATE(\"-2+2.5i\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "IMCONJUGATE",
        "longname": "ApiWorksheetFunction#IMCONJUGATE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4754,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/IMCONJUGATE.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the cosine of a complex number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/IMCOS.js\n\t */",
        "description": "Returns the cosine of a complex number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.IMCOS(\"-2+2.5i\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "IMCOS",
        "longname": "ApiWorksheetFunction#IMCOS",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4765,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/IMCOS.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the hyperbolic cosine of a complex number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/IMCOSH.js\n\t */",
        "description": "Returns the hyperbolic cosine of a complex number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.IMCOSH(\"-2+2.5i\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "IMCOSH",
        "longname": "ApiWorksheetFunction#IMCOSH",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4776,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/IMCOSH.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the cotangent of a complex number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/IMCOT.js\n\t */",
        "description": "Returns the cotangent of a complex number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.IMCOT(\"-2+2.5i\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "IMCOT",
        "longname": "ApiWorksheetFunction#IMCOT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4787,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/IMCOT.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the cosecant of a complex number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/IMCSC.js\n\t */",
        "description": "Returns the cosecant of a complex number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.IMCSC(\"-2+2.5i\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "IMCSC",
        "longname": "ApiWorksheetFunction#IMCSC",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4798,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/IMCSC.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the hyperbolic cosecant of a complex number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/IMCSCH.js\n\t */",
        "description": "Returns the hyperbolic cosecant of a complex number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.IMCSCH(\"-2+2.5i\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "IMCSCH",
        "longname": "ApiWorksheetFunction#IMCSCH",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4809,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/IMCSCH.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the quotient of two complex numbers.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The complex numerator or dividend in the <em>x + yi</em> or <em>x + yj</em> form.\n\t * @param {ApiRange | ApiName | number} arg2 - The complex denominator or divisor in the <em>x + yi</em> or <em>x + yj</em> form.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/IMDIV.js\n\t */",
        "description": "Returns the quotient of two complex numbers.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.IMDIV(\"-2+2.5i\", \"0.1+1.5j\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The complex numerator or dividend in the <em>x + yi</em> or <em>x + yj</em> form.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The complex denominator or divisor in the <em>x + yi</em> or <em>x + yj</em> form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "IMDIV",
        "longname": "ApiWorksheetFunction#IMDIV",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4821,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/IMDIV.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the exponential of a complex number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/IMEXP.js\n\t */",
        "description": "Returns the exponential of a complex number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.IMEXP(\"-2+2.5i\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "IMEXP",
        "longname": "ApiWorksheetFunction#IMEXP",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4832,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/IMEXP.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the natural logarithm of a complex number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/IMLN.js\n\t */",
        "description": "Returns the natural logarithm of a complex number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.IMLN(\"-2+2.5i\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "IMLN",
        "longname": "ApiWorksheetFunction#IMLN",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4843,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/IMLN.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the base-10 logarithm of a complex number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/IMLOG10.js\n\t */",
        "description": "Returns the base-10 logarithm of a complex number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.IMLOG10(\"-2+2.5i\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "IMLOG10",
        "longname": "ApiWorksheetFunction#IMLOG10",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4854,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/IMLOG10.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the base-2 logarithm of a complex number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/IMLOG2.js\n\t */",
        "description": "Returns the base-2 logarithm of a complex number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.IMLOG2(\"-2+2.5i\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "IMLOG2",
        "longname": "ApiWorksheetFunction#IMLOG2",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4865,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/IMLOG2.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a complex number raised to an integer power.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.\n\t * @param {ApiRange | ApiName | number} arg2 - The power to which the complex number will be raised.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/IMPOWER.js\n\t */",
        "description": "Returns a complex number raised to an integer power.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.IMPOWER(\"-2+2.5i\", -3));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The power to which the complex number will be raised.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "IMPOWER",
        "longname": "ApiWorksheetFunction#IMPOWER",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4877,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/IMPOWER.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the product of the specified complex numbers.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | string} args - Up to 255 complex numbers expressed in the <em>x + yi</em> or <em>x + yj</em> form.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/IMPRODUCT.js\n\t */",
        "description": "Returns the product of the specified complex numbers.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.IMPRODUCT(\"-2+2.5i\", \"0.1+1.5j\", \"1+3i\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 complex numbers expressed in the <em>x + yi</em> or <em>x + yj</em> form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "IMPRODUCT",
        "longname": "ApiWorksheetFunction#IMPRODUCT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4888,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/IMPRODUCT.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the real coefficient of a complex number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/IMREAL.js\n\t */",
        "description": "Returns the real coefficient of a complex number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.IMREAL(\"-2+2.5i\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "IMREAL",
        "longname": "ApiWorksheetFunction#IMREAL",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4899,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/IMREAL.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the secant of a complex number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/IMSEC.js\n\t */",
        "description": "Returns the secant of a complex number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.IMSEC(\"-2+2.5i\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "IMSEC",
        "longname": "ApiWorksheetFunction#IMSEC",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4910,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/IMSEC.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the hyperbolic secant of a complex number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/IMSECH.js\n\t */",
        "description": "Returns the hyperbolic secant of a complex number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.IMSECH(\"-2+2.5i\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "IMSECH",
        "longname": "ApiWorksheetFunction#IMSECH",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4921,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/IMSECH.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the sine of a complex number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/IMSIN.js\n\t */",
        "description": "Returns the sine of a complex number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.IMSIN(\"-2+2.5i\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "IMSIN",
        "longname": "ApiWorksheetFunction#IMSIN",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4932,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/IMSIN.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the hyperbolic sine of a complex number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/IMSINH.js\n\t */",
        "description": "Returns the hyperbolic sine of a complex number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.IMSINH(\"-2+2.5i\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "IMSINH",
        "longname": "ApiWorksheetFunction#IMSINH",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4943,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/IMSINH.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the square root of a complex number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/IMSQRT.js\n\t */",
        "description": "Returns the square root of a complex number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.IMSQRT(\"-2+2.5i\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "IMSQRT",
        "longname": "ApiWorksheetFunction#IMSQRT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4954,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/IMSQRT.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the difference of two complex numbers expressed in the <em>x + yi</em> or <em>x + yj</em> form.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The complex number from which to subtract the second number.\n\t * @param {ApiRange | ApiName | number} arg2 - The complex number to subtract from the first number.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/IMSUB.js\n\t */",
        "description": "Returns the difference of two complex numbers expressed in the <em>x + yi</em> or <em>x + yj</em> form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.IMSUB(\"1+3i\", \"-2+2.5i\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The complex number from which to subtract the second number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The complex number to subtract from the first number.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "IMSUB",
        "longname": "ApiWorksheetFunction#IMSUB",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4966,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/IMSUB.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the sum of the specified complex numbers.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | string} args - Up to 255 complex numbers expressed in the <em>x + yi</em> or <em>x + yj</em> form.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/IMSUM.js\n\t */",
        "description": "Returns the sum of the specified complex numbers.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.IMSUM(\"1+3i\", \"0.1+1.5j\", \"-2+2.5i\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 complex numbers expressed in the <em>x + yi</em> or <em>x + yj</em> form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "IMSUM",
        "longname": "ApiWorksheetFunction#IMSUM",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4977,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/IMSUM.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the tangent of a complex number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/IMTAN.js\n\t */",
        "description": "Returns the tangent of a complex number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.IMTAN(\"-2+2.5i\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A complex number expressed in the <em>x + yi</em> or <em>x + yj</em> form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "IMTAN",
        "longname": "ApiWorksheetFunction#IMTAN",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 4988,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/IMTAN.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts an octal number to binary.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The octal number to convert.\n\t * @param {?ApiRange | ?ApiName | ?number} arg2 - The number of characters to use.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/OCT2BIN.js\n\t */",
        "description": "Converts an octal number to binary.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.OCT2BIN(7777777634));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The octal number to convert.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The number of characters to use.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "OCT2BIN",
        "longname": "ApiWorksheetFunction#OCT2BIN",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5000,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/OCT2BIN.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts an octal number to decimal.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The octal number to convert.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/OCT2DEC.js\n\t */",
        "description": "Converts an octal number to decimal.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.OCT2DEC(7777777634));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The octal number to convert.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "OCT2DEC",
        "longname": "ApiWorksheetFunction#OCT2DEC",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5011,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/OCT2DEC.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts an octal number to hexadecimal.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The octal number to convert.\n\t * @param {?ApiRange | ?ApiName | ?number} arg2 -The number of characters to use.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/OCT2HEX.js\n\t */",
        "description": "Converts an octal number to hexadecimal.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.OCT2HEX(7777777634, 4));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The octal number to convert.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The number of characters to use.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "OCT2HEX",
        "longname": "ApiWorksheetFunction#OCT2HEX",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5023,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/OCT2HEX.js"
        ]
    },
    {
        "comment": "/**\n\t * Averages the values in a field (column) of records in a list or database that match conditions you specify.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName} arg1 - The range of cells that makes up the list or database. A database is a list of related data.\n\t * @param {ApiRange | ApiName | number | string} arg2 - The column which is used in the function. Either the label of the column in double quotation marks or a number that represents the column's position in the list.\n\t * @param {ApiRange | ApiName} arg3 - The range of cells that contains the conditions you specify. The range includes at least one column label and at least one cell below the column label for a condition.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/DAVERAGE.js\n\t */",
        "description": "Averages the values in a field (column) of records in a list or database that match conditions you specify.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(\"Name\");\nworksheet.GetRange(\"B1\").SetValue(\"Age\");\nworksheet.GetRange(\"C1\").SetValue(\"Sales\");\nworksheet.GetRange(\"A2\").SetValue(\"Alice\");\nworksheet.GetRange(\"B2\").SetValue(20);\nworksheet.GetRange(\"C2\").SetValue(200);\nworksheet.GetRange(\"A3\").SetValue(\"Andrew\");\nworksheet.GetRange(\"B3\").SetValue(21);\nworksheet.GetRange(\"C3\").SetValue(300);\nworksheet.GetRange(\"E1\").SetValue(\"Sales\");\nworksheet.GetRange(\"E2\").SetValue(\">200\");\nlet range1 = worksheet.GetRange(\"A1:C3\");\nlet range2 = worksheet.GetRange(\"E1:E2\");\nworksheet.GetRange(\"E4\").SetValue(func.DAVERAGE(range1, \"Sales\", range2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The range of cells that makes up the list or database. A database is a list of related data.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The column which is used in the function. Either the label of the column in double quotation marks or a number that represents the column's position in the list.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The range of cells that contains the conditions you specify. The range includes at least one column label and at least one cell below the column label for a condition.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "DAVERAGE",
        "longname": "ApiWorksheetFunction#DAVERAGE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5036,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/DAVERAGE.js"
        ]
    },
    {
        "comment": "/**\n\t * Counts the cells containing numbers in the field (column) of records in the database that match the conditions you specify.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName} arg1 - The range of cells that makes up the list or database. A database is a list of related data.\n\t * @param {ApiRange | ApiName | number | string} arg2 - The column which is used in the function. Either the label of the column in double quotation marks or a number that represents the column's position in the list.\n\t * @param {ApiRange | ApiName} arg3 - The range of cells that contains the conditions you specify. The range includes at least one column label and at least one cell below the column label for a condition.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/DCOUNT.js\n\t */",
        "description": "Counts the cells containing numbers in the field (column) of records in the database that match the conditions you specify.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(\"Name\");\nworksheet.GetRange(\"B1\").SetValue(\"Age\");\nworksheet.GetRange(\"C1\").SetValue(\"Sales\");\nworksheet.GetRange(\"A2\").SetValue(\"Alice\");\nworksheet.GetRange(\"B2\").SetValue(20);\nworksheet.GetRange(\"C2\").SetValue(200);\nworksheet.GetRange(\"A3\").SetValue(\"Andrew\");\nworksheet.GetRange(\"B3\").SetValue(21);\nworksheet.GetRange(\"C3\").SetValue(300);\nworksheet.GetRange(\"E1\").SetValue(\"Sales\");\nworksheet.GetRange(\"E2\").SetValue(\">200\");\nlet range1 = worksheet.GetRange(\"A1:C3\");\nlet range2 = worksheet.GetRange(\"E1:E2\");\nworksheet.GetRange(\"E4\").SetValue(func.DCOUNT(range1, \"Sales\", range2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The range of cells that makes up the list or database. A database is a list of related data.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The column which is used in the function. Either the label of the column in double quotation marks or a number that represents the column's position in the list.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The range of cells that contains the conditions you specify. The range includes at least one column label and at least one cell below the column label for a condition.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "DCOUNT",
        "longname": "ApiWorksheetFunction#DCOUNT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5049,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/DCOUNT.js"
        ]
    },
    {
        "comment": "/**\n\t * Counts nonblank cells in the field (column) of records in the database that match the conditions you specify.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName} arg1- The range of cells that makes up the list or database. A database is a list of related data.\n\t * @param {ApiRange | ApiName | number | string} arg2 - The column which is used in the function. Either the label of the column in double quotation marks or a number that represents the column's position in the list.\n\t * @param {ApiRange | ApiName} arg3 - The range of cells that contains the conditions you specify. The range includes at least one column label and at least one cell below the column label for a condition.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/DCOUNTA.js\n\t */",
        "description": "Counts nonblank cells in the field (column) of records in the database that match the conditions you specify.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(\"Name\");\nworksheet.GetRange(\"B1\").SetValue(\"Age\");\nworksheet.GetRange(\"C1\").SetValue(\"Sales\");\nworksheet.GetRange(\"A2\").SetValue(\"Alice\");\nworksheet.GetRange(\"B2\").SetValue(20);\nworksheet.GetRange(\"C2\").SetValue(\"n/a\");\nworksheet.GetRange(\"A3\").SetValue(\"Andrew\");\nworksheet.GetRange(\"B3\").SetValue(21);\nworksheet.GetRange(\"C3\").SetValue(300);\nworksheet.GetRange(\"E1\").SetValue(\"Sales\");\nworksheet.GetRange(\"E2\").SetValue(\">200\");\nlet range1 = worksheet.GetRange(\"A1:C3\");\nlet range2 = worksheet.GetRange(\"E1:E2\");\nworksheet.GetRange(\"E4\").SetValue(func.DCOUNTA(range1, \"Sales\", range2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1-",
                "description": "The range of cells that makes up the list or database. A database is a list of related data.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The column which is used in the function. Either the label of the column in double quotation marks or a number that represents the column's position in the list.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The range of cells that contains the conditions you specify. The range includes at least one column label and at least one cell below the column label for a condition.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "DCOUNTA",
        "longname": "ApiWorksheetFunction#DCOUNTA",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5062,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/DCOUNTA.js"
        ]
    },
    {
        "comment": "/**\n\t * Extracts from a database a single record that matches the conditions you specify.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName} arg1 - The range of cells that makes up the list or database. A database is a list of related data.\n\t * @param {ApiRange | ApiName | number | string} arg2 - The column which is used in the function. Either the label of the column in double quotation marks or a number that represents the column's position in the list.\n\t * @param {ApiRange | ApiName} arg3 - The range of cells that contains the conditions you specify. The range includes at least one column label and at least one cell below the column label for a condition.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/DGET.js\n\t */",
        "description": "Extracts from a database a single record that matches the conditions you specify.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(\"Name\");\nworksheet.GetRange(\"B1\").SetValue(\"Month\");\nworksheet.GetRange(\"C1\").SetValue(\"Sales\");\nworksheet.GetRange(\"A2\").SetValue(\"Alice\");\nworksheet.GetRange(\"B2\").SetValue(\"Jan\");\nworksheet.GetRange(\"C2\").SetValue(200);\nworksheet.GetRange(\"A3\").SetValue(\"Alice\");\nworksheet.GetRange(\"B3\").SetValue(\"Feb\");\nworksheet.GetRange(\"C3\").SetValue(250);\nworksheet.GetRange(\"E1\").SetValue(\"Name\");\nworksheet.GetRange(\"E2\").SetValue(\"Alice\");\nworksheet.GetRange(\"F1\").SetValue(\"Month\");\nworksheet.GetRange(\"F2\").SetValue(\"Feb\");\nlet range1 = worksheet.GetRange(\"A1:C3\");\nlet range2 = worksheet.GetRange(\"E1:F2\");\nworksheet.GetRange(\"F4\").SetValue(func.DGET(range1, \"Sales\", range2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The range of cells that makes up the list or database. A database is a list of related data.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The column which is used in the function. Either the label of the column in double quotation marks or a number that represents the column's position in the list.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The range of cells that contains the conditions you specify. The range includes at least one column label and at least one cell below the column label for a condition.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "DGET",
        "longname": "ApiWorksheetFunction#DGET",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5075,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/DGET.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the largest number in the field (column) of records in the database that match the conditions you specify.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName} arg1 - The range of cells that makes up the list or database. A database is a list of related data.\n\t * @param {ApiRange | ApiName | number | string} arg2 - The column which is used in the function. Either the label of the column in double quotation marks or a number that represents the column's position in the list.\n\t * @param {ApiRange | ApiName} arg3 - The range of cells that contains the conditions you specify. The range includes at least one column label and at least one cell below the column label for a condition.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/DMAX.js\n\t */",
        "description": "Returns the largest number in the field (column) of records in the database that match the conditions you specify.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(\"Name\");\nworksheet.GetRange(\"B1\").SetValue(\"Month\");\nworksheet.GetRange(\"C1\").SetValue(\"Sales\");\nworksheet.GetRange(\"A2\").SetValue(\"Alice\");\nworksheet.GetRange(\"B2\").SetValue(\"Jan\");\nworksheet.GetRange(\"C2\").SetValue(200);\nworksheet.GetRange(\"A3\").SetValue(\"Andrew\");\nworksheet.GetRange(\"B3\").SetValue(\"Jan\");\nworksheet.GetRange(\"C3\").SetValue(300);\nworksheet.GetRange(\"A4\").SetValue(\"Bob\");\nworksheet.GetRange(\"B4\").SetValue(\"Jan\");\nworksheet.GetRange(\"C4\").SetValue(250);\nworksheet.GetRange(\"E1\").SetValue(\"Month\");\nworksheet.GetRange(\"E2\").SetValue(\"Jan\");\nworksheet.GetRange(\"F1\").SetValue(\"Sales\");\nworksheet.GetRange(\"F2\").SetValue(\">200\");\nlet range1 = worksheet.GetRange(\"A1:C4\");\nlet range2 = worksheet.GetRange(\"E1:F2\");\nworksheet.GetRange(\"F4\").SetValue(func.DMAX(range1, \"Sales\", range2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The range of cells that makes up the list or database. A database is a list of related data.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The column which is used in the function. Either the label of the column in double quotation marks or a number that represents the column's position in the list.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The range of cells that contains the conditions you specify. The range includes at least one column label and at least one cell below the column label for a condition.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "DMAX",
        "longname": "ApiWorksheetFunction#DMAX",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5088,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/DMAX.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the smallest number in the field (column) of records in the database that match the conditions you specify.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName} arg1 - The range of cells that makes up the list or database. A database is a list of related data.\n\t * @param {ApiRange | ApiName | number | string} arg2 - The column which is used in the function. Either the label of the column in double quotation marks or a number that represents the column's position in the list.\n\t * @param {ApiRange | ApiName} arg3 - The range of cells that contains the conditions you specify. The range includes at least one column label and at least one cell below the column label for a condition.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/DMIN.js\n\t */",
        "description": "Returns the smallest number in the field (column) of records in the database that match the conditions you specify.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(\"Name\");\nworksheet.GetRange(\"B1\").SetValue(\"Month\");\nworksheet.GetRange(\"C1\").SetValue(\"Sales\");\nworksheet.GetRange(\"A2\").SetValue(\"Alice\");\nworksheet.GetRange(\"B2\").SetValue(\"Jan\");\nworksheet.GetRange(\"C2\").SetValue(200);\nworksheet.GetRange(\"A3\").SetValue(\"Andrew\");\nworksheet.GetRange(\"B3\").SetValue(\"Jan\");\nworksheet.GetRange(\"C3\").SetValue(300);\nworksheet.GetRange(\"A4\").SetValue(\"Bob\");\nworksheet.GetRange(\"B4\").SetValue(\"Jan\");\nworksheet.GetRange(\"C4\").SetValue(250);\nworksheet.GetRange(\"E1\").SetValue(\"Month\");\nworksheet.GetRange(\"E2\").SetValue(\"Jan\");\nworksheet.GetRange(\"F1\").SetValue(\"Sales\");\nworksheet.GetRange(\"F2\").SetValue(\">200\");\nlet range1 = worksheet.GetRange(\"A1:C4\");\nlet range2 = worksheet.GetRange(\"E1:F2\");\nworksheet.GetRange(\"F5\").SetValue(func.DMIN(range1, \"Sales\", range2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The range of cells that makes up the list or database. A database is a list of related data.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The column which is used in the function. Either the label of the column in double quotation marks or a number that represents the column's position in the list.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The range of cells that contains the conditions you specify. The range includes at least one column label and at least one cell below the column label for a condition.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "DMIN",
        "longname": "ApiWorksheetFunction#DMIN",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5101,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/DMIN.js"
        ]
    },
    {
        "comment": "/**\n\t * Multiplies the values in the field (column) of records in the database that match the conditions you specify.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName} arg1 - The range of cells that makes up the list or database. A database is a list of related data.\n\t * @param {ApiRange | ApiName | number | string} arg2 - The column which is used in the function. Either the label of the column in double quotation marks or a number that represents the column's position in the list.\n\t * @param {ApiRange | ApiName} arg3 - The range of cells that contains the conditions you specify. The range includes at least one column label and at least one cell below the column label for a condition.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/DPRODUCT.js\n\t */",
        "description": "Multiplies the values in the field (column) of records in the database that match the conditions you specify.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(\"Product\");\nworksheet.GetRange(\"B1\").SetValue(\"Identifier\");\nworksheet.GetRange(\"C1\").SetValue(\"Value\");\nworksheet.GetRange(\"A2\").SetValue(\"Apple\");\nworksheet.GetRange(\"B2\").SetValue(\"Price\");\nworksheet.GetRange(\"C2\").SetValue(25);\nworksheet.GetRange(\"A3\").SetValue(\"Apple\");\nworksheet.GetRange(\"B3\").SetValue(\"Quantity\");\nworksheet.GetRange(\"C3\").SetValue(100);\nworksheet.GetRange(\"E1\").SetValue(\"Product\");\nworksheet.GetRange(\"E2\").SetValue(\"Apple\");\nlet range1 = worksheet.GetRange(\"A1:C3\");\nlet range2 = worksheet.GetRange(\"E1:F2\");\nworksheet.GetRange(\"E4\").SetValue(func.DPRODUCT(range1, \"Value\", range2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The range of cells that makes up the list or database. A database is a list of related data.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The column which is used in the function. Either the label of the column in double quotation marks or a number that represents the column's position in the list.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The range of cells that contains the conditions you specify. The range includes at least one column label and at least one cell below the column label for a condition.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "DPRODUCT",
        "longname": "ApiWorksheetFunction#DPRODUCT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5114,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/DPRODUCT.js"
        ]
    },
    {
        "comment": "/**\n\t * Estimates the standard deviation based on a sample from the selected database entries.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName} arg1 - The range of cells that makes up the list or database. A database is a list of related data.\n\t * @param {ApiRange | ApiName | number | string} arg2 - The column which is used in the function. Either the label of the column in double quotation marks or a number that represents the column's position in the list.\n\t * @param {ApiRange | ApiName} arg3 - The range of cells that contains the conditions you specify. The range includes at least one column label and at least one cell below the column label for a condition.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/DSTDEV.js\n\t */",
        "description": "Estimates the standard deviation based on a sample from the selected database entries.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(\"Name\");\nworksheet.GetRange(\"B1\").SetValue(\"Month\");\nworksheet.GetRange(\"C1\").SetValue(\"Sales\");\nworksheet.GetRange(\"A2\").SetValue(\"Alice\");\nworksheet.GetRange(\"B2\").SetValue(\"Jan\");\nworksheet.GetRange(\"C2\").SetValue(200);\nworksheet.GetRange(\"A3\").SetValue(\"Andrew\");\nworksheet.GetRange(\"B3\").SetValue(\"Jan\");\nworksheet.GetRange(\"C3\").SetValue(300);\nworksheet.GetRange(\"A4\").SetValue(\"Bob\");\nworksheet.GetRange(\"B4\").SetValue(\"Jan\");\nworksheet.GetRange(\"C4\").SetValue(250);\nworksheet.GetRange(\"E1\").SetValue(\"Month\");\nworksheet.GetRange(\"E2\").SetValue(\"Jan\");\nworksheet.GetRange(\"F1\").SetValue(\"Sales\");\nworksheet.GetRange(\"F2\").SetValue(\">200\");\nlet range1 = worksheet.GetRange(\"A1:C4\");\nlet range2 = worksheet.GetRange(\"E1:F2\");\nworksheet.GetRange(\"F4\").SetValue(func.DSTDEV(range1, \"Sales\", range2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The range of cells that makes up the list or database. A database is a list of related data.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The column which is used in the function. Either the label of the column in double quotation marks or a number that represents the column's position in the list.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The range of cells that contains the conditions you specify. The range includes at least one column label and at least one cell below the column label for a condition.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "DSTDEV",
        "longname": "ApiWorksheetFunction#DSTDEV",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5127,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/DSTDEV.js"
        ]
    },
    {
        "comment": "/**\n\t * Calculates the standard deviation based on the entire population of the selected database entries.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName} arg1 - The range of cells that makes up the list or database. A database is a list of related data.\n\t * @param {ApiRange | ApiName | number | string} arg2 - The column which is used in the function. Either the label of the column in double quotation marks or a number that represents the column's position in the list.\n\t * @param {ApiRange | ApiName} arg3 - The range of cells that contains the conditions you specify. The range includes at least one column label and at least one cell below the column label for a condition.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/DSTDEVP.js\n\t */",
        "description": "Calculates the standard deviation based on the entire population of the selected database entries.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(\"Name\");\nworksheet.GetRange(\"B1\").SetValue(\"Month\");\nworksheet.GetRange(\"C1\").SetValue(\"Sales\");\nworksheet.GetRange(\"A2\").SetValue(\"Alice\");\nworksheet.GetRange(\"B2\").SetValue(\"Jan\");\nworksheet.GetRange(\"C2\").SetValue(200);\nworksheet.GetRange(\"A3\").SetValue(\"Andrew\");\nworksheet.GetRange(\"B3\").SetValue(\"Jan\");\nworksheet.GetRange(\"C3\").SetValue(300);\nworksheet.GetRange(\"A4\").SetValue(\"Bob\");\nworksheet.GetRange(\"B4\").SetValue(\"Jan\");\nworksheet.GetRange(\"C4\").SetValue(250);\nworksheet.GetRange(\"E1\").SetValue(\"Month\");\nworksheet.GetRange(\"E2\").SetValue(\"Jan\");\nworksheet.GetRange(\"F1\").SetValue(\"Sales\");\nworksheet.GetRange(\"F2\").SetValue(\">200\");\nlet range1 = worksheet.GetRange(\"A1:C4\");\nlet range2 = worksheet.GetRange(\"E1:F2\");\nworksheet.GetRange(\"F4\").SetValue(func.DSTDEVP(range1, \"Sales\", range2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The range of cells that makes up the list or database. A database is a list of related data.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The column which is used in the function. Either the label of the column in double quotation marks or a number that represents the column's position in the list.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The range of cells that contains the conditions you specify. The range includes at least one column label and at least one cell below the column label for a condition.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "DSTDEVP",
        "longname": "ApiWorksheetFunction#DSTDEVP",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5140,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/DSTDEVP.js"
        ]
    },
    {
        "comment": "/**\n\t * Adds the numbers in the field (column) of records in the database that match the conditions you specify.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName} arg1 - The range of cells that makes up the list or database. A database is a list of related data.\n\t * @param {ApiRange | ApiName | number | string} arg2 - The column which is used in the function. Either the label of the column in double quotation marks or a number that represents the column's position in the list.\n\t * @param {ApiRange | ApiName} arg3 - The range of cells that contains the conditions you specify. The range includes at least one column label and at least one cell below the column label for a condition.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/DSUM.js\n\t */",
        "description": "Adds the numbers in the field (column) of records in the database that match the conditions you specify.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(\"Name\");\nworksheet.GetRange(\"B1\").SetValue(\"Month\");\nworksheet.GetRange(\"C1\").SetValue(\"Sales\");\nworksheet.GetRange(\"A2\").SetValue(\"Alice\");\nworksheet.GetRange(\"B2\").SetValue(\"Jan\");\nworksheet.GetRange(\"C2\").SetValue(200);\nworksheet.GetRange(\"A3\").SetValue(\"Andrew\");\nworksheet.GetRange(\"B3\").SetValue(\"Jan\");\nworksheet.GetRange(\"C3\").SetValue(300);\nworksheet.GetRange(\"A4\").SetValue(\"Bob\");\nworksheet.GetRange(\"B4\").SetValue(\"Jan\");\nworksheet.GetRange(\"C4\").SetValue(250);\nworksheet.GetRange(\"E1\").SetValue(\"Month\");\nworksheet.GetRange(\"E2\").SetValue(\"Jan\");\nworksheet.GetRange(\"F1\").SetValue(\"Sales\");\nworksheet.GetRange(\"F2\").SetValue(\">200\");\nlet range1 = worksheet.GetRange(\"A1:C4\");\nlet range2 = worksheet.GetRange(\"E1:F2\");\nworksheet.GetRange(\"F4\").SetValue(func.DSUM(range1, \"Sales\", range2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The range of cells that makes up the list or database. A database is a list of related data.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The column which is used in the function. Either the label of the column in double quotation marks or a number that represents the column's position in the list.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The range of cells that contains the conditions you specify. The range includes at least one column label and at least one cell below the column label for a condition.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "DSUM",
        "longname": "ApiWorksheetFunction#DSUM",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5153,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/DSUM.js"
        ]
    },
    {
        "comment": "/**\n\t * Estimates variance based on a sample from the selected database entries.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName} arg1 - The range of cells that makes up the list or database. A database is a list of related data.\n\t * @param {ApiRange | ApiName | number | string} arg2 - The column which is used in the function. Either the label of the column in double quotation marks or a number that represents the column's position in the list.\n\t * @param {ApiRange | ApiName} arg3 - The range of cells that contains the conditions you specify. The range includes at least one column label and at least one cell below the column label for a condition.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/DVAR.js\n\t */",
        "description": "Estimates variance based on a sample from the selected database entries.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(\"Name\");\nworksheet.GetRange(\"B1\").SetValue(\"Month\");\nworksheet.GetRange(\"C1\").SetValue(\"Sales\");\nworksheet.GetRange(\"A2\").SetValue(\"Alice\");\nworksheet.GetRange(\"B2\").SetValue(\"Jan\");\nworksheet.GetRange(\"C2\").SetValue(200);\nworksheet.GetRange(\"A3\").SetValue(\"Andrew\");\nworksheet.GetRange(\"B3\").SetValue(\"Jan\");\nworksheet.GetRange(\"C3\").SetValue(300);\nworksheet.GetRange(\"A4\").SetValue(\"Bob\");\nworksheet.GetRange(\"B4\").SetValue(\"Jan\");\nworksheet.GetRange(\"C4\").SetValue(250);\nworksheet.GetRange(\"E1\").SetValue(\"Month\");\nworksheet.GetRange(\"E2\").SetValue(\"Jan\");\nworksheet.GetRange(\"F1\").SetValue(\"Sales\");\nworksheet.GetRange(\"F2\").SetValue(\">200\");\nlet range1 = worksheet.GetRange(\"A1:C4\");\nlet range2 = worksheet.GetRange(\"E1:F2\");\nworksheet.GetRange(\"F4\").SetValue(func.DVAR(range1, \"Sales\", range2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The range of cells that makes up the list or database. A database is a list of related data.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The column which is used in the function. Either the label of the column in double quotation marks or a number that represents the column's position in the list.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The range of cells that contains the conditions you specify. The range includes at least one column label and at least one cell below the column label for a condition.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "DVAR",
        "longname": "ApiWorksheetFunction#DVAR",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5166,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/DVAR.js"
        ]
    },
    {
        "comment": "/**\n\t * Calculates variance based on the entire population of the selected database entries.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName} arg1 - The range of cells that makes up the list or database. A database is a list of related data.\n\t * @param {ApiRange | ApiName | number | string} arg2 - The column which is used in the function. Either the label of the column in double quotation marks or a number that represents the column's position in the list.\n\t * @param {ApiRange | ApiName} arg3 - The range of cells that contains the conditions you specify. The range includes at least one column label and at least one cell below the column label for a condition.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/DVARP.js\n\t */",
        "description": "Calculates variance based on the entire population of the selected database entries.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(\"Name\");\nworksheet.GetRange(\"B1\").SetValue(\"Month\");\nworksheet.GetRange(\"C1\").SetValue(\"Sales\");\nworksheet.GetRange(\"A2\").SetValue(\"Alice\");\nworksheet.GetRange(\"B2\").SetValue(\"Jan\");\nworksheet.GetRange(\"C2\").SetValue(200);\nworksheet.GetRange(\"A3\").SetValue(\"Andrew\");\nworksheet.GetRange(\"B3\").SetValue(\"Jan\");\nworksheet.GetRange(\"C3\").SetValue(300);\nworksheet.GetRange(\"A4\").SetValue(\"Bob\");\nworksheet.GetRange(\"B4\").SetValue(\"Jan\");\nworksheet.GetRange(\"C4\").SetValue(250);\nworksheet.GetRange(\"E1\").SetValue(\"Month\");\nworksheet.GetRange(\"E2\").SetValue(\"Jan\");\nworksheet.GetRange(\"F1\").SetValue(\"Sales\");\nworksheet.GetRange(\"F2\").SetValue(\">200\");\nlet range1 = worksheet.GetRange(\"A1:C4\");\nlet range2 = worksheet.GetRange(\"E1:F2\");\nworksheet.GetRange(\"F4\").SetValue(func.DVARP(range1, \"Sales\", range2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The range of cells that makes up the list or database. A database is a list of related data.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The column which is used in the function. Either the label of the column in double quotation marks or a number that represents the column's position in the list.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The range of cells that contains the conditions you specify. The range includes at least one column label and at least one cell below the column label for a condition.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "DVARP",
        "longname": "ApiWorksheetFunction#DVARP",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5179,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/DVARP.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the accrued interest for a security that pays periodic interest.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The issue date of the security, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg2 - The date when the first interest is paid, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg3 - The security settlement date, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg4 - The annual coupon rate of the security.\n\t * @param {ApiRange | ApiName | number} arg5 - The par value of the security.\n\t * @param {ApiRange | ApiName | number} arg6 - The number of interest payments per year. The possible values are: 1 for annual payments, 2 for semiannual payments, 4 for quarterly payments.\n\t * @param {?ApiRange | ?ApiName | ?number} arg7 - The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.\n\t * @param {?ApiRange | ?ApiName | ?number} arg8 - A logical value: <b>true</b> (1) or omitted returns the accrued interest from the issue date to the settlement date.\n\t * <b>false</b> (0) returns the accrued interest from the first interest date to the settlement date.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ACCRINT.js\n\t */",
        "description": "Returns the accrued interest for a security that pays periodic interest.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.ACCRINT(\"1/1/2018\", \"6/25/2018\", \"10/15/2018\", \"3.50%\", 1000, 2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The issue date of the security, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The date when the first interest is paid, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The security settlement date, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The annual coupon rate of the security.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "The par value of the security.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg6",
                "description": "The number of interest payments per year. The possible values are: 1 for annual payments, 2 for semiannual payments, 4 for quarterly payments.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg7",
                "description": "The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg8",
                "description": "A logical value: <b>true</b> (1) or omitted returns the accrued interest from the issue date to the settlement date.\n<b>false</b> (0) returns the accrued interest from the first interest date to the settlement date.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "ACCRINT",
        "longname": "ApiWorksheetFunction#ACCRINT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5198,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ACCRINT.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the accrued interest for a security that pays interest at maturity.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The issue date of the security, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg2 - The maturity date of the security, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg3 - The annual coupon rate of the security.\n\t * @param {ApiRange | ApiName | number} arg4 - The par value of the security.\n\t * @param {?ApiRange | ?ApiName | ?number} arg5 - The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ACCRINTM.js\n\t */",
        "description": "Returns the accrued interest for a security that pays interest at maturity.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.ACCRINTM(\"1/1/2018\", \"10/15/2018\", \"3.50%\", 1000, 1));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The issue date of the security, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The maturity date of the security, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The annual coupon rate of the security.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The par value of the security.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "ACCRINTM",
        "longname": "ApiWorksheetFunction#ACCRINTM",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5213,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ACCRINTM.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the prorated linear depreciation of an asset for each accounting period.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The cost of the asset.\n\t * @param {ApiRange | ApiName | number} arg2 - The date when asset is purchased.\n\t * @param {ApiRange | ApiName | number} arg3 - The date when the first period ends.\n\t * @param {ApiRange | ApiName | number} arg4 - The salvage value of the asset at the end of its lifetime.\n\t * @param {ApiRange | ApiName | number} arg5 - The period for which the depreciation will be calculated.\n\t * @param {ApiRange | ApiName | number} arg6 - The rate of depreciation.\n\t * @param {?ApiRange | ?ApiName | ?number} arg7 - The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/AMORDEGRC.js\n\t */",
        "description": "Returns the prorated linear depreciation of an asset for each accounting period.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.AMORDEGRC(3500, \"1/1/2018\", \"3/1/2018\", 500, 1, 0.25, 1));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The cost of the asset.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The date when asset is purchased.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The date when the first period ends.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The salvage value of the asset at the end of its lifetime.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "The period for which the depreciation will be calculated.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg6",
                "description": "The rate of depreciation.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg7",
                "description": "The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "AMORDEGRC",
        "longname": "ApiWorksheetFunction#AMORDEGRC",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5230,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/AMORDEGRC.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the prorated linear depreciation of an asset for each accounting period.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The cost of the asset.\n\t * @param {ApiRange | ApiName | number} arg2 - The date when asset is purchased.\n\t * @param {ApiRange | ApiName | number} arg3 - The date when the first period ends.\n\t * @param {ApiRange | ApiName | number} arg4 - The salvage value of the asset at the end of its lifetime.\n\t * @param {ApiRange | ApiName | number} arg5 - The period for which the depreciation will be calculated.\n\t * @param {ApiRange | ApiName | number} arg6 - The rate of depreciation.\n\t * @param {?ApiRange | ?ApiName | ?number} arg7 - The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/AMORLINC.js\n\t */",
        "description": "Returns the prorated linear depreciation of an asset for each accounting period.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.AMORLINC(3500, \"1/1/2018\", \"3/1/2018\", 500, 1, 0.25, 1));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The cost of the asset.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The date when asset is purchased.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The date when the first period ends.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The salvage value of the asset at the end of its lifetime.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "The period for which the depreciation will be calculated.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg6",
                "description": "The rate of depreciation.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg7",
                "description": "The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "AMORLINC",
        "longname": "ApiWorksheetFunction#AMORLINC",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5247,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/AMORLINC.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the number of days from the beginning of the coupon period to the settlement date.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The security settlement date, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg2 - The maturity date of the security, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg3 - The number of interest payments per year. The possible values are: 1 for annual payments, 2 for semiannual payments, 4 for quarterly payments.\n\t * @param {?ApiRange | ?ApiName | ?number} arg4 - The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/COUPDAYBS.js\n\t */",
        "description": "Returns the number of days from the beginning of the coupon period to the settlement date.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.COUPDAYBS(\"1/10/2018\", \"6/15/2019\", 4, 1));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The security settlement date, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The maturity date of the security, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The number of interest payments per year. The possible values are: 1 for annual payments, 2 for semiannual payments, 4 for quarterly payments.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "COUPDAYBS",
        "longname": "ApiWorksheetFunction#COUPDAYBS",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5261,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/COUPDAYBS.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the number of days in the coupon period that contains the settlement date.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The security settlement date, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg2 - The maturity date of the security, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg3 - The number of interest payments per year. The possible values are: 1 for annual payments, 2 for semiannual payments, 4 for quarterly payments.\n\t * @param {?ApiRange | ?ApiName | ?number} arg4 - The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/COUPDAYS.js\n\t */",
        "description": "Returns the number of days in the coupon period that contains the settlement date.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.COUPDAYS(\"1/10/2018\", \"6/15/2019\", 4, 1));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The security settlement date, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The maturity date of the security, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The number of interest payments per year. The possible values are: 1 for annual payments, 2 for semiannual payments, 4 for quarterly payments.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "COUPDAYS",
        "longname": "ApiWorksheetFunction#COUPDAYS",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5275,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/COUPDAYS.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the number of days from the settlement date to the next coupon date.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The security settlement date, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg2 - The maturity date of the security, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg3 - The number of interest payments per year. The possible values are: 1 for annual payments, 2 for semiannual payments, 4 for quarterly payments.\n\t * @param {?ApiRange | ?ApiName | ?number} arg4 - The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/COUPDAYSNC.js\n\t */",
        "description": "Returns the number of days from the settlement date to the next coupon date.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.COUPDAYSNC(\"1/10/2018\", \"6/15/2019\", 4, 1));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The security settlement date, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The maturity date of the security, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The number of interest payments per year. The possible values are: 1 for annual payments, 2 for semiannual payments, 4 for quarterly payments.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "COUPDAYSNC",
        "longname": "ApiWorksheetFunction#COUPDAYSNC",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5289,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/COUPDAYSNC.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the next coupon date after the settlement date.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The security settlement date, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg2 - The maturity date of the security, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg3 - The number of interest payments per year. The possible values are: 1 for annual payments, 2 for semiannual payments, 4 for quarterly payments.\n\t * @param {?ApiRange | ?ApiName | ?number} arg4 - The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/COUPNCD.js\n\t */",
        "description": "Returns the next coupon date after the settlement date.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.COUPNCD(\"1/10/2018\", \"6/15/2019\", 4, 1));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The security settlement date, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The maturity date of the security, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The number of interest payments per year. The possible values are: 1 for annual payments, 2 for semiannual payments, 4 for quarterly payments.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "COUPNCD",
        "longname": "ApiWorksheetFunction#COUPNCD",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5303,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/COUPNCD.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the number of coupons payable between the settlement date and maturity date.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The security settlement date, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg2 - The maturity date of the security, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg3 - The number of interest payments per year. The possible values are: 1 for annual payments, 2 for semiannual payments, 4 for quarterly payments.\n\t * @param {?ApiRange | ?ApiName | ?number} arg4 - The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/COUPNUM.js\n\t */",
        "description": "Returns the number of coupons payable between the settlement date and maturity date.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.COUPNUM(\"1/10/2018\", \"6/15/2019\", 4, 1));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The security settlement date, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The maturity date of the security, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The number of interest payments per year. The possible values are: 1 for annual payments, 2 for semiannual payments, 4 for quarterly payments.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "COUPNUM",
        "longname": "ApiWorksheetFunction#COUPNUM",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5317,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/COUPNUM.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the previous coupon date before the settlement date.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The security settlement date, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg2 - The maturity date of the security, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg3 - The number of interest payments per year. The possible values are: 1 for annual payments, 2 for semiannual payments, 4 for quarterly payments.\n\t * @param {?ApiRange | ?ApiName | ?number} arg4 - The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/COUPPCD.js\n\t */",
        "description": "Returns the previous coupon date before the settlement date.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.COUPPCD(\"1/10/2018\", \"6/15/2019\", 4, 1));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The security settlement date, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The maturity date of the security, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The number of interest payments per year. The possible values are: 1 for annual payments, 2 for semiannual payments, 4 for quarterly payments.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "COUPPCD",
        "longname": "ApiWorksheetFunction#COUPPCD",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5331,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/COUPPCD.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the cumulative interest paid between two periods.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The interest rate for the investment.\n\t * @param {ApiRange | ApiName | number} arg2 - The total number of payment periods.\n\t * @param {ApiRange | ApiName | number} arg3 - A present value of the payments.\n\t * @param {ApiRange | ApiName | number} arg4 - The first period included into the calculation.\n\t * @param {ApiRange | ApiName | number} arg5 - The last period included into the calculation.\n\t * @param {ApiRange | ApiName | number} arg6 - The timing of the payment.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/CUMIPMT.js\n\t */",
        "description": "Returns the cumulative interest paid between two periods.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.CUMIPMT(0.1/12, 2*12, 2000, 1, 24, 0));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The interest rate for the investment.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The total number of payment periods.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "A present value of the payments.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The first period included into the calculation.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "The last period included into the calculation.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg6",
                "description": "The timing of the payment.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "CUMIPMT",
        "longname": "ApiWorksheetFunction#CUMIPMT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5347,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/CUMIPMT.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the cumulative principal paid on a loan between two periods.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The interest rate for the investment.\n\t * @param {ApiRange | ApiName | number} arg2 - The total number of payment periods.\n\t * @param {ApiRange | ApiName | number} arg3 - A present value of the payments.\n\t * @param {ApiRange | ApiName | number} arg4 - The first period included into the calculation.\n\t * @param {ApiRange | ApiName | number} arg5 - The last period included into the calculation.\n\t * @param {ApiRange | ApiName | number} arg6 - The timing of the payment.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/CUMPRINC.js\n\t */",
        "description": "Returns the cumulative principal paid on a loan between two periods.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.CUMPRINC(0.1/12, 2*12, 2000, 1, 24, 0));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The interest rate for the investment.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The total number of payment periods.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "A present value of the payments.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The first period included into the calculation.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "The last period included into the calculation.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg6",
                "description": "The timing of the payment.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "CUMPRINC",
        "longname": "ApiWorksheetFunction#CUMPRINC",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5363,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/CUMPRINC.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the depreciation of an asset for a specified period using the fixed-declining balance method.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The initial cost of the asset.\n\t * @param {ApiRange | ApiName | number} arg2 - The salvage value of the asset at the end of its lifetime.\n\t * @param {ApiRange | ApiName | number} arg3 - The number of periods over which the asset is being depreciated (sometimes called the useful life of the asset).\n\t * @param {ApiRange | ApiName | number} arg4 - The period for which the depreciation will be calculated. Period must use the same units as the useful life of the asset.\n\t * @param {?ApiRange | ?ApiName | ?number} arg5 - The number of months in the first year. If this parameter is omitted, it is assumed to be 12.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/DB.js\n\t */",
        "description": "Returns the depreciation of an asset for a specified period using the fixed-declining balance method.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.DB(3500, 500, 5, 1, 10));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The initial cost of the asset.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The salvage value of the asset at the end of its lifetime.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The number of periods over which the asset is being depreciated (sometimes called the useful life of the asset).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The period for which the depreciation will be calculated. Period must use the same units as the useful life of the asset.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "The number of months in the first year. If this parameter is omitted, it is assumed to be 12.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "DB",
        "longname": "ApiWorksheetFunction#DB",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5378,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/DB.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the depreciation of an asset for a specified period using the double-declining balance method or some other method you specify.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The initial cost of the asset.\n\t * @param {ApiRange | ApiName | number} arg2 - The salvage value of the asset at the end of its lifetime.\n\t * @param {ApiRange | ApiName | number} arg3 - The number of periods over which the asset is being depreciated (sometimes called the useful life of the asset).\n\t * @param {ApiRange | ApiName | number} arg4 - The period for which the depreciation will be calculated. Period must use the same units as the useful life of the asset.\n\t * @param {?ApiRange | ?ApiName | ?number} arg5 - The rate at which the balance declines. If this parameter is omitted, it is assumed to be 2 (the double-declining balance method).\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/DDB.js\n\t */",
        "description": "Returns the depreciation of an asset for a specified period using the double-declining balance method or some other method you specify.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.DDB(3500, 500, 5, 1, 2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The initial cost of the asset.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The salvage value of the asset at the end of its lifetime.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The number of periods over which the asset is being depreciated (sometimes called the useful life of the asset).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The period for which the depreciation will be calculated. Period must use the same units as the useful life of the asset.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "The rate at which the balance declines. If this parameter is omitted, it is assumed to be 2 (the double-declining balance method).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "DDB",
        "longname": "ApiWorksheetFunction#DDB",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5393,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/DDB.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the discount rate for a security.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The security settlement date, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg2 - The maturity date of the security, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg3 - The purchase price of the security, per $100 par value.\n\t * @param {ApiRange | ApiName | number} arg4 - The redemption value of the security, per $100 par value.\n\t * @param {?ApiRange | ?ApiName | ?number} arg5 - The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/DISC.js\n\t */",
        "description": "Returns the discount rate for a security.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.DISC(\"10/15/2018\", \"1/1/2020\", 98, 100, 1));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The security settlement date, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The maturity date of the security, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The purchase price of the security, per $100 par value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The redemption value of the security, per $100 par value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "DISC",
        "longname": "ApiWorksheetFunction#DISC",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5408,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/DISC.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts a dollar price, expressed as a fraction, into a dollar price, expressed as a decimal number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A number expressed as a fraction.\n\t * @param {ApiRange | ApiName | number} arg2 - The integer to use in the denominator of the fraction.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/DOLLARDE.js\n\t */",
        "description": "Converts a dollar price, expressed as a fraction, into a dollar price, expressed as a decimal number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.DOLLARDE(1.03, 16));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A number expressed as a fraction.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The integer to use in the denominator of the fraction.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "DOLLARDE",
        "longname": "ApiWorksheetFunction#DOLLARDE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5420,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/DOLLARDE.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts a dollar price, expressed as a decimal number, into a dollar price, expressed as a fraction.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A decimal number.\n\t * @param {ApiRange | ApiName | number} arg2 - The integer to use in the denominator of a fraction.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/DOLLARFR.js\n\t */",
        "description": "Converts a dollar price, expressed as a decimal number, into a dollar price, expressed as a fraction.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.DOLLARFR(1.1875, 16));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A decimal number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The integer to use in the denominator of a fraction.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "DOLLARFR",
        "longname": "ApiWorksheetFunction#DOLLARFR",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5432,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/DOLLARFR.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the annual duration of a security with periodic interest payments.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The security settlement date, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg2 - The maturity date of the security, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg3 - The annual coupon rate of the security.\n\t * @param {ApiRange | ApiName | number} arg4 - The annual yield of the security.\n\t * @param {ApiRange | ApiName | number} arg5 - The number of interest payments per year. The possible values are: 1 for annual payments, 2 for semiannual payments, 4 for quarterly payments.\n\t * @param {?ApiRange | ?ApiName | ?number} arg6 - The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/DURATION.js\n\t */",
        "description": "Returns the annual duration of a security with periodic interest payments.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.DURATION(\"1/10/2018\", \"6/15/2019\", 0.08, 0.09, 4, 1));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The security settlement date, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The maturity date of the security, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The annual coupon rate of the security.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The annual yield of the security.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "The number of interest payments per year. The possible values are: 1 for annual payments, 2 for semiannual payments, 4 for quarterly payments.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg6",
                "description": "The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "DURATION",
        "longname": "ApiWorksheetFunction#DURATION",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5448,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/DURATION.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the effective annual interest rate.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The nominal interest rate.\n\t * @param {ApiRange | ApiName | number} arg2 - The number of compounding periods per year.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/EFFECT.js\n\t */",
        "description": "Returns the effective annual interest rate.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.EFFECT(0.57, 4));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The nominal interest rate.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The number of compounding periods per year.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "EFFECT",
        "longname": "ApiWorksheetFunction#EFFECT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5460,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/EFFECT.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the future value of an investment based on periodic, constant payments and a constant interest rate.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.\n\t * @param {ApiRange | ApiName | number} arg2 - The total number of payment periods in the investment.\n\t * @param {ApiRange | ApiName | number} arg3 - The payment made each period; it cannot change over the life of the investment.\n\t * @param {?ApiRange | ?ApiName | ?number} arg4 - The present value, or the lump-sum amount that a series of future payments is worth now. If omitted, it is equal to 0.\n\t * @param {?ApiRange | ?ApiName | ?number} arg5 - A value representing the timing of payment: payment at the beginning of the period = 1; payment at the end of the period = 0 or omitted.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/FV.js\n\t */",
        "description": "Returns the future value of an investment based on periodic, constant payments and a constant interest rate.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.FV(0.1/12, 2*12, -500, 10000));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The total number of payment periods in the investment.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The payment made each period; it cannot change over the life of the investment.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The present value, or the lump-sum amount that a series of future payments is worth now. If omitted, it is equal to 0.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "A value representing the timing of payment: payment at the beginning of the period = 1; payment at the end of the period = 0 or omitted.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "FV",
        "longname": "ApiWorksheetFunction#FV",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5475,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/FV.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the future value of an initial principal after applying a series of compound interest rates.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The present value of an investment.\n\t * @param {number[] | ApiRange | ApiName} arg2 - An array of interest rates to apply.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/FVSCHEDULE.js\n\t */",
        "description": "Returns the future value of an initial principal after applying a series of compound interest rates.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(\"Principal\");\nworksheet.GetRange(\"B1\").SetValue(100);\nworksheet.GetRange(\"A2\").SetValue(\"Rate 1\");\nworksheet.GetRange(\"B2\").SetValue(0.03);\nworksheet.GetRange(\"A3\").SetValue(\"Rate 2\");\nworksheet.GetRange(\"B3\").SetValue(0.05);\nworksheet.GetRange(\"A4\").SetValue(\"Rate 3\");\nworksheet.GetRange(\"B4\").SetValue(0.1);\nlet range = worksheet.GetRange(\"B2:B4\");\nworksheet.GetRange(\"B5\").SetValue(func.FVSCHEDULE(100, range));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The present value of an investment.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "Array.<number>",
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "An array of interest rates to apply.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "FVSCHEDULE",
        "longname": "ApiWorksheetFunction#FVSCHEDULE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5487,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/FVSCHEDULE.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the interest rate for a fully invested security.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The security settlement date, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg2 - The maturity date of the security, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg3 - The amount invested in the security.\n\t * @param {ApiRange | ApiName | number} arg4 - The amount to be received at maturity.\n\t * @param {?ApiRange | ?ApiName | ?number} arg6 - The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/INTRATE.js\n\t */",
        "description": "Returns the interest rate for a fully invested security.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.INTRATE(\"1/1/2018\", \"11/12/2018\", 1000, 1050, 2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The security settlement date, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The maturity date of the security, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The amount invested in the security.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The amount to be received at maturity.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg6",
                "description": "The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "INTRATE",
        "longname": "ApiWorksheetFunction#INTRATE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5502,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/INTRATE.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the interest payment for a given period for an investment, based on periodic, constant payments and a constant interest rate.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.\n\t * @param {ApiRange | ApiName | number} arg2 - The period for which the interest will be returned. It must be in the range from 1 to the total number of payments.\n\t * @param {ApiRange | ApiName | number} arg3 - The total number of payment periods in an investment.\n\t * @param {ApiRange | ApiName | number} arg4 - The present value, or the lump-sum amount that a series of future payments is worth now.\n\t * @param {?ApiRange | ?ApiName | ?number} arg5 - The future value, or a cash balance which will be attained after the last payment is made. If omitted, it is equal to 0.\n\t * @param {?ApiRange | ?ApiName | ?number} arg6 - A logical value representing the timing of payment: at the end of the period = 0 or omitted, at the beginning of the period = 1.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/IPMT.js\n\t */",
        "description": "Returns the interest payment for a given period for an investment, based on periodic, constant payments and a constant interest rate.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.IPMT(0.1/12, 1, 2*12, 2000, 0));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The period for which the interest will be returned. It must be in the range from 1 to the total number of payments.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The total number of payment periods in an investment.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The present value, or the lump-sum amount that a series of future payments is worth now.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "The future value, or a cash balance which will be attained after the last payment is made. If omitted, it is equal to 0.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg6",
                "description": "A logical value representing the timing of payment: at the end of the period = 0 or omitted, at the beginning of the period = 1.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "IPMT",
        "longname": "ApiWorksheetFunction#IPMT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5518,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/IPMT.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the internal rate of return for a series of cash flows.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number[] | ApiRange} arg1 - A range or array of cells that contain numbers for which the internal rate of return will be calculated.\n\t * @param {?ApiRange | ?ApiName | ?number} arg2 - An estimate at what the internal rate of return will be. If it is omitted, the function will assume guess to be 0.1 (10 percent).\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/IRR.js\n\t */",
        "description": "Returns the internal rate of return for a series of cash flows.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet values = [\"Values\", \"-$40,000.00\", \"$10,000.00\", \"$15,000.00\", \"$20,000.00\"];\n\nfor (let i = 0; i < values.length; i++) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(values[i]);\n}\n\nlet range = worksheet.GetRange(\"A2:A5\");\nworksheet.GetRange(\"B5\").SetValue(func.IRR(range));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<number>",
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A range or array of cells that contain numbers for which the internal rate of return will be calculated.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "An estimate at what the internal rate of return will be. If it is omitted, the function will assume guess to be 0.1 (10 percent).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "IRR",
        "longname": "ApiWorksheetFunction#IRR",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5530,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/IRR.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the interest paid during a specific period of an investment.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.\n\t * @param {ApiRange | ApiName | number} arg2 - The period for which the interest will be retuned. It must be in the range from 1 to the total number of payments.\n\t * @param {ApiRange | ApiName | number} arg3 - The total number of payment periods in an investment.\n\t * @param {ApiRange | ApiName | number} arg4 - The present value, or the lump-sum amount that a series of future payments is worth now.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ISPMT.js\n\t */",
        "description": "Returns the interest paid during a specific period of an investment.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.ISPMT(0.1/12, 1, 2*12, 2000));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The period for which the interest will be retuned. It must be in the range from 1 to the total number of payments.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The total number of payment periods in an investment.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The present value, or the lump-sum amount that a series of future payments is worth now.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "ISPMT",
        "longname": "ApiWorksheetFunction#ISPMT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5544,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ISPMT.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the modified Macauley duration of a security with an assumed par value of $100.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The security settlement date, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg2 - The maturity date of the security, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg3 - The annual coupon rate of the security.\n\t * @param {ApiRange | ApiName | number} arg4 - The annual yield of the security.\n\t * @param {ApiRange | ApiName | number} arg5 - The number of interest payments per year. The possible values are: 1 for annual payments, 2 for semiannual payments, 4 for quarterly payments.\n\t * @param {?ApiRange | ?ApiName | ?number} arg6 - The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/MDURATION.js\n\t */",
        "description": "Returns the modified Macauley duration of a security with an assumed par value of $100.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.MDURATION(\"1/10/2018\", \"6/15/2019\", 0.08, 0.09, 4, 1));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The security settlement date, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The maturity date of the security, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The annual coupon rate of the security.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The annual yield of the security.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "The number of interest payments per year. The possible values are: 1 for annual payments, 2 for semiannual payments, 4 for quarterly payments.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg6",
                "description": "The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "MDURATION",
        "longname": "ApiWorksheetFunction#MDURATION",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5560,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/MDURATION.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the internal rate of return for a series of periodic cash flows, considering both cost of investment and interest on reinvestment of cash.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number[]} arg1 - A range or array of cells that contain numbers that represent a series of payments (negative) and income (positive) at regular periods.\n\t * @param {ApiRange | ApiName | number} arg2 - The interest rate paid on the money used in the cash flows.\n\t * @param {ApiRange | ApiName | number} arg3 - The interest rate received on the cash reinvestment.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/MIRR.js\n\t */",
        "description": "Returns the internal rate of return for a series of periodic cash flows, considering both cost of investment and interest on reinvestment of cash.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet values = [\"Values\", \"-$40,000.00\", \"$10,000.00\", \"$15,000.00\", \"$20,000.00\"];\n\nfor (let i = 0; i < values.length; i++) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(values[i]);\n}\n\nworksheet.GetRange(\"B1\").SetValue(\"Paid interest rate\");\nworksheet.GetRange(\"B2\").SetValue(0.2);\nworksheet.GetRange(\"C1\").SetValue(\"Received interest rate\");\nworksheet.GetRange(\"C2\").SetValue(0.23);\n\nlet range = worksheet.GetRange(\"A2:A5\");\nworksheet.GetRange(\"B5\").SetValue(func.MIRR(range, 0.2, 0.23));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A range or array of cells that contain numbers that represent a series of payments (negative) and income (positive) at regular periods.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The interest rate paid on the money used in the cash flows.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The interest rate received on the cash reinvestment.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "MIRR",
        "longname": "ApiWorksheetFunction#MIRR",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5573,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/MIRR.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the annual nominal interest rate.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The effective interest rate of the security.\n\t * @param {ApiRange | ApiName | number} arg2 - The number of compounding periods per year.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/NOMINAL.js\n\t */",
        "description": "Returns the annual nominal interest rate.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.NOMINAL(0.7, 4));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The effective interest rate of the security.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The number of compounding periods per year.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "NOMINAL",
        "longname": "ApiWorksheetFunction#NOMINAL",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5585,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/NOMINAL.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the number of periods for an investment based on periodic, constant payments and a constant interest rate.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.\n\t * @param {ApiRange | ApiName | number} arg2 - The payment made each period; it cannot change over the life of the investment.\n\t * @param {ApiRange | ApiName | number} arg3 - Te present value, or the lump-sum amount that a series of future payments is worth now.\n\t * @param {?ApiRange | ?ApiName | ?number} arg4 - The future value, or a cash balance which will be attained after the last payment is made. If omitted, zero is used.\n\t * @param {?ApiRange | ?ApiName | ?number} arg5 - A logical value: payment at the beginning of the period = 1; payment at the end of the period = 0 or omitted.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/NPER.js\n\t */",
        "description": "Returns the number of periods for an investment based on periodic, constant payments and a constant interest rate.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.NPER(0.1/12, -500, 10000, 0));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The payment made each period; it cannot change over the life of the investment.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "Te present value, or the lump-sum amount that a series of future payments is worth now.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The future value, or a cash balance which will be attained after the last payment is made. If omitted, zero is used.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "A logical value: payment at the beginning of the period = 1; payment at the end of the period = 0 or omitted.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "NPER",
        "longname": "ApiWorksheetFunction#NPER",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5600,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/NPER.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the net present value of an investment based on a discount rate and a series of future payments (negative values) and income (positive values).\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The discount rate.\n\t * @param {number | ApiRange | number[]} args - Up to 255 arguments representing future payments (negative values) and income (positive values).\n\t * The first argument is required, the subsequent values are optional. Arguments can be numbers, ranges, arrays of numbers.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/NPV.js\n\t */",
        "description": "Returns the net present value of an investment based on a discount rate and a series of future payments (negative values) and income (positive values).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(\"Rate\");\nworksheet.GetRange(\"A2\").SetValue(0.05);\nlet values = [\"Payment\", -10000, 3000, 4500, 6000];\n\nfor (let i = 0; i < values.length; i++) {\n    worksheet.GetRange(\"B\" + (i + 1)).SetValue(values[i]);\n}\nlet range = worksheet.GetRange(\"B2:B5\");\nworksheet.GetRange(\"B6\").SetValue(func.NPV(0.05, range));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The discount rate.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number",
                        "ApiRange",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 arguments representing future payments (negative values) and income (positive values).\nThe first argument is required, the subsequent values are optional. Arguments can be numbers, ranges, arrays of numbers.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "NPV",
        "longname": "ApiWorksheetFunction#NPV",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5613,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/NPV.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the price per $100 face value of a security with an odd first period.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The security settlement date, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg2 - The maturity date of the security, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg3 - The issue date of the security, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg4 - The first coupon date of the security, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg5 - The interest rate of the security.\n\t * @param {ApiRange | ApiName | number} arg6 - The annual yield of the security.\n\t * @param {ApiRange | ApiName | number} arg7 - The redemption value of the security, per $100 face value.\n\t * @param {ApiRange | ApiName | number} arg8 - The number of interest payments per year. The possible values are: 1 for annual payments, 2 for semiannual payments, 4 for quarterly payments.\n\t * @param {?ApiRange | ?ApiName | ?number} arg9 - The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ODDFPRICE.js\n\t */",
        "description": "Returns the price per $100 face value of a security with an odd first period.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.ODDFPRICE(\"1/1/2017\", \"6/1/2019\", \"12/1/2016\", \"3/15/2017\", 0.05, 0.09, 100, 2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The security settlement date, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The maturity date of the security, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The issue date of the security, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The first coupon date of the security, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "The interest rate of the security.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg6",
                "description": "The annual yield of the security.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg7",
                "description": "The redemption value of the security, per $100 face value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg8",
                "description": "The number of interest payments per year. The possible values are: 1 for annual payments, 2 for semiannual payments, 4 for quarterly payments.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg9",
                "description": "The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "ODDFPRICE",
        "longname": "ApiWorksheetFunction#ODDFPRICE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5632,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ODDFPRICE.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the yield of a security with an odd first period.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The security settlement date, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg2 - The maturity date of the security, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg3 - The issue date of the security, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg4 - The first coupon date of the security, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg5 - The interest rate of the security.\n\t * @param {ApiRange | ApiName | number} arg6 - The purchase price of the security, per $100 par value.\n\t * @param {ApiRange | ApiName | number} arg7 - The redemption value of the security, per $100 par value.\n\t * @param {ApiRange | ApiName | number} arg8 - The number of interest payments per year. The possible values are: 1 for annual payments, 2 for semiannual payments, 4 for quarterly payments.\n\t * @param {?ApiRange | ?ApiName | ?number} arg9 - The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ODDFYIELD.js\n\t */",
        "description": "Returns the yield of a security with an odd first period.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.ODDFYIELD(\"1/1/2017\", \"6/1/2019\", \"12/1/2016\", \"3/15/2017\", 0.06, 90, 100, 2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The security settlement date, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The maturity date of the security, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The issue date of the security, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The first coupon date of the security, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "The interest rate of the security.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg6",
                "description": "The purchase price of the security, per $100 par value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg7",
                "description": "The redemption value of the security, per $100 par value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg8",
                "description": "The number of interest payments per year. The possible values are: 1 for annual payments, 2 for semiannual payments, 4 for quarterly payments.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg9",
                "description": "The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "ODDFYIELD",
        "longname": "ApiWorksheetFunction#ODDFYIELD",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5651,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ODDFYIELD.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the price per $100 face value of a security with an odd last period.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The security settlement date, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg2 - The maturity date of the security, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg3 - The last coupon date of the security, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg5 - The interest rate of the security.\n\t * @param {ApiRange | ApiName | number} arg5 - The annual yield of the security.\n\t * @param {ApiRange | ApiName | number} arg6 - The redemption value of the security, per $100 par value.\n\t * @param {ApiRange | ApiName | number} arg8 - The number of interest payments per year. The possible values are: 1 for annual payments, 2 for semiannual payments, 4 for quarterly payments.\n\t * @param {?ApiRange | ?ApiName | ?number} arg9 - The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ODDLPRICE.js\n\t */",
        "description": "Returns the price per $100 face value of a security with an odd last period.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.ODDLPRICE(\"1/1/2017\", \"6/1/2019\", \"12/1/2016\", 0.05, 0.09, 100, 2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The security settlement date, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The maturity date of the security, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The last coupon date of the security, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "The interest rate of the security.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "The annual yield of the security.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg6",
                "description": "The redemption value of the security, per $100 par value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg8",
                "description": "The number of interest payments per year. The possible values are: 1 for annual payments, 2 for semiannual payments, 4 for quarterly payments.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg9",
                "description": "The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "ODDLPRICE",
        "longname": "ApiWorksheetFunction#ODDLPRICE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5669,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ODDLPRICE.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the yield of a security with an odd last period.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The security settlement date, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg2 - The maturity date of the security, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg3 - The last coupon date of the security, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg5 - The interest rate of the security.\n\t * @param {ApiRange | ApiName | number} arg6 - The purchase price of the security, per $100 par value.\n\t * @param {ApiRange | ApiName | number} arg6 - The redemption value of the security, per $100 par value.\n\t * @param {ApiRange | ApiName | number} arg8 - The number of interest payments per year. The possible values are: 1 for annual payments, 2 for semiannual payments, 4 for quarterly payments.\n\t * @param {?ApiRange | ?ApiName | ?number} arg9 - The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ODDLYIELD.js\n\t */",
        "description": "Returns the yield of a security with an odd last period.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.ODDLYIELD(\"1/1/2017\", \"6/1/2019\", \"12/1/2016\", 0.06, 90, 100, 2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The security settlement date, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The maturity date of the security, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The last coupon date of the security, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "The interest rate of the security.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg6",
                "description": "The purchase price of the security, per $100 par value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg6",
                "description": "The redemption value of the security, per $100 par value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg8",
                "description": "The number of interest payments per year. The possible values are: 1 for annual payments, 2 for semiannual payments, 4 for quarterly payments.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg9",
                "description": "The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "ODDLYIELD",
        "longname": "ApiWorksheetFunction#ODDLYIELD",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5687,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ODDLYIELD.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the number of periods required by an investment to reach a specified value.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The interest rate per period.\n\t * @param {ApiRange | ApiName | number} arg2 - The present value of the investment.\n\t * @param {ApiRange | ApiName | number} arg3 - The desired future value of the investment.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/PDURATION.js\n\t */",
        "description": "Returns the number of periods required by an investment to reach a specified value.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.PDURATION(\"2.50%\", 2000, 2200));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The interest rate per period.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The present value of the investment.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The desired future value of the investment.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "PDURATION",
        "longname": "ApiWorksheetFunction#PDURATION",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5700,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/PDURATION.js"
        ]
    },
    {
        "comment": "/**\n\t * Calculates the payment for a loan based on constant payments and a constant interest rate.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The interest rate per period for the loan. For example, use 6%/4 for quarterly payments at 6% APR.\n\t * @param {ApiRange | ApiName | number} arg2 - The total number of payments for the loan.\n\t * @param {ApiRange | ApiName | number} arg3 - The present value: the total amount that a series of future payments is worth now.\n\t * @param {?ApiRange | ?ApiName | ?number} arg4 - The future value, or a cash balance which will be attained after the last payment is made. If omitted, it is equal to 0.\n\t * @param {?ApiRange | ?ApiName | ?number} arg5 - A logical value: payment at the beginning of the period = 1; payment at the end of the period = 0 or omitted.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/PMT.js\n\t */",
        "description": "Calculates the payment for a loan based on constant payments and a constant interest rate.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.PMT(0.08/12, 2*12, 10000, 0));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The interest rate per period for the loan. For example, use 6%/4 for quarterly payments at 6% APR.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The total number of payments for the loan.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The present value: the total amount that a series of future payments is worth now.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The future value, or a cash balance which will be attained after the last payment is made. If omitted, it is equal to 0.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "A logical value: payment at the beginning of the period = 1; payment at the end of the period = 0 or omitted.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "PMT",
        "longname": "ApiWorksheetFunction#PMT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5715,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/PMT.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the payment on the principal for a given investment based on periodic, constant payments and a constant interest rate.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.\n\t * @param {ApiRange | ApiName | number} arg2 - The period for which the principal payment will be returned. It must be in the range from 1 to to the total number of payment periods.\n\t * @param {ApiRange | ApiName | number} arg3 - The total number of payment periods in an investment.\n\t * @param {ApiRange | ApiName | number} arg4 - The present value: the total amount that a series of future payments is worth now.\n\t * @param {?ApiRange | ?ApiName | ?number} arg5 - The future value, or cash balance which will be attained after the last payment is made.\n\t * @param {?ApiRange | ?ApiName | ?number} arg6 - A logical value: payment at the beginning of the period = 1; payment at the end of the period = 0 or omitted.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/PPMT.js\n\t */",
        "description": "Returns the payment on the principal for a given investment based on periodic, constant payments and a constant interest rate.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.PPMT(0.1/12, 1, 2*12, 2000, 0));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The period for which the principal payment will be returned. It must be in the range from 1 to to the total number of payment periods.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The total number of payment periods in an investment.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The present value: the total amount that a series of future payments is worth now.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "The future value, or cash balance which will be attained after the last payment is made.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg6",
                "description": "A logical value: payment at the beginning of the period = 1; payment at the end of the period = 0 or omitted.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "PPMT",
        "longname": "ApiWorksheetFunction#PPMT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5731,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/PPMT.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the price per $100 face value for a security that pays periodic interest.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The security settlement date, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg2 - The maturity date of the security, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg3 - The annual coupon rate of the security.\n\t * @param {ApiRange | ApiName | number} arg4 - The annual yield of the security.\n\t * @param {ApiRange | ApiName | number} arg5 - The redemption value of the security, per $100 par value.\n\t * @param {ApiRange | ApiName | number} arg6 - The number of interest payments per year. The possible values are: 1 for annual payments, 2 for semiannual payments, 4 for quarterly payments.\n\t * @param {?ApiRange | ?ApiName | ?number} arg7 - The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/PRICE.js\n\t */",
        "description": "Returns the price per $100 face value for a security that pays periodic interest.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.PRICE(\"1/1/2017\", \"6/1/2019\", 0.05, 0.09, 105, 2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The security settlement date, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The maturity date of the security, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The annual coupon rate of the security.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The annual yield of the security.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "The redemption value of the security, per $100 par value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg6",
                "description": "The number of interest payments per year. The possible values are: 1 for annual payments, 2 for semiannual payments, 4 for quarterly payments.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg7",
                "description": "The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "PRICE",
        "longname": "ApiWorksheetFunction#PRICE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5748,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/PRICE.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the price per $100 face value for a discounted security.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The security settlement date, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg2 - The maturity date of the security, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg3 - The discount rate of the security.\n\t * @param {ApiRange | ApiName | number} arg4 - The redemption value of the security, per $100 par value.\n\t * @param {?ApiRange | ?ApiName | ?number} arg5 - The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/PRICEDISC.js\n\t */",
        "description": "Returns the price per $100 face value for a discounted security.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.PRICEDISC(\"1/1/2017\", \"6/1/2019\", 0.05, 105, 1));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The security settlement date, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The maturity date of the security, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The discount rate of the security.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The redemption value of the security, per $100 par value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "PRICEDISC",
        "longname": "ApiWorksheetFunction#PRICEDISC",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5763,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/PRICEDISC.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the price per $100 face value for a security that pays interest at maturity.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The security settlement date, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg2 - The maturity date of the security, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg3 - The issue date of the security, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg4 - The security interest rate at the issue date.\n\t * @param {ApiRange | ApiName | number} arg5 - The annual yield of the security.\n\t * @param {?ApiRange | ?ApiName | ?number} arg6 - The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/PRICEMAT.js\n\t */",
        "description": "Returns the price per $100 face value for a security that pays interest at maturity.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.PRICEMAT(\"1/1/2017\", \"6/1/2019\", \"12/1/2016\", 0.05, 0.09, 1));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The security settlement date, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The maturity date of the security, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The issue date of the security, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The security interest rate at the issue date.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "The annual yield of the security.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg6",
                "description": "The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "PRICEMAT",
        "longname": "ApiWorksheetFunction#PRICEMAT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5779,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/PRICEMAT.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the present value of an investment: the total amount that a series of future payments is worth now.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.\n\t * @param {ApiRange | ApiName | number} arg2 - The total number of payment periods in an investment.\n\t * @param {ApiRange | ApiName | number} arg3 - The payment made each period and cannot change over the life of the investment.\n\t * @param {?ApiRange | ?ApiName | ?number} arg4 - The future value, or a cash balance which will be attained after the last payment is made. If omitted, it is equal to 0.\n\t * @param {?ApiRange | ?ApiName | ?number} arg5 - A logical value: payment at the beginning of the period = 1; payment at the end of the period = 0 or omitted.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/PV.js\n\t */",
        "description": "Returns the present value of an investment: the total amount that a series of future payments is worth now.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.PV(0.1/12, 2*12, -500, 0));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The total number of payment periods in an investment.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The payment made each period and cannot change over the life of the investment.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The future value, or a cash balance which will be attained after the last payment is made. If omitted, it is equal to 0.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "A logical value: payment at the beginning of the period = 1; payment at the end of the period = 0 or omitted.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "PV",
        "longname": "ApiWorksheetFunction#PV",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5794,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/PV.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the interest rate per period for a loan or an investment. For example, use 6%/4 for quarterly payments at 6% APR.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The total number of payment periods for the loan or investment.\n\t * @param {ApiRange | ApiName | number} arg2 - The payment made each period and cannot change over the life of the loan or investment.\n\t * @param {ApiRange | ApiName | number} arg3 - The present value: the total amount that a series of future payments is worth now.\n\t * @param {?ApiRange | ?ApiName | ?number} arg4 - The future value, or a cash balance which will be attained after the last payment is made. If omitted, it is equal to 0.\n\t * @param {?ApiRange | ?ApiName | ?number} arg5 - A logical value: payment at the beginning of the period = 1; payment at the end of the period = 0 or omitted.\n\t * @param {?ApiRange | ?ApiName | ?number} arg6 - An estimate at what the rate will be. If it is omitted, the function will assume guess to be 0.1 (10 percent).\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/RATE.js\n\t */",
        "description": "Returns the interest rate per period for a loan or an investment. For example, use 6%/4 for quarterly payments at 6% APR.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.RATE(2*12, -500, 10000, 0));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The total number of payment periods for the loan or investment.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The payment made each period and cannot change over the life of the loan or investment.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The present value: the total amount that a series of future payments is worth now.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The future value, or a cash balance which will be attained after the last payment is made. If omitted, it is equal to 0.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "A logical value: payment at the beginning of the period = 1; payment at the end of the period = 0 or omitted.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg6",
                "description": "An estimate at what the rate will be. If it is omitted, the function will assume guess to be 0.1 (10 percent).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "RATE",
        "longname": "ApiWorksheetFunction#RATE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5810,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/RATE.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the amount received at maturity for a fully invested security.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The security settlement date, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg2 - The maturity date of the security, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg3 - The amount invested in the security.\n\t * @param {ApiRange | ApiName | number} arg4 - \tThe security discount rate.\n\t * @param {?ApiRange | ?ApiName | ?number} arg6 - The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/RECEIVED.js\n\t */",
        "description": "Returns the amount received at maturity for a fully invested security.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.RECEIVED(\"1/1/2017\", \"6/1/2019\", \"$10,000.00\", \"3.75%\", 2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The security settlement date, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The maturity date of the security, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The amount invested in the security.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The security discount rate.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg6",
                "description": "The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "RECEIVED",
        "longname": "ApiWorksheetFunction#RECEIVED",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5825,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/RECEIVED.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns an equivalent interest rate for the growth of an investment.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The number of periods for the investment.\n\t * @param {ApiRange | ApiName | number} arg2 - The present value of the investment.\n\t * @param {ApiRange | ApiName | number} arg3 - The future value of the investment.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/RRI.js\n\t */",
        "description": "Returns an equivalent interest rate for the growth of an investment.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.RRI(12, 10000, 20000));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The number of periods for the investment.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The present value of the investment.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The future value of the investment.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "RRI",
        "longname": "ApiWorksheetFunction#RRI",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5838,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/RRI.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the straight-line depreciation of an asset for one period.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The initial cost of the asset.\n\t * @param {ApiRange | ApiName | number} arg2 - The salvage value of the asset at the end of its lifetime.\n\t * @param {ApiRange | ApiName | number} arg3 - The number of periods over which the asset is being depreciated (sometimes called the useful life of the asset).\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/SLN.js\n\t */",
        "description": "Returns the straight-line depreciation of an asset for one period.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.SLN(3500, 500, 5));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The initial cost of the asset.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The salvage value of the asset at the end of its lifetime.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The number of periods over which the asset is being depreciated (sometimes called the useful life of the asset).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "SLN",
        "longname": "ApiWorksheetFunction#SLN",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5851,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/SLN.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the sum-of-years' digits depreciation of an asset for a specified period.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The initial cost of the asset.\n\t * @param {ApiRange | ApiName | number} arg2 - The salvage value of the asset at the end of its lifetime.\n\t * @param {ApiRange | ApiName | number} arg3 - The number of periods over which the asset is being depreciated (sometimes called the useful life of the asset).\n\t * @param {ApiRange | ApiName | number} arg4 - The period for which the depreciation will be calculated. It must use the same units as the useful life of the asset.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/SYD.js\n\t */",
        "description": "Returns the sum-of-years' digits depreciation of an asset for a specified period.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.SYD(3500, 500, 5, 3));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The initial cost of the asset.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The salvage value of the asset at the end of its lifetime.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The number of periods over which the asset is being depreciated (sometimes called the useful life of the asset).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The period for which the depreciation will be calculated. It must use the same units as the useful life of the asset.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "SYD",
        "longname": "ApiWorksheetFunction#SYD",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5865,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/SYD.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the bond-equivalent yield for a treasury bill.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The settlement date of the Treasury bill, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg2 - The maturity date of the Treasury bill, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg3 - The discount rate of the Treasury bill.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/TBILLEQ.js\n\t */",
        "description": "Returns the bond-equivalent yield for a treasury bill.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.TBILLEQ(\"1/1/2018\", \"11/20/2018\", \"8.00%\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The settlement date of the Treasury bill, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The maturity date of the Treasury bill, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The discount rate of the Treasury bill.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "TBILLEQ",
        "longname": "ApiWorksheetFunction#TBILLEQ",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5878,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/TBILLEQ.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the price per $100 face value for a Treasury bill.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The settlement date of the Treasury bill, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg2 - The maturity date of the Treasury bill, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg3 - The discount rate of the Treasury bill.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/TBILLPRICE.js\n\t */",
        "description": "Returns the price per $100 face value for a Treasury bill.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.TBILLPRICE(\"1/1/2018\", \"1/1/2019\", \"3.00%\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The settlement date of the Treasury bill, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The maturity date of the Treasury bill, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The discount rate of the Treasury bill.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "TBILLPRICE",
        "longname": "ApiWorksheetFunction#TBILLPRICE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5891,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/TBILLPRICE.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the yield for a Treasury bill.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The settlement date of the Treasury bill, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg2 - The maturity date of the Treasury bill, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg3 - The purchase price of the Treasury bill, per $100 par value.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/TBILLYIELD.js\n\t */",
        "description": "Returns the yield for a Treasury bill.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.TBILLYIELD(\"2/15/2018\", \"6/1/2018\", 99.5));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The settlement date of the Treasury bill, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The maturity date of the Treasury bill, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The purchase price of the Treasury bill, per $100 par value.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "TBILLYIELD",
        "longname": "ApiWorksheetFunction#TBILLYIELD",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5904,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/TBILLYIELD.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the depreciation of an asset for any specified period, including partial periods, using the double-declining balance method or some other method specified.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The initial cost of the asset.\n\t * @param {ApiRange | ApiName | number} arg2 - The salvage value of the asset at the end of its lifetime.\n\t * @param {ApiRange | ApiName | number} arg3 - The number of periods over which the asset is being depreciated (sometimes called the useful life of the asset).\n\t * @param {ApiRange | ApiName | number} arg4 - The starting period for which the depreciation will be calculated, in the same units as the useful life of the asset.\n\t * @param {ApiRange | ApiName | number} arg5 - The ending period for which the depreciation will be calculated, in the same units as the useful life of the asset.\n\t * @param {?ApiRange | ?ApiName | ?number} arg6 - The rate at which the balance declines. If it is omitted, the function will assume it to be 2\n\t * @param {?ApiRange | ?ApiName | ?boolean} arg7 - Specifies whether to use straight-line depreciation when depreciation is greater than the declining balance calculation (<b>false</b> or omitted).\n\t * If it is set to <b>true</b>, the function uses the declining balance method.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/VDB.js\n\t */",
        "description": "Returns the depreciation of an asset for any specified period, including partial periods, using the double-declining balance method or some other method specified.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.VDB(3500, 500, 5, 1, 3, 2, false));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The initial cost of the asset.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The salvage value of the asset at the end of its lifetime.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The number of periods over which the asset is being depreciated (sometimes called the useful life of the asset).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The starting period for which the depreciation will be calculated, in the same units as the useful life of the asset.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "The ending period for which the depreciation will be calculated, in the same units as the useful life of the asset.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg6",
                "description": "The rate at which the balance declines. If it is omitted, the function will assume it to be 2",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg7",
                "description": "Specifies whether to use straight-line depreciation when depreciation is greater than the declining balance calculation (<b>false</b> or omitted).\nIf it is set to <b>true</b>, the function uses the declining balance method.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "VDB",
        "longname": "ApiWorksheetFunction#VDB",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5922,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/VDB.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the internal rate of return for a schedule of cash flows.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName} arg1 - A range that contains the series of cash flows that corresponds to a schedule of payments in dates.\n\t * @param {ApiRange | ApiName} arg2 - A range that contains the schedule of payment dates that corresponds to the cash flow payments.\n\t * @param {?ApiRange | ?ApiName | ?number} arg3 - An estimate at what the internal rate of return will be. If it is omitted, the function will assume guess to be 0.1 (10 percent).\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/XIRR.js\n\t */",
        "description": "Returns the internal rate of return for a schedule of cash flows.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet values = [\"Values\", \"-$40,000.00\", \"$10,000.00\", \"$15,000.00\", \"$20,000.00\"];\nlet dates = [\"Dates\", \"1/1/2018\", \"4/1/2018\", \"8/1/2018\", \"12/1/2018\"];\n\nfor (let i = 0; i < values.length; i++) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(values[i]);\n}\nfor (let j = 0; j < dates.length; j++) {\n    worksheet.GetRange(\"B\" + (j + 1)).SetValue(dates[j]);\n}\n\nworksheet.GetRange(\"B1\").SetColumnWidth(15);\nlet range1 = worksheet.GetRange(\"A2:A5\");\nlet range2 = worksheet.GetRange(\"B2:B5\");\nworksheet.GetRange(\"C5\").SetValue(func.XIRR(range1, range2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A range that contains the series of cash flows that corresponds to a schedule of payments in dates.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "A range that contains the schedule of payment dates that corresponds to the cash flow payments.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "An estimate at what the internal rate of return will be. If it is omitted, the function will assume guess to be 0.1 (10 percent).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "XIRR",
        "longname": "ApiWorksheetFunction#XIRR",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5935,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/XIRR.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the net present value for a schedule of cash flows.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The discount rate to apply to the cash flows.\n\t * @param {ApiRange | ApiName} arg2 - A range that contains the series of cash flows that corresponds to a schedule of payments in dates.\n\t * @param {ApiRange | ApiName} arg3 - A range that contains the schedule of payment dates that corresponds to the cash flow payments.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/XNPV.js\n\t */",
        "description": "Returns the net present value for a schedule of cash flows.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(\"Rate\");\nworksheet.GetRange(\"A2\").SetValue(0.05);\n\nlet payment = [\"Payment/Income\", -10000, 500, 5000, 3000];\nlet dates = [\"Payment dates\", \"1/1/2018\", \"4/1/2018\", \"8/1/2018\", \"12/1/2018\"];\n\nfor (let i = 0; i < payment.length; i++) {\n    worksheet.GetRange(\"B\" + (i + 1)).SetValue(payment[i]);\n}\nfor (let j = 0; j < dates.length; j++) {\n    worksheet.GetRange(\"C\" + (j + 1)).SetValue(dates[j]);\n}\n\nworksheet.GetRange(\"C1\").SetColumnWidth(15);\nlet range1 = worksheet.GetRange(\"B2:B5\");\nlet range2 = worksheet.GetRange(\"C2:C5\");\nworksheet.GetRange(\"D5\").SetValue(func.XNPV(0.05, range1, range2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The discount rate to apply to the cash flows.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "A range that contains the series of cash flows that corresponds to a schedule of payments in dates.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "A range that contains the schedule of payment dates that corresponds to the cash flow payments.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "XNPV",
        "longname": "ApiWorksheetFunction#XNPV",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5948,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/XNPV.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the yield on a security that pays periodic interest.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The settlement date of the Treasury bill, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg2 - The maturity date of the Treasury bill, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg3 - The annual coupon rate of the security.\n\t * @param {ApiRange | ApiName | number} arg4 - The purchase price of the security, per $100 par value.\n\t * @param {ApiRange | ApiName | number} arg5 - The redemption value of the security, per $100 par value.\n\t * @param {ApiRange | ApiName | number} arg6 - The number of interest payments per year. The possible values are: 1 for annual payments, 2 for semiannual payments, 4 for quarterly payments.\n\t * @param {?ApiRange | ?ApiName | ?number} arg7 - The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/YIELD.js\n\t */",
        "description": "Returns the yield on a security that pays periodic interest.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.YIELD(\"1/10/2018\", \"11/20/2019\", \"3.75%\", 90, 100, 4));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The settlement date of the Treasury bill, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The maturity date of the Treasury bill, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The annual coupon rate of the security.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The purchase price of the security, per $100 par value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "The redemption value of the security, per $100 par value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg6",
                "description": "The number of interest payments per year. The possible values are: 1 for annual payments, 2 for semiannual payments, 4 for quarterly payments.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg7",
                "description": "The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "YIELD",
        "longname": "ApiWorksheetFunction#YIELD",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5965,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/YIELD.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the annual yield for a discounted security. For example, a Treasury bill.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The settlement date of the Treasury bill, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg2 - The maturity date of the Treasury bill, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg3 - The purchase price of the security, per $100 par value.\n\t * @param {ApiRange | ApiName | number} arg4 - The redemption value of the security, per $100 par value.\n\t * @param {?ApiRange | ?ApiName | ?number} arg5 - The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/YIELDDISC.js\n\t */",
        "description": "Returns the annual yield for a discounted security. For example, a Treasury bill.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.YIELDDISC(\"1/10/2018\", \"11/20/2019\", 90, 100));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The settlement date of the Treasury bill, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The maturity date of the Treasury bill, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The purchase price of the security, per $100 par value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The redemption value of the security, per $100 par value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "YIELDDISC",
        "longname": "ApiWorksheetFunction#YIELDDISC",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5980,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/YIELDDISC.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the annual yield of a security that pays interest at maturity.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The settlement date of the Treasury bill, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg2 - The maturity date of the Treasury bill, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg3 - The issue date of the security, expressed as a serial date number.\n\t * @param {ApiRange | ApiName | number} arg4 - The interest rate of the security at the issue date.\n\t * @param {ApiRange | ApiName | number} arg5 - The purchase price of the security, per $100 par value.\n\t * @param {?ApiRange | ?ApiName | ?number} arg6 - The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/YIELDMAT.js\n\t */",
        "description": "Returns the annual yield of a security that pays interest at maturity.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.YIELDMAT(\"1/10/2018\", \"11/20/2019\", \"1/1/2017\", \"6.00%\", 90));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The settlement date of the Treasury bill, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The maturity date of the Treasury bill, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The issue date of the security, expressed as a serial date number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "The interest rate of the security at the issue date.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "The purchase price of the security, per $100 par value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg6",
                "description": "The day count basis to use: <b>0</b> or omitted - US (NASD) 30/360; <b>1</b> - Actual/actual; <b>2</b> - Actual/360; <b>3</b> - Actual/365; <b>4</b> - European 30/360.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "YIELDMAT",
        "longname": "ApiWorksheetFunction#YIELDMAT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 5996,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/YIELDMAT.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the absolute value of a number, a number without its sign.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The real number for which the absolute value will be returned.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ABS.js\n\t */",
        "description": "Returns the absolute value of a number, a number without its sign.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.ABS(-123.14));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The real number for which the absolute value will be returned.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "ABS",
        "longname": "ApiWorksheetFunction#ABS",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6007,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ABS.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the arccosine of a number, in radians in the range from 0 to Pi. The arccosine is the angle whose cosine is a number specified in the parameters.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The angle cosine. It must be from -1 to 1.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ACOS.js\n\t */",
        "description": "Returns the arccosine of a number, in radians in the range from 0 to Pi. The arccosine is the angle whose cosine is a number specified in the parameters.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.ACOS(0));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The angle cosine. It must be from -1 to 1.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "ACOS",
        "longname": "ApiWorksheetFunction#ACOS",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6018,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ACOS.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the inverse hyperbolic cosine of a number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - Any real number equal to or greater than 1.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ACOSH.js\n\t */",
        "description": "Returns the inverse hyperbolic cosine of a number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.ACOSH(3.25));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "Any real number equal to or greater than 1.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "ACOSH",
        "longname": "ApiWorksheetFunction#ACOSH",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6029,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ACOSH.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the arccotangent of a number, in radians in the range from 0 to Pi.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The angle cotangent.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ACOT.js\n\t */",
        "description": "Returns the arccotangent of a number, in radians in the range from 0 to Pi.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.ACOT(0));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The angle cotangent.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "ACOT",
        "longname": "ApiWorksheetFunction#ACOT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6040,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ACOT.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the inverse hyperbolic cotangent of a number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The angle hyperbolic cotangent. It must be less than -1 or greater than 1.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ACOTH.js\n\t */",
        "description": "Returns the inverse hyperbolic cotangent of a number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.ACOTH(3));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The angle hyperbolic cotangent. It must be less than -1 or greater than 1.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "ACOTH",
        "longname": "ApiWorksheetFunction#ACOTH",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6051,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ACOTH.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns an aggregate in a list or database.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A numeric value that specifies which function to use: <b>1</b> - AVERAGE, <b>2</b> - COUNT, <b>3</b> - COUNTA, <b>4</b> - MAX, <b>5</b> - MIN,\n\t * <b>6</b> - PRODUCT, <b>7</b> - STDEV.S, <b>8</b> - STDEV.P, <b>9</b> - SUM, <b>10</b> - VAR.S, <b>11</b> - VAR.P, <b>12</b> - MEDIAN, <b>13</b> - MODE.SNGL, <b>14</b> - LARGE,\n\t * <b>15</b> - SMALL, <b>16</b> - PERCENTILE.INC, <b>17</b> - QUARTILE.INC, <b>18</b> - PERCENTILE.EXC, <b>19</b> - QUARTILE.EXC.\n\t * @param {ApiRange | ApiName | number} arg2 - A numeric value that specifies which values should be ignored: <b>0</b> or omitted - nested SUBTOTAL and AGGREGATE functions,\n\t * <b>1</b> - hidden rows, nested SUBTOTAL and AGGREGATE functions, <b>2</b> - error values, nested SUBTOTAL and AGGREGATE functions,\n\t * <b>3</b> - hidden rows, error values, nested SUBTOTAL and AGGREGATE functions, <b>4</b> - nothing, <b>5</b> - hidden rows, <b>6</b> - error values, <b>7</b> - hidden rows and error values.\n\t * @param {number | ApiRange | number[]} arg3 - The first numeric value for which the aggregate value will be returned.\n\t * @param {number | ApiRange | number[]} args - Up to 253 numeric values or a range of cells containing the values for which the aggregate value will be returned.\n\t * Arguments can be numbers, ranges, or arrays of numbers.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/AGGREGATE.js\n\t */",
        "description": "Returns an aggregate in a list or database.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.AGGREGATE(9, 4, 10, 30, 50, 5));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A numeric value that specifies which function to use: <b>1</b> - AVERAGE, <b>2</b> - COUNT, <b>3</b> - COUNTA, <b>4</b> - MAX, <b>5</b> - MIN,\n<b>6</b> - PRODUCT, <b>7</b> - STDEV.S, <b>8</b> - STDEV.P, <b>9</b> - SUM, <b>10</b> - VAR.S, <b>11</b> - VAR.P, <b>12</b> - MEDIAN, <b>13</b> - MODE.SNGL, <b>14</b> - LARGE,\n<b>15</b> - SMALL, <b>16</b> - PERCENTILE.INC, <b>17</b> - QUARTILE.INC, <b>18</b> - PERCENTILE.EXC, <b>19</b> - QUARTILE.EXC.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "A numeric value that specifies which values should be ignored: <b>0</b> or omitted - nested SUBTOTAL and AGGREGATE functions,\n<b>1</b> - hidden rows, nested SUBTOTAL and AGGREGATE functions, <b>2</b> - error values, nested SUBTOTAL and AGGREGATE functions,\n<b>3</b> - hidden rows, error values, nested SUBTOTAL and AGGREGATE functions, <b>4</b> - nothing, <b>5</b> - hidden rows, <b>6</b> - error values, <b>7</b> - hidden rows and error values.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number",
                        "ApiRange",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The first numeric value for which the aggregate value will be returned.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number",
                        "ApiRange",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 253 numeric values or a range of cells containing the values for which the aggregate value will be returned.\nArguments can be numbers, ranges, or arrays of numbers.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "AGGREGATE",
        "longname": "ApiWorksheetFunction#AGGREGATE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6070,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/AGGREGATE.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts a Roman numeral to Arabic.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | string} arg1 - The Roman numeral to convert.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ARABIC.js\n\t */",
        "description": "Converts a Roman numeral to Arabic.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.ARABIC(\"MCCL\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The Roman numeral to convert.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "ARABIC",
        "longname": "ApiWorksheetFunction#ARABIC",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6081,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ARABIC.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the arcsine of a number in radians, in the range from <em>-Pi/2</em> to <em>Pi/2</em>.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The angle sine. It must be from -1 to 1.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ASIN.js\n\t */",
        "description": "Returns the arcsine of a number in radians, in the range from <em>-Pi/2</em> to <em>Pi/2</em>.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.ASIN(0.25));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The angle sine. It must be from -1 to 1.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "ASIN",
        "longname": "ApiWorksheetFunction#ASIN",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6092,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ASIN.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the inverse hyperbolic sine of a number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - Any real number equal to or greater than 1.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ASINH.js\n\t */",
        "description": "Returns the inverse hyperbolic sine of a number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.ASINH(4));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "Any real number equal to or greater than 1.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "ASINH",
        "longname": "ApiWorksheetFunction#ASINH",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6103,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ASINH.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the arctangent of a number in radians, in the range from <em>-Pi/2</em> to <em>Pi/2</em>.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The angle tangent.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ATAN.js\n\t */",
        "description": "Returns the arctangent of a number in radians, in the range from <em>-Pi/2</em> to <em>Pi/2</em>.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.ATAN(0.25));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The angle tangent.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "ATAN",
        "longname": "ApiWorksheetFunction#ATAN",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6114,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ATAN.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the arctangent of the specified x and y coordinates, in radians between -Pi and Pi, excluding -Pi.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The x coordinate of the point.\n\t * @param {ApiRange | ApiName | number} arg2 - The y coordinate of the point.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ATAN2.js\n\t */",
        "description": "Returns the arctangent of the specified x and y coordinates, in radians between -Pi and Pi, excluding -Pi.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.ATAN2(1, -9));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The x coordinate of the point.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The y coordinate of the point.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "ATAN2",
        "longname": "ApiWorksheetFunction#ATAN2",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6126,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ATAN2.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the inverse hyperbolic tangent of a number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - Any real number between -1 and 1 excluding -1 and 1.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ATANH.js\n\t */",
        "description": "Returns the inverse hyperbolic tangent of a number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.ATANH(0.5));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "Any real number between -1 and 1 excluding -1 and 1.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "ATANH",
        "longname": "ApiWorksheetFunction#ATANH",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6137,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ATANH.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts a number into a text representation with the given radix (base).\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The number to convert.\n\t * @param {ApiRange | ApiName | number} arg2 - The base radix into which the number will be converted. An integer greater than or equal to 2 and less than or equal to 36.\n\t * @param {?ApiRange | ?ApiName | ?number} arg3 - The minimum length of the returned string. An integer greater than or equal to 0 and less than 256. If omitted, leading zeros are not added to the result.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/BASE.js\n\t */",
        "description": "Converts a number into a text representation with the given radix (base).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.BASE(5, 2, 5));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The number to convert.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The base radix into which the number will be converted. An integer greater than or equal to 2 and less than or equal to 36.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The minimum length of the returned string. An integer greater than or equal to 0 and less than 256. If omitted, leading zeros are not added to the result.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "BASE",
        "longname": "ApiWorksheetFunction#BASE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6150,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/BASE.js"
        ]
    },
    {
        "comment": "/**\n\t * Rounds a number up, to the nearest multiple of significance.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value to round up.\n\t * @param {ApiRange | ApiName | number} arg2 - The multiple of significance to round up to.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/CEILING.js\n\t */",
        "description": "Rounds a number up, to the nearest multiple of significance.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.CEILING(1.23, 0.1));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value to round up.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The multiple of significance to round up to.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "CEILING",
        "longname": "ApiWorksheetFunction#CEILING",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6162,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/CEILING.js"
        ]
    },
    {
        "comment": "/**\n\t * Rounds a number up, to the nearest integer or to the nearest multiple of significance.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value to round up.\n\t * @param {?ApiRange | ?ApiName | ?number} arg2 - The multiple of significance to round up to. If it is omitted, the default value of 1 is used.\n\t * @param {?ApiRange | ?ApiName | ?number} arg3 - Specifies if negative numbers are rounded towards or away from zero. If it is omitted or set to 0, negative numbers are rounded towards zero.\n\t * If any other numeric value is specified, negative numbers are rounded away from zero.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/CEILING_MATH.js\n\t */",
        "description": "Rounds a number up, to the nearest integer or to the nearest multiple of significance.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.CEILING_MATH(-5.5, 2, 1));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value to round up.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The multiple of significance to round up to. If it is omitted, the default value of 1 is used.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "Specifies if negative numbers are rounded towards or away from zero. If it is omitted or set to 0, negative numbers are rounded towards zero.\nIf any other numeric value is specified, negative numbers are rounded away from zero.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "CEILING_MATH",
        "longname": "ApiWorksheetFunction#CEILING_MATH",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6176,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/CEILING_MATH.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a number that is rounded up to the nearest integer or to the nearest multiple of significance. The number is always rounded up regardless of its sing.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value to round up.\n\t * @param {?ApiRange | ?ApiName | ?number} arg2 - The multiple of significance to round up to. If it is omitted, the default value of 1 is used. If it is set to zero, the function returns 0.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/CEILING_PRECISE.js\n\t */",
        "description": "Returns a number that is rounded up to the nearest integer or to the nearest multiple of significance. The number is always rounded up regardless of its sing.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.CEILING_PRECISE(-6.7, 2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value to round up.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The multiple of significance to round up to. If it is omitted, the default value of 1 is used. If it is set to zero, the function returns 0.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "CEILING_PRECISE",
        "longname": "ApiWorksheetFunction#CEILING_PRECISE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6188,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/CEILING_PRECISE.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the number of combinations for a given number of items.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The total number of items, a numeric value greater than or equal to 0.\n\t * @param {ApiRange | ApiName | number} arg2 - The number of items in each combination, a numeric value greater than or equal to 0 but less than the total number of items.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/COMBIN.js\n\t */",
        "description": "Returns the number of combinations for a given number of items.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.COMBIN(67, 7));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The total number of items, a numeric value greater than or equal to 0.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The number of items in each combination, a numeric value greater than or equal to 0 but less than the total number of items.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "COMBIN",
        "longname": "ApiWorksheetFunction#COMBIN",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6200,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/COMBIN.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the number of combinations with repetitions for a given number of items.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The total number of items, a numeric value greater than or equal to 0.\n\t * @param {ApiRange | ApiName | number} arg2 - The number of items in each combination, a numeric value greater than or equal to 0 but less than the total number of items.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/COMBINA.js\n\t */",
        "description": "Returns the number of combinations with repetitions for a given number of items.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.COMBINA(7, 2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The total number of items, a numeric value greater than or equal to 0.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The number of items in each combination, a numeric value greater than or equal to 0 but less than the total number of items.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "COMBINA",
        "longname": "ApiWorksheetFunction#COMBINA",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6212,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/COMBINA.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the cosine of an angle.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The angle in radians for which the cosine will be returned.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/COS.js\n\t */",
        "description": "Returns the cosine of an angle.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.COS(1.5));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The angle in radians for which the cosine will be returned.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "COS",
        "longname": "ApiWorksheetFunction#COS",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6223,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/COS.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the hyperbolic cosine of a number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - Any real number for which the hyperbolic cosine will be returned.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/COSH.js\n\t */",
        "description": "Returns the hyperbolic cosine of a number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.COSH(3));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "Any real number for which the hyperbolic cosine will be returned.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "COSH",
        "longname": "ApiWorksheetFunction#COSH",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6234,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/COSH.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the cotangent of an angle.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The angle in radians for which the cotangent will be returned.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/COT.js\n\t */",
        "description": "Returns the cotangent of an angle.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.COT(0.785398));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The angle in radians for which the cotangent will be returned.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "COT",
        "longname": "ApiWorksheetFunction#COT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6245,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/COT.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the hyperbolic cotangent of a number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The angle in radians for which the hyperbolic cotangent will be calculated. Its absolute value must be less than <em>2^27</em>.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/COTH.js\n\t */",
        "description": "Returns the hyperbolic cotangent of a number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.COTH(0.785398));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The angle in radians for which the hyperbolic cotangent will be calculated. Its absolute value must be less than <em>2^27</em>.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "COTH",
        "longname": "ApiWorksheetFunction#COTH",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6256,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/COTH.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the cosecant of an angle.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The angle in radians for which the cosecant will be returned.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/CSC.js\n\t */",
        "description": "Returns the cosecant of an angle.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.CSC(0.785398));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The angle in radians for which the cosecant will be returned.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "CSC",
        "longname": "ApiWorksheetFunction#CSC",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6267,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/CSC.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the hyperbolic cosecant of an angle.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The angle in radians for which the hyperbolic cosecant will be calculated. Its absolute value must be less than <em>2^27</em>.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/CSCH.js\n\t */",
        "description": "Returns the hyperbolic cosecant of an angle.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.CSCH(0.785398));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The angle in radians for which the hyperbolic cosecant will be calculated. Its absolute value must be less than <em>2^27</em>.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "CSCH",
        "longname": "ApiWorksheetFunction#CSCH",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6278,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/CSCH.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts a text representation of a number in a given base into a decimal number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | string} arg1 - The number to convert. The string lenght must be less than or equal to 255 characters.\n\t * @param {ApiRange | ApiName | number} arg2 - The base Radix of the number that is converting. An integer greater than or equal to 2 and less than or equal to 36.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/DECIMAL.js\n\t */",
        "description": "Converts a text representation of a number in a given base into a decimal number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.DECIMAL(101, 2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The number to convert. The string lenght must be less than or equal to 255 characters.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The base Radix of the number that is converting. An integer greater than or equal to 2 and less than or equal to 36.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "DECIMAL",
        "longname": "ApiWorksheetFunction#DECIMAL",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6290,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/DECIMAL.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts radians to degrees.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The angle in radians to convert.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/DEGREES.js\n\t */",
        "description": "Converts radians to degrees.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.DEGREES(1.5));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The angle in radians to convert.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "DEGREES",
        "longname": "ApiWorksheetFunction#DEGREES",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6301,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/DEGREES.js"
        ]
    },
    {
        "comment": "/**\n\t * Rounds the number up to the nearest multiple of significance. Negative numbers are rounded towards zero.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value to round up.\n\t * @param {ApiRange | ApiName | number} arg2 - The multiple of significance to round up to.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ECMA_CEILING.js\n\t */",
        "description": "Rounds the number up to the nearest multiple of significance. Negative numbers are rounded towards zero.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.ECMA_CEILING(1.567, 0.1));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value to round up.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The multiple of significance to round up to.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "ECMA_CEILING",
        "longname": "ApiWorksheetFunction#ECMA_CEILING",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6313,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ECMA_CEILING.js"
        ]
    },
    {
        "comment": "/**\n\t * Rounds a positive number up and negative number down to the nearest even integer.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value to round up.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/EVEN.js\n\t */",
        "description": "Rounds a positive number up and negative number down to the nearest even integer.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.EVEN(15.67));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value to round up.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "EVEN",
        "longname": "ApiWorksheetFunction#EVEN",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6324,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/EVEN.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the <b>e</b> constant raised to the power of a given number. The <b>e</b> constant is equal to <b>2.71828182845904</b>, the base of the natural logarithm.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The exponent applied to the base <b>e</b>.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/EXP.js\n\t */",
        "description": "Returns the <b>e</b> constant raised to the power of a given number. The <b>e</b> constant is equal to <b>2.71828182845904</b>, the base of the natural logarithm.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.EXP(5));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The exponent applied to the base <b>e</b>.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "EXP",
        "longname": "ApiWorksheetFunction#EXP",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6335,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/EXP.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the factorial of a number, which is equal to <em>1*2*3*...*</em> number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The nonnegative number for which the factorial will be calculated.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/FACT.js\n\t */",
        "description": "Returns the factorial of a number, which is equal to <em>1*2*3*...*</em> number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.FACT(123));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The nonnegative number for which the factorial will be calculated.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "FACT",
        "longname": "ApiWorksheetFunction#FACT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6346,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/FACT.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the double factorial of a number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value for which to return the double factorial.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/FACTDOUBLE.js\n\t */",
        "description": "Returns the double factorial of a number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.FACTDOUBLE(123));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value for which to return the double factorial.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "FACTDOUBLE",
        "longname": "ApiWorksheetFunction#FACTDOUBLE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6357,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/FACTDOUBLE.js"
        ]
    },
    {
        "comment": "/**\n\t * Rounds a number down to the nearest multiple of significance.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The numeric value to round down.\n\t * @param {ApiRange | ApiName | number} arg2 - The multiple of significance to round down to. The number to round down and the multiple of significance must have the same sign.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/FLOOR.js\n\t */",
        "description": "Rounds a number down to the nearest multiple of significance.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.FLOOR(5.786, 0.7));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The numeric value to round down.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The multiple of significance to round down to. The number to round down and the multiple of significance must have the same sign.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "FLOOR",
        "longname": "ApiWorksheetFunction#FLOOR",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6369,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/FLOOR.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a number that is rounded down to the nearest integer or to the nearest multiple of significance. The number is always rounded down regardless of its sign.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The numeric value to round down.\n\t * @param {?ApiRange | ?ApiName | ?number} arg2 - The multiple of significance to round down to. If it is omitted, the default value of 1 is used. If it is set to zero, the function returns 0.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/FLOOR_PRECISE.js\n\t */",
        "description": "Returns a number that is rounded down to the nearest integer or to the nearest multiple of significance. The number is always rounded down regardless of its sign.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.FLOOR_PRECISE(-6.7, 2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The numeric value to round down.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The multiple of significance to round down to. If it is omitted, the default value of 1 is used. If it is set to zero, the function returns 0.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "FLOOR_PRECISE",
        "longname": "ApiWorksheetFunction#FLOOR_PRECISE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6381,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/FLOOR_PRECISE.js"
        ]
    },
    {
        "comment": "/**\n\t * Rounds a number down, to the nearest integer or to the nearest multiple of significance.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The numeric value to round down.\n\t * @param {?ApiRange | ?ApiName | ?number} arg2 - The multiple of significance to round down to. If it is omitted, the default value of 1 is used.\n\t * @param {?ApiRange | ?ApiName | ?number} arg3 - Specifies if negative numbers are rounded towards or away from zero. If it is omitted or set to 0, negative numbers are rounded away from zero.\n\t * If any other numeric value is specified, negative numbers are rounded towards zero.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/FLOOR_MATH.js\n\t */",
        "description": "Rounds a number down, to the nearest integer or to the nearest multiple of significance.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.FLOOR_MATH(-5.5, 2, 1));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The numeric value to round down.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The multiple of significance to round down to. If it is omitted, the default value of 1 is used.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "Specifies if negative numbers are rounded towards or away from zero. If it is omitted or set to 0, negative numbers are rounded away from zero.\nIf any other numeric value is specified, negative numbers are rounded towards zero.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "FLOOR_MATH",
        "longname": "ApiWorksheetFunction#FLOOR_MATH",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6395,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/FLOOR_MATH.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the greatest common divisor.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} args - Up to 255 numeric values for which the greatest common divisor will be returned. The first argument is required, subsequent arguments are optional.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/GCD.js\n\t */",
        "description": "Returns the greatest common divisor.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.GCD(28, 16, 878, 800, 1650, 2000));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 numeric values for which the greatest common divisor will be returned. The first argument is required, subsequent arguments are optional.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GCD",
        "longname": "ApiWorksheetFunction#GCD",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6406,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/GCD.js"
        ]
    },
    {
        "comment": "/**\n\t * Rounds a number down to the nearest integer.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The real number to round down to an integer.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/INT.js\n\t */",
        "description": "Rounds a number down to the nearest integer.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.INT(2.3));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The real number to round down to an integer.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "INT",
        "longname": "ApiWorksheetFunction#INT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6417,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/INT.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a number that is rounded up to the nearest integer or to the nearest multiple of significance regardless of the sign of the number.\n\t * The number is always rounded up regardless of its sing.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The numeric value to round up.\n\t * @param {?ApiRange | ?ApiName | ?number} arg2 - The multiple of significance to round up to. If it is omitted, the default value of 1 is used. If it is set to zero, the function returns 0.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ISO_CEILING.js\n\t */",
        "description": "Returns a number that is rounded up to the nearest integer or to the nearest multiple of significance regardless of the sign of the number.\nThe number is always rounded up regardless of its sing.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.ISO_CEILING(-6.7, 2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The numeric value to round up.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The multiple of significance to round up to. If it is omitted, the default value of 1 is used. If it is set to zero, the function returns 0.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "ISO_CEILING",
        "longname": "ApiWorksheetFunction#ISO_CEILING",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6430,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ISO_CEILING.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the least common multiple.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} args - Up to 255 numeric values for which the least common multiple will be returned. The first argument is required, subsequent arguments are optional.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/LCM.js\n\t */",
        "description": "Returns the least common multiple.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.LCM(4, 6, 8, 8, 12, 24, 2, 1));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 numeric values for which the least common multiple will be returned. The first argument is required, subsequent arguments are optional.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "LCM",
        "longname": "ApiWorksheetFunction#LCM",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6441,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/LCM.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the natural logarithm of a number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The positive real number for which the natural logarithm will be returned.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/LN.js\n\t */",
        "description": "Returns the natural logarithm of a number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.LN(23));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The positive real number for which the natural logarithm will be returned.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "LN",
        "longname": "ApiWorksheetFunction#LN",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6452,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/LN.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the logarithm of a number to the specified base.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The positive real number for which the logarithm will be returned.\n\t * @param {?ApiRange | ?ApiName | ?number} arg2 - The logarithm base. If omitted, it is equal to 10.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/LOG.js\n\t */",
        "description": "Returns the logarithm of a number to the specified base.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.LOG(56, 5));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The positive real number for which the logarithm will be returned.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The logarithm base. If omitted, it is equal to 10.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "LOG",
        "longname": "ApiWorksheetFunction#LOG",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6464,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/LOG.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the base-10 logarithm of a number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The positive real number for which the base-10 logarithm will be returned.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/LOG10.js\n\t */",
        "description": "Returns the base-10 logarithm of a number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.LOG10(56));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The positive real number for which the base-10 logarithm will be returned.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "LOG10",
        "longname": "ApiWorksheetFunction#LOG10",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6475,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/LOG10.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the remainder after a number is divided by a divisor.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The number to divide and find the remainder.\n\t * @param {ApiRange | ApiName | number} arg2 - The number to divide by.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/MOD.js\n\t */",
        "description": "Returns the remainder after a number is divided by a divisor.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.MOD(65, 7));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The number to divide and find the remainder.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The number to divide by.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "MOD",
        "longname": "ApiWorksheetFunction#MOD",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6521,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/MOD.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a number rounded to the desired multiple.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value to round.\n\t * @param {ApiRange | ApiName | number} arg2 - The multiple to round the number to.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/MROUND.js\n\t */",
        "description": "Returns a number rounded to the desired multiple.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.MROUND(14.35, 0.4));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value to round.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The multiple to round the number to.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "MROUND",
        "longname": "ApiWorksheetFunction#MROUND",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6533,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/MROUND.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the ratio of the factorial of a sum of numbers to the product of factorials.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} args - Up to 255 numeric values for which the multinomial will be returned. The first argument is required, subsequent arguments are optional.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/MULTINOMIAL.js\n\t */",
        "description": "Returns the ratio of the factorial of a sum of numbers to the product of factorials.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.MULTINOMIAL(2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 5));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 numeric values for which the multinomial will be returned. The first argument is required, subsequent arguments are optional.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "MULTINOMIAL",
        "longname": "ApiWorksheetFunction#MULTINOMIAL",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6544,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/MULTINOMIAL.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the unit matrix for the specified dimension.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - An integer specifying the dimension of the unit matrix to be returned.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/MUNIT.js\n\t */",
        "description": "Returns the unit matrix for the specified dimension.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.MUNIT(3));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "An integer specifying the dimension of the unit matrix to be returned.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "MUNIT",
        "longname": "ApiWorksheetFunction#MUNIT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6555,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/MUNIT.js"
        ]
    },
    {
        "comment": "/**\n\t * Rounds a positive number up and negative number down to the nearest odd integer.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value to round.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ODD.js\n\t */",
        "description": "Rounds a positive number up and negative number down to the nearest odd integer.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.ODD(7.675));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value to round.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "ODD",
        "longname": "ApiWorksheetFunction#ODD",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6566,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ODD.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the mathematical constant <b>pi</b>, equal to <b>3.14159265358979</b>, accurate to 15 digits.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/PI.js\n\t */",
        "description": "Returns the mathematical constant <b>pi</b>, equal to <b>3.14159265358979</b>, accurate to 15 digits.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.PI());\n```",
        "memberof": "ApiWorksheetFunction",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "PI",
        "longname": "ApiWorksheetFunction#PI",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6576,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/PI.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the result of a number raised to a power.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The base number. It can be any real number.\n\t * @param {ApiRange | ApiName | number} arg2 - The exponent to which the base number is raised.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/POWER.js\n\t */",
        "description": "Returns the result of a number raised to a power.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.POWER(23, 4));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The base number. It can be any real number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The exponent to which the base number is raised.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "POWER",
        "longname": "ApiWorksheetFunction#POWER",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6588,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/POWER.js"
        ]
    },
    {
        "comment": "/**\n\t * Multiplies all the numbers given as arguments.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number | ApiRange | number[]} args - Up to 255 numeric values that will be multiplied. The first argument is required, subsequent arguments are optional.\n\t * Arguments can be numbers, ranges, or arrays of numbers.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/PRODUCT.js\n\t */",
        "description": "Multiplies all the numbers given as arguments.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.PRODUCT(65, 34, 165, 6, 9, 54));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "number",
                        "ApiRange",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 numeric values that will be multiplied. The first argument is required, subsequent arguments are optional.\nArguments can be numbers, ranges, or arrays of numbers.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "PRODUCT",
        "longname": "ApiWorksheetFunction#PRODUCT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6600,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/PRODUCT.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the integer portion of a division.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The dividend, a numeric value.\n\t * @param {ApiRange | ApiName | number} arg2 - The divisor, a numeric value.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/QUOTIENT.js\n\t */",
        "description": "Returns the integer portion of a division.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.QUOTIENT(1698, 30));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The dividend, a numeric value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The divisor, a numeric value.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "QUOTIENT",
        "longname": "ApiWorksheetFunction#QUOTIENT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6612,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/QUOTIENT.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts degrees to radians.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - An angle in degrees to convert.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/RADIANS.js\n\t */",
        "description": "Converts degrees to radians.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.RADIANS(90));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "An angle in degrees to convert.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "RADIANS",
        "longname": "ApiWorksheetFunction#RADIANS",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6623,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/RADIANS.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a random number greater than or equal to 0 and less than 1, evenly distributed (changes on recalculation).\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/RAND.js\n\t */",
        "description": "Returns a random number greater than or equal to 0 and less than 1, evenly distributed (changes on recalculation).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.RAND());\n```",
        "memberof": "ApiWorksheetFunction",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "RAND",
        "longname": "ApiWorksheetFunction#RAND",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6633,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/RAND.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a random number between the numbers specified.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The smallest integer value.\n\t * @param {ApiRange | ApiName | number} arg2 - The largest integer value.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/RANDBETWEEN.js\n\t */",
        "description": "Returns a random number between the numbers specified.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.RANDBETWEEN(-1, 10));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The smallest integer value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The largest integer value.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "RANDBETWEEN",
        "longname": "ApiWorksheetFunction#RANDBETWEEN",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6645,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/RANDBETWEEN.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts an arabic numeral to a roman numeral in the string format.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A numeric value greater than or equal to 1 and less than 3999.\n\t * @param {?ApiRange | ?ApiName | ?number} arg2 - A roman numeral type: <b>0</b> - classic, <b>1</b> - more concise, <b>2</b> - more concise, <b>3</b> - more concise, <b>4</b> - simplified.\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ROMAN.js\n\t */",
        "description": "Converts an arabic numeral to a roman numeral in the string format.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.ROMAN(1250, 4));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A numeric value greater than or equal to 1 and less than 3999.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "A roman numeral type: <b>0</b> - classic, <b>1</b> - more concise, <b>2</b> - more concise, <b>3</b> - more concise, <b>4</b> - simplified.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "ROMAN",
        "longname": "ApiWorksheetFunction#ROMAN",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6657,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ROMAN.js"
        ]
    },
    {
        "comment": "/**\n\t * Rounds a number to a specified number of digits.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The number to round.\n\t * @param {ApiRange | ApiName | number} arg2 - The number of digits to round to. If this argument is negative, the number will be rounded to the left of the decimal point.\n\t * If it is equal to zero, the number will be rounded to the nearest integer.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ROUND.js\n\t */",
        "description": "Rounds a number to a specified number of digits.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.ROUND(3.456, 2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The number to round.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The number of digits to round to. If this argument is negative, the number will be rounded to the left of the decimal point.\nIf it is equal to zero, the number will be rounded to the nearest integer.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "ROUND",
        "longname": "ApiWorksheetFunction#ROUND",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6670,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ROUND.js"
        ]
    },
    {
        "comment": "/**\n\t * Rounds a number down, toward zero.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - Any real number that will be rounded down.\n\t * @param {ApiRange | ApiName | number} arg2 - The number of digits to round to. If this argument is negative, the number will be rounded to the left of the decimal point.\n\t * If it is equal to zero, the number will be rounded to the nearest integer.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ROUNDDOWN.js\n\t */",
        "description": "Rounds a number down, toward zero.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.ROUNDDOWN(3.456, 0));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "Any real number that will be rounded down.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The number of digits to round to. If this argument is negative, the number will be rounded to the left of the decimal point.\nIf it is equal to zero, the number will be rounded to the nearest integer.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "ROUNDDOWN",
        "longname": "ApiWorksheetFunction#ROUNDDOWN",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6683,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ROUNDDOWN.js"
        ]
    },
    {
        "comment": "/**\n\t * Rounds a number up, away from zero.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - Any real number that will be rounded up.\n\t * @param {ApiRange | ApiName | number} arg2 - The number of digits to round to. If this argument is negative, the number will be rounded to the left of the decimal point.\n\t * If it is equal to zero, the number will be rounded to the nearest integer.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ROUNDUP.js\n\t */",
        "description": "Rounds a number up, away from zero.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.ROUNDUP(3.456, 0));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "Any real number that will be rounded up.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The number of digits to round to. If this argument is negative, the number will be rounded to the left of the decimal point.\nIf it is equal to zero, the number will be rounded to the nearest integer.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "ROUNDUP",
        "longname": "ApiWorksheetFunction#ROUNDUP",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6696,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ROUNDUP.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the secant of an angle.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The angle in radians for which the secant will be returned.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/SEC.js\n\t */",
        "description": "Returns the secant of an angle.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.SEC(0.785398));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The angle in radians for which the secant will be returned.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "SEC",
        "longname": "ApiWorksheetFunction#SEC",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6707,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/SEC.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the hyperbolic secant of an angle.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The angle in radians for which the hyperbolic secant will be returned.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/SECH.js\n\t */",
        "description": "Returns the hyperbolic secant of an angle.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.SECH(0.785398));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The angle in radians for which the hyperbolic secant will be returned.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "SECH",
        "longname": "ApiWorksheetFunction#SECH",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6718,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/SECH.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the sum of a power series based on the formula.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The input value to the power series.\n\t * @param {ApiRange | ApiName | number} arg2 - The initial power to which x will be raised.\n\t * @param {ApiRange | ApiName | number} arg3 - The step by which to increase n for each term in the series.\n\t * @param {ApiRange | ApiName | number} arg4 - A set of coefficients by which each successive power of x is multiplied.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/SERIESSUM.js\n\t */",
        "description": "Returns the sum of a power series based on the formula.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.SERIESSUM(5, 2, 1, 3));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The input value to the power series.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The initial power to which x will be raised.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The step by which to increase n for each term in the series.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "A set of coefficients by which each successive power of x is multiplied.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "SERIESSUM",
        "longname": "ApiWorksheetFunction#SERIESSUM",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6732,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/SERIESSUM.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the sign of a number: <b>1</b> if the number is positive, <b>0</b> if the number is zero, or <b>-1</b> if the number is negative.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - Any real number.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/SIGN.js\n\t */",
        "description": "Returns the sign of a number: <b>1</b> if the number is positive, <b>0</b> if the number is zero, or <b>-1</b> if the number is negative.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.SIGN(12));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "Any real number.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "SIGN",
        "longname": "ApiWorksheetFunction#SIGN",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6743,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/SIGN.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the sine of an angle.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The angle in radians for which the sine will be returned. If your argument is in degrees, multiply it by <em>PI()/180</em>.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/SIN.js\n\t */",
        "description": "Returns the sine of an angle.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.SIN(0.5));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The angle in radians for which the sine will be returned. If your argument is in degrees, multiply it by <em>PI()/180</em>.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "SIN",
        "longname": "ApiWorksheetFunction#SIN",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6754,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/SIN.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the hyperbolic sine of a number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - Any real number for which the hyperbolic sine will be returned.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/SINH.js\n\t */",
        "description": "Returns the hyperbolic sine of a number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.SINH(4));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "Any real number for which the hyperbolic sine will be returned.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "SINH",
        "longname": "ApiWorksheetFunction#SINH",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6765,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/SINH.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the square root of a number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The number for which the square root will be returned.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/SQRT.js\n\t */",
        "description": "Returns the square root of a number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.SQRT(100));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The number for which the square root will be returned.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "SQRT",
        "longname": "ApiWorksheetFunction#SQRT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6776,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/SQRT.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the square root of (number * pi).\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The number by which pi is multiplied.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/SQRTPI.js\n\t */",
        "description": "Returns the square root of (number * pi).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.SQRTPI(5));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The number by which pi is multiplied.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "SQRTPI",
        "longname": "ApiWorksheetFunction#SQRTPI",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6787,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/SQRTPI.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a subtotal in a list or database.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - A numeric value that specifies which function to use for the subtotal: <b>1 (101)</b> - AVERAGE, <b>2 (102)</b> - COUNT,\n\t * <b>3 (103)</b> - COUNTA, <b>4 (104)</b> - MAX, <b>5 (105)</b> - MIN,\n\t * <b>6 (106)</b> - PRODUCT, <b>7 (107)</b> - STDEV, <b>8 (108)</b> - STDEVP, <b>9 (109)</b> - SUM, <b>10 (110)</b> - VAR, <b>11 (111)</b> - VARP.\n\t * 1-11 includes manually-hidden rows, while 101-111 excludes them;\n\t * filtered-out cells are always excluded.\n\t * @param {ApiRange | ApiName} args - Up to 255 ranges containing the values for which the subtotal will be returned. The first argument is required, subsequent arguments are optional.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/SUBTOTAL.js\n\t */",
        "description": "Returns a subtotal in a list or database.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.SUBTOTAL(9, 10, 30, 50, 5));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A numeric value that specifies which function to use for the subtotal: <b>1 (101)</b> - AVERAGE, <b>2 (102)</b> - COUNT,\n<b>3 (103)</b> - COUNTA, <b>4 (104)</b> - MAX, <b>5 (105)</b> - MIN,\n<b>6 (106)</b> - PRODUCT, <b>7 (107)</b> - STDEV, <b>8 (108)</b> - STDEVP, <b>9 (109)</b> - SUM, <b>10 (110)</b> - VAR, <b>11 (111)</b> - VARP.\n1-11 includes manually-hidden rows, while 101-111 excludes them;\nfiltered-out cells are always excluded.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 ranges containing the values for which the subtotal will be returned. The first argument is required, subsequent arguments are optional.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "SUBTOTAL",
        "longname": "ApiWorksheetFunction#SUBTOTAL",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6804,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/SUBTOTAL.js"
        ]
    },
    {
        "comment": "/**\n\t * Adds all the numbers in a range of cells.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | string | number | boolean | array} args - Up to 255 numeric values to add. The first argument is required, subsequent arguments are optional.\n\t * Arguments can be numbers, logical values, text representations of numbers, ranges, or arrays.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/SUM.js\n\t */",
        "description": "Adds all the numbers in a range of cells.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.SUM(145, 37, 236, 69, 567, 92));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "string",
                        "number",
                        "boolean",
                        "array"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            },
                            {
                                "type": "NameExpression",
                                "name": "array"
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 numeric values to add. The first argument is required, subsequent arguments are optional.\nArguments can be numbers, logical values, text representations of numbers, ranges, or arrays.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "SUM",
        "longname": "ApiWorksheetFunction#SUM",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6816,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/SUM.js"
        ]
    },
    {
        "comment": "/**\n\t * Adds the cells specified by a given condition or criteria.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName} arg1 - The range of cells to be evaluated.\n\t * @param {ApiRange | ApiName | number | string} arg2 - The condition or criteria in the form of a number, expression, or text that defines which cells will be added.\n\t * @param {?ApiRange | ?ApiName} arg3 - The range to sum. If omitted, the cells in range are used.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/SUMIF.js\n\t */",
        "description": "Adds the cells specified by a given condition or criteria.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet product = [\"Product\", \"Apple\", \"range\", \"Banana\"]\nlet totalValue = [\"Total Value\", \"$736.00\", \"$924.00\", \"$888.00\"];\n\nfor (let i = 0; i < product.length; i++) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(product[i]);\n}\nfor (let n = 0; n < totalValue.length; n++) {\n    worksheet.GetRange(\"B\" + (n + 1)).SetValue(totalValue[n]);\n}\n\nlet func = Api.GetWorksheetFunction();\nlet range = worksheet.GetRange(\"B2:B4\");\nworksheet.GetRange(\"C4\").SetValue(func.SUMIF(range, \">800\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The range of cells to be evaluated.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The condition or criteria in the form of a number, expression, or text that defines which cells will be added.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The range to sum. If omitted, the cells in range are used.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "SUMIF",
        "longname": "ApiWorksheetFunction#SUMIF",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6829,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/SUMIF.js"
        ]
    },
    {
        "comment": "/**\n\t * Adds the cells specified by a given set of conditions or criteria.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName} arg1 - The range of cells to be evaluated.\n\t * @param {ApiRange | ApiName | number | string} arg2 - The first condition or criteria in the form of a number, expression, or text that defines which cells will be added.\n\t * @param {?ApiRange | ?ApiName} arg3 - The first range to sum. If omitted, the cells in range are used.\n\t * @param {ApiRange | ApiName | number | string} arg4 - Up to 127 additional conditions or criteria in the form of a number, expression, or text that defines which cells will be added.\n\t * These arguments are optional.\n\t * @param {?ApiRange | ?ApiName} arg5 - Up to 127 actual ranges to be used to be added. If omitted, the cells in the range are used. These arguments are optional.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/SUMIFS.js\n\t */",
        "description": "Adds the cells specified by a given set of conditions or criteria.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet year = [2016, 2016, 2016, 2017, 2017, 2017];\nlet products = [\"Apples\", \"Red apples\", \"ranges\", \"Green apples\", \"Apples\", \"Bananas\"];\nlet income = [\"$100.00\", \"$150.00\", \"$250.00\", \"$50.00\", \"$150.00\", \"$200.00\"];\n\nfor (let i = 0; i < year.length; i++) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(year[i]);\n}\nfor (let j = 0; j < products.length; j++) {\n    worksheet.GetRange(\"B\" + (j + 1)).SetValue(products[j]);\n}\nfor (let n = 0; n < income.length; n++) {\n    worksheet.GetRange(\"C\" + (n + 1)).SetValue(income[n]);\n}\n\nlet range1 = worksheet.GetRange(\"C1:C6\");\nlet range2 = worksheet.GetRange(\"B1:B6\");\nlet range3 = worksheet.GetRange(\"A1:A6\");\nworksheet.GetRange(\"D6\").SetValue(func.SUMIFS(range1, range2, \"*Apples\", range3, 2016));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The range of cells to be evaluated.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The first condition or criteria in the form of a number, expression, or text that defines which cells will be added.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The first range to sum. If omitted, the cells in range are used.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "Up to 127 additional conditions or criteria in the form of a number, expression, or text that defines which cells will be added.\nThese arguments are optional.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg5",
                "description": "Up to 127 actual ranges to be used to be added. If omitted, the cells in the range are used. These arguments are optional.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "SUMIFS",
        "longname": "ApiWorksheetFunction#SUMIFS",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6845,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/SUMIFS.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the sum of the squares of the arguments.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | number | string | boolean | ApiName | array} args - Up to 255 numeric values for which the sum of the squares will be calculated.\n\t * The first argument is required, subsequent arguments are optional.\n\t * The arguments can be numbers, names, logical values or text representations of numbers, ranges of cells that contain numbers, or arrays.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/SUMSQ.js\n\t */",
        "description": "Returns the sum of the squares of the arguments.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.SUMSQ(1, 0, 0, 0, 4, 1, 0, 0, 2, 3, 6, 7, 6, 8, 10, 12));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "number",
                        "string",
                        "boolean",
                        "ApiName",
                        "array"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "array"
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 255 numeric values for which the sum of the squares will be calculated.\nThe first argument is required, subsequent arguments are optional.\nThe arguments can be numbers, names, logical values or text representations of numbers, ranges of cells that contain numbers, or arrays.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "SUMSQ",
        "longname": "ApiWorksheetFunction#SUMSQ",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6868,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/SUMSQ.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the tangent of an angle.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The angle in radians for which the tangent will be returned. If the argument is in degrees, multiply it by <em>PI()/180</em>.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/TAN.js\n\t */",
        "description": "Returns the tangent of an angle.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.TAN(0.5));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The angle in radians for which the tangent will be returned. If the argument is in degrees, multiply it by <em>PI()/180</em>.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "TAN",
        "longname": "ApiWorksheetFunction#TAN",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6915,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/TAN.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the hyperbolic tangent of a number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - Any real number for which the hyperbolic tangent will be returned.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/TANH.js\n\t */",
        "description": "Returns the hyperbolic tangent of a number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.TANH(6));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "Any real number for which the hyperbolic tangent will be returned.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "TANH",
        "longname": "ApiWorksheetFunction#TANH",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6926,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/TANH.js"
        ]
    },
    {
        "comment": "/**\n\t * Truncates a number to an integer by removing the decimal, or fractional, part of the number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The number which will be truncated.\n\t * @param {?ApiRange | ?ApiName | ?number} arg2 - A number specifying the precision of the truncation. If this argument is omitted, it is equal to 0 (zero).\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/TRUNC.js\n\t */",
        "description": "Truncates a number to an integer by removing the decimal, or fractional, part of the number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.TRUNC(3.14159265, 5));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The number which will be truncated.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "A number specifying the precision of the truncation. If this argument is omitted, it is equal to 0 (zero).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "TRUNC",
        "longname": "ApiWorksheetFunction#TRUNC",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6938,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/TRUNC.js"
        ]
    },
    {
        "comment": "/**\n\t * Chooses a value or action to perform from a list of values, based on an index number.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The position of the value in the list of values, a numeric value greater than or equal to 1 but less than the number of values in the list of values.\n\t * @param {number | string | ApiRange | ApiName} args - Up to 254 values or the selected range of cells to analyze.\n\t * The first argument is required, subsequent arguments are optional. Arguments can be numbers, ranges, names, or text strings.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/CHOOSE.js\n\t */",
        "description": "Chooses a value or action to perform from a list of values, based on an index number.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.CHOOSE(2, 3, 4, 89, 76, 0));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The position of the value in the list of values, a numeric value greater than or equal to 1 but less than the number of values in the list of values.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number",
                        "string",
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "Up to 254 values or the selected range of cells to analyze.\nThe first argument is required, subsequent arguments are optional. Arguments can be numbers, ranges, names, or text strings.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "CHOOSE",
        "longname": "ApiWorksheetFunction#CHOOSE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6951,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/CHOOSE.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the number of columns in the cell range.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number[]} arg1 - A range or array of cells for which the number of columns will be returned.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/COLUMNS.js\n\t */",
        "description": "Returns the number of columns in the cell range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet column1 = [13, 14, 15];\nlet column2 = [23, 24, 25];\n\nfor (let i = 0; i < column1.length; i++) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(column1[i]);\n}\nfor (let j = 0; j < column2.length; j++) {\n    worksheet.GetRange(\"B\" + (j + 1)).SetValue(column2[j]);\n}\n\nlet range = worksheet.GetRange(\"A1:B3\");\nworksheet.GetRange(\"B4\").SetValue(func.COLUMNS(range));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "Array.<number>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "number",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A range or array of cells for which the number of columns will be returned.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "COLUMNS",
        "longname": "ApiWorksheetFunction#COLUMNS",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6962,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/COLUMNS.js"
        ]
    },
    {
        "comment": "/**\n\t * Looks for a value in the top row of a table or array of values and returns the value in the same column from the specified row.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number | string | ApiRange | ApiName} arg1 - The value to be found in the first row of the table and can be a value, a reference, or a text string.\n\t * @param {ApiRange | ApiName} arg2 - A table of text, numbers, or logical values in which data is looked up. The data is sorted in ascending order.\n\t * This argument can be a range of cells or a range name.\n\t * @param {ApiRange | ApiName | number} arg3 - The row number in data table from which the matching value should be returned. The first row of values in the table is row 1.\n\t * @param {?ApiRange | ?ApiName | ?boolean} arg4 - A logical value which specifies whether to find the closest match in the top row (sorted in ascending order) (<b>true</b> or omitted)\n\t * or find an exact match (<b>false</b>).\n\t * @returns {number | string}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/HLOOKUP.js\n\t */",
        "description": "Looks for a value in the top row of a table or array of values and returns the value in the same column from the specified row.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ids = [\"ID\", 1, 2, 3, 4, 5];\nlet clients = [\"Client\", \"John Smith\", \"Ella Tompson\", \"Mary Shinoda\", \"Lily-Ann Bates\", \"Clara Ray\"];\nlet phones = [\"Phone number\", \"12054097166\", \"13343943678\", \"12568542099\", \"12057032298\", \"12052914781\"];\n\nfor (let i = 0; i < ids.length; i++) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(ids[i]);\n}\nfor (let j = 0; j < clients.length; j++) {\n    worksheet.GetRange(\"B\" + (j + 1)).SetValue(clients[j]);\n}\nfor (let n = 0; n < phones.length; n++) {\n    worksheet.GetRange(\"C\" + (n + 1)).SetValue(phones[n]);\n}\n\nworksheet.GetRange(\"E1\").SetValue(\"ID\");\nworksheet.GetRange(\"E2\").SetValue(3);\nworksheet.GetRange(\"F1\").SetValue(\"Phone number\");\nlet range = worksheet.GetRange(\"A1:C5\");\nworksheet.GetRange(\"F2\").SetValue(func.HLOOKUP(\"Phone number\", range, 3+1));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "number",
                        "string",
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value to be found in the first row of the table and can be a value, a reference, or a text string.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "A table of text, numbers, or logical values in which data is looked up. The data is sorted in ascending order.\nThis argument can be a range of cells or a range name.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The row number in data table from which the matching value should be returned. The first row of values in the table is row 1.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "A logical value which specifies whether to find the closest match in the top row (sorted in ascending order) (<b>true</b> or omitted)\nor find an exact match (<b>false</b>).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "HLOOKUP",
        "longname": "ApiWorksheetFunction#HLOOKUP",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6978,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/HLOOKUP.js"
        ]
    },
    {
        "comment": "/**\n\t * Creates a shortcut that jumps to another location in the current workbook, or opens a document stored on your hard drive, a network server, or on the Internet.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string | ApiRange | ApiName} arg1 - The text giving the path and file name to the document to be opened, a hard drive location, UNC address, or URL path.\n\t * @param {?string | ?ApiRange | ?number | ?ApiName} arg2 - Text or a number that is displayed in the cell. If omitted, the cell displays the link location text.\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/HYPERLINK.js\n\t */",
        "description": "Creates a shortcut that jumps to another location in the current workbook, or opens a document stored on your hard drive, a network server, or on the Internet.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.HYPERLINK(\"https://example.com/files/example.xlsx\", \"Click here\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The text giving the path and file name to the document to be opened, a hard drive location, UNC address, or URL path.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string",
                        "ApiRange",
                        "number",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "string",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "Text or a number that is displayed in the cell. If omitted, the cell displays the link location text.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "HYPERLINK",
        "longname": "ApiWorksheetFunction#HYPERLINK",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 6990,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/HYPERLINK.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a value or reference of the cell at the intersection of a particular row and column, in a given range.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | array} arg1 - A range of cells or an array constant.\n\t * @param {ApiRange | ApiName | number} arg2 - The row in the range from which to return a value. If omitted, the column number is required.\n\t * @param {?ApiRange | ?ApiName | ?number} arg3 - The column in the range from which to return a value. If omitted, the row number is required.\n\t * @param {?ApiRange | ?ApiName | ?number} arg4 - An area to use in case the range contains several ranges. If it is omitted, the function will assume argument to be 1.\n\t * @returns {number | string}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/INDEX.js\n\t */",
        "description": "Returns a value or reference of the cell at the intersection of a particular row and column, in a given range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ids = [\"ID\", 1, 2, 3, 4, 5];\nlet clients = [\"Client\", \"John Smith\", \"Ella Tompson\", \"Mary Shinoda\", \"Lily-Ann Bates\", \"Clara Ray\"];\nlet phones = [\"Phone number\", \"12054097166\", \"13343943678\", \"12568542099\", \"12057032298\", \"12052914781\"];\n\nfor (let i = 0; i < ids.length; i++) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(ids[i]);\n}\nfor (let j = 0; j < clients.length; j++) {\n    worksheet.GetRange(\"B\" + (j + 1)).SetValue(clients[j]);\n}\nfor (let n = 0; n < phones.length; n++) {\n    worksheet.GetRange(\"C\" + (n + 1)).SetValue(phones[n]);\n}\n\nlet range = worksheet.GetRange(\"A1:C5\");\nworksheet.GetRange(\"E2\").SetValue(func.INDEX(range, 3, 2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "array"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "array"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A range of cells or an array constant.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The row in the range from which to return a value. If omitted, the column number is required.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The column in the range from which to return a value. If omitted, the row number is required.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "An area to use in case the range contains several ranges. If it is omitted, the function will assume argument to be 1.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "INDEX",
        "longname": "ApiWorksheetFunction#INDEX",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7004,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/INDEX.js"
        ]
    },
    {
        "comment": "/**\n\t * Looks up a value either from a one-row or one-column range. Provided for backwards compatibility.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number | string | boolean | ApiRange | ApiName} arg1 - A value that is searched for in the first vector. It can be a number, text, a logical value, or a name or reference to a value.\n\t * @param {ApiRange | ApiName} arg2 - A range that contains only one row or one column of text, numbers, or logical values, placed in ascending order.\n\t * @param {?ApiRange | ?ApiName} arg3 - A range that contains only one row or column. It must be the same size as the first vector.\n\t * @returns {number | string | boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/LOOKUP.js\n\t */",
        "description": "Looks up a value either from a one-row or one-column range. Provided for backwards compatibility.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ids = [\"ID\", 1, 2, 3, 4, 5];\nlet clients = [\"Client\", \"John Smith\", \"Ella Tompson\", \"Mary Shinoda\", \"Lily-Ann Bates\", \"Clara Ray\"];\nlet phones = [\"Phone number\", \"12054097166\", \"13343943678\", \"12568542099\", \"12057032298\", \"12052914781\"];\n\nfor (let i = 0; i < ids.length; i++) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(ids[i]);\n}\nfor (let j = 0; j < clients.length; j++) {\n    worksheet.GetRange(\"B\" + (j + 1)).SetValue(clients[j]);\n}\nfor (let n = 0; n < phones.length; n++) {\n    worksheet.GetRange(\"C\" + (n + 1)).SetValue(phones[n]);\n}\n\nworksheet.GetRange(\"E1\").SetValue(\"Name\");\nworksheet.GetRange(\"E2\").SetValue(\"Ella Tompson\");\nworksheet.GetRange(\"F1\").SetValue(\"Phone number\");\nlet range1 = worksheet.GetRange(\"B2:B5\");\nlet range2 = worksheet.GetRange(\"C2:C5\");\nworksheet.GetRange(\"F2\").SetValue(func.LOOKUP(\"Ella Tompson\", range1, range2));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "number",
                        "string",
                        "boolean",
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A value that is searched for in the first vector. It can be a number, text, a logical value, or a name or reference to a value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "A range that contains only one row or one column of text, numbers, or logical values, placed in ascending order.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "A range that contains only one row or column. It must be the same size as the first vector.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number",
                        "string",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "LOOKUP",
        "longname": "ApiWorksheetFunction#LOOKUP",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7017,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/LOOKUP.js"
        ]
    },
    {
        "comment": "/**\n\t * The match type.\n\t * * <b>-1</b> - The values must be sorted in descending order. If the exact match is not found, the function will return the smallest value that is greater than the searched value.\n\t * * <b>0</b> - The values can be sorted in any order. If the exact match is not found, the function will return the <em>#N/A</em> error.\n\t * * <b>1</b> (or omitted) - The values must be sorted in ascending order. If the exact match is not found, the function will return the largest value that is less than the searched value.\n\t * @typedef {(\"-1\" | \"0\" | \"1\")} MatchType\n\t * */",
        "description": "The match type.\n* <b>-1</b> - The values must be sorted in descending order. If the exact match is not found, the function will return the smallest value that is greater than the searched value.\n* <b>0</b> - The values can be sorted in any order. If the exact match is not found, the function will return the <em>#N/A</em> error.\n* <b>1</b> (or omitted) - The values must be sorted in ascending order. If the exact match is not found, the function will return the largest value that is less than the searched value.",
        "name": "MatchType",
        "longname": "MatchType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 7021,
            "columnno": 1
        },
        "properties": null,
        "see": null,
        "type": {
            "names": [
                "\"-1\"",
                "\"0\"",
                "\"1\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"-1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"0\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"1\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Returns the relative position of an item in a range that matches the specified value in the specified order.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number | string | boolean | ApiRange | ApiName} arg1 - The value to be matched in the range. It can be a number, text, or logical value, or a reference to one of these.\n\t * @param {ApiRange | ApiName | array} arg2 - A contiguous range of cells or an array containing possible lookup values.\n\t * @param {?ApiRange | ?ApiName | ?number} arg3 - A number 1, 0, or -1 indicating which value to return.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/MATCH.js\n\t */",
        "description": "Returns the relative position of an item in a range that matches the specified value in the specified order.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ids = [\"ID\", 1, 2, 3, 4, 5];\nlet clients = [\"Client\", \"John Smith\", \"Ella Tompson\", \"Mary Shinoda\", \"Lily-Ann Bates\", \"Clara Ray\"];\nlet phones = [\"Phone number\", \"12054097166\", \"13343943678\", \"12568542099\", \"12057032298\", \"12052914781\"];\n\nfor (let i = 0; i < ids.length; i++) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(ids[i]);\n}\nfor (let j = 0; j < clients.length; j++) {\n    worksheet.GetRange(\"B\" + (j + 1)).SetValue(clients[j]);\n}\nfor (let n = 0; n < phones.length; n++) {\n    worksheet.GetRange(\"C\" + (n + 1)).SetValue(phones[n]);\n}\n\nlet range = worksheet.GetRange(\"B1:B5\");\nworksheet.GetRange(\"D6\").SetValue(func.MATCH(\"Ella Tompson\", range, 0));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "number",
                        "string",
                        "boolean",
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value to be matched in the range. It can be a number, text, or logical value, or a reference to one of these.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "array"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "array"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "A contiguous range of cells or an array containing possible lookup values.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "A number 1, 0, or -1 indicating which value to return.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "MATCH",
        "longname": "ApiWorksheetFunction#MATCH",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7039,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/MATCH.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the number of rows in a range.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | array} arg1 - A range of cells or an array for which the number of rows will be returned.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ROWS.js\n\t */",
        "description": "Returns the number of rows in a range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet column1 = [13, 14, 15];\nlet column2 = [23, 24, 25];\n\nfor (let i = 0; i < column1.length; i++) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(column1[i]);\n}\nfor (let j = 0; j < column2.length; j++) {\n    worksheet.GetRange(\"B\" + (j + 1)).SetValue(column2[j]);\n}\n\nlet range = worksheet.GetRange(\"A1:B3\");\nworksheet.GetRange(\"C3\").SetValue(func.ROWS(range));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "array"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "array"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A range of cells or an array for which the number of rows will be returned.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "ROWS",
        "longname": "ApiWorksheetFunction#ROWS",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7050,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ROWS.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts a vertical range of cells to a horizontal range, or vice versa.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | array} arg1 - A range of cells on a worksheet or an array that will be transposed.\n\t * @returns {ApiRange}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/TRANSPOSE.js\n\t */",
        "description": "Converts a vertical range of cells to a horizontal range, or vice versa.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(\"Ann\");\nworksheet.GetRange(\"A2\").SetValue(\"Bob\");\nworksheet.GetRange(\"B1\").SetValue(\"Apples\");\nworksheet.GetRange(\"B2\").SetValue(\"ranges\");\nlet range = worksheet.GetRange(\"A1:B2\");\nworksheet.GetRange(\"A4:B5\").SetValue(func.TRANSPOSE(range));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "array"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "array"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A range of cells on a worksheet or an array that will be transposed.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                }
            }
        ],
        "name": "TRANSPOSE",
        "longname": "ApiWorksheetFunction#TRANSPOSE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7061,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/TRANSPOSE.js"
        ]
    },
    {
        "comment": "/**\n\t * Looks for a value in the leftmost column of a table and then returns a value in the same row from the specified column. By default, the table must be sorted in an ascending order.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number | string | ApiRange | ApiName} arg1 - The value to be found in the first column of the table. It can be a value, a reference, or a text string.\n\t * @param {ApiRange | ApiName} arg2 - A table of text, numbers, or logical values, in which data is retrieved. It can be a range of cells.\n\t * @param {ApiRange | ApiName | number} arg3 - The column number in the data table from which the matching value should be returned. The first column of values in the table is column 1.\n\t * @param {?ApiRange | ?ApiName | ?boolean} arg4 - A logical value that specifies whether to find the closest match in the first column (sorted in ascending order) (<b>true</b> or omitted)\n\t * or find an exact match (<b>false</b>).\n\t * @returns {number | string}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/VLOOKUP.js\n\t */",
        "description": "Looks for a value in the leftmost column of a table and then returns a value in the same row from the specified column. By default, the table must be sorted in an ascending order.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ids = [\"ID\", 1, 2, 3, 4, 5];\nlet clients = [\"Client\", \"John Smith\", \"Ella Tompson\", \"Mary Shinoda\", \"Lily-Ann Bates\", \"Clara Ray\"];\nlet phones = [\"Phone number\", \"12054097166\", \"13343943678\", \"12568542099\", \"12057032298\", \"12052914781\"];\n\nfor (let i = 0; i < ids.length; i++) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(ids[i]);\n}\nfor (let j = 0; j < clients.length; j++) {\n    worksheet.GetRange(\"B\" + (j + 1)).SetValue(clients[j]);\n}\nfor (let n = 0; n < phones.length; n++) {\n    worksheet.GetRange(\"C\" + (n + 1)).SetValue(phones[n]);\n}\n\nlet range = worksheet.GetRange(\"A1:C5\");\nworksheet.GetRange(\"D6\").SetValue(func.VLOOKUP(3, range, 2, true));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "number",
                        "string",
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value to be found in the first column of the table. It can be a value, a reference, or a text string.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "A table of text, numbers, or logical values, in which data is retrieved. It can be a range of cells.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The column number in the data table from which the matching value should be returned. The first column of values in the table is column 1.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg4",
                "description": "A logical value that specifies whether to find the closest match in the first column (sorted in ascending order) (<b>true</b> or omitted)\nor find an exact match (<b>false</b>).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "VLOOKUP",
        "longname": "ApiWorksheetFunction#VLOOKUP",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7076,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/VLOOKUP.js"
        ]
    },
    {
        "comment": "/**\n\t * The error value.\n\t * * <b>\"#NULL!\"</b> - 1\n\t * * <b>\"#DIV/0!\"</b> - 2\n\t * * <b>\"#VALUE!\"</b> - 3\n\t * * <b>\"#REF!\"</b> - 4\n\t * * <b>\"#NAME?\"</b> - 5\n\t * * <b>\"#NUM!\"</b> - 6\n\t * * <b>\"#N/A\"</b> - 7\n\t * * <b>\"#GETTING_DATA\"</b> - 8\n\t * * <b>\"Other\"</b> - \"#N/A\"\n\t * @typedef {(\"#NULL!\" | \"#DIV/0!\" | \"#VALUE!\" | \"#REF!\" | \"#NAME?\" | \"#NUM!\" | \"#N/A\" | \"#GETTING_DATA\")} ErrorValue\n\t * */",
        "description": "The error value.\n* <b>\"#NULL!\"</b> - 1\n* <b>\"#DIV/0!\"</b> - 2\n* <b>\"#VALUE!\"</b> - 3\n* <b>\"#REF!\"</b> - 4\n* <b>\"#NAME?\"</b> - 5\n* <b>\"#NUM!\"</b> - 6\n* <b>\"#N/A\"</b> - 7\n* <b>\"#GETTING_DATA\"</b> - 8\n* <b>\"Other\"</b> - \"#N/A\"",
        "name": "ErrorValue",
        "longname": "ErrorValue",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 7080,
            "columnno": 1
        },
        "properties": null,
        "see": null,
        "type": {
            "names": [
                "\"#NULL!\"",
                "\"#DIV/0!\"",
                "\"#VALUE!\"",
                "\"#REF!\"",
                "\"#NAME?\"",
                "\"#NUM!\"",
                "\"#N/A\"",
                "\"#GETTING_DATA\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"#NULL!\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"#DIV/0!\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"#VALUE!\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"#REF!\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"#NAME?\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"#NUM!\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"#N/A\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"#GETTING_DATA\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Returns a number matching an error value.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ErrorValue | ApiRange | ApiName} arg1 - The error value for which the identifying number will be returned. It can be an actual error value or a reference to a cell containing an error value.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ERROR_TYPE.js\n\t */",
        "description": "Returns a number matching an error value.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet nonPositiveNum = 0;\nlet logResult = func.LOG(nonPositiveNum);\nworksheet.GetRange(\"B3\").SetValue(logResult);\nworksheet.GetRange(\"C3\").SetValue(func.ERROR_TYPE(logResult));\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ErrorValue",
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ErrorValue"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The error value for which the identifying number will be returned. It can be an actual error value or a reference to a cell containing an error value.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "ERROR_TYPE",
        "longname": "ApiWorksheetFunction#ERROR_TYPE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7102,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ERROR_TYPE.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks whether a value is an error other than <em>#N/A</em>, and returns <b>true</b> or <b>false</b>.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number | string | boolean | ApiRange | ApiName} arg1 - The value to test.\n\t * The value can be an empty cell, error, logical value, text, number, range, or range name.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ISERR.js\n\t */",
        "description": "Checks whether a value is an error other than <em>#N/A</em>, and returns <b>true</b> or <b>false</b>.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"B3\").SetValue(\"45\")\nlet result = func.ISERROR(\"B3\");\nworksheet.GetRange(\"C3\").SetValue(result)\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "number",
                        "string",
                        "boolean",
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value to test.\nThe value can be an empty cell, error, logical value, text, number, range, or range name.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "ISERR",
        "longname": "ApiWorksheetFunction#ISERR",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7114,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ISERR.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks whether a value is an error, and returns <b>true</b> or <b>false</b>.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number | string | boolean | ApiRange | ApiName} arg1 - The value to test.\n\t * The value can be an empty cell, error, logical value, text, number, range, or range name.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ISERROR.js\n\t */",
        "description": "Checks whether a value is an error, and returns <b>true</b> or <b>false</b>.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"B3\").SetValue(\"#N/A\")\nlet result = func.ISERR(\"B3\");\nworksheet.GetRange(\"C3\").SetValue(result)\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "number",
                        "string",
                        "boolean",
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value to test.\nThe value can be an empty cell, error, logical value, text, number, range, or range name.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "ISERROR",
        "longname": "ApiWorksheetFunction#ISERROR",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7126,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ISERROR.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns <b>true</b> if a number is even.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value to test.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ISEVEN.js\n\t */",
        "description": "Returns <b>true</b> if a number is even.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet result = func.ISEVEN(\"66\");\nworksheet.GetRange(\"C3\").SetValue(result)\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value to test.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "ISEVEN",
        "longname": "ApiWorksheetFunction#ISEVEN",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7137,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ISEVEN.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks whether a reference to a cell contains a formula, and returns <b>true</b> or <b>false</b>.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName} arg1 - A cell range to test. This argument can be a range or a range name.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ISFORMULA.js\n\t */",
        "description": "Checks whether a reference to a cell contains a formula, and returns <b>true</b> or <b>false</b>.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\n// Set the formula in cell B3\nworksheet.GetRange(\"B3\").SetValue(\"=SUM(5, 6)\");\n\n// Check if there is a formula in C3\nlet func = Api.GetWorksheetFunction();\nlet result = func.ISFORMULA(worksheet.GetRange(\"B3\"));\nworksheet.GetRange(\"C3\").SetValue(result);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A cell range to test. This argument can be a range or a range name.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "ISFORMULA",
        "longname": "ApiWorksheetFunction#ISFORMULA",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7148,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ISFORMULA.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks whether a value is a logical value (<b>true</b> or <b>false</b>), and returns <b>true</b> or <b>false</b>.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | string | number | boolean | ApiName} arg1 - The value to test.\n\t * The value can be an empty cell, error, logical value, text, number, range, or range name.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ISLOGICAL.js\n\t */",
        "description": "Checks whether a value is a logical value (<b>true</b> or <b>false</b>), and returns <b>true</b> or <b>false</b>.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B3\").SetValue(\"66\");\n\nlet func = Api.GetWorksheetFunction();\nlet result = func.ISLOGICAL(worksheet.GetRange(\"B3\"));\nworksheet.GetRange(\"C3\").SetValue(result);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "string",
                        "number",
                        "boolean",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value to test.\nThe value can be an empty cell, error, logical value, text, number, range, or range name.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "ISLOGICAL",
        "longname": "ApiWorksheetFunction#ISLOGICAL",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7160,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ISLOGICAL.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks whether a value is <em>#N/A</em>, and returns <b>true</b> or <b>false</b>.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | string | number | boolean | ApiName} arg1 - The value to test.\n\t * The value can be an empty cell, error, logical value, text, number, range, or range name.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ISNA.js\n\t */",
        "description": "Checks whether a value is <em>#N/A</em>, and returns <b>true</b> or <b>false</b>.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.ISNA(\"#N/A\"));\nworksheet.GetRange(\"A2\").SetValue(func.ISNA(255));\nworksheet.GetRange(\"A3\").SetValue(func.ISNA(\"www.example.com\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "string",
                        "number",
                        "boolean",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value to test.\nThe value can be an empty cell, error, logical value, text, number, range, or range name.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "ISNA",
        "longname": "ApiWorksheetFunction#ISNA",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7172,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ISNA.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks whether a value is not text (blank cells are not text), and returns <b>true</b> or <b>false</b>.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | string | number | boolean | ApiName} arg1 - The value to test.\n\t * The value can be an empty cell, error, logical value, text, number, range, or range name.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ISNONTEXT.js\n\t */",
        "description": "Checks whether a value is not text (blank cells are not text), and returns <b>true</b> or <b>false</b>.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.ISNONTEXT(\"#N/A\"));\nworksheet.GetRange(\"A2\").SetValue(func.ISNONTEXT(255));\nworksheet.GetRange(\"A3\").SetValue(func.ISNONTEXT(\"Online Office\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "string",
                        "number",
                        "boolean",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value to test.\nThe value can be an empty cell, error, logical value, text, number, range, or range name.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "ISNONTEXT",
        "longname": "ApiWorksheetFunction#ISNONTEXT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7184,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ISNONTEXT.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks whether a value is a number, and returns <b>true</b> or <b>false</b>.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | string | number | boolean | ApiName} arg1 - The value to test.\n\t * The value can be an empty cell, error, logical value, text, number, range, or range name.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ISNUMBER.js\n\t */",
        "description": "Checks whether a value is a number, and returns <b>true</b> or <b>false</b>.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.ISNUMBER(\"#N/A\"));\nworksheet.GetRange(\"A2\").SetValue(func.ISNUMBER(255));\nworksheet.GetRange(\"A3\").SetValue(func.ISNUMBER(\"Online Office\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "string",
                        "number",
                        "boolean",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value to test.\nThe value can be an empty cell, error, logical value, text, number, range, or range name.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "ISNUMBER",
        "longname": "ApiWorksheetFunction#ISNUMBER",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7196,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ISNUMBER.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns <b>true</b> if a number is odd.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number} arg1 - The value to test.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ISODD.js\n\t */",
        "description": "Returns <b>true</b> if a number is odd.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet func = Api.GetWorksheetFunction();\nlet result = func.ISODD(\"94\");\nworksheet.GetRange(\"C3\").SetValue(result);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value to test.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "ISODD",
        "longname": "ApiWorksheetFunction#ISODD",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7207,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ISODD.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks whether a value is a reference, and returns <b>true</b> or <b>false</b>.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | string | number | boolean | ApiName} arg1 - The value to test.\n\t * The value can be an empty cell, error, logical value, text, number, range, or range name.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ISREF.js\n\t */",
        "description": "Checks whether a value is a reference, and returns <b>true</b> or <b>false</b>.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.ISREF(\"A3\"));\nworksheet.GetRange(\"A2\").SetValue(func.ISREF(worksheet.GetRange(\"A3\")));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "string",
                        "number",
                        "boolean",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value to test.\nThe value can be an empty cell, error, logical value, text, number, range, or range name.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "ISREF",
        "longname": "ApiWorksheetFunction#ISREF",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7219,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ISREF.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks whether a value is text, and returns <b>true</b> or <b>false</b>.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | string | number | boolean | ApiName} arg1 - The value to test.\n\t * The value can be an empty cell, error, logical value, text, number, range, or range name.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/ISTEXT.js\n\t */",
        "description": "Checks whether a value is text, and returns <b>true</b> or <b>false</b>.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.ISTEXT(255));\nworksheet.GetRange(\"A2\").SetValue(func.ISTEXT(\"#N/A\"));\nworksheet.GetRange(\"A3\").SetValue(func.ISTEXT(\"Online Office\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "string",
                        "number",
                        "boolean",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value to test.\nThe value can be an empty cell, error, logical value, text, number, range, or range name.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "ISTEXT",
        "longname": "ApiWorksheetFunction#ISTEXT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7231,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/ISTEXT.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts a value to a number, dates to serial numbers, <b>true</b> to 1, error to {@link global#ErrorValue ErrorValue}, anything else to 0 (zero).\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number | string | boolean} arg1 - The value to be converted. The value can be a logical value, text, or number.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/N.js\n\t */",
        "description": "Converts a value to a number, dates to serial numbers, <b>true</b> to 1, error to {@link global#ErrorValue ErrorValue}, anything else to 0 (zero).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.N(false));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value to be converted. The value can be a logical value, text, or number.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "N",
        "longname": "ApiWorksheetFunction#N",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7242,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/N.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the <em>#N/A</em> error value which means \"no value is available\".\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/NA.js\n\t */",
        "description": "Returns the <em>#N/A</em> error value which means \"no value is available\".\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet(); \nlet func = Api.GetWorksheetFunction();\nlet result = func.NA();\nworksheet.GetRange(\"C3\").SetValue(result);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "NA",
        "longname": "ApiWorksheetFunction#NA",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7252,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/NA.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the sheet number of the reference sheet.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {?string | ?ApiRange | ?ApiName} arg1 - The name of a sheet or a reference for which the sheet number will be returned. If omitted the number of the sheet containing the function is returned.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/SHEET.js\n\t */",
        "description": "Returns the sheet number of the reference sheet.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet(); \nlet func = Api.GetWorksheetFunction();\nlet result = func.SHEET(\"Sheet1\");\nworksheet.GetRange(\"C3\").SetValue(result);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "string",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The name of a sheet or a reference for which the sheet number will be returned. If omitted the number of the sheet containing the function is returned.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "SHEET",
        "longname": "ApiWorksheetFunction#SHEET",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7263,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/SHEET.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the number of sheets in a reference.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {?ApiRange | ?ApiName} arg1 - A reference for which the number of sheets will be returned. If omitted the number of sheets in the workbook containing the function is returned.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/SHEETS.js\n\t */",
        "description": "Returns the number of sheets in a reference.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\n// Add more sheets\nApi.AddSheet(\"Sheet2\")\nApi.AddSheet(\"Sheet3\")\n\n// Get the number of sheets\nlet func = Api.GetWorksheetFunction();\nlet result = func.SHEETS();\nconst worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"C3\").SetValue(result);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A reference for which the number of sheets will be returned. If omitted the number of sheets in the workbook containing the function is returned.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "SHEETS",
        "longname": "ApiWorksheetFunction#SHEETS",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7274,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/SHEETS.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns an integer representing the data type of a value: number = 1; text = 2; logical value = 4; error value = 16; array = 64; compound data = 128.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number | string | boolean | array | ApiRange | ApiName} arg1 - A value to test.\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/TYPE.js\n\t */",
        "description": "Returns an integer representing the data type of a value: number = 1; text = 2; logical value = 4; error value = 16; array = 64; compound data = 128.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.TYPE(255));\nworksheet.GetRange(\"A2\").SetValue(func.TYPE(true));\nworksheet.GetRange(\"A3\").SetValue(func.TYPE(\"Online Office\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "number",
                        "string",
                        "boolean",
                        "array",
                        "ApiRange",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            },
                            {
                                "type": "NameExpression",
                                "name": "array"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A value to test.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "TYPE",
        "longname": "ApiWorksheetFunction#TYPE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7285,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/TYPE.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks whether all conditions in a test are <b>true</b>.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number | string | ApiRange | boolean | ApiName} args - A condition to check.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/AND.js\n\t */",
        "description": "Checks whether all conditions in a test are <b>true</b>.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nconst worksheet = Api.GetActiveSheet();\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.AND(12 < 100, 34 < 100, 50 < 100); //AND logical function\n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "number",
                        "string",
                        "ApiRange",
                        "boolean",
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "A condition to check.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "AND",
        "longname": "ApiWorksheetFunction#AND",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7296,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/AND.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the <b>false</b> logical value.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/FALSE.js\n\t */",
        "description": "Returns the <b>false</b> logical value.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ans = func.FALSE(); //returns false, doesnt require arguments\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "FALSE",
        "longname": "ApiWorksheetFunction#FALSE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7306,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/FALSE.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks whether a condition is met, and returns one value if <b>true</b>, and another value if <b>false</b>.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number | string | ApiRange | ApiName | boolean} arg1 - Any value or expression that can be evaluated to <b>true</b> or <b>false</b>.\n\t * @param {number | string | ApiRange | ApiName | boolean} arg2 - The value that is returned if the condition is <b>true</b>. If omitted, <b>true</b> is returned. You can nest up to seven IF functions.\n\t * @param {?ApiRange | ?ApiName | ?number | ?string | ?boolean} arg3 - The value that is returned if the condition is <b>false</b>. If omitted, <b>false</b> is returned.\n\t * @returns {number | string | boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/IF.js\n\t */",
        "description": "Checks whether a condition is met, and returns one value if <b>true</b>, and another value if <b>false</b>.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nworksheet.GetRange(\"A1\").SetValue(func.IF(\"12<100\", 0, 1));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "number",
                        "string",
                        "ApiRange",
                        "ApiName",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "Any value or expression that can be evaluated to <b>true</b> or <b>false</b>.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number",
                        "string",
                        "ApiRange",
                        "ApiName",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The value that is returned if the condition is <b>true</b>. If omitted, <b>true</b> is returned. You can nest up to seven IF functions.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "number",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "string",
                                "nullable": true
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean",
                                "nullable": true
                            }
                        ]
                    }
                },
                "name": "arg3",
                "description": "The value that is returned if the condition is <b>false</b>. If omitted, <b>false</b> is returned.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number",
                        "string",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "IF",
        "longname": "ApiWorksheetFunction#IF",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7319,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/IF.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks if there is an error in the formula in the first argument. The function returns the result of the formula if there is no error, or the value specified in the second argument if there is one.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number | string | boolean} arg1 - The value, expression, or reference that is checked for an error.\n\t * @param {ApiRange | ApiName | number | string | boolean} arg2 - The value to be returned if the formula evaluates to an error. The following errors are evaluated: <b>#N/A</b>, <b>#VALUE!</b>, <b>#REF!</b>, <b>#DIV/0!</b>, <b>#NUM!</b>, <b>#NAME?</b>, <b>#NULL!</b>.\n\t * @returns {number | string | boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/IFERROR.js\n\t */",
        "description": "Checks if there is an error in the formula in the first argument. The function returns the result of the formula if there is no error, or the value specified in the second argument if there is one.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet stock = [\"Stock\", 0, 84];\nlet values = [\"Total value\", \"$5.43\", \"$297.36\"];\nworksheet.GetRange(\"C1\").SetValue(\"Unit Price\");\n\nfor (let i = 0; i < stock.length; i++) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(stock[i]);\n}\nfor (let j = 0; j < values.length; j++) {\n    worksheet.GetRange(\"B\" + (j + 1)).SetValue(values[j]);\n}\nfor (let n = 1; n < values.length; n++) {\n    let value1 = worksheet.GetRange(\"B\" + (n + 1)).GetValue();\n    let value2 = worksheet.GetRange(\"A\" + (n + 1)).GetValue();\n    worksheet.GetRange(\"C\" + (n + 1)).SetValue(func.IFERROR(value1/value2, \"Out of stock\"));\n}\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value, expression, or reference that is checked for an error.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The value to be returned if the formula evaluates to an error. The following errors are evaluated: <b>#N/A</b>, <b>#VALUE!</b>, <b>#REF!</b>, <b>#DIV/0!</b>, <b>#NUM!</b>, <b>#NAME?</b>, <b>#NULL!</b>.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number",
                        "string",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "IFERROR",
        "longname": "ApiWorksheetFunction#IFERROR",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7331,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/IFERROR.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks if there is an error in the formula in the first argument. The function returns the specified value if the formula returns the <em>#N/A</em> error value, otherwise returns the result of the formula.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number | string | boolean} arg1 - The value, expression, or reference that is checked for an error.\n\t * @param {ApiRange | ApiName | number | string | boolean} arg2 - The value to return if the formula evaluates to the <em>#N/A</em> error value.\n\t * @returns {number | string | boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/IFNA.js\n\t */",
        "description": "Checks if there is an error in the formula in the first argument. The function returns the specified value if the formula returns the <em>#N/A</em> error value, otherwise returns the result of the formula.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet func = Api.GetWorksheetFunction();\nlet ids = [\"ID\", 1, 2, 3, 4, 5];\nlet clients = [\"Client\", \"John Smith\", \"Ella Tompson\", \"Mary Shinoda\", \"Lily-Ann Bates\", \"Clara Ray\"];\nlet phones = [\"Phone number\", \"12054097166\", \"13343943678\", \"12568542099\", \"12057032298\", \"12052914781\"];\n\nfor (let i = 0; i < ids.length; i++) {\n    worksheet.GetRange(\"A\" + (i + 1)).SetValue(ids[i]);\n}\nfor (let j = 0; j < clients.length; j++) {\n    worksheet.GetRange(\"B\" + (j + 1)).SetValue(clients[j]);\n}\nfor (let n = 0; n < phones.length; n++) {\n    worksheet.GetRange(\"C\" + (n + 1)).SetValue(phones[n]);\n}\n\nlet range = worksheet.GetRange(\"B1:B5\");\nworksheet.GetRange(\"D6\").SetValue(func.IFNA(func.MATCH(\"Mark Potato\", range, 0), \"Not found\"));\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "The value, expression, or reference that is checked for an error.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                },
                "name": "arg2",
                "description": "The value to return if the formula evaluates to the <em>#N/A</em> error value.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number",
                        "string",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "IFNA",
        "longname": "ApiWorksheetFunction#IFNA",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7343,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/IFNA.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks if the specified logical value is <b>true</b> or <b>false</b>. The function returns <b>true</b> if the argument is <b>false</b> and <b>false</b> if the argument is <b>true</b>.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | number | string | boolean} arg1 - A value or expression that can be evaluated to <b>true</b> or <b>false</b>.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/NOT.js\n\t */",
        "description": "Checks if the specified logical value is <b>true</b> or <b>false</b>. The function returns <b>true</b> if the argument is <b>false</b> and <b>false</b> if the argument is <b>true</b>.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet condition = 12 < 100;\nlet func = Api.GetWorksheetFunction();\nlet ans = func.NOT(condition);\n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "number",
                        "string",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                },
                "name": "arg1",
                "description": "A value or expression that can be evaluated to <b>true</b> or <b>false</b>.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "NOT",
        "longname": "ApiWorksheetFunction#NOT",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7354,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/NOT.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks whether any of the arguments are <b>true</b>. Returns <b>false</b> only if all arguments are <b>false</b>.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number | string | ApiRange | ApiName | boolean} args - A condition to check.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/OR.js\n\t */",
        "description": "Checks whether any of the arguments are <b>true</b>. Returns <b>false</b> only if all arguments are <b>false</b>.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange(\"A1\").SetValue(12);\n\nlet logical1 = worksheet.GetRange(\"A1\") < 10;\nlet logical2 = 34 < 10;\nlet logical3 = 50 < 10;\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.OR(logical1, logical2, logical3);\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "number",
                        "string",
                        "ApiRange",
                        "ApiName",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "A condition to check.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "OR",
        "longname": "ApiWorksheetFunction#OR",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7365,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/OR.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the <b>true</b> logical value.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/TRUE.js\n\t */",
        "description": "Returns the <b>true</b> logical value.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet logical1 = 1 > 0;\nlet logical2 = 2 > 0;\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.XOR(logical1, logical2); //Works on XOR gate logic\n\nworksheet.GetRange(\"C1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "TRUE",
        "longname": "ApiWorksheetFunction#TRUE",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7375,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/TRUE.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the logical <b>Exclusive Or</b> value of all arguments. The function returns <b>true</b> when the number of <b>true</b> inputs is odd and <b>false</b> when the number of <b>true</b> inputs is even.\n\t * @memberof ApiWorksheetFunction\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | ApiName | boolean | array} args - The conditions to check.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheetFunction/Methods/XOR.js\n\t */",
        "description": "Returns the logical <b>Exclusive Or</b> value of all arguments. The function returns <b>true</b> when the number of <b>true</b> inputs is odd and <b>false</b> when the number of <b>true</b> inputs is even.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n\nconst worksheet = Api.GetActiveSheet();\n\nlet func = Api.GetWorksheetFunction();\nlet ans = func.TRUE(); //returns TRUE, doesnt require arguments\n\nworksheet.GetRange(\"A1\").SetValue(ans);\n\n```",
        "memberof": "ApiWorksheetFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "ApiName",
                        "boolean",
                        "array"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            },
                            {
                                "type": "NameExpression",
                                "name": "array"
                            }
                        ]
                    }
                },
                "name": "args",
                "description": "The conditions to check.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "XOR",
        "longname": "ApiWorksheetFunction#XOR",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7386,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheetFunction/Methods/XOR.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the mail merge data.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number} nSheet - The sheet index.\n\t * @param {boolean} [bWithFormat=false] - Specifies that the data will be received with the format.\n\t * @returns {string[][]}\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/GetMailMergeData.js\n\t */",
        "description": "Returns the mail merge data.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.SetColumnWidth(0, 20);\nworksheet.GetRange(\"A1\").SetValue(\"Email address\");\nworksheet.GetRange(\"B1\").SetValue(\"Greeting\");\nworksheet.GetRange(\"C1\").SetValue(\"First name\");\nworksheet.GetRange(\"D1\").SetValue(\"Last name\");\nworksheet.GetRange(\"A2\").SetValue(\"user1@example.com\");\nworksheet.GetRange(\"B2\").SetValue(\"Dear\");\nworksheet.GetRange(\"C2\").SetValue(\"John\");\nworksheet.GetRange(\"D2\").SetValue(\"Smith\");\nworksheet.GetRange(\"A3\").SetValue(\"user2@example.com\");\nworksheet.GetRange(\"B3\").SetValue(\"Hello\");\nworksheet.GetRange(\"C3\").SetValue(\"Kate\");\nworksheet.GetRange(\"D3\").SetValue(\"Cage\");\nlet mailMergeData = Api.GetMailMergeData(0);\nworksheet.GetRange(\"A5\").SetValue(\"Mail merge data: \" + mailMergeData);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nSheet",
                "description": "The sheet index.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bWithFormat",
                "description": "Specifies that the data will be received with the format.",
                "optional": true,
                "defaultvalue": false
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Array.<string>>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "string",
                                        "type": "NameExpression"
                                    }
                                ]
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetMailMergeData",
        "longname": "Api#GetMailMergeData",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7501,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/GetMailMergeData.js"
        ]
    },
    {
        "comment": "/**\n\t * Recalculates all formulas in the active workbook.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @param {Function} fLogger - A function which specifies the logger object for checking recalculation of formulas.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/RecalculateAllFormulas.js\n\t */",
        "description": "Recalculates all formulas in the active workbook.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(1);\nworksheet.GetRange(\"C1\").SetValue(2);\nlet range = worksheet.GetRange(\"A1\");\nrange.SetValue(\"=SUM(B1:C1)\");\nrange = worksheet.GetRange(\"E1\");\nrange.SetValue(\"=A1+1\");\nworksheet.GetRange(\"B1\").SetValue(3);\nApi.RecalculateAllFormulas();\nworksheet.GetRange(\"A3\").SetValue(\"Formulas from cells A1 and E1 were recalculated with a new value from cell C1.\");\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ],
                    "parsedType": {
                        "type": "FunctionType",
                        "params": []
                    }
                },
                "name": "fLogger",
                "description": "A function which specifies the logger object for checking recalculation of formulas.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "RecalculateAllFormulas",
        "longname": "Api#RecalculateAllFormulas",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7524,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/RecalculateAllFormulas.js"
        ]
    },
    {
        "comment": "/**\n\t * Inserts the specified pivot table into an existing worksheet.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange} dataRef - The source data range.\n\t * @param {ApiRange} pivotRef - A range in which the pivot table will be located.\n\t * @param {bool} confirmation - Specifies whether to replace the data in the specified pivot table range (if it exists) or create a dialog box for this (if it exists).\n\t * @returns {ApiPivotTable}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/Cell/Api/Methods/InsertPivotExistingWorksheet.js\n\t */",
        "description": "Inserts the specified pivot table into an existing worksheet.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Price');\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('C2').SetValue(42.5);\nworksheet.GetRange('C3').SetValue(35.2);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$C$3\");\nlet pivotRef = worksheet.GetRange('A7');\nlet pivotTable = Api.InsertPivotExistingWorksheet(dataRef, pivotRef);\n\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                },
                "name": "dataRef",
                "description": "The source data range.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                },
                "name": "pivotRef",
                "description": "A range in which the pivot table will be located.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "bool"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "bool"
                    }
                },
                "name": "confirmation",
                "description": "Specifies whether to replace the data in the specified pivot table range (if it exists) or create a dialog box for this (if it exists).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiPivotTable"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiPivotTable"
                    }
                }
            }
        ],
        "name": "InsertPivotExistingWorksheet",
        "longname": "Api#InsertPivotExistingWorksheet",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7617,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/InsertPivotExistingWorksheet.js"
        ]
    },
    {
        "comment": "/**\n\t * Inserts the specified pivot table into a new worksheet.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange} dataRef - The source data range.\n\t * @param {ApiRange} [newSheetName] - A new worksheet name.\n\t * @returns {ApiPivotTable}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/Cell/Api/Methods/InsertPivotNewWorksheet.js\n\t */",
        "description": "Inserts the specified pivot table into a new worksheet.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Price');\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('C2').SetValue(42.5);\nworksheet.GetRange('C3').SetValue(35.2);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$C$3\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                },
                "name": "dataRef",
                "description": "The source data range.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                },
                "name": "newSheetName",
                "description": "A new worksheet name.",
                "optional": true,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiPivotTable"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiPivotTable"
                    }
                }
            }
        ],
        "name": "InsertPivotNewWorksheet",
        "longname": "Api#InsertPivotNewWorksheet",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7646,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/InsertPivotNewWorksheet.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a pivot table by its name, or null if it does not exist.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} name - The pivot table name.\n\t * @returns {ApiPivotTable|null}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/Cell/Api/Methods/GetPivotByName.js\n\t */",
        "description": "Returns a pivot table by its name, or null if it does not exist.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Price');\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('C2').SetValue(42.5);\nworksheet.GetRange('C3').SetValue(35.2);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$C$3\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\nApi.GetPivotByName(pivotTable.GetName()).AddFields({\n    rows: 'Region',\n});\n\nApi.GetPivotByName(pivotTable.GetName()).AddDataField('Price');\n\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "name",
                "description": "The pivot table name.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiPivotTable",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiPivotTable"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetPivotByName",
        "longname": "Api#GetPivotByName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7683,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/GetPivotByName.js"
        ]
    },
    {
        "comment": "/**\n\t * Refreshes all pivot tables.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/Cell/Api/Methods/RefreshAllPivots.js\n\t */",
        "description": "Refreshes all pivot tables.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Price');\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('C2').SetValue(42.5);\nworksheet.GetRange('C3').SetValue(35.2);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$C$3\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\nApi.GetPivotByName(pivotTable.GetName()).AddFields({\n    rows: 'Region',\n});\n\nApi.GetPivotByName(pivotTable.GetName()).AddDataField('Price');\nApi.RefreshAllPivots();\n\n```",
        "memberof": "Api",
        "params": null,
        "returns": null,
        "name": "RefreshAllPivots",
        "longname": "Api#RefreshAllPivots",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7700,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/RefreshAllPivots.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns all pivot tables.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiPivotTable[]}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/Cell/Api/Methods/GetAllPivotTables.js\n\t */",
        "description": "Returns all pivot tables.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Price');\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('C2').SetValue(42.5);\nworksheet.GetRange('C3').SetValue(35.2);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$C$3\");\nApi.InsertPivotNewWorksheet(dataRef);\nApi.InsertPivotNewWorksheet(dataRef);\nApi.InsertPivotNewWorksheet(dataRef);\n\nApi.GetAllPivotTables().forEach(function (pivot) {\n    pivot.AddDataField('Price');\n});\n\n```",
        "memberof": "Api",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ApiPivotTable>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiPivotTable",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetAllPivotTables",
        "longname": "Api#GetAllPivotTables",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7712,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/GetAllPivotTables.js"
        ]
    },
    {
        "comment": "/**\n\t * Subscribes to the specified event and calls the callback function when the event fires.\n\t * @function\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} eventName - The event name.\n\t * @param {function} callback - Function to be called when the event fires.\n\t * @fires Api#onWorksheetChange\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/attachEvent.js\n\t */",
        "description": "Subscribes to the specified event and calls the callback function when the event fires.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"A1\");\nrange.SetValue(\"1\");\nApi.attachEvent(\"onWorksheetChange\", function(range){\n    console.log(\"onWorksheetChange\");\n    console.log(range.GetAddress());\n});\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "eventName",
                "description": "The event name.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "function"
                    ],
                    "parsedType": {
                        "type": "FunctionType",
                        "params": []
                    }
                },
                "name": "callback",
                "description": "Function to be called when the event fires.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "attachEvent",
        "longname": "Api#attachEvent",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7737,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/attachEvent.js"
        ]
    },
    {
        "comment": "/**\n\t * Unsubscribes from the specified event.\n\t * @function\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} eventName - The event name.\n\t * @fires Api#onWorksheetChange\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/detachEvent.js\n\t */",
        "description": "Unsubscribes from the specified event.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"A1\");\nrange.SetValue(\"1\");\nApi.attachEvent(\"onWorksheetChange\", function(range){\n    console.log(\"onWorksheetChange\");\n    console.log(range.GetAddress());\n});\nApi.detachEvent(\"onWorksheetChange\");\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "eventName",
                "description": "The event name.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "detachEvent",
        "longname": "Api#detachEvent",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7748,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/detachEvent.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns an array of ApiComment objects.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sText - The comment text.\n\t * @param {string} sAuthor - The author's name (optional).\n\t * @returns {ApiComment | null}\n\t * @since 7.5.0\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/AddComment.js\n\t */",
        "description": "Returns an array of ApiComment objects.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nApi.AddComment(\"Comment 1\", \"Bob\");\nApi.AddComment(\"Comment 2\");\nlet comments = Api.GetComments();\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"Comment Text: \", comments[0].GetText());\nworksheet.GetRange(\"B1\").SetValue(\"Comment Author: \", comments[0].GetAuthorName());\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sText",
                "description": "The comment text.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sAuthor",
                "description": "The author's name (optional).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiComment",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiComment"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "AddComment",
        "longname": "Api#AddComment",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7760,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/AddComment.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a comment from the current document by its ID.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sId - The comment ID.\n\t * @returns {?ApiComment}\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/GetCommentById.js\n\t */",
        "description": "Returns a comment from the current document by its ID.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet comment = Api.AddComment(\"Comment\", \"Bob\");\nlet id = comment.GetId();\ncomment = Api.GetCommentById(id);\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"Comment Text: \", comment.GetText());\nworksheet.GetRange(\"B1\").SetValue(\"Comment Author: \", comment.GetAuthorName());\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sId",
                "description": "The comment ID.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiComment"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiComment",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetCommentById",
        "longname": "Api#GetCommentById",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7786,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/GetCommentById.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns all comments related to the whole workbook.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiComment[]}\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/GetComments.js\n\t */",
        "description": "Returns all comments related to the whole workbook.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nApi.AddComment(\"Comment 1\", \"Bob\");\nApi.AddComment(\"Comment 2\", \"Bob\");\nlet arrComments = Api.GetComments();\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"Comment Text: \", arrComments[0].GetText());\nworksheet.GetRange(\"B1\").SetValue(\"Comment Author: \", arrComments[0].GetAuthorName());\n```",
        "memberof": "Api",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ApiComment>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiComment",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetComments",
        "longname": "Api#GetComments",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7801,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/GetComments.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns all comments from the current workbook including comments from all worksheets.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiComment[]}\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/GetAllComments.js\n\t */",
        "description": "Returns all comments from the current workbook including comments from all worksheets.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nApi.AddComment(\"Comment 1\", \"John Smith\");\nworksheet.GetRange(\"A4\").AddComment(\"Comment 2\", \"Mark Potato\");\nlet arrComments = Api.GetAllComments();\nworksheet.GetRange(\"A1\").SetValue(\"Comment text: \" + arrComments[1].GetText());\nworksheet.GetRange(\"A2\").SetValue(\"Comment author: \" + arrComments[1].GetAuthorName());\n```",
        "memberof": "Api",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ApiComment>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiComment",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetAllComments",
        "longname": "Api#GetAllComments",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7822,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/GetAllComments.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies a type of freeze panes.\n\t * @typedef {(\"row\" | \"column\" | \"cell\" | null )} FreezePaneType\n\t * @see office-js-api/Examples/Enumerations/FreezePaneType.js\n\t */",
        "description": "Specifies a type of freeze panes.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nbuilder.CreateFile(\"xlsx\");\nApi.SetFreezePanesType('column');\nlet worksheet = Api.GetActiveSheet();\nlet freezePanes = worksheet.GetFreezePanes();\nlet range = freezePanes.GetLocation();\nworksheet.GetRange(\"A1\").SetValue(\"Location: \");\nworksheet.GetRange(\"B1\").SetValue(range.GetAddress());\nbuilder.SaveFile(\"xlsx\", \"FreezePanes.xlsx\");\nbuilder.CloseFile();\n```",
        "name": "FreezePaneType",
        "longname": "FreezePaneType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 7837,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/FreezePaneType.js"
        ],
        "type": {
            "names": [
                "\"row\"",
                "\"column\"",
                "\"cell\"",
                "null"
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"row\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"column\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"cell\""
                    },
                    {
                        "type": "NullLiteral"
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Sets a type to the freeze panes.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @param {FreezePaneType} FreezePaneType - The freeze panes type (\"null\" to unfreeze).\n\t * @since 8.0.0\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/SetFreezePanesType.js\n\t */",
        "description": "Sets a type to the freeze panes.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nApi.SetFreezePanesType('column');\nlet worksheet = Api.GetActiveSheet();\nlet freezePanes = worksheet.GetFreezePanes();\nlet range = freezePanes.GetLocation();\nworksheet.GetRange(\"A1\").SetValue(\"Location: \");\nworksheet.GetRange(\"B1\").SetValue(range.GetAddress());\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "FreezePaneType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "FreezePaneType"
                    }
                },
                "name": "FreezePaneType",
                "description": "The freeze panes type (\"null\" to unfreeze).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetFreezePanesType",
        "longname": "Api#SetFreezePanesType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7851,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/SetFreezePanesType.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the freeze panes type.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {FreezePaneType} FreezePaneType - The freeze panes type (\"null\" if there are no freeze panes).\n\t * @since 8.0.0\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/GetFreezePanesType.js\n\t */",
        "description": "Returns the freeze panes type.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nApi.SetFreezePanesType('column');\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"Type: \");\nworksheet.GetRange(\"B1\").SetValue(Api.GetFreezePanesType());\n```",
        "memberof": "Api",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "FreezePaneType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "FreezePaneType"
                    }
                }
            }
        ],
        "name": "GetFreezePanesType",
        "longname": "Api#GetFreezePanesType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7887,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/GetFreezePanesType.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the cell reference style.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ReferenceStyle} - The cell reference style.\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/GetReferenceStyle.js\n\t */",
        "description": "Returns the cell reference style.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(Api.GetReferenceStyle());\n```",
        "memberof": "Api",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ReferenceStyle"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ReferenceStyle"
                    }
                }
            }
        ],
        "name": "GetReferenceStyle",
        "longname": "Api#GetReferenceStyle",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7925,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/GetReferenceStyle.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the cell reference style.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ReferenceStyle} sReferenceStyle - The cell reference style.\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/SetReferenceStyle.js\n\t */",
        "description": "Sets the cell reference style.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nApi.SetReferenceStyle(\"xlR1C1\");\nworksheet.GetRange(\"A1\").SetValue(Api.GetReferenceStyle());\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "ReferenceStyle"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ReferenceStyle"
                    }
                },
                "name": "sReferenceStyle",
                "description": "The cell reference style.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetReferenceStyle",
        "longname": "Api#SetReferenceStyle",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7938,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/SetReferenceStyle.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the document information:\n\t * <b>Application</b> - the application the document has been created with.\n\t * <b>CreatedRaw</b> - the date and time when the file was created.\n\t * <b>Created</b> - the parsed date and time when the file was created.\n\t * <b>LastModifiedRaw</b> - the date and time when the file was last modified.\n\t * <b>LastModified</b> - the parsed date and time when the file was last modified.\n\t * <b>LastModifiedBy</b> - the name of the user who has made the latest change to the document.\n\t * <b>Autrors</b> - the persons who has created the file.\n\t * <b>Title</b> - this property allows you to simplify your documents classification.\n\t * <b>Tags</b> - this property allows you to simplify your documents classification.\n\t * <b>Subject</b> - this property allows you to simplify your documents classification.\n\t * <b>Comment</b> - this property allows you to simplify your documents classification.\n\t * @memberof Api\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {object}\n\t * @see office-js-api/Examples/{Editor}/Api/Methods/GetDocumentInfo.js\n\t */",
        "description": "Returns the document information:\n<b>Application</b> - the application the document has been created with.\n<b>CreatedRaw</b> - the date and time when the file was created.\n<b>Created</b> - the parsed date and time when the file was created.\n<b>LastModifiedRaw</b> - the date and time when the file was last modified.\n<b>LastModified</b> - the parsed date and time when the file was last modified.\n<b>LastModifiedBy</b> - the name of the user who has made the latest change to the document.\n<b>Autrors</b> - the persons who has created the file.\n<b>Title</b> - this property allows you to simplify your documents classification.\n<b>Tags</b> - this property allows you to simplify your documents classification.\n<b>Subject</b> - this property allows you to simplify your documents classification.\n<b>Comment</b> - this property allows you to simplify your documents classification.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet docInfo = Api.GetDocumentInfo();\nlet range = Api.GetActiveSheet().GetRange('A1');\nrange.SetValue('This document has been created with: ' + docInfo.Application);\n```",
        "memberof": "Api",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                }
            }
        ],
        "name": "GetDocumentInfo",
        "longname": "Api#GetDocumentInfo",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 7984,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/Api/Methods/GetDocumentInfo.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the state of sheet visibility.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/GetVisible.js\n\t */",
        "description": "Returns the state of sheet visibility.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.SetVisible(true);\nlet isVisible = worksheet.GetVisible();\nworksheet.GetRange(\"A1\").SetValue(\"Visible: \");\nworksheet.GetRange(\"B1\").SetValue(isVisible);\n```",
        "memberof": "ApiWorksheet",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "GetVisible",
        "longname": "ApiWorksheet#GetVisible",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8053,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/GetVisible.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the state of sheet visibility.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} isVisible - Specifies if the sheet is visible or not.\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/SetVisible.js\n\t */",
        "description": "Sets the state of sheet visibility.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.SetVisible(true);\nworksheet.GetRange(\"A1\").SetValue(\"The current worksheet is visible.\");\n```",
        "memberof": "ApiWorksheet",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isVisible",
                "description": "Specifies if the sheet is visible or not.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetVisible",
        "longname": "ApiWorksheet#SetVisible",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8064,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/SetVisible.js"
        ]
    },
    {
        "comment": "/**\n\t * Makes the current sheet active.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/SetActive.js\n\t */",
        "description": "Makes the current sheet active.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nApi.AddSheet(\"New_sheet\");\nlet sheet = Api.GetSheet(\"New_sheet\");\nsheet.SetActive();\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"The current sheet is active.\");\n```",
        "memberof": "ApiWorksheet",
        "params": null,
        "returns": null,
        "name": "SetActive",
        "longname": "ApiWorksheet#SetActive",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8082,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/SetActive.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns an object that represents an active cell.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiRange}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/GetActiveCell.js\n\t */",
        "description": "Returns an object that represents an active cell.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet activeCell = worksheet.GetActiveCell();\nactiveCell.SetValue(\"This sample text was placed in an active cell.\");\n```",
        "memberof": "ApiWorksheet",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                }
            }
        ],
        "name": "GetActiveCell",
        "longname": "ApiWorksheet#GetActiveCell",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8098,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/GetActiveCell.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns an object that represents the selected range.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiRange}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/GetSelection.js\n\t */",
        "description": "Returns an object that represents the selected range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetSelection().SetValue(\"selected\");\n```",
        "memberof": "ApiWorksheet",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                }
            }
        ],
        "name": "GetSelection",
        "longname": "ApiWorksheet#GetSelection",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8119,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/GetSelection.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the ApiRange that represents all the cells on the worksheet (not just the cells that are currently in use).\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number} row - The row number or the cell number (if only row is defined).\n\t * @param {number} col - The column number.\n\t * @returns {ApiRange | null}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/GetCells.js\n\t */",
        "description": "Returns the ApiRange that represents all the cells on the worksheet (not just the cells that are currently in use).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet cells = worksheet.GetCells();\ncells.SetFillColor(Api.CreateColorFromRGB(255, 213, 191));\n```",
        "memberof": "ApiWorksheet",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "row",
                "description": "The row number or the cell number (if only row is defined).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "col",
                "description": "The column number.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetCells",
        "longname": "ApiWorksheet#GetCells",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8143,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/GetCells.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the ApiRange object that represents all the cells on the rows range.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string | number} value - Specifies the rows range in the string or number format.\n\t * @returns {ApiRange | null}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/GetRows.js\n\t */",
        "description": "Returns the ApiRange object that represents all the cells on the rows range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRows(\"1:4\").SetFillColor(Api.CreateColorFromRGB(255, 213, 191));\n```",
        "memberof": "ApiWorksheet",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "value",
                "description": "Specifies the rows range in the string or number format.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetRows",
        "longname": "ApiWorksheet#GetRows",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8199,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/GetRows.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the ApiRange object that represents all the cells on the columns range.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sRange - Specifies the columns range in the string format.\n\t * @returns {ApiRange}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/GetCols.js\n\t */",
        "description": "Returns the ApiRange object that represents all the cells on the columns range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet cols = worksheet.GetCols(\"A1:C1\");\ncols.SetFillColor(Api.CreateColorFromRGB(255, 213, 191));\n```",
        "memberof": "ApiWorksheet",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sRange",
                "description": "Specifies the columns range in the string format.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                }
            }
        ],
        "name": "GetCols",
        "longname": "ApiWorksheet#GetCols",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8239,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/GetCols.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the ApiRange object that represents the used range on the specified worksheet.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiRange}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/GetUsedRange.js\n\t */",
        "description": "Returns the ApiRange object that represents the used range on the specified worksheet.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet usedRange = worksheet.GetUsedRange();\nusedRange.SetFillColor(Api.CreateColorFromRGB(255, 213, 191));\n```",
        "memberof": "ApiWorksheet",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                }
            }
        ],
        "name": "GetUsedRange",
        "longname": "ApiWorksheet#GetUsedRange",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8258,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/GetUsedRange.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a sheet name.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/GetName.js\n\t */",
        "description": "Returns a sheet name.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet name = worksheet.GetName();\nworksheet.GetRange(\"A1\").SetValue(\"Name: \");\nworksheet.GetRange(\"B1\").SetValue(name);\n```",
        "memberof": "ApiWorksheet",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetName",
        "longname": "ApiWorksheet#GetName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8280,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/GetName.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets a name to the current active sheet.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sName - The name which will be displayed for the current sheet at the sheet tab.\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/SetName.js\n\t */",
        "description": "Sets a name to the current active sheet.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.SetName(\"sheet 1\");\nlet name = worksheet.GetName();\nworksheet.GetRange(\"A1\").SetValue(\"Worksheet name: \");\nworksheet.GetRange(\"A1\").AutoFit(false, true);\nworksheet.GetRange(\"B1\").SetValue(name);\n```",
        "memberof": "ApiWorksheet",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sName",
                "description": "The name which will be displayed for the current sheet at the sheet tab.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetName",
        "longname": "ApiWorksheet#SetName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8291,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/SetName.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a sheet index.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/GetIndex.js\n\t */",
        "description": "Returns a sheet index.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet index = worksheet.GetIndex();\nworksheet.GetRange(\"A1\").SetValue(\"Index: \");\nworksheet.GetRange(\"B1\").SetValue(index);\n```",
        "memberof": "ApiWorksheet",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GetIndex",
        "longname": "ApiWorksheet#GetIndex",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8317,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/GetIndex.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns an object that represents the selected range of the current sheet. Can be a single cell - <b>A1</b>, or cells\n\t * from a single row - <b>A1:E1</b>, or cells from a single column - <b>A1:A10</b>, or cells from several rows and columns - <b>A1:E10</b>.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string | ApiRange} Range1 - The range of cells from the current sheet.\n\t * @param {string | ApiRange} Range2 - The range of cells from the current sheet.\n\t * @returns {ApiRange | null} - returns null if such a range does not exist.\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/GetRange.js\n\t */",
        "description": "Returns an object that represents the selected range of the current sheet. Can be a single cell - <b>A1</b>, or cells\nfrom a single row - <b>A1:E1</b>, or cells from a single column - <b>A1:A10</b>, or cells from several rows and columns - <b>A1:E10</b>.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A2\").SetValue(\"2\");\nlet range = worksheet.GetRange(\"A1:D5\");\nrange.SetAlignHorizontal(\"center\");\n```",
        "memberof": "ApiWorksheet",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            }
                        ]
                    }
                },
                "name": "Range1",
                "description": "The range of cells from the current sheet.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string",
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            }
                        ]
                    }
                },
                "name": "Range2",
                "description": "The range of cells from the current sheet.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetRange",
        "longname": "ApiWorksheet#GetRange",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8336,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/GetRange.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns an object that represents the selected range of the current sheet using the <b>row/column</b> coordinates for the cell selection.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number} nRow - The row number.\n\t * @param {number} nCol - The column number.\n\t * @returns {ApiRange}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/GetRangeByNumber.js\n\t */",
        "description": "Returns an object that represents the selected range of the current sheet using the <b>row/column</b> coordinates for the cell selection.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRangeByNumber(1, 2).SetValue(\"42\");\n```",
        "memberof": "ApiWorksheet",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nRow",
                "description": "The row number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nCol",
                "description": "The column number.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                }
            }
        ],
        "name": "GetRangeByNumber",
        "longname": "ApiWorksheet#GetRangeByNumber",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8376,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/GetRangeByNumber.js"
        ]
    },
    {
        "comment": "/**\n\t * Formats the selected range of cells from the current sheet as a table (with the first row formatted as a header).\n\t * <note>As the first row is always formatted as a table header, you need to select at least two rows for the table to be formed correctly.</note>\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sRange - The range of cells from the current sheet which will be formatted as a table.\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/FormatAsTable.js\n\t */",
        "description": "Formats the selected range of cells from the current sheet as a table (with the first row formatted as a header).\n<note>As the first row is always formatted as a table header, you need to select at least two rows for the table to be formed correctly.</note>\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.FormatAsTable(\"A1:E10\");\n```",
        "memberof": "ApiWorksheet",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sRange",
                "description": "The range of cells from the current sheet which will be formatted as a table.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "FormatAsTable",
        "longname": "ApiWorksheet#FormatAsTable",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8388,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/FormatAsTable.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the width of the specified column.\n\t * One unit of column width is equal to the width of one character in the Normal style.\n\t * For proportional fonts, the width of the character 0 (zero) is used.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number} nColumn - The number of the column to set the width to.\n\t * @param {number} nWidth - The width of the column divided by 7 pixels.\n\t * @param {boolean} [bWithotPaddings=false] - Specifies whether nWidth will be set without standard paddings.\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/SetColumnWidth.js\n\t */",
        "description": "Sets the width of the specified column.\nOne unit of column width is equal to the width of one character in the Normal style.\nFor proportional fonts, the width of the character 0 (zero) is used.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.SetColumnWidth(0, 10);\nworksheet.SetColumnWidth(1, 20);\n```",
        "memberof": "ApiWorksheet",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nColumn",
                "description": "The number of the column to set the width to.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nWidth",
                "description": "The width of the column divided by 7 pixels.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bWithotPaddings",
                "description": "Specifies whether nWidth will be set without standard paddings.",
                "optional": true,
                "defaultvalue": false
            }
        ],
        "returns": null,
        "name": "SetColumnWidth",
        "longname": "ApiWorksheet#SetColumnWidth",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8403,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/SetColumnWidth.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the height of the specified row measured in points.\n\t * A point is 1/72 inch.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number} nRow - The number of the row to set the height to.\n\t * @param {number} nHeight - The height of the row measured in points.\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/SetRowHeight.js\n\t */",
        "description": "Sets the height of the specified row measured in points.\nA point is 1/72 inch.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.SetRowHeight(0, 30);\n```",
        "memberof": "ApiWorksheet",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nRow",
                "description": "The number of the row to set the height to.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nHeight",
                "description": "The height of the row measured in points.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetRowHeight",
        "longname": "ApiWorksheet#SetRowHeight",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8420,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/SetRowHeight.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies whether the current sheet gridlines must be displayed or not.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} isDisplayed - Specifies whether the current sheet gridlines must be displayed or not. The default value is <b>true</b>.\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/SetDisplayGridlines.js\n\t */",
        "description": "Specifies whether the current sheet gridlines must be displayed or not.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A2\").SetValue(\"The sheet settings make it display no gridlines\");\nworksheet.SetDisplayGridlines(false);\n```",
        "memberof": "ApiWorksheet",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isDisplayed",
                "description": "Specifies whether the current sheet gridlines must be displayed or not. The default value is <b>true</b>.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetDisplayGridlines",
        "longname": "ApiWorksheet#SetDisplayGridlines",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8431,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/SetDisplayGridlines.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies whether the current sheet row/column headers must be displayed or not.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} isDisplayed - Specifies whether the current sheet row/column headers must be displayed or not. The default value is <b>true</b>.\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/SetDisplayHeadings.js\n\t */",
        "description": "Specifies whether the current sheet row/column headers must be displayed or not.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A2\").SetValue(\"The sheet settings make it display no row/column headers\");\nworksheet.SetDisplayHeadings(false);\n```",
        "memberof": "ApiWorksheet",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isDisplayed",
                "description": "Specifies whether the current sheet row/column headers must be displayed or not. The default value is <b>true</b>.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetDisplayHeadings",
        "longname": "ApiWorksheet#SetDisplayHeadings",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8442,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/SetDisplayHeadings.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the left margin of the sheet.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number} nPoints - The left margin size measured in points.\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/SetLeftMargin.js\n\t */",
        "description": "Sets the left margin of the sheet.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.SetLeftMargin(20.8);\nlet leftMargin = worksheet.GetLeftMargin();\nworksheet.GetRange(\"A1\").SetValue(\"Left margin: \" + leftMargin + \" mm\");\n```",
        "memberof": "ApiWorksheet",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nPoints",
                "description": "The left margin size measured in points.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetLeftMargin",
        "longname": "ApiWorksheet#SetLeftMargin",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8453,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/SetLeftMargin.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the left margin of the sheet.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {number} - The left margin size measured in points.\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/GetLeftMargin.js\n\t */",
        "description": "Returns the left margin of the sheet.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet leftMargin = worksheet.GetLeftMargin();\nworksheet.GetRange(\"A1\").SetValue(\"Left margin: \" + leftMargin + \" mm\");\n```",
        "memberof": "ApiWorksheet",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GetLeftMargin",
        "longname": "ApiWorksheet#GetLeftMargin",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8464,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/GetLeftMargin.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the right margin of the sheet.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number} nPoints - The right margin size measured in points.\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/SetRightMargin.js\n\t */",
        "description": "Sets the right margin of the sheet.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.SetRightMargin(20.8);\nlet rightMargin = worksheet.GetRightMargin();\nworksheet.GetRange(\"A1\").SetValue(\"Right margin: \" + rightMargin + \" mm\");\n```",
        "memberof": "ApiWorksheet",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nPoints",
                "description": "The right margin size measured in points.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetRightMargin",
        "longname": "ApiWorksheet#SetRightMargin",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8483,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/SetRightMargin.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the right margin of the sheet.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {number} - The right margin size measured in points.\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/GetRightMargin.js\n\t */",
        "description": "Returns the right margin of the sheet.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet rightMargin = worksheet.GetRightMargin();\nworksheet.GetRange(\"A1\").SetValue(\"Right margin: \" + rightMargin + \" mm\");\n```",
        "memberof": "ApiWorksheet",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GetRightMargin",
        "longname": "ApiWorksheet#GetRightMargin",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8494,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/GetRightMargin.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the top margin of the sheet.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number} nPoints - The top margin size measured in points.\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/SetTopMargin.js\n\t */",
        "description": "Sets the top margin of the sheet.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.SetTopMargin(25.1);\nlet topMargin = worksheet.GetTopMargin();\nworksheet.GetRange(\"A1\").SetValue(\"Top margin: \" + topMargin + \" mm\");\n```",
        "memberof": "ApiWorksheet",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nPoints",
                "description": "The top margin size measured in points.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetTopMargin",
        "longname": "ApiWorksheet#SetTopMargin",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8513,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/SetTopMargin.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the top margin of the sheet.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {number} - The top margin size measured in points.\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/GetTopMargin.js\n\t */",
        "description": "Returns the top margin of the sheet.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet topMargin = worksheet.GetTopMargin();\nworksheet.GetRange(\"A1\").SetValue(\"Top margin: \" + topMargin + \" mm\");\n```",
        "memberof": "ApiWorksheet",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GetTopMargin",
        "longname": "ApiWorksheet#GetTopMargin",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8524,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/GetTopMargin.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the bottom margin of the sheet.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number} nPoints - The bottom margin size measured in points.\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/SetBottomMargin.js\n\t */",
        "description": "Sets the bottom margin of the sheet.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.SetBottomMargin(25.1);\nlet bottomMargin = worksheet.GetBottomMargin();\nworksheet.GetRange(\"A1\").SetValue(\"Bottom margin: \" + bottomMargin + \" mm\");\n```",
        "memberof": "ApiWorksheet",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nPoints",
                "description": "The bottom margin size measured in points.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetBottomMargin",
        "longname": "ApiWorksheet#SetBottomMargin",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8543,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/SetBottomMargin.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the bottom margin of the sheet.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {number} - The bottom margin size measured in points.\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/GetBottomMargin.js\n\t */",
        "description": "Returns the bottom margin of the sheet.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet bottomMargin = worksheet.GetBottomMargin();\nworksheet.GetRange(\"A1\").SetValue(\"Bottom margin: \" + bottomMargin + \" mm\");\n```",
        "memberof": "ApiWorksheet",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GetBottomMargin",
        "longname": "ApiWorksheet#GetBottomMargin",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8554,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/GetBottomMargin.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the page orientation.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @param {PageOrientation} sPageOrientation - The page orientation type.\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/SetPageOrientation.js\n\t */",
        "description": "Sets the page orientation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.SetPageOrientation(\"xlPortrait\");\nlet pageOrientation = worksheet.GetPageOrientation();\nworksheet.GetRange(\"A1\").SetValue(\"Page orientation: \");\nworksheet.GetRange(\"C1\").SetValue(pageOrientation);\n```",
        "memberof": "ApiWorksheet",
        "params": [
            {
                "type": {
                    "names": [
                        "PageOrientation"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PageOrientation"
                    }
                },
                "name": "sPageOrientation",
                "description": "The page orientation type.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetPageOrientation",
        "longname": "ApiWorksheet#SetPageOrientation",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8573,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/SetPageOrientation.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the page orientation.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {PageOrientation}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/GetPageOrientation.js\n\t */",
        "description": "Returns the page orientation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet pageOrientation = worksheet.GetPageOrientation();\nworksheet.GetRange(\"A1\").SetValue(\"Page orientation: \");\nworksheet.GetRange(\"C1\").SetValue(pageOrientation);\n```",
        "memberof": "ApiWorksheet",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "PageOrientation"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PageOrientation"
                    }
                }
            }
        ],
        "name": "GetPageOrientation",
        "longname": "ApiWorksheet#GetPageOrientation",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8584,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/GetPageOrientation.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the page PrintHeadings property which specifies whether the current sheet row/column headings must be printed or not.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean} - Specifies whether the current sheet row/column headings must be printed or not.\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/GetPrintHeadings.js\n\t */",
        "description": "Returns the page PrintHeadings property which specifies whether the current sheet row/column headings must be printed or not.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.SetPrintHeadings(true);\nworksheet.GetRange(\"A1\").SetValue(\"Row and column headings will be printed with this page: \" + worksheet.GetPrintHeadings());\n```",
        "memberof": "ApiWorksheet",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "GetPrintHeadings",
        "longname": "ApiWorksheet#GetPrintHeadings",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8606,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/GetPrintHeadings.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies whether the current sheet row/column headers must be printed or not.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} bPrint - Specifies whether the current sheet row/column headers must be printed or not.\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/SetPrintHeadings.js\n\t */",
        "description": "Specifies whether the current sheet row/column headers must be printed or not.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.SetPrintHeadings(true);\nworksheet.GetRange(\"A1\").SetValue(\"Row and column headings will be printed with this page: \" + worksheet.GetPrintHeadings());\n```",
        "memberof": "ApiWorksheet",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bPrint",
                "description": "Specifies whether the current sheet row/column headers must be printed or not.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetPrintHeadings",
        "longname": "ApiWorksheet#SetPrintHeadings",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8617,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/SetPrintHeadings.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the page PrintGridlines property which specifies whether the current sheet gridlines must be printed or not.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean} - True if cell gridlines are printed on this page.\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/GetPrintGridlines.js\n\t */",
        "description": "Returns the page PrintGridlines property which specifies whether the current sheet gridlines must be printed or not.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.SetPrintGridlines(true);\nworksheet.GetRange(\"A1\").SetValue(\"Gridlines of cells will be printed on this page: \" + worksheet.GetPrintGridlines());\n```",
        "memberof": "ApiWorksheet",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "GetPrintGridlines",
        "longname": "ApiWorksheet#GetPrintGridlines",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8637,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/GetPrintGridlines.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies whether the current sheet gridlines must be printed or not.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} bPrint - Defines if cell gridlines are printed on this page or not.\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/SetPrintGridlines.js\n\t */",
        "description": "Specifies whether the current sheet gridlines must be printed or not.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.SetPrintGridlines(true);\nworksheet.GetRange(\"A1\").SetValue(\"Gridlines of cells will be printed on this page: \" + worksheet.GetPrintGridlines());\n```",
        "memberof": "ApiWorksheet",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bPrint",
                "description": "Defines if cell gridlines are printed on this page or not.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetPrintGridlines",
        "longname": "ApiWorksheet#SetPrintGridlines",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8648,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/SetPrintGridlines.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns an array of ApiName objects.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiName[]}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/GetDefNames.js\n\t */",
        "description": "Returns an array of ApiName objects.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nworksheet.GetRange(\"B1\").SetValue(\"2\");\nworksheet.GetRange(\"A2\").SetValue(\"A\");\nworksheet.GetRange(\"B2\").SetValue(\"B\");\nworksheet.AddDefName(\"numbers\", \"Sheet1!$A$1:$B$1\");\nworksheet.AddDefName(\"letters\", \"Sheet1!$A$2:$B$2\");\nlet defNames = worksheet.GetDefNames();\nworksheet.GetRange(\"A4\").SetValue(\"DefNames: \" + defNames[0].GetName() + \", \" + defNames[1].GetName());\n```",
        "memberof": "ApiWorksheet",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ApiName>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiName",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetDefNames",
        "longname": "ApiWorksheet#GetDefNames",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8668,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/GetDefNames.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the ApiName object by the worksheet name.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} defName - The worksheet name.\n\t * @returns {ApiName | null} - returns null if definition name doesn't exist.\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/GetDefName.js\n\t */",
        "description": "Returns the ApiName object by the worksheet name.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nworksheet.GetRange(\"B1\").SetValue(\"2\");\nworksheet.AddDefName(\"numbers\", \"Sheet1!$A$1:$B$1\");\nlet defName = worksheet.GetDefName(\"numbers\");\nworksheet.GetRange(\"A3\").SetValue(\"DefName: \" + defName.GetName());\n```",
        "memberof": "ApiWorksheet",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "defName",
                "description": "The worksheet name.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiName",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiName"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetDefName",
        "longname": "ApiWorksheet#GetDefName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8688,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/GetDefName.js"
        ]
    },
    {
        "comment": "/**\n\t * Adds a new name to the current worksheet.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sName - The range name.\n\t * @param {string} sRef  - Must contain the sheet name, followed by sign ! and a range of cells.\n\t * Example: \"Sheet1!$A$1:$B$2\".\n\t * @param {boolean} isHidden - Defines if the range name is hidden or not.\n\t * @returns {boolean} - returns false if sName or sRef are invalid.\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/AddDefName.js\n\t */",
        "description": "Adds a new name to the current worksheet.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nworksheet.GetRange(\"B1\").SetValue(\"2\");\nworksheet.AddDefName(\"numbers\", \"Sheet1!$A$1:$B$1\");\nworksheet.GetRange(\"A3\").SetValue(\"We defined a name 'numbers' for a range of cells A1:B1.\");\n```",
        "memberof": "ApiWorksheet",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sName",
                "description": "The range name.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sRef",
                "description": "Must contain the sheet name, followed by sign ! and a range of cells.\nExample: \"Sheet1!$A$1:$B$2\".",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isHidden",
                "description": "Defines if the range name is hidden or not.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "AddDefName",
        "longname": "ApiWorksheet#AddDefName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8708,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/AddDefName.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns all comments from the current worksheet.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiComment[]}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/GetComments.js\n\t */",
        "description": "Returns all comments from the current worksheet.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nlet range = worksheet.GetRange(\"A1\");\nrange.AddComment(\"This is just a number.\");\nlet comments = worksheet.GetComments();\nworksheet.GetRange(\"A4\").SetValue(\"Comment: \" + comments[0].GetText());\n```",
        "memberof": "ApiWorksheet",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ApiComment>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiComment",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetComments",
        "longname": "ApiWorksheet#GetComments",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8725,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/GetComments.js"
        ]
    },
    {
        "comment": "/**\n\t * Deletes the current worksheet.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/Delete.js\n\t */",
        "description": "Deletes the current worksheet.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nApi.AddSheet(\"New sheet\");\nlet sheet = Api.GetActiveSheet();\nsheet.Delete();\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A3\").SetValue(\"This method just deleted the second sheet from this spreadsheet.\");\n```",
        "memberof": "ApiWorksheet",
        "params": null,
        "returns": null,
        "name": "Delete",
        "longname": "ApiWorksheet#Delete",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8744,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/Delete.js"
        ]
    },
    {
        "comment": "/**\n\t * Adds a hyperlink to the specified range.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sRange - The range where the hyperlink will be added to.\n\t * @param {string} sAddress - The link address.\n\t * @param {string} subAddress - The link subaddress to insert internal sheet hyperlinks.\n\t * @param {string} sScreenTip - The screen tip text.\n\t * @param {string} sTextToDisplay - The link text that will be displayed on the sheet.\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/SetHyperlink.js\n\t */",
        "description": "Adds a hyperlink to the specified range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.SetHyperlink(\"A1\", \"https://api.onlyoffice.com/docbuilder/basic\", \"Api ONLYOFFICE\", \"ONLYOFFICE for developers\");\n```",
        "memberof": "ApiWorksheet",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sRange",
                "description": "The range where the hyperlink will be added to.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sAddress",
                "description": "The link address.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "subAddress",
                "description": "The link subaddress to insert internal sheet hyperlinks.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sScreenTip",
                "description": "The screen tip text.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sTextToDisplay",
                "description": "The link text that will be displayed on the sheet.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetHyperlink",
        "longname": "ApiWorksheet#SetHyperlink",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8759,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/SetHyperlink.js"
        ]
    },
    {
        "comment": "/**\n\t * Creates a chart of the specified type from the selected data range of the current sheet.\n\t * <note>Please note that the horizontal and vertical offsets are calculated within the limits of the specified column and\n\t * row cells only. If this value exceeds the cell width or height, another vertical/horizontal position will be set.</note>\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sDataRange - The selected cell range which will be used to get the data for the chart, formed specifically and including the sheet name.\n\t * @param {boolean} bInRows - Specifies whether to take the data from the rows or from the columns. If true, the data from the rows will be used.\n\t * @param {ChartType} sType - The chart type used for the chart display.\n\t * @param {number} nStyleIndex - The chart color style index (can be <b>1 - 48</b>, as described in OOXML specification).\n\t * @param {EMU} nExtX - The chart width in English measure units\n\t * @param {EMU} nExtY - The chart height in English measure units.\n\t * @param {number} nFromCol - The number of the column where the beginning of the chart will be placed.\n\t * @param {EMU} nColOffset - The offset from the nFromCol column to the left part of the chart measured in English measure units.\n\t * @param {number} nFromRow - The number of the row where the beginning of the chart will be placed.\n\t * @param {EMU} nRowOffset - The offset from the nFromRow row to the upper part of the chart measured in English measure units.\n\t * @returns {ApiChart}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/AddChart.js\n\t */",
        "description": "Creates a chart of the specified type from the selected data range of the current sheet.\n<note>Please note that the horizontal and vertical offsets are calculated within the limits of the specified column and\nrow cells only. If this value exceeds the cell width or height, another vertical/horizontal position will be set.</note>\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\n```",
        "memberof": "ApiWorksheet",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sDataRange",
                "description": "The selected cell range which will be used to get the data for the chart, formed specifically and including the sheet name.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bInRows",
                "description": "Specifies whether to take the data from the rows or from the columns. If true, the data from the rows will be used.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ChartType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ChartType"
                    }
                },
                "name": "sType",
                "description": "The chart type used for the chart display.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nStyleIndex",
                "description": "The chart color style index (can be <b>1 - 48</b>, as described in OOXML specification).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nExtX",
                "description": "The chart width in English measure units",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nExtY",
                "description": "The chart height in English measure units.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nFromCol",
                "description": "The number of the column where the beginning of the chart will be placed.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nColOffset",
                "description": "The offset from the nFromCol column to the left part of the chart measured in English measure units.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nFromRow",
                "description": "The number of the row where the beginning of the chart will be placed.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nRowOffset",
                "description": "The offset from the nFromRow row to the upper part of the chart measured in English measure units.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiChart"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiChart"
                    }
                }
            }
        ],
        "name": "AddChart",
        "longname": "ApiWorksheet#AddChart",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8818,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/AddChart.js"
        ]
    },
    {
        "comment": "/**\n\t * Adds a shape to the current sheet with the parameters specified.\n\t * <note>Please note that the horizontal and vertical offsets are\n\t * calculated within the limits of the specified column and row cells\n\t * only. If this value exceeds the cell width or height, another vertical/horizontal position will be set.</note>\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ShapeType} [sType=\"rect\"] - The shape type which specifies the preset shape geometry.\n\t * @param {EMU} nWidth - The shape width in English measure units.\n\t * @param {EMU} nHeight - The shape height in English measure units.\n\t * @param {ApiFill} oFill - The color or pattern used to fill the shape.\n\t * @param {ApiStroke} oStroke - The stroke used to create the element shadow.\n\t * @param {number} nFromCol - The number of the column where the beginning of the shape will be placed.\n\t * @param {EMU} nColOffset - The offset from the nFromCol column to the left part of the shape measured in English measure units.\n\t * @param {number} nFromRow - The number of the row where the beginning of the shape will be placed.\n\t * @param {EMU} nRowOffset - The offset from the nFromRow row to the upper part of the shape measured in English measure units.\n\t * @returns {ApiShape}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/AddShape.js\n\t */",
        "description": "Adds a shape to the current sheet with the parameters specified.\n<note>Please note that the horizontal and vertical offsets are\ncalculated within the limits of the specified column and row cells\nonly. If this value exceeds the cell width or height, another vertical/horizontal position will be set.</note>\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet gradientStop1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nlet gradientStop2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nlet fill = Api.CreateLinearGradientFill([gradientStop1, gradientStop2], 5400000);\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nworksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\n```",
        "memberof": "ApiWorksheet",
        "params": [
            {
                "type": {
                    "names": [
                        "ShapeType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ShapeType"
                    }
                },
                "name": "sType",
                "description": "The shape type which specifies the preset shape geometry.",
                "optional": true,
                "defaultvalue": "\"rect\""
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nWidth",
                "description": "The shape width in English measure units.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nHeight",
                "description": "The shape height in English measure units.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                },
                "name": "oFill",
                "description": "The color or pattern used to fill the shape.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiStroke"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiStroke"
                    }
                },
                "name": "oStroke",
                "description": "The stroke used to create the element shadow.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nFromCol",
                "description": "The number of the column where the beginning of the shape will be placed.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nColOffset",
                "description": "The offset from the nFromCol column to the left part of the shape measured in English measure units.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nFromRow",
                "description": "The number of the row where the beginning of the shape will be placed.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nRowOffset",
                "description": "The offset from the nFromRow row to the upper part of the shape measured in English measure units.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiShape"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiShape"
                    }
                }
            }
        ],
        "name": "AddShape",
        "longname": "ApiWorksheet#AddShape",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8861,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/AddShape.js"
        ]
    },
    {
        "comment": "/**\n\t * Adds an image to the current sheet with the parameters specified.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sImageSrc - The image source where the image to be inserted should be taken from (currently only internet URL or Base64 encoded images are supported).\n\t * @param {EMU} nWidth - The image width in English measure units.\n\t * @param {EMU} nHeight - The image height in English measure units.\n\t * @param {number} nFromCol - The number of the column where the beginning of the image will be placed.\n\t * @param {EMU} nColOffset - The offset from the nFromCol column to the left part of the image measured in English measure units.\n\t * @param {number} nFromRow - The number of the row where the beginning of the image will be placed.\n\t * @param {EMU} nRowOffset - The offset from the nFromRow row to the upper part of the image measured in English measure units.\n\t * @returns {ApiImage}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/AddImage.js\n\t */",
        "description": "Adds an image to the current sheet with the parameters specified.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.AddImage(\"https://api.onlyoffice.com/content/img/docbuilder/examples/coordinate_aspects.png\", 60 * 36000, 35 * 36000, 0, 2 * 36000, 0, 3 * 36000);\n```",
        "memberof": "ApiWorksheet",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sImageSrc",
                "description": "The image source where the image to be inserted should be taken from (currently only internet URL or Base64 encoded images are supported).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nWidth",
                "description": "The image width in English measure units.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nHeight",
                "description": "The image height in English measure units.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nFromCol",
                "description": "The number of the column where the beginning of the image will be placed.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nColOffset",
                "description": "The offset from the nFromCol column to the left part of the image measured in English measure units.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nFromRow",
                "description": "The number of the row where the beginning of the image will be placed.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nRowOffset",
                "description": "The offset from the nFromRow row to the upper part of the image measured in English measure units.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiImage"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiImage"
                    }
                }
            }
        ],
        "name": "AddImage",
        "longname": "ApiWorksheet#AddImage",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8882,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/AddImage.js"
        ]
    },
    {
        "comment": "/**\n     * Groups an array of drawings in the current worksheet.\n     * @memberof ApiWorksheet\n     * @typeofeditors [\"CSE\"]\n     * @param {DrawingForGroup[]} aDrawings - An array of drawings to group.\n     * @returns {ApiGroup}\n\t * @since 8.3.0\n     * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/GroupDrawings.js\n\t */",
        "description": "Groups an array of drawings in the current worksheet.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill1 = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet fill2 = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape1 = worksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill1, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet shape2 = worksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill2, stroke, 0, 15 * 36000, 0, 30 * 36000);\nworksheet.GroupDrawings([shape1, shape2]);\n```",
        "memberof": "ApiWorksheet",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<DrawingForGroup>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "DrawingForGroup",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "aDrawings",
                "description": "An array of drawings to group.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiGroup"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiGroup"
                    }
                }
            }
        ],
        "name": "GroupDrawings",
        "longname": "ApiWorksheet#GroupDrawings",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8897,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/GroupDrawings.js"
        ]
    },
    {
        "comment": "/**\n\t * Adds a Text Art object to the current sheet with the parameters specified.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiTextPr} [oTextPr=Api.CreateTextPr()] - The text properties.\n\t * @param {string} [sText=\"Your text here\"] - The text for the Text Art object.\n\t * @param {TextTransform} [sTransform=\"textNoShape\"] - Text transform type.\n\t * @param {ApiFill} [oFill=Api.CreateNoFill()] - The color or pattern used to fill the Text Art object.\n\t * @param {ApiStroke} [oStroke=Api.CreateStroke(0, Api.CreateNoFill())] - The stroke used to create the Text Art object shadow.\n\t * @param {number} [nRotAngle=0] - Rotation angle.\n\t * @param {EMU} [nWidth=1828800] - The Text Art width measured in English measure units.\n\t * @param {EMU} [nHeight=1828800] - The Text Art heigth measured in English measure units.\n\t * @param {number} [nFromCol=0] - The column number where the beginning of the Text Art object will be placed.\n\t * @param {number} [nFromRow=0] - The row number where the beginning of the Text Art object will be placed.\n\t * @param {EMU} [nColOffset=0] - The offset from the nFromCol column to the left part of the Text Art object measured in English measure units.\n\t * @param {EMU} [nRowOffset=0] - The offset from the nFromRow row to the upper part of the Text Art object measured in English measure units.\n\t * @returns {ApiDrawing}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/AddWordArt.js\n\t */",
        "description": "Adds a Text Art object to the current sheet with the parameters specified.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet textProps = Api.CreateTextPr();\ntextProps.SetFontSize(72);\ntextProps.SetBold(true);\ntextProps.SetCaps(true);\ntextProps.SetColor(51, 51, 51, false);\ntextProps.SetFontFamily(\"Comic Sans MS\");\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(1 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\nworksheet.AddWordArt(textProps, \"onlyoffice\", \"textArchUp\", fill, stroke, 0, 100 * 36000, 20 * 36000, 0, 2, 2 * 36000, 3 * 36000);\n```",
        "memberof": "ApiWorksheet",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                },
                "name": "oTextPr",
                "description": "The text properties.",
                "optional": true,
                "defaultvalue": "Api.CreateTextPr()"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sText",
                "description": "The text for the Text Art object.",
                "optional": true,
                "defaultvalue": "\"Your text here\""
            },
            {
                "type": {
                    "names": [
                        "TextTransform"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "TextTransform"
                    }
                },
                "name": "sTransform",
                "description": "Text transform type.",
                "optional": true,
                "defaultvalue": "\"textNoShape\""
            },
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFill"
                    }
                },
                "name": "oFill",
                "description": "The color or pattern used to fill the Text Art object.",
                "optional": true,
                "defaultvalue": "Api.CreateNoFill()"
            },
            {
                "type": {
                    "names": [
                        "ApiStroke"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiStroke"
                    }
                },
                "name": "oStroke",
                "description": "The stroke used to create the Text Art object shadow.",
                "optional": true,
                "defaultvalue": "Api.CreateStroke(0, Api.CreateNoFill())"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nRotAngle",
                "description": "Rotation angle.",
                "optional": true,
                "defaultvalue": 0
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nWidth",
                "description": "The Text Art width measured in English measure units.",
                "optional": true,
                "defaultvalue": 1828800
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nHeight",
                "description": "The Text Art heigth measured in English measure units.",
                "optional": true,
                "defaultvalue": 1828800
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nFromCol",
                "description": "The column number where the beginning of the Text Art object will be placed.",
                "optional": true,
                "defaultvalue": 0
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nFromRow",
                "description": "The row number where the beginning of the Text Art object will be placed.",
                "optional": true,
                "defaultvalue": 0
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nColOffset",
                "description": "The offset from the nFromCol column to the left part of the Text Art object measured in English measure units.",
                "optional": true,
                "defaultvalue": 0
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nRowOffset",
                "description": "The offset from the nFromRow row to the upper part of the Text Art object measured in English measure units.",
                "optional": true,
                "defaultvalue": 0
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiDrawing"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiDrawing"
                    }
                }
            }
        ],
        "name": "AddWordArt",
        "longname": "ApiWorksheet#AddWordArt",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8956,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/AddWordArt.js"
        ]
    },
    {
        "comment": "/**\n\t * Adds an OLE object to the current sheet with the parameters specified.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sImageSrc - The image source where the image to be inserted should be taken from (currently, only internet URL or Base64 encoded images are supported).\n\t * @param {EMU} nWidth - The OLE object width in English measure units.\n\t * @param {EMU} nHeight - The OLE object height in English measure units.\n\t * @param {string} sData - The OLE object string data.\n\t * @param {string} sAppId - The application ID associated with the current OLE object.\n\t * @param {number} nFromCol - The number of the column where the beginning of the OLE object will be placed.\n\t * @param {EMU} nColOffset - The offset from the nFromCol column to the left part of the OLE object measured in English measure units.\n\t * @param {number} nFromRow - The number of the row where the beginning of the OLE object will be placed.\n\t * @param {EMU} nRowOffset - The offset from the nFromRow row to the upper part of the OLE object measured in English measure units.\n\t * @returns {ApiOleObject}\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/AddOleObject.js\n\t */",
        "description": "Adds an OLE object to the current sheet with the parameters specified.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.AddOleObject(\"https://api.onlyoffice.com/content/img/docbuilder/examples/ole-object-image.png\", 130 * 36000, 90 * 36000, \"https://youtu.be/SKGz4pmnpgY\", \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\", 0, 2 * 36000, 4, 3 * 36000);\n```",
        "memberof": "ApiWorksheet",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sImageSrc",
                "description": "The image source where the image to be inserted should be taken from (currently, only internet URL or Base64 encoded images are supported).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nWidth",
                "description": "The OLE object width in English measure units.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nHeight",
                "description": "The OLE object height in English measure units.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sData",
                "description": "The OLE object string data.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sAppId",
                "description": "The application ID associated with the current OLE object.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nFromCol",
                "description": "The number of the column where the beginning of the OLE object will be placed.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nColOffset",
                "description": "The offset from the nFromCol column to the left part of the OLE object measured in English measure units.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nFromRow",
                "description": "The number of the row where the beginning of the OLE object will be placed.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nRowOffset",
                "description": "The offset from the nFromRow row to the upper part of the OLE object measured in English measure units.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiOleObject"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiOleObject"
                    }
                }
            }
        ],
        "name": "AddOleObject",
        "longname": "ApiWorksheet#AddOleObject",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 8992,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/AddOleObject.js"
        ]
    },
    {
        "comment": "/**\n\t * Replaces the current image with a new one.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sImageUrl - The image source where the image to be inserted should be taken from (currently only internet URL or Base64 encoded images are supported).\n\t * @param {EMU} nWidth - The image width in English measure units.\n\t * @param {EMU} nHeight - The image height in English measure units.\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/ReplaceCurrentImage.js\n\t */",
        "description": "Replaces the current image with a new one.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet drawing = worksheet.AddImage(\"https://api.onlyoffice.com/content/img/docbuilder/examples/coordinate_aspects.png\", 60 * 36000, 35 * 36000, 0, 2 * 36000, 0, 3 * 36000);\n// todo_example we don't have method ApiDrawing.Select() which is necessary for this example\nworksheet.ReplaceCurrentImage(\"https://helpcenter.onlyoffice.com/images/Help/GettingStarted/Documents/big/EditDocument.png\", 60 * 36000, 35 * 36000);\n```",
        "memberof": "ApiWorksheet",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sImageUrl",
                "description": "The image source where the image to be inserted should be taken from (currently only internet URL or Base64 encoded images are supported).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nWidth",
                "description": "The image width in English measure units.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nHeight",
                "description": "The image height in English measure units.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "ReplaceCurrentImage",
        "longname": "ApiWorksheet#ReplaceCurrentImage",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9015,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/ReplaceCurrentImage.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns all drawings from the current sheet.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {Drawing[]}.\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/GetAllDrawings.js\n\t */",
        "description": "Returns all drawings from the current sheet.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet drawing = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);\ndrawing.SetTitle(\"Financial Overview\", 13);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\ndrawing.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\ndrawing.SetSeriesFill(fill, 1, false);\nlet drawings = worksheet.GetAllDrawings();\ndrawings[0].SetSize(150 * 36000, 100 * 36000);\n```",
        "memberof": "ApiWorksheet",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Drawing>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "Drawing",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetAllDrawings",
        "longname": "ApiWorksheet#GetAllDrawings",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9031,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/GetAllDrawings.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns all images from the current sheet.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiImage[]}.\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/GetAllImages.js\n\t */",
        "description": "Returns all images from the current sheet.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.AddImage(\"https://api.onlyoffice.com/content/img/docbuilder/examples/coordinate_aspects.png\", 60 * 36000, 35 * 36000, 0, 2 * 36000, 0, 3 * 36000);\nlet images = worksheet.GetAllImages();\nlet classType = images[0].GetClassType();\nworksheet.GetRange(\"A10\").SetValue(\"Class Type = \" + classType);\n```",
        "memberof": "ApiWorksheet",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ApiImage>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiImage",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetAllImages",
        "longname": "ApiWorksheet#GetAllImages",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9042,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/GetAllImages.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns all shapes from the current sheet.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiShape[]}.\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/GetAllShapes.js\n\t */",
        "description": "Returns all shapes from the current sheet.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet gradientStop1 = Api.CreateGradientStop(Api.CreateRGBColor(255, 213, 191), 0);\nlet gradientStop2 = Api.CreateGradientStop(Api.CreateRGBColor(255, 111, 61), 100000);\nlet fill = Api.CreateLinearGradientFill([gradientStop1, gradientStop2], 5400000);\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nworksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet shapes = worksheet.GetAllShapes();\nlet content = shapes[0].GetContent();\ncontent.RemoveAllElements();\nshapes[0].SetVerticalTextAlign(\"bottom\");\nlet paragraph = Api.CreateParagraph();\nparagraph.SetJc(\"left\");\nparagraph.AddText(\"We removed all elements from the shape and added a new paragraph inside it \");\nparagraph.AddText(\"aligning it vertically by the bottom.\");\ncontent.Push(paragraph);\n```",
        "memberof": "ApiWorksheet",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ApiShape>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiShape",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetAllShapes",
        "longname": "ApiWorksheet#GetAllShapes",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9061,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/GetAllShapes.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns all charts from the current sheet.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiChart[]}.\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/GetAllCharts.js\n\t */",
        "description": "Returns all charts from the current sheet.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\nlet charts = worksheet.GetAllCharts();\nlet stroke = Api.CreateStroke(1 * 5000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\ncharts[0].SetMinorHorizontalGridlines(stroke);\n```",
        "memberof": "ApiWorksheet",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ApiChart>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiChart",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetAllCharts",
        "longname": "ApiWorksheet#GetAllCharts",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9080,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/GetAllCharts.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns all OLE objects from the current sheet.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiOleObject[]}.\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/GetAllOleObjects.js\n\t */",
        "description": "Returns all OLE objects from the current sheet.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.AddOleObject(\"https://i.ytimg.com/vi_webp/SKGz4pmnpgY/sddefault.webp\", 130 * 36000, 90 * 36000, \"https://youtu.be/SKGz4pmnpgY\", \"asc.{38E022EA-AD92-45FC-B22B-49DF39746DB4}\", 0, 2 * 36000, 4, 3 * 36000);\nlet oleObjects = worksheet.GetAllOleObjects();\nlet appId = oleObjects[0].GetApplicationId();\nworksheet.GetRange(\"A1\").SetValue(\"The application ID for the current OLE object: \" + appId);\n```",
        "memberof": "ApiWorksheet",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ApiOleObject>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiOleObject",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetAllOleObjects",
        "longname": "ApiWorksheet#GetAllOleObjects",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9099,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/GetAllOleObjects.js"
        ]
    },
    {
        "comment": "/**\n\t * Moves the current sheet to another location in the workbook.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiWorksheet} before - The sheet before which the current sheet will be placed. You cannot specify \"before\" if you specify \"after\".\n\t * @param {ApiWorksheet} after - The sheet after which the current sheet will be placed. You cannot specify \"after\" if you specify \"before\".\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/Move.js\n\t */",
        "description": "Moves the current sheet to another location in the workbook.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet sheet1 = Api.GetActiveSheet();\nApi.AddSheet(\"Sheet2\");\nlet sheet2 = Api.GetActiveSheet();\nsheet2.Move(sheet1);\n```",
        "memberof": "ApiWorksheet",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiWorksheet"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiWorksheet"
                    }
                },
                "name": "before",
                "description": "The sheet before which the current sheet will be placed. You cannot specify \"before\" if you specify \"after\".",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiWorksheet"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiWorksheet"
                    }
                },
                "name": "after",
                "description": "The sheet after which the current sheet will be placed. You cannot specify \"after\" if you specify \"before\".",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "Move",
        "longname": "ApiWorksheet#Move",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9119,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/Move.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a pivot table by its name from the current worksheet, or null if it does not exist.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} name - The pivot table name.\n\t * @returns {ApiPivotTable|null}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/Cell/ApiWorksheet/Methods/GetPivotByName.js\n\t */",
        "description": "Returns a pivot table by its name from the current worksheet, or null if it does not exist.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Price');\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('C2').SetValue(42.5);\nworksheet.GetRange('C3').SetValue(35.2);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$C$3\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\nApi.GetActiveSheet().GetPivotByName(pivotTable.GetName()).AddFields({\n    rows: 'Region',\n});\n\nApi.GetActiveSheet().GetPivotByName(pivotTable.GetName()).AddDataField('Price');\n```",
        "memberof": "ApiWorksheet",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "name",
                "description": "The pivot table name.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiPivotTable",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiPivotTable"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetPivotByName",
        "longname": "ApiWorksheet#GetPivotByName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9140,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/GetPivotByName.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns all pivot tables from the current worksheet.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiPivotTable[]}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/Cell/ApiWorksheet/Methods/GetAllPivotTables.js\n\t */",
        "description": "Returns all pivot tables from the current worksheet.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Price');\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('C2').SetValue(42.5);\nworksheet.GetRange('C3').SetValue(35.2);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$C$3\");\nlet pivotRef = worksheet.GetRange('A7');\nApi.InsertPivotExistingWorksheet(dataRef, worksheet.GetRange('A7'));\nApi.InsertPivotExistingWorksheet(dataRef, worksheet.GetRange('D7'));\nApi.InsertPivotExistingWorksheet(dataRef, worksheet.GetRange('G7'));\n\nworksheet.GetAllPivotTables().forEach(function (pivot) {\n    pivot.AddDataField('Price');\n});\n\n```",
        "memberof": "ApiWorksheet",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ApiPivotTable>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiPivotTable",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetAllPivotTables",
        "longname": "ApiWorksheet#GetAllPivotTables",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9158,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/GetAllPivotTables.js"
        ]
    },
    {
        "comment": "/**\n\t * Refreshes all pivot tables on the current worksheet.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/Cell/ApiWorksheet/Methods/RefreshAllPivots.js\n\t */",
        "description": "Refreshes all pivot tables on the current worksheet.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Price');\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('C2').SetValue(42.5);\nworksheet.GetRange('C3').SetValue(35.2);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$C$3\");\nlet pivotRef = worksheet.GetRange('A7');\nApi.InsertPivotExistingWorksheet(dataRef, worksheet.GetRange('A7'));\nApi.InsertPivotExistingWorksheet(dataRef, worksheet.GetRange('D7'));\nApi.InsertPivotExistingWorksheet(dataRef, worksheet.GetRange('G7'));\n\nworksheet.GetAllPivotTables().forEach(function (pivot) {\n    pivot.AddDataField('Price');\n});\n\nworksheet.RefreshAllPivots();\n\n```",
        "memberof": "ApiWorksheet",
        "params": null,
        "returns": null,
        "name": "RefreshAllPivots",
        "longname": "ApiWorksheet#RefreshAllPivots",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9180,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/RefreshAllPivots.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the freeze panes from the current worksheet.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiFreezePanes}\n\t * @since 8.0.0\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/GetFreezePanes.js\n\t */",
        "description": "Returns the freeze panes from the current worksheet.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nApi.SetFreezePanesType('column');\nlet worksheet = Api.GetActiveSheet();\nlet freezePanes = worksheet.GetFreezePanes();\nlet range = freezePanes.GetLocation();\nworksheet.GetRange(\"A1\").SetValue(\"Location: \");\nworksheet.GetRange(\"B1\").SetValue(range.GetAddress());\n```",
        "memberof": "ApiWorksheet",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiFreezePanes"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFreezePanes"
                    }
                }
            }
        ],
        "name": "GetFreezePanes",
        "longname": "ApiWorksheet#GetFreezePanes",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9195,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/GetFreezePanes.js"
        ]
    },
    {
        "comment": "/**\n\t * Creates a protected range of the specified type from the selected data range of the current sheet.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sTitle - The title which will be displayed for the current protected range.\n\t * @param {string} sDataRange - The selected cell range which will be used to get the data for the protected range.\n\t * @returns {ApiProtectedRange | null}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/AddProtectedRange.js\n\t */",
        "description": "Creates a protected range of the specified type from the selected data range of the current sheet.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nworksheet.GetRange(\"B1\").SetValue(\"2\");\nworksheet.AddProtectedRange(\"protectedRange\", \"Sheet1!$A$1:$B$1\");\n```",
        "memberof": "ApiWorksheet",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sTitle",
                "description": "The title which will be displayed for the current protected range.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sDataRange",
                "description": "The selected cell range which will be used to get the data for the protected range.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiProtectedRange",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiProtectedRange"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "AddProtectedRange",
        "longname": "ApiWorksheet#AddProtectedRange",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9215,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/AddProtectedRange.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a protected range object by its title.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sTitle - The title of the protected range that will be returned.\n\t * @returns {ApiProtectedRange | null}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/GetProtectedRange.js\n\t */",
        "description": "Returns a protected range object by its title.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.AddProtectedRange(\"protectedRange\", \"Sheet1!$A$1:$B$1\");\nlet protectedRange = worksheet.GetProtectedRange(\"protectedRange\");\nprotectedRange.SetTitle(\"protectedRangeNew\");\n```",
        "memberof": "ApiWorksheet",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sTitle",
                "description": "The title of the protected range that will be returned.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiProtectedRange",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiProtectedRange"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetProtectedRange",
        "longname": "ApiWorksheet#GetProtectedRange",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9261,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/GetProtectedRange.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns all protected ranges from the current worksheet.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiProtectedRange[] | null}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/GetAllProtectedRanges.js\n\t */",
        "description": "Returns all protected ranges from the current worksheet.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.AddProtectedRange(\"protectedRange1\", \"Sheet1!$A$1:$B$1\");\nworksheet.AddProtectedRange(\"protectedRange2\", \"Sheet1!$A$2:$B$2\");\nlet protectedRanges = worksheet.GetAllProtectedRanges();\nprotectedRanges[0].SetTitle(\"protectedRangeNew1\");\nprotectedRanges[1].SetTitle(\"protectedRangeNew2\");\n```",
        "memberof": "ApiWorksheet",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ApiProtectedRange>",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "ApiProtectedRange",
                                        "type": "NameExpression"
                                    }
                                ]
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetAllProtectedRanges",
        "longname": "ApiWorksheet#GetAllProtectedRanges",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9285,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/GetAllProtectedRanges.js"
        ]
    },
    {
        "comment": "/**\n\t * Pastes the contents of the clipboard to the current sheet.\n\t * @memberof ApiWorksheet\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange?} [destination] - The cell range where the clipboard contents should be pasted. If this argument is omitted, the current selection is used.\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiWorksheet/Methods/Paste.js\n\t */",
        "description": "Pastes the contents of the clipboard to the current sheet.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.Paste();\n```",
        "memberof": "ApiWorksheet",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange",
                        "nullable": true
                    }
                },
                "name": "destination",
                "description": "The cell range where the clipboard contents should be pasted. If this argument is omitted, the current selection is used.",
                "optional": true,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "Paste",
        "longname": "ApiWorksheet#Paste",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9313,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiWorksheet/Methods/Paste.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies the cell border position.\n\t * @typedef {(\"DiagonalDown\" | \"DiagonalUp\" | \"Bottom\" | \"Left\" | \"Right\" | \"Top\" | \"InsideHorizontal\" | \"InsideVertical\")} BordersIndex\n\t * @see office-js-api/Examples/Enumerations/BordersIndex.js\n\t */",
        "description": "Specifies the cell border position.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nworksheet.GetRange(\"E2\").SetBorders(\"Bottom\", \"Dotted\", Api.CreateColorFromRGB(0, 0, 0));\n```",
        "name": "BordersIndex",
        "longname": "BordersIndex",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 9336,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/BordersIndex.js"
        ],
        "type": {
            "names": [
                "\"DiagonalDown\"",
                "\"DiagonalUp\"",
                "\"Bottom\"",
                "\"Left\"",
                "\"Right\"",
                "\"Top\"",
                "\"InsideHorizontal\"",
                "\"InsideVertical\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"DiagonalDown\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"DiagonalUp\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Bottom\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Left\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Right\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Top\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"InsideHorizontal\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"InsideVertical\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Specifies the line style used to form the cell border.\n\t * @typedef {(\"None\" | \"Double\" | \"Hair\" | \"DashDotDot\" | \"DashDot\" | \"Dotted\" | \"Dashed\" | \"Thin\" | \"MediumDashDotDot\" | \"SlantDashDot\" | \"MediumDashDot\" | \"MediumDashed\" | \"Medium\" | \"Thick\")} LineStyle\n\t * @see office-js-api/Examples/Enumerations/LineStyle.js\n\t */",
        "description": "Specifies the line style used to form the cell border.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nworksheet.GetRange(\"E2\").SetBorders(\"Bottom\", \"Dotted\", Api.CreateColorFromRGB(0, 0, 0));\n```",
        "name": "LineStyle",
        "longname": "LineStyle",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 9342,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/LineStyle.js"
        ],
        "type": {
            "names": [
                "\"None\"",
                "\"Double\"",
                "\"Hair\"",
                "\"DashDotDot\"",
                "\"DashDot\"",
                "\"Dotted\"",
                "\"Dashed\"",
                "\"Thin\"",
                "\"MediumDashDotDot\"",
                "\"SlantDashDot\"",
                "\"MediumDashDot\"",
                "\"MediumDashed\"",
                "\"Medium\"",
                "\"Thick\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"None\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Double\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Hair\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"DashDotDot\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"DashDot\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Dotted\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Dashed\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Thin\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"MediumDashDotDot\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"SlantDashDot\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"MediumDashDot\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"MediumDashed\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Medium\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Thick\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Specifies the sort order.\n\t * @typedef {(\"xlAscending\" | \"xlDescending\")}  SortOrder\n\t * @see office-js-api/Examples/Enumerations/SortOrder.js\n\t */",
        "description": "Specifies the sort order.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nworksheet.GetRange(\"A1:C5\").SetSort(\"A1:A5\", \"xlAscending\", \"B1:B5\", \"xlDescending\", \"C1:C5\", \"xlAscending\", \"xlYes\", \"xlSortColumns\");\n```",
        "name": "SortOrder",
        "longname": "SortOrder",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 9349,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/SortOrder.js"
        ],
        "type": {
            "names": [
                "\"xlAscending\"",
                "\"xlDescending\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"xlAscending\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlDescending\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Specifies whether the first row of the sort range contains the header information.\n\t * @typedef {(\"xlNo\" | \"xlYes\")} SortHeader\n\t * @see office-js-api/Examples/Enumerations/SortHeader.js\n\t */",
        "description": "Specifies whether the first row of the sort range contains the header information.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nworksheet.GetRange(\"A1:C5\").SetSort(\"A1:A5\", \"xlAscending\", \"B1:B5\", \"xlDescending\", \"C1:C5\", \"xlAscending\", \"xlYes\", \"xlSortColumns\");\n```",
        "name": "SortHeader",
        "longname": "SortHeader",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 9356,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/SortHeader.js"
        ],
        "type": {
            "names": [
                "\"xlNo\"",
                "\"xlYes\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"xlNo\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlYes\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Specifies if the sort should be by row or column.\n\t * @typedef {(\"xlSortColumns\" | \"xlSortRows\")} SortOrientation\n\t * @see office-js-api/Examples/Enumerations/SortOrientation.js\n\t */",
        "description": "Specifies if the sort should be by row or column.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nworksheet.GetRange(\"A1:C5\").SetSort(\"A1:A5\", \"xlAscending\", \"B1:B5\", \"xlDescending\", \"C1:C5\", \"xlAscending\", \"xlYes\", \"xlSortColumns\");\n```",
        "name": "SortOrientation",
        "longname": "SortOrientation",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 9362,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/SortOrientation.js"
        ],
        "type": {
            "names": [
                "\"xlSortColumns\"",
                "\"xlSortRows\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"xlSortColumns\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlSortRows\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Specifies the range angle.\n\t * @typedef {(\"xlDownward\" | \"xlHorizontal\" | \"xlUpward\" | \"xlVertical\")} Angle\n\t * @see office-js-api/Examples/Enumerations/Angle.js\n\t */",
        "description": "Specifies the range angle.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nworksheet.GetRange(\"A1\").SetOrientation(\"xlUpward\");\n```",
        "name": "Angle",
        "longname": "Angle",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 9368,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/Angle.js"
        ],
        "type": {
            "names": [
                "\"xlDownward\"",
                "\"xlHorizontal\"",
                "\"xlUpward\"",
                "\"xlVertical\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"xlDownward\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlHorizontal\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlUpward\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlVertical\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Specifies the direction of end in the specified range.\n\t * @typedef {(\"xlUp\" | \"xlDown\" | \"xlToRight\" | \"xlToLeft\")} Direction\n\t * @see office-js-api/Examples/Enumerations/Direction.js\n\t */",
        "description": "Specifies the direction of end in the specified range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nworksheet.GetRange(\"C4:D5\").End(\"xlToLeft\").SetFillColor(Api.CreateColorFromRGB(255, 224, 204));\n```",
        "name": "Direction",
        "longname": "Direction",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 9374,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/Direction.js"
        ],
        "type": {
            "names": [
                "\"xlUp\"",
                "\"xlDown\"",
                "\"xlToRight\"",
                "\"xlToLeft\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"xlUp\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlDown\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlToRight\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlToLeft\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Returns a type of the ApiRange class.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {\"range\"}\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/GetClassType.js\n\t */",
        "description": "Returns a type of the ApiRange class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"A1\");\nrange.SetValue(\"This is just a sample text in the cell A1.\");\nlet classType = range.GetClassType();\nworksheet.GetRange('A3').SetValue(\"Class type: \" + classType);\n```",
        "memberof": "ApiRange",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"range\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"range\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiRange#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9387,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a row number for the selected cell.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/GetRow.js\n\t */",
        "description": "Returns a row number for the selected cell.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"A9\").GetRow();\nworksheet.GetRange(\"A2\").SetValue(range.toString());\n```",
        "memberof": "ApiRange",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GetRow",
        "longname": "ApiRange#GetRow",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9398,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/GetRow.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a column number for the selected cell.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/GetCol.js\n\t */",
        "description": "Returns a column number for the selected cell.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"D9\").GetCol();\nworksheet.GetRange(\"A2\").SetValue(range.toString());\n```",
        "memberof": "ApiRange",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GetCol",
        "longname": "ApiRange#GetCol",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9413,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/GetCol.js"
        ]
    },
    {
        "comment": "/**\n\t * Clears the current range.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/Clear.js\n\t */",
        "description": "Clears the current range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"A1:B1\");\nrange.SetValue(\"1\");\nrange.Clear();\nworksheet.GetRange(\"A2\").SetValue(\"The range A1:B1 was just cleared.\");\n```",
        "memberof": "ApiRange",
        "params": null,
        "returns": null,
        "name": "Clear",
        "longname": "ApiRange#Clear",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9428,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/Clear.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a Range object that represents the rows in the specified range. If the specified row is outside the Range object, a new Range will be returned that represents the cells between the columns of the original range in the specified row.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number} nRow - The row number (starts counting from 1, the 0 value returns an error).\n\t * @returns {ApiRange | null}\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/GetRows.js\n\t */",
        "description": "Returns a Range object that represents the rows in the specified range. If the specified row is outside the Range object, a new Range will be returned that represents the cells between the columns of the original range in the specified row.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"1:3\");\nfor (let i=1; i <= 3; i++) {\n\tlet rows = range.GetRows(i);    \n\trows.SetValue(i);\n}\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nRow",
                "description": "The row number (starts counting from 1, the 0 value returns an error).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetRows",
        "longname": "ApiRange#GetRows",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9449,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/GetRows.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a Range object that represents the columns in the specified range.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number} nCol - The column number. *\n\t * @returns {ApiRange | null}\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/GetCols.js\n\t */",
        "description": "Returns a Range object that represents the columns in the specified range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"A1:C3\");\nrange.GetCols(2).SetFillColor(Api.CreateColorFromRGB(255, 213, 191));\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nCol",
                "description": "The column number. *",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetCols",
        "longname": "ApiRange#GetCols",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9480,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/GetCols.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a Range object that represents the end in the specified direction in the specified range.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {Direction} direction - The direction of end in the specified range. *\n\t * @returns {ApiRange}\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/End.js\n\t */",
        "description": "Returns a Range object that represents the end in the specified direction in the specified range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"C4:D5\");\nrange.End(\"xlToLeft\").SetFillColor(Api.CreateColorFromRGB(255, 213, 191));\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "Direction"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Direction"
                    }
                },
                "name": "direction",
                "description": "The direction of end in the specified range. *",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                }
            }
        ],
        "name": "End",
        "longname": "ApiRange#End",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9511,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/End.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a Range object that represents all the cells in the specified range or a specified cell.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number} row - The row number or the cell number (if only row is defined).\n\t * @param {number} col - The column number.\n\t * @returns {ApiRange}\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/GetCells.js\n\t */",
        "description": "Returns a Range object that represents all the cells in the specified range or a specified cell.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"A1:C3\");\nrange.GetCells(2, 1).SetFillColor(Api.CreateColorFromRGB(255, 213, 191));\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "row",
                "description": "The row number or the cell number (if only row is defined).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "col",
                "description": "The column number.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                }
            }
        ],
        "name": "GetCells",
        "longname": "ApiRange#GetCells",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9579,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/GetCells.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the cell offset.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number} nRow - The row number.\n\t * @param {number} nCol - The column number.\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/SetOffset.js\n\t */",
        "description": "Sets the cell offset.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B3\").SetValue(\"Old Range\");\nlet range = worksheet.GetRange(\"B3\");\nrange.SetOffset(2, 2);\nrange.SetValue(\"New Range\");\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nRow",
                "description": "The row number.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nCol",
                "description": "The column number.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetOffset",
        "longname": "ApiRange#SetOffset",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9624,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/SetOffset.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the range address.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} RowAbs - Defines if the link to the row is absolute or not.\n\t * @param {boolean} ColAbs - Defines if the link to the column is absolute or not.\n\t * @param {string} RefStyle - The reference style.\n\t * @param {boolean} External - Defines if the range is in the current file or not.\n\t * @param {range} RelativeTo - The range which the current range is relative to.\n\t * @returns {string | null} - returns address of range as string.\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/GetAddress.js\n\t */",
        "description": "Returns the range address.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nworksheet.GetRange(\"B1\").SetValue(\"2\");\nlet address = worksheet.GetRange(\"A1\").GetAddress(true, true, \"xlA1\", false);\nworksheet.GetRange(\"A3\").SetValue(\"Address: \");\nworksheet.GetRange(\"B3\").SetValue(address);\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "RowAbs",
                "description": "Defines if the link to the row is absolute or not.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "ColAbs",
                "description": "Defines if the link to the column is absolute or not.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "RefStyle",
                "description": "The reference style.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "External",
                "description": "Defines if the range is in the current file or not.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "range"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "range"
                    }
                },
                "name": "RelativeTo",
                "description": "The range which the current range is relative to.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetAddress",
        "longname": "ApiRange#GetAddress",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9640,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/GetAddress.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the rows or columns count.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/GetCount.js\n\t */",
        "description": "Returns the rows or columns count.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nworksheet.GetRange(\"B1\").SetValue(\"2\");\nworksheet.GetRange(\"C1\").SetValue(\"3\");\nlet count = worksheet.GetRange(\"A1:C1\").GetCount();\nworksheet.GetRange(\"A4\").SetValue(\"Count: \");\nworksheet.GetRange(\"B4\").SetValue(count);\n```",
        "memberof": "ApiRange",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GetCount",
        "longname": "ApiRange#GetCount",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9694,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/GetCount.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a value of the specified range.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string | string[][]}\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/GetValue.js\n\t */",
        "description": "Returns a value of the specified range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nlet value = worksheet.GetRange(\"A1\").GetValue();\nworksheet.GetRange(\"A3\").SetValue(\"Value of the cell A1: \");\nworksheet.GetRange(\"B3\").SetValue(value);\n```",
        "memberof": "ApiRange",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string",
                        "Array.<Array.<string>>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "type": "TypeApplication",
                                        "expression": {
                                            "type": "NameExpression",
                                            "name": "Array"
                                        },
                                        "applications": [
                                            {
                                                "name": "string",
                                                "type": "NameExpression"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetValue",
        "longname": "ApiRange#GetValue",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9729,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/GetValue.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets a value to the current cell or cell range.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string | bool | number | Array[] | Array[][]} data - The general value for the cell or cell range.\n\t * @returns {boolean} - returns false if such a range does not exist.\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/SetValue.js\n\t */",
        "description": "Sets a value to the current cell or cell range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(\"2\");\nworksheet.GetRange(\"B2\").SetValue(\"2\");\nworksheet.GetRange(\"A3\").SetValue(\"2x2=\");\nworksheet.GetRange(\"B3\").SetValue(\"=B1*B2\");\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "bool",
                        "number",
                        "Array.<Array>",
                        "Array.<Array.<Array>>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "bool"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "Array",
                                        "type": "NameExpression"
                                    }
                                ]
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "type": "TypeApplication",
                                        "expression": {
                                            "type": "NameExpression",
                                            "name": "Array"
                                        },
                                        "applications": [
                                            {
                                                "name": "Array",
                                                "type": "NameExpression"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "data",
                "description": "The general value for the cell or cell range.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetValue",
        "longname": "ApiRange#SetValue",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9758,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/SetValue.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a formula of the specified range.\n\t * @typeofeditors [\"CSE\"]\n\t * @memberof ApiRange\n\t * @returns {string | string[][]} - return Value2 property (value without format) if formula doesn't exist.\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/GetFormula.js\n\t */",
        "description": "Returns a formula of the specified range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(1);\nworksheet.GetRange(\"C1\").SetValue(2);\nlet range = worksheet.GetRange(\"A1\");\nrange.SetValue(\"=SUM(B1:C1)\");\nlet formula = range.GetFormula();\nworksheet.GetRange(\"A3\").SetValue(\"Formula from cell A1: \" + formula);\n```",
        "memberof": "ApiRange",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string",
                        "Array.<Array.<string>>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "type": "TypeApplication",
                                        "expression": {
                                            "type": "NameExpression",
                                            "name": "Array"
                                        },
                                        "applications": [
                                            {
                                                "name": "string",
                                                "type": "NameExpression"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetFormula",
        "longname": "ApiRange#GetFormula",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9833,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/GetFormula.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the Value2 property (value without format) of the specified range.\n\t * @typeofeditors [\"CSE\"]\n\t * @memberof ApiRange\n\t * @returns {string | string[][]}\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/GetValue2.js\n\t */",
        "description": "Returns the Value2 property (value without format) of the specified range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet format = Api.Format(\"123456\", \"$#,##0\");\nlet range = worksheet.GetRange(\"A1\");\nrange.SetValue(format);\nlet value2 = range.GetValue2();\nworksheet.GetRange(\"A3\").SetValue(\"Value of the cell A1 without format: \" + value2);\n```",
        "memberof": "ApiRange",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string",
                        "Array.<Array.<string>>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "type": "TypeApplication",
                                        "expression": {
                                            "type": "NameExpression",
                                            "name": "Array"
                                        },
                                        "applications": [
                                            {
                                                "name": "string",
                                                "type": "NameExpression"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetValue2",
        "longname": "ApiRange#GetValue2",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9856,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/GetValue2.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the text of the specified range.\n\t * @typeofeditors [\"CSE\"]\n\t * @memberof ApiRange\n\t * @returns {string | string[][]}\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/GetText.js\n\t */",
        "description": "Returns the text of the specified range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"text1\");\nworksheet.GetRange(\"B1\").SetValue(\"text2\");\nworksheet.GetRange(\"C1\").SetValue(\"text3\");\nlet range = worksheet.GetRange(\"A1:C1\");\nlet text = range.GetText();\nworksheet.GetRange(\"A3\").SetValue(\"Text from the cell A1: \" + text);\n```",
        "memberof": "ApiRange",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string",
                        "Array.<Array.<string>>"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "type": "TypeApplication",
                                        "expression": {
                                            "type": "NameExpression",
                                            "name": "Array"
                                        },
                                        "applications": [
                                            {
                                                "name": "string",
                                                "type": "NameExpression"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetText",
        "longname": "ApiRange#GetText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9893,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/GetText.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the text color to the current cell range with the previously created color object.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiColor} oColor - The color object which specifies the color to be set to the text in the cell / cell range.\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/SetFontColor.js\n\t */",
        "description": "Sets the text color to the current cell range with the previously created color object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A2\").SetFontColor(Api.CreateColorFromRGB(255, 111, 61));\nworksheet.GetRange(\"A2\").SetValue(\"This is the text with a color set to it\");\nworksheet.GetRange(\"A4\").SetValue(\"This is the text with a default color\");\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiColor"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiColor"
                    }
                },
                "name": "oColor",
                "description": "The color object which specifies the color to be set to the text in the cell / cell range.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetFontColor",
        "longname": "ApiRange#SetFontColor",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9930,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/SetFontColor.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the value hiding property. The specified range must span an entire column or row.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean} - returns true if the values in the range specified are hidden.\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/GetHidden.js\n\t */",
        "description": "Returns the value hiding property. The specified range must span an entire column or row.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRows(\"1:3\");\nrange.SetHidden(true);\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nworksheet.GetRange(\"B1\").SetValue(\"2\");\nworksheet.GetRange(\"C1\").SetValue(\"3\");\nlet hidden = range.GetHidden();\nworksheet.GetRange(\"A4\").SetValue(\"The values from A1:C1 are hidden: \" + hidden);\n```",
        "memberof": "ApiRange",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "GetHidden",
        "longname": "ApiRange#GetHidden",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9946,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/GetHidden.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the value hiding property. The specified range must span an entire column or row.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} isHidden - Specifies if the values in the current range are hidden or not.\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/SetHidden.js\n\t */",
        "description": "Sets the value hiding property. The specified range must span an entire column or row.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRows(\"1:3\");\nrange.SetHidden(true);\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nworksheet.GetRange(\"B1\").SetValue(\"2\");\nworksheet.GetRange(\"C1\").SetValue(\"3\");\nlet hidden = range.GetHidden();\nworksheet.GetRange(\"A4\").SetValue(\"The values from A1:C1 are hidden: \" + hidden);\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isHidden",
                "description": "Specifies if the values in the current range are hidden or not.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetHidden",
        "longname": "ApiRange#SetHidden",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9968,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/SetHidden.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the column width value.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/GetColumnWidth.js\n\t */",
        "description": "Returns the column width value.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet width = worksheet.GetRange(\"A1\").GetColumnWidth();\nworksheet.GetRange(\"A1\").SetValue(\"Width: \");\nworksheet.GetRange(\"B1\").SetValue(width);\n```",
        "memberof": "ApiRange",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GetColumnWidth",
        "longname": "ApiRange#GetColumnWidth",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 9998,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/GetColumnWidth.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the width of all the columns in the current range.\n\t * One unit of column width is equal to the width of one character in the Normal style.\n\t * For proportional fonts, the width of the character 0 (zero) is used.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number} nWidth - The width of the column divided by 7 pixels.\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/SetColumnWidth.js\n\t */",
        "description": "Sets the width of all the columns in the current range.\nOne unit of column width is equal to the width of one character in the Normal style.\nFor proportional fonts, the width of the character 0 (zero) is used.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetColumnWidth(20);\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nWidth",
                "description": "The width of the column divided by 7 pixels.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetColumnWidth",
        "longname": "ApiRange#SetColumnWidth",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10013,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/SetColumnWidth.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the row height value.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {pt} - The row height in the range specified, measured in points.\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/GetRowHeight.js\n\t */",
        "description": "Returns the row height value.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet height = worksheet.GetRange(\"A1\").GetRowHeight();\nworksheet.GetRange(\"A1\").SetValue(\"Height: \");\nworksheet.GetRange(\"B1\").SetValue(height);\n```",
        "memberof": "ApiRange",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "pt"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "pt"
                    }
                }
            }
        ],
        "name": "GetRowHeight",
        "longname": "ApiRange#GetRowHeight",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10046,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/GetRowHeight.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the row height value.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {pt} nHeight - The row height in the current range measured in points.\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/SetRowHeight.js\n\t */",
        "description": "Sets the row height value.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetRowHeight(32);\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "pt"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "pt"
                    }
                },
                "name": "nHeight",
                "description": "The row height in the current range measured in points.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetRowHeight",
        "longname": "ApiRange#SetRowHeight",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10057,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/SetRowHeight.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the font size to the characters of the current cell range.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number} nSize - The font size value measured in points.\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/SetFontSize.js\n\t */",
        "description": "Sets the font size to the characters of the current cell range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A2\").SetValue(\"2\");\nlet range = worksheet.GetRange(\"A1:D5\");\nrange.SetFontSize(20);\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nSize",
                "description": "The font size value measured in points.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetFontSize",
        "longname": "ApiRange#SetFontSize",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10086,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/SetFontSize.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the specified font family as the font name for the current cell range.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sName - The font family name used for the current cell range.\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/SetFontName.js\n\t */",
        "description": "Sets the specified font family as the font name for the current cell range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A2\").SetValue(\"2\");\nlet range = worksheet.GetRange(\"A1:D5\");\nrange.SetFontName(\"Arial\");\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sName",
                "description": "The font family name used for the current cell range.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetFontName",
        "longname": "ApiRange#SetFontName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10102,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/SetFontName.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the vertical alignment of the text in the current cell range.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {'center' | 'bottom' | 'top' | 'distributed' | 'justify'} sAligment - The vertical alignment that will be applied to the cell contents.\n\t * @returns {boolean} - return false if sAligment doesn't exist.\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/SetAlignVertical.js\n\t */",
        "description": "Sets the vertical alignment of the text in the current cell range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"A1:D5\");\nworksheet.GetRange(\"A2\").SetValue(\"This is just a sample text distributed in the A2 cell.\");\nrange.SetAlignVertical(\"distributed\");\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "'center'",
                        "'bottom'",
                        "'top'",
                        "'distributed'",
                        "'justify'"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "'center'"
                            },
                            {
                                "type": "NameExpression",
                                "name": "'bottom'"
                            },
                            {
                                "type": "NameExpression",
                                "name": "'top'"
                            },
                            {
                                "type": "NameExpression",
                                "name": "'distributed'"
                            },
                            {
                                "type": "NameExpression",
                                "name": "'justify'"
                            }
                        ]
                    }
                },
                "name": "sAligment",
                "description": "The vertical alignment that will be applied to the cell contents.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetAlignVertical",
        "longname": "ApiRange#SetAlignVertical",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10119,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/SetAlignVertical.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the horizontal alignment of the text in the current cell range.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {'left' | 'right' | 'center' | 'justify'} sAlignment - The horizontal alignment that will be applied to the cell contents.\n\t * @returns {boolean} - return false if sAligment doesn't exist.\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/SetAlignHorizontal.js\n\t */",
        "description": "Sets the horizontal alignment of the text in the current cell range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A2\").SetValue(\"2\");\nlet range = worksheet.GetRange(\"A1:D5\");\nrange.SetAlignHorizontal(\"center\");\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "'left'",
                        "'right'",
                        "'center'",
                        "'justify'"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "'left'"
                            },
                            {
                                "type": "NameExpression",
                                "name": "'right'"
                            },
                            {
                                "type": "NameExpression",
                                "name": "'center'"
                            },
                            {
                                "type": "NameExpression",
                                "name": "'justify'"
                            }
                        ]
                    }
                },
                "name": "sAlignment",
                "description": "The horizontal alignment that will be applied to the cell contents.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetAlignHorizontal",
        "longname": "ApiRange#SetAlignHorizontal",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10161,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/SetAlignHorizontal.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the bold property to the text characters in the current cell or cell range.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} isBold - Specifies that the contents of the current cell / cell range are displayed bold.\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/SetBold.js\n\t */",
        "description": "Sets the bold property to the text characters in the current cell or cell range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A2\").SetValue(\"Bold text\");\nworksheet.GetRange(\"A2\").SetBold(true);\nworksheet.GetRange(\"A3\").SetValue(\"Normal text\");\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isBold",
                "description": "Specifies that the contents of the current cell / cell range are displayed bold.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetBold",
        "longname": "ApiRange#SetBold",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10198,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/SetBold.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the italic property to the text characters in the current cell or cell range.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} isItalic - Specifies that the contents of the current cell / cell range are displayed italicized.\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/SetItalic.js\n\t */",
        "description": "Sets the italic property to the text characters in the current cell or cell range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A2\").SetValue(\"Italicized text\");\nworksheet.GetRange(\"A2\").SetItalic(true);\nworksheet.GetRange(\"A3\").SetValue(\"Normal text\");\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isItalic",
                "description": "Specifies that the contents of the current cell / cell range are displayed italicized.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetItalic",
        "longname": "ApiRange#SetItalic",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10214,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/SetItalic.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies that the contents of the current cell / cell range are displayed along with a line appearing directly below the character.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {'none' | 'single' | 'singleAccounting' | 'double' | 'doubleAccounting'} undelineType - Specifies the type of the\n\t * line displayed under the characters. The following values are available:\n\t * <b>\"none\"</b> - for no underlining;\n\t * <b>\"single\"</b> - for a single line underlining the cell contents;\n\t * <b>\"singleAccounting\"</b> - for a single line underlining the cell contents but not protruding beyond the cell borders;\n\t * <b>\"double\"</b> - for a double line underlining the cell contents;\n\t * <b>\"doubleAccounting\"</b> - for a double line underlining the cell contents but not protruding beyond the cell borders.\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/SetUnderline.js\n\t */",
        "description": "Specifies that the contents of the current cell / cell range are displayed along with a line appearing directly below the character.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A2\").SetValue(\"The text underlined with a single line\");\nworksheet.GetRange(\"A2\").SetUnderline(\"single\");\nworksheet.GetRange(\"A4\").SetValue(\"Normal text\");\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "'none'",
                        "'single'",
                        "'singleAccounting'",
                        "'double'",
                        "'doubleAccounting'"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "'none'"
                            },
                            {
                                "type": "NameExpression",
                                "name": "'single'"
                            },
                            {
                                "type": "NameExpression",
                                "name": "'singleAccounting'"
                            },
                            {
                                "type": "NameExpression",
                                "name": "'double'"
                            },
                            {
                                "type": "NameExpression",
                                "name": "'doubleAccounting'"
                            }
                        ]
                    }
                },
                "name": "undelineType",
                "description": "Specifies the type of the\nline displayed under the characters. The following values are available:\n<b>\"none\"</b> - for no underlining;\n<b>\"single\"</b> - for a single line underlining the cell contents;\n<b>\"singleAccounting\"</b> - for a single line underlining the cell contents but not protruding beyond the cell borders;\n<b>\"double\"</b> - for a double line underlining the cell contents;\n<b>\"doubleAccounting\"</b> - for a double line underlining the cell contents but not protruding beyond the cell borders.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetUnderline",
        "longname": "ApiRange#SetUnderline",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10236,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/SetUnderline.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies that the contents of the cell / cell range are displayed with a single horizontal line through the center of the contents.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} isStrikeout - Specifies if the contents of the current cell / cell range are displayed struck through.\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/SetStrikeout.js\n\t */",
        "description": "Specifies that the contents of the cell / cell range are displayed with a single horizontal line through the center of the contents.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A2\").SetValue(\"Struckout text\");\nworksheet.GetRange(\"A2\").SetStrikeout(true);\nworksheet.GetRange(\"A3\").SetValue(\"Normal text\");\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isStrikeout",
                "description": "Specifies if the contents of the current cell / cell range are displayed struck through.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetStrikeout",
        "longname": "ApiRange#SetStrikeout",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10271,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/SetStrikeout.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies whether the words in the cell must be wrapped to fit the cell size or not.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} isWrap - Specifies if the words in the cell will be wrapped to fit the cell size.\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/SetWrap.js\n\t */",
        "description": "Specifies whether the words in the cell must be wrapped to fit the cell size or not.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"A1\");\nrange.SetValue(\"This is the text wrapped to fit the cell size.\");\nrange.SetWrap(true);\nworksheet.GetRange(\"A3\").SetValue(\"The text in the cell A1 is wrapped: \" + range.GetWrapText());\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isWrap",
                "description": "Specifies if the words in the cell will be wrapped to fit the cell size.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetWrap",
        "longname": "ApiRange#SetWrap",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10287,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/SetWrap.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the information about the wrapping cell style.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/GetWrapText.js\n\t */",
        "description": "Returns the information about the wrapping cell style.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"A1\");\nrange.SetValue(\"This is the text wrapped to fit the cell size.\");\nrange.SetWrap(true);\nworksheet.GetRange(\"A3\").SetValue(\"The text in the cell A1 is wrapped: \" + range.GetWrapText());\n```",
        "memberof": "ApiRange",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "GetWrapText",
        "longname": "ApiRange#GetWrapText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10298,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/GetWrapText.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the background color to the current cell range with the previously created color object.\n\t * Sets 'No Fill' when previously created color object is null.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiColor} oColor - The color object which specifies the color to be set to the background in the cell / cell range.\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/SetFillColor.js\n\t */",
        "description": "Sets the background color to the current cell range with the previously created color object.\nSets 'No Fill' when previously created color object is null.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.SetColumnWidth(0, 50);\nworksheet.GetRange(\"A2\").SetFillColor(Api.CreateColorFromRGB(255, 213, 191));\nworksheet.GetRange(\"A2\").SetValue(\"This is the cell with a color set to its background\");\nworksheet.GetRange(\"A4\").SetValue(\"This is the cell with a default background color\");\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiColor"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiColor"
                    }
                },
                "name": "oColor",
                "description": "The color object which specifies the color to be set to the background in the cell / cell range.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetFillColor",
        "longname": "ApiRange#SetFillColor",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10318,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/SetFillColor.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the background color for the current cell range. Returns 'No Fill' when the color of the background in the cell / cell range is null.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiColor|'No Fill'} - return 'No Fill' when the color to the background in the cell / cell range is null.\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/GetFillColor.js\n\t */",
        "description": "Returns the background color for the current cell range. Returns 'No Fill' when the color of the background in the cell / cell range is null.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.SetColumnWidth(0, 60);\nlet range = worksheet.GetRange(\"A1\");\nrange.SetFillColor(Api.CreateColorFromRGB(255, 213, 191));\nrange.SetValue(\"This is the cell with a color set to its background.\");\nlet fillColor = range.GetFillColor();\nworksheet.GetRange(\"A3\").SetValue(\"This is another cell with the same color set to its background\");\nworksheet.GetRange(\"A3\").SetFillColor(fillColor);\n```",
        "memberof": "ApiRange",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiColor",
                        "'No Fill'"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiColor"
                            },
                            {
                                "type": "NameExpression",
                                "name": "'No Fill'"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetFillColor",
        "longname": "ApiRange#GetFillColor",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10328,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/GetFillColor.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a value that represents the format code for the current range.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string | null} This property returns null if all cells in the specified range don't have the same number format.\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/GetNumberFormat.js\n\t */",
        "description": "Returns a value that represents the format code for the current range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"B2\");\nrange.SetValue(3);\nlet format = range.GetNumberFormat();\nworksheet.GetRange(\"B3\").SetValue(\"Number format: \" + format);\n```",
        "memberof": "ApiRange",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetNumberFormat",
        "longname": "ApiRange#GetNumberFormat",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10348,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/GetNumberFormat.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies whether a number in the cell should be treated like number, currency, date, time, etc. or just like text.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sFormat - Specifies the mask applied to the number in the cell.\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/SetNumberFormat.js\n\t */",
        "description": "Specifies whether a number in the cell should be treated like number, currency, date, time, etc. or just like text.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.SetColumnWidth(0, 30);\nworksheet.SetColumnWidth(1, 30);\nworksheet.GetRange(\"A2\").SetNumberFormat(\"General\");\nworksheet.GetRange(\"A2\").SetValue(\"123456\");\nworksheet.GetRange(\"B2\").SetValue(\"General\");\nworksheet.GetRange(\"A3\").SetNumberFormat(\"0.00\");\nworksheet.GetRange(\"A3\").SetValue(\"123456\");\nworksheet.GetRange(\"B3\").SetValue(\"Number\");\nworksheet.GetRange(\"A4\").SetNumberFormat(\"$#,##0.00\");\nworksheet.GetRange(\"A4\").SetValue(\"123456\");\nworksheet.GetRange(\"B4\").SetValue(\"Currency\");\nworksheet.GetRange(\"A5\").SetNumberFormat(\"_($* #,##0.00_)\");\nworksheet.GetRange(\"A5\").SetValue(\"123456\");\nworksheet.GetRange(\"B5\").SetValue(\"Accounting\");\nworksheet.GetRange(\"A6\").SetNumberFormat(\"m/d/yyyy\");\nworksheet.GetRange(\"A6\").SetValue(\"123456\");\nworksheet.GetRange(\"B6\").SetValue(\"DateShort\");\nworksheet.GetRange(\"A7\").SetNumberFormat(\"[$-F800]dddd, mmmm dd, yyyy\");\nworksheet.GetRange(\"A7\").SetValue(\"123456\");\nworksheet.GetRange(\"B7\").SetValue(\"DateLong\");\nworksheet.GetRange(\"A8\").SetNumberFormat(\"[$-F400]h:mm:ss AM/PM\");\nworksheet.GetRange(\"A8\").SetValue(\"123456\");\nworksheet.GetRange(\"B8\").SetValue(\"Time\");\nworksheet.GetRange(\"A9\").SetNumberFormat(\"0.00%\");\nworksheet.GetRange(\"A9\").SetValue(\"123456\");\nworksheet.GetRange(\"B9\").SetValue(\"Percentage\");\nworksheet.GetRange(\"A10\").SetNumberFormat(\"0%\");\nworksheet.GetRange(\"A10\").SetValue(\"123456\");\nworksheet.GetRange(\"B10\").SetValue(\"Percent\");\nworksheet.GetRange(\"A11\").SetNumberFormat(\"# ?/?\");\nworksheet.GetRange(\"A11\").SetValue(\"123456\");\nworksheet.GetRange(\"B11\").SetValue(\"Fraction\");\nworksheet.GetRange(\"A12\").SetNumberFormat(\"0.00E+00\");\nworksheet.GetRange(\"A12\").SetValue(\"123456\");\nworksheet.GetRange(\"B12\").SetValue(\"Scientific\");\nworksheet.GetRange(\"A13\").SetNumberFormat(\"@\");\nworksheet.GetRange(\"A13\").SetValue(\"123456\");\nworksheet.GetRange(\"B13\").SetValue(\"Text\");\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sFormat",
                "description": "Specifies the mask applied to the number in the cell.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetNumberFormat",
        "longname": "ApiRange#SetNumberFormat",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10371,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/SetNumberFormat.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the border to the cell / cell range with the parameters specified.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {BordersIndex} bordersIndex - Specifies the cell border position.\n\t * @param {LineStyle} lineStyle - Specifies the line style used to form the cell border.\n\t * @param {ApiColor} oColor - The color object which specifies the color to be set to the cell border.\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/SetBorders.js\n\t */",
        "description": "Sets the border to the cell / cell range with the parameters specified.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.SetColumnWidth(0, 50);\nworksheet.GetRange(\"A2\").SetBorders(\"Bottom\", \"Thick\", Api.CreateColorFromRGB(255, 111, 61));\nworksheet.GetRange(\"A2\").SetValue(\"This is a cell with a bottom border\");\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "BordersIndex"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "BordersIndex"
                    }
                },
                "name": "bordersIndex",
                "description": "Specifies the cell border position.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "LineStyle"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "LineStyle"
                    }
                },
                "name": "lineStyle",
                "description": "Specifies the line style used to form the cell border.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiColor"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiColor"
                    }
                },
                "name": "oColor",
                "description": "The color object which specifies the color to be set to the cell border.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetBorders",
        "longname": "ApiRange#SetBorders",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10392,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/SetBorders.js"
        ]
    },
    {
        "comment": "/**\n\t * Merges the selected cell range into a single cell or a cell row.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} isAcross - When set to <b>true</b>, the cells within the selected range will be merged along the rows,\n\t * but remain split in the columns. When set to <b>false</b>, the whole selected range of cells will be merged into a single cell.\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/Merge.js\n\t */",
        "description": "Merges the selected cell range into a single cell or a cell row.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A3:E8\").Merge(true);\nworksheet.GetRange(\"A9:E14\").Merge(false);\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isAcross",
                "description": "When set to <b>true</b>, the cells within the selected range will be merged along the rows,\nbut remain split in the columns. When set to <b>false</b>, the whole selected range of cells will be merged into a single cell.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "Merge",
        "longname": "ApiRange#Merge",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10434,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/Merge.js"
        ]
    },
    {
        "comment": "/**\n\t * Splits the selected merged cell range into the single cells.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/UnMerge.js\n\t */",
        "description": "Splits the selected merged cell range into the single cells.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A3:E8\").Merge(true);\nworksheet.GetRange(\"A5:E5\").UnMerge();\n```",
        "memberof": "ApiRange",
        "params": null,
        "returns": null,
        "name": "UnMerge",
        "longname": "ApiRange#UnMerge",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10452,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/UnMerge.js"
        ]
    },
    {
        "comment": "/**\n\t * Executes a provided function once for each cell.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {Function} fCallback - A function which will be executed for each cell.\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/ForEach.js\n\t */",
        "description": "Executes a provided function once for each cell.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nworksheet.GetRange(\"B1\").SetValue(\"2\");\nworksheet.GetRange(\"C1\").SetValue(\"3\");\nlet range = worksheet.GetRange(\"A1:C1\");\nrange.ForEach(function (range) {\n\tlet value = range.GetValue();\n\tif (value != \"1\") {\n\t\trange.SetBold(true);\n\t}\n});\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ],
                    "parsedType": {
                        "type": "FunctionType",
                        "params": []
                    }
                },
                "name": "fCallback",
                "description": "A function which will be executed for each cell.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "ForEach",
        "longname": "ApiRange#ForEach",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10482,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/ForEach.js"
        ]
    },
    {
        "comment": "/**\n\t * Adds a comment to the current range.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sText - The comment text.\n\t * @param {string} sAuthor - The author's name (optional).\n\t * @returns {ApiComment | null} - returns false if comment can't be added.\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/AddComment.js\n\t */",
        "description": "Adds a comment to the current range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"A1\");\nrange.SetValue(\"1\");\nrange.AddComment(\"This is just a number.\");\nworksheet.GetRange(\"A3\").SetValue(\"The comment was added to the cell A1.\");\nworksheet.GetRange(\"A4\").SetValue(\"Comment: \" + range.GetComment().GetText());\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sText",
                "description": "The comment text.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sAuthor",
                "description": "The author's name (optional).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiComment",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiComment"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "AddComment",
        "longname": "ApiRange#AddComment",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10500,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/AddComment.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the Worksheet object that represents the worksheet containing the specified range. It will be available in the read-only mode.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiWorksheet}\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/GetWorksheet.js\n\t */",
        "description": "Returns the Worksheet object that represents the worksheet containing the specified range. It will be available in the read-only mode.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"A1:C1\");\nrange.SetValue(\"1\");\nlet oSheet = range.GetWorksheet();\nworksheet.GetRange(\"A3\").SetValue(\"Worksheet name: \" + oSheet.GetName());\n```",
        "memberof": "ApiRange",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiWorksheet"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiWorksheet"
                    }
                }
            }
        ],
        "name": "GetWorksheet",
        "longname": "ApiRange#GetWorksheet",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10529,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/GetWorksheet.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the ApiName object of the current range.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiName}\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/GetDefName.js\n\t */",
        "description": "Returns the ApiName object of the current range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nworksheet.GetRange(\"B1\").SetValue(\"2\");\nApi.AddDefName(\"numbers\", \"Sheet1!$A$1:$B$1\");\nlet range = worksheet.GetRange(\"A1:B1\");\nlet defName = range.GetDefName();\nworksheet.GetRange(\"A3\").SetValue(\"DefName: \" + defName.GetName());\n```",
        "memberof": "ApiRange",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiName"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiName"
                    }
                }
            }
        ],
        "name": "GetDefName",
        "longname": "ApiRange#GetDefName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10545,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/GetDefName.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the ApiComment object of the current range.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiComment | null} - returns null if range does not consist of one cell.\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/GetComment.js\n\t */",
        "description": "Returns the ApiComment object of the current range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"A1\");\nrange.SetValue(\"1\");\nrange.AddComment(\"This is just a number.\");\nworksheet.GetRange(\"A3\").SetValue(\"Comment: \" + range.GetComment().GetText());\n```",
        "memberof": "ApiRange",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiComment",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiComment"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetComment",
        "longname": "ApiRange#GetComment",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10567,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/GetComment.js"
        ]
    },
    {
        "comment": "/**\n\t * Selects the current range.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/Select.js\n\t */",
        "description": "Selects the current range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"A1:C1\");\nrange.SetValue(\"1\");\nrange.Select();\nApi.GetSelection().SetValue(\"selected\");\n```",
        "memberof": "ApiRange",
        "params": null,
        "returns": null,
        "name": "Select",
        "longname": "ApiRange#Select",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10588,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/Select.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the current range angle.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {Angle}\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/GetOrientation.js\n\t */",
        "description": "Returns the current range angle.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nworksheet.GetRange(\"B1\").SetValue(\"2\");\nlet range = worksheet.GetRange(\"A1:B1\");\nrange.SetOrientation(\"xlUpward\");\nlet orientation = range.GetOrientation();\nworksheet.GetRange(\"A3\").SetValue(\"Orientation: \" + orientation);\n```",
        "memberof": "ApiRange",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Angle"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Angle"
                    }
                }
            }
        ],
        "name": "GetOrientation",
        "longname": "ApiRange#GetOrientation",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10610,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/GetOrientation.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets an angle to the current cell range.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {Angle} angle - Specifies the range angle.\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/SetOrientation.js\n\t */",
        "description": "Sets an angle to the current cell range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nworksheet.GetRange(\"B1\").SetValue(\"2\");\nlet range = worksheet.GetRange(\"A1:B1\");\nrange.SetOrientation(\"xlUpward\");\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "Angle"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Angle"
                    }
                },
                "name": "angle",
                "description": "Specifies the range angle.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetOrientation",
        "longname": "ApiRange#SetOrientation",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10621,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/SetOrientation.js"
        ]
    },
    {
        "comment": "/**\n\t * Sorts the cells in the given range by the parameters specified in the request.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | String} key1 - First sort field.\n\t * @param {SortOrder} sSortOrder1 - The sort order for the values specified in Key1.\n\t * @param {ApiRange | String} key2 - Second sort field.\n\t * @param {SortOrder} sSortOrder2 - The sort order for the values specified in Key2.\n\t * @param {ApiRange | String} key3 - Third sort field.\n\t * @param {SortOrder} sSortOrder3 - The sort order for the values specified in Key3.\n\t * @param {SortHeader} sHeader - Specifies whether the first row contains header information.\n\t * @param {SortOrientation} sOrientation - Specifies if the sort should be by row (default) or column.\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/SetSort.js\n\t */",
        "description": "Sorts the cells in the given range by the parameters specified in the request.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(2015);\nworksheet.GetRange(\"A3\").SetValue(2018);\nworksheet.GetRange(\"A4\").SetValue(2014);\nworksheet.GetRange(\"A5\").SetValue(2010);\nworksheet.GetRange(\"B1\").SetValue(150);\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(260);\nworksheet.GetRange(\"B4\").SetValue(120);\nworksheet.GetRange(\"B5\").SetValue(100);\nworksheet.GetRange(\"C1\").SetValue(\"C\");\nworksheet.GetRange(\"C2\").SetValue(\"B\");\nworksheet.GetRange(\"C3\").SetValue(\"A\");\nworksheet.GetRange(\"C4\").SetValue(\"G\");\nworksheet.GetRange(\"C5\").SetValue(\"E\");\nworksheet.GetRange(\"A1:C5\").SetSort(\"A1:A5\", \"xlAscending\", \"B1:B5\", \"xlDescending\", \"C1:C5\", \"xlAscending\", \"xlYes\", \"xlSortColumns\");\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "String"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "String"
                            }
                        ]
                    }
                },
                "name": "key1",
                "description": "First sort field.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "SortOrder"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "SortOrder"
                    }
                },
                "name": "sSortOrder1",
                "description": "The sort order for the values specified in Key1.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "String"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "String"
                            }
                        ]
                    }
                },
                "name": "key2",
                "description": "Second sort field.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "SortOrder"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "SortOrder"
                    }
                },
                "name": "sSortOrder2",
                "description": "The sort order for the values specified in Key2.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "String"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "String"
                            }
                        ]
                    }
                },
                "name": "key3",
                "description": "Third sort field.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "SortOrder"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "SortOrder"
                    }
                },
                "name": "sSortOrder3",
                "description": "The sort order for the values specified in Key3.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "SortHeader"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "SortHeader"
                    }
                },
                "name": "sHeader",
                "description": "Specifies whether the first row contains header information.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "SortOrientation"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "SortOrientation"
                    }
                },
                "name": "sOrientation",
                "description": "Specifies if the sort should be by row (default) or column.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetSort",
        "longname": "ApiRange#SetSort",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10662,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/SetSort.js"
        ]
    },
    {
        "comment": "/**\n\t * Deletes the Range object.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {?DeleteShiftDirection} shift - Specifies how to shift cells to replace the deleted cells.\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/Delete.js\n\t */",
        "description": "Deletes the Range object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B4\").SetValue(\"1\");\nworksheet.GetRange(\"C4\").SetValue(\"2\");\nworksheet.GetRange(\"D4\").SetValue(\"3\");\nworksheet.GetRange(\"C5\").SetValue(\"5\");\nlet range = worksheet.GetRange(\"C4\");\nrange.Delete(\"up\");\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "DeleteShiftDirection"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "DeleteShiftDirection",
                        "nullable": true
                    }
                },
                "name": "shift",
                "description": "Specifies how to shift cells to replace the deleted cells.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "Delete",
        "longname": "ApiRange#Delete",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10747,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/Delete.js"
        ]
    },
    {
        "comment": "/**\n\t * Inserts a cell or a range of cells into the worksheet or macro sheet and shifts other cells away to make space.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {?string} shift - Specifies which way to shift the cells (\"right\", \"down\").\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/Insert.js\n\t */",
        "description": "Inserts a cell or a range of cells into the worksheet or macro sheet and shifts other cells away to make space.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B4\").SetValue(\"1\");\nworksheet.GetRange(\"C4\").SetValue(\"2\");\nworksheet.GetRange(\"D4\").SetValue(\"3\");\nworksheet.GetRange(\"C5\").SetValue(\"5\");\nlet range = worksheet.GetRange(\"C4\");\nrange.Insert(\"down\");\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string",
                        "nullable": true
                    }
                },
                "name": "shift",
                "description": "Specifies which way to shift the cells (\"right\", \"down\").",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "Insert",
        "longname": "ApiRange#Insert",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10786,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/Insert.js"
        ]
    },
    {
        "comment": "/**\n\t * Changes the width of the columns or the height of the rows in the range to achieve the best fit.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {?bool} bRows - Specifies if the width of the columns will be autofit.\n\t * @param {?bool} bCols - Specifies if the height of the rows will be autofit.\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/AutoFit.js\n\t */",
        "description": "Changes the width of the columns or the height of the rows in the range to achieve the best fit.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"A1\");\nrange.SetValue(\"This is an example of the column width autofit.\");\nrange.AutoFit(false, true);\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "bool"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "bool",
                        "nullable": true
                    }
                },
                "name": "bRows",
                "description": "Specifies if the width of the columns will be autofit.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "bool"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "bool",
                        "nullable": true
                    }
                },
                "name": "bCols",
                "description": "Specifies if the height of the rows will be autofit.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "AutoFit",
        "longname": "ApiRange#AutoFit",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10809,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/AutoFit.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a collection of the ranges.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiAreas}\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/GetAreas.js\n\t */",
        "description": "Returns a collection of the ranges.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"B1:D1\");\nrange.SetValue(\"1\");\nrange.Select();\nlet areas = range.GetAreas();\nlet count = areas.GetCount();\nrange = worksheet.GetRange(\"A5\");\nrange.SetValue(\"The number of ranges in the areas: \");\nrange.AutoFit(false, true);\nworksheet.GetRange(\"B5\").SetValue(count);\n```",
        "memberof": "ApiRange",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiAreas"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiAreas"
                    }
                }
            }
        ],
        "name": "GetAreas",
        "longname": "ApiRange#GetAreas",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10825,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/GetAreas.js"
        ]
    },
    {
        "comment": "/**\n\t * Copies the range to the specified range or to the clipboard.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange?} [destination] - Specifies the new range to which the specified range will be copied. If this argument is omitted, the range will be copied to the clipboard.\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/Copy.js\n\t */",
        "description": "Copies the range to the specified range or to the clipboard.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"A1\");\nrange.SetValue(\"This is a sample text which is copied to the range A3.\");\nrange.Copy(worksheet.GetRange(\"A3\"));\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange",
                        "nullable": true
                    }
                },
                "name": "destination",
                "description": "Specifies the new range to which the specified range will be copied. If this argument is omitted, the range will be copied to the clipboard.",
                "optional": true,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "Copy",
        "longname": "ApiRange#Copy",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10841,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/Copy.js"
        ]
    },
    {
        "comment": "/**\n\t * Cuts the range and save it to the clipboard or paste it to the specified range.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange?} [destination] - Specifies the new range to which the cut range will be pasted. If this argument is omitted, the range will be copied to the clipboard.\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/Cut.js\n\t */",
        "description": "Cuts the range and save it to the clipboard or paste it to the specified range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"A1\");\nrange.SetValue(\"This is a sample text which is move to the range A3.\");\nrange.Cut(worksheet.GetRange(\"A3\"));\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange",
                        "nullable": true
                    }
                },
                "name": "destination",
                "description": "Specifies the new range to which the cut range will be pasted. If this argument is omitted, the range will be copied to the clipboard.",
                "optional": true,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "Cut",
        "longname": "ApiRange#Cut",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10872,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/Cut.js"
        ]
    },
    {
        "comment": "/**\n\t * Pastes the Range object to the specified range.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange} rangeFrom - Specifies the range to be pasted to the current range\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/Paste.js\n\t */",
        "description": "Pastes the Range object to the specified range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B4\").SetValue(\"1\");\nworksheet.GetRange(\"C4\").SetValue(\"2\");\nworksheet.GetRange(\"D4\").SetValue(\"3\");\nlet rangeFrom = worksheet.GetRange(\"B4:D4\");\nlet range = worksheet.GetRange(\"A1:C1\");\nrange.Paste(rangeFrom);\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                },
                "name": "rangeFrom",
                "description": "Specifies the range to be pasted to the current range",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "Paste",
        "longname": "ApiRange#Paste",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10904,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/Paste.js"
        ]
    },
    {
        "comment": "/**\n\t * Pastes the Range object to the specified range using the special paste options.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {PasteType} [sPasteType=\"xlPasteAll\"]  - Paste option.\n\t * @param {PasteSpecialOperation} [sPasteSpecialOperation=\"xlPasteSpecialOperationNone\"] - The mathematical operation which will be applied to the copied data.\n\t * @param {boolean} bSkipBlanks [bSkipBlanks=false] - Specifies whether to avoid replacing values in the paste area when blank cells occur in the copy area.\n\t * @param {boolean} bTranspose [bTranspose=false] - Specifies whether the pasted data will be transposed from rows to columns.\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/PasteSpecial.js\n\t */",
        "description": "Pastes the Range object to the specified range using the special paste options.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"A1\");\nrange.SetValue(\"test\");\nworksheet.GetRange(\"A1\").Copy();\nworksheet.GetRange(\"B1\").PasteSpecial(\"xlPasteAll\", \"xlPasteSpecialOperationNone\", false, false);\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "PasteType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PasteType"
                    }
                },
                "name": "sPasteType",
                "description": "Paste option.",
                "optional": true,
                "defaultvalue": "\"xlPasteAll\""
            },
            {
                "type": {
                    "names": [
                        "PasteSpecialOperation"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PasteSpecialOperation"
                    }
                },
                "name": "sPasteSpecialOperation",
                "description": "The mathematical operation which will be applied to the copied data.",
                "optional": true,
                "defaultvalue": "\"xlPasteSpecialOperationNone\""
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bSkipBlanks",
                "description": "[bSkipBlanks=false] - Specifies whether to avoid replacing values in the paste area when blank cells occur in the copy area.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bTranspose",
                "description": "[bTranspose=false] - Specifies whether the pasted data will be transposed from rows to columns.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "PasteSpecial",
        "longname": "ApiRange#PasteSpecial",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 10928,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/PasteSpecial.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the ApiPivotTable object that represents the pivot table report containing the upper-left corner of the specified range.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiPivotTable | null}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/Cell/ApiRange/Methods/GetPivotTable.js\n\t */",
        "description": "Returns the ApiPivotTable object that represents the pivot table report containing the upper-left corner of the specified range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\nlet samePivotTable = Api.GetActiveSheet().GetRange('B3').GetPivotTable();\n\nsamePivotTable.AddFields({\n    rows: 'Region',\n    columns: 'Style'\n});\n\nsamePivotTable.AddDataField('Price');\n```",
        "memberof": "ApiRange",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiPivotTable",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiPivotTable"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetPivotTable",
        "longname": "ApiRange#GetPivotTable",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 11029,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/GetPivotTable.js"
        ]
    },
    {
        "comment": "/**\n\t * Search data type (formulas or values).\n\t * @typedef {(\"xlFormulas\" | \"xlValues\")} XlFindLookIn\n\t * @see office-js-api/Examples/Enumerations/XlFindLookIn.js\n\t */",
        "description": "Search data type (formulas or values).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet searchRange = range.Find( { What: \"200\", After: oWorksheet.GetRange(\"B1\"), LookIn: \"xlValues\", LookAt: \"xlWhole\",\tSearchOrder: \"xlByColumns\", SearchDirection: \"xlNext\", MatchCase: true } );\n```",
        "name": "XlFindLookIn",
        "longname": "XlFindLookIn",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 11051,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/XlFindLookIn.js"
        ],
        "type": {
            "names": [
                "\"xlFormulas\"",
                "\"xlValues\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"xlFormulas\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlValues\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Specifies whether the whole search text or any part of the search text is matched.\n\t * @typedef {(\"xlWhole\" | \"xlPart\")} XlLookAt\n\t * @see office-js-api/Examples/Enumerations/XlLookAt.js\n\t */",
        "description": "Specifies whether the whole search text or any part of the search text is matched.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet searchRange = range.Find( { What: \"200\", After: oWorksheet.GetRange(\"B1\"), LookIn: \"xlValues\", LookAt: \"xlWhole\",\tSearchOrder: \"xlByColumns\", SearchDirection: \"xlNext\", MatchCase: true } );\n```",
        "name": "XlLookAt",
        "longname": "XlLookAt",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 11057,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/XlLookAt.js"
        ],
        "type": {
            "names": [
                "\"xlWhole\"",
                "\"xlPart\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"xlWhole\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlPart\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Range search order - by rows or by columns.\n\t * @typedef {(\"xlByRows\" | \"xlByColumns\")} XlSearchOrder\n\t * @see office-js-api/Examples/Enumerations/XlSearchOrder.js\n\t */",
        "description": "Range search order - by rows or by columns.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet searchRange = range.Find( { What: \"200\", After: oWorksheet.GetRange(\"B1\"), LookIn: \"xlValues\", LookAt: \"xlWhole\",\tSearchOrder: \"xlByColumns\", SearchDirection: \"xlNext\", MatchCase: true } );\n```",
        "name": "XlSearchOrder",
        "longname": "XlSearchOrder",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 11063,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/XlSearchOrder.js"
        ],
        "type": {
            "names": [
                "\"xlByRows\"",
                "\"xlByColumns\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"xlByRows\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlByColumns\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Range search direction - next match or previous match.\n\t * @typedef {(\"xlNext\" | \"xlPrevious\")} XlSearchDirection\n\t * @see office-js-api/Examples/Enumerations/XlSearchDirection.js\n\t */",
        "description": "Range search direction - next match or previous match.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet searchRange = range.Find( { What: \"200\", After: oWorksheet.GetRange(\"B1\"), LookIn: \"xlValues\", LookAt: \"xlWhole\",\tSearchOrder: \"xlByColumns\", SearchDirection: \"xlNext\", MatchCase: true } );\n```",
        "name": "XlSearchDirection",
        "longname": "XlSearchDirection",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 11069,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/XlSearchDirection.js"
        ],
        "type": {
            "names": [
                "\"xlNext\"",
                "\"xlPrevious\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"xlNext\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlPrevious\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Properties to make search.\n\t * @typedef {Object} SearchData\n\t * @property {string | undefined} What - The data to search for.\n\t * @property {ApiRange} After - The cell after which you want the search to begin. If this argument is not specified, the search starts after the cell in the upper-left corner of the range.\n\t * @property {XlFindLookIn} LookIn - Search data type (formulas or values).\n\t * @property {XlLookAt} LookAt - Specifies whether the whole search text or any part of the search text is matched.\n\t * @property {XlSearchOrder} SearchOrder - Range search order - by rows or by columns.\n\t * @property {XlSearchDirection} SearchDirection - Range search direction - next match or previous match.\n\t * @property {boolean} MatchCase - Case sensitive or not. The default value is \"false\".\n\t * @see office-js-api/Examples/Enumerations/SearchData.js\n\t */",
        "description": "Properties to make search.",
        "name": "SearchData",
        "longname": "SearchData",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 11075,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string",
                        "undefined"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "UndefinedLiteral"
                            }
                        ]
                    }
                },
                "name": "What",
                "description": "The data to search for.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                },
                "name": "After",
                "description": "The cell after which you want the search to begin. If this argument is not specified, the search starts after the cell in the upper-left corner of the range.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "XlFindLookIn"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "XlFindLookIn"
                    }
                },
                "name": "LookIn",
                "description": "Search data type (formulas or values).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "XlLookAt"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "XlLookAt"
                    }
                },
                "name": "LookAt",
                "description": "Specifies whether the whole search text or any part of the search text is matched.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "XlSearchOrder"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "XlSearchOrder"
                    }
                },
                "name": "SearchOrder",
                "description": "Range search order - by rows or by columns.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "XlSearchDirection"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "XlSearchDirection"
                    }
                },
                "name": "SearchDirection",
                "description": "Range search direction - next match or previous match.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "MatchCase",
                "description": "Case sensitive or not. The default value is \"false\".",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "see": [
            "office-js-api/Examples/Enumerations/SearchData.js"
        ],
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        }
    },
    {
        "comment": "/**\n\t * Properties to make search and replace.\n\t * @typedef {Object} ReplaceData\n\t * @property {string | undefined} What - The data to search for.\n\t * @property {string} Replacement - The replacement string.\n\t * @property {XlLookAt} LookAt - Specifies whether the whole search text or any part of the search text is matched.\n\t * @property {XlSearchOrder} SearchOrder - Range search order - by rows or by columns.\n\t * @property {XlSearchDirection} SearchDirection - Range search direction - next match or previous match.\n\t * @property {boolean} MatchCase - Case sensitive or not. The default value is \"false\".\n\t * @property {boolean} ReplaceAll - Specifies if all the found data will be replaced or not. The default value is \"true\".\n\t * @see office-js-api/Examples/Enumerations/ReplaceData.js\n\t */",
        "description": "Properties to make search and replace.",
        "name": "ReplaceData",
        "longname": "ReplaceData",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 11088,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string",
                        "undefined"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "UndefinedLiteral"
                            }
                        ]
                    }
                },
                "name": "What",
                "description": "The data to search for.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Replacement",
                "description": "The replacement string.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "XlLookAt"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "XlLookAt"
                    }
                },
                "name": "LookAt",
                "description": "Specifies whether the whole search text or any part of the search text is matched.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "XlSearchOrder"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "XlSearchOrder"
                    }
                },
                "name": "SearchOrder",
                "description": "Range search order - by rows or by columns.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "XlSearchDirection"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "XlSearchDirection"
                    }
                },
                "name": "SearchDirection",
                "description": "Range search direction - next match or previous match.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "MatchCase",
                "description": "Case sensitive or not. The default value is \"false\".",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "ReplaceAll",
                "description": "Specifies if all the found data will be replaced or not. The default value is \"true\".",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "see": [
            "office-js-api/Examples/Enumerations/ReplaceData.js"
        ],
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        }
    },
    {
        "comment": "\n\t * Finds specific information in the current range.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string | undefined} What - The data to search for.\n\t * @param {ApiRange} After - The cell after which you want the search to begin. If this argument is not specified, the search starts after the cell in the upper-left corner of the range.\n\t * @param {XlFindLookIn} LookIn - Search data type (formulas or values).\n\t * @param {XlLookAt} LookAt - Specifies whether the whole search text or any part of the search text is matched.\n\t * @param {XlSearchOrder} SearchOrder - Range search order - by rows or by columns.\n\t * @param {XlSearchDirection} SearchDirection - Range search direction - next match or previous match.\n\t * @param {boolean} MatchCase - Case sensitive or not. The default value is \"false\".\n\t * @returns {ApiRange | null} - Returns null if the current range does not contain such text.\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/Find.js\n\t */",
        "description": "Finds specific information in the current range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"A4\").SetValue(\"Cost price\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"B4\").SetValue(50);\nworksheet.GetRange(\"C2\").SetValue(200);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"C4\").SetValue(120);\nworksheet.GetRange(\"D2\").SetValue(200);\nworksheet.GetRange(\"D3\").SetValue(200);\nworksheet.GetRange(\"D4\").SetValue(160);\nlet range = worksheet.GetRange(\"A2:D4\");\nlet searchData = {\n\tWhat: \"200\",\n\tAfter: worksheet.GetRange(\"B1\"),\n\tLookIn: \"xlValues\",\n\tLookAt: \"xlWhole\",\n\tSearchOrder: \"xlByColumns\",\n\tSearchDirection: \"xlNext\",\n\tMatchCase: true\n};\nlet oSearchRange = range.Find(searchData);\noSearchRange.SetFillColor(Api.CreateColorFromRGB(255, 213, 191));\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "undefined"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "UndefinedLiteral"
                            }
                        ]
                    }
                },
                "name": "What",
                "description": "The data to search for.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                },
                "name": "After",
                "description": "The cell after which you want the search to begin. If this argument is not specified, the search starts after the cell in the upper-left corner of the range.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "XlFindLookIn"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "XlFindLookIn"
                    }
                },
                "name": "LookIn",
                "description": "Search data type (formulas or values).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "XlLookAt"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "XlLookAt"
                    }
                },
                "name": "LookAt",
                "description": "Specifies whether the whole search text or any part of the search text is matched.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "XlSearchOrder"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "XlSearchOrder"
                    }
                },
                "name": "SearchOrder",
                "description": "Range search order - by rows or by columns.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "XlSearchDirection"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "XlSearchDirection"
                    }
                },
                "name": "SearchDirection",
                "description": "Range search direction - next match or previous match.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "MatchCase",
                "description": "Case sensitive or not. The default value is \"false\".",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "Find",
        "longname": "ApiRange#Find",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 11121,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/Find.js"
        ]
    },
    {
        "comment": "/**\n\t * Continues a search that was begun with the {@link ApiRange#Find} method. Finds the next cell that matches those same conditions and returns the ApiRange object that represents that cell. This does not affect the selection or the active cell.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange} After - The cell after which the search will start. If this argument is not specified, the search starts from the last cell found.\n\t * @returns {ApiRange | null} - Returns null if the range does not contain such text.\n\t *\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/FindNext.js\n\t */",
        "description": "Continues a search that was begun with the {@link ApiRange#Find} method. Finds the next cell that matches those same conditions and returns the ApiRange object that represents that cell. This does not affect the selection or the active cell.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"A4\").SetValue(\"Cost price\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"B4\").SetValue(50);\nworksheet.GetRange(\"C2\").SetValue(200);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"C4\").SetValue(120);\nworksheet.GetRange(\"D2\").SetValue(200);\nworksheet.GetRange(\"D3\").SetValue(200);\nworksheet.GetRange(\"D4\").SetValue(160);\nlet range = worksheet.GetRange(\"A2:D4\");\nlet oSearchRange = range.Find(\"200\", \"B1\", \"xlValues\", \"xlWhole\", \"xlByColumns\", \"xlNext\", true);\noSearchRange.SetFillColor(Api.CreateColorFromRGB(255, 213, 191));\nlet nextSearchRange = range.FindNext(oSearchRange);\nnextSearchRange.SetFillColor(Api.CreateColorFromRGB(255, 213, 191));\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                },
                "name": "After",
                "description": "The cell after which the search will start. If this argument is not specified, the search starts from the last cell found.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "FindNext",
        "longname": "ApiRange#FindNext",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 11188,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/FindNext.js"
        ]
    },
    {
        "comment": "/**\n\t * Continues a search that was begun with the {@link ApiRange#Find} method. Finds the previous cell that matches those same conditions and returns the ApiRange object that represents that cell. This does not affect the selection or the active cell.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange} Before - The cell before which the search will start. If this argument is not specified, the search starts from the last cell found.\n\t * @returns {ApiRange | null} - Returns null if the range does not contain such text.\n\t *\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/FindPrevious.js\n\t */",
        "description": "Continues a search that was begun with the {@link ApiRange#Find} method. Finds the previous cell that matches those same conditions and returns the ApiRange object that represents that cell. This does not affect the selection or the active cell.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"A4\").SetValue(\"Cost price\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"B4\").SetValue(50);\nworksheet.GetRange(\"C2\").SetValue(200);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"C4\").SetValue(120);\nworksheet.GetRange(\"D2\").SetValue(200);\nworksheet.GetRange(\"D3\").SetValue(200);\nworksheet.GetRange(\"D4\").SetValue(160);\nlet range = worksheet.GetRange(\"A2:D4\");\nlet oSearchRange = range.Find(\"200\", \"B1\", \"xlValues\", \"xlWhole\", \"xlByColumns\", \"xlNext\", true);\noSearchRange.SetFillColor(Api.CreateColorFromRGB(255, 213, 191));\nlet nextSearchRange = range.FindNext(oSearchRange);\nnextSearchRange.SetFillColor(Api.CreateColorFromRGB(255, 213, 191));\nlet prevSearchRange = range.FindPrevious(nextSearchRange);\nprevSearchRange.SetValue(0);\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                },
                "name": "Before",
                "description": "The cell before which the search will start. If this argument is not specified, the search starts from the last cell found.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "FindPrevious",
        "longname": "ApiRange#FindPrevious",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 11229,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/FindPrevious.js"
        ]
    },
    {
        "comment": "\n\t * Replaces specific information to another one in a range.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string | undefined} What - The data to search for.\n\t * @param {string} Replacement - The replacement string.\n\t * @param {XlLookAt} LookAt - Specifies whether the whole search text or any part of the search text is matched.\n\t * @param {XlSearchOrder} SearchOrder - Range search order - by rows or by columns.\n\t * @param {XlSearchDirection} SearchDirection - Range search direction - next match or previous match.\n\t * @param {boolean} MatchCase - Case sensitive or not. The default value is \"false\".\n\t * @param {boolean} ReplaceAll - Specifies if all the found data will be replaced or not. The default value is \"true\".\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/Replace.js\n\t */",
        "description": "Replaces specific information to another one in a range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"A4\").SetValue(\"Cost price\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"B4\").SetValue(50);\nworksheet.GetRange(\"C2\").SetValue(200);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"C4\").SetValue(120);\nworksheet.GetRange(\"D2\").SetValue(200);\nworksheet.GetRange(\"D3\").SetValue(200);\nworksheet.GetRange(\"D4\").SetValue(160);\nlet range = worksheet.GetRange(\"A2:D4\");\nlet replaceData = {\n\tWhat: \"200\", \n\tReplacement: \"0\",\n\tLookAt: \"xlWhole\",\n\tSearchOrder: \"xlByColumns\",\n\tSearchDirection: \"xlNext\",\n\tMatchCase: true,\n\tReplaceAll: true\n};\nrange.Replace(replaceData);\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "undefined"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "UndefinedLiteral"
                            }
                        ]
                    }
                },
                "name": "What",
                "description": "The data to search for.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Replacement",
                "description": "The replacement string.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "XlLookAt"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "XlLookAt"
                    }
                },
                "name": "LookAt",
                "description": "Specifies whether the whole search text or any part of the search text is matched.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "XlSearchOrder"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "XlSearchOrder"
                    }
                },
                "name": "SearchOrder",
                "description": "Range search order - by rows or by columns.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "XlSearchDirection"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "XlSearchDirection"
                    }
                },
                "name": "SearchDirection",
                "description": "Range search direction - next match or previous match.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "MatchCase",
                "description": "Case sensitive or not. The default value is \"false\".",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "ReplaceAll",
                "description": "Specifies if all the found data will be replaced or not. The default value is \"true\".",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "Replace",
        "longname": "ApiRange#Replace",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 11280,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/Replace.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the ApiCharacters object that represents a range of characters within the object text. Use the ApiCharacters object to format characters within a text string.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number} Start - The first character to be returned. If this argument is either 1 or omitted, this property returns a range of characters starting with the first character.\n\t * @param {number} Length - The number of characters to be returned. If this argument is omitted, this property returns the remainder of the string (everything after the Start character).\n\t * @returns {ApiCharacters}\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/GetCharacters.js\n\t */",
        "description": "Returns the ApiCharacters object that represents a range of characters within the object text. Use the ApiCharacters object to format characters within a text string.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"B1\");\nrange.SetValue(\"This is just a sample text.\");\nlet characters = range.GetCharacters(9, 4);\nlet font = characters.GetFont();\nfont.SetBold(true);\n```",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "Start",
                "description": "The first character to be returned. If this argument is either 1 or omitted, this property returns a range of characters starting with the first character.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "Length",
                "description": "The number of characters to be returned. If this argument is omitted, this property returns the remainder of the string (everything after the Start character).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiCharacters"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiCharacters"
                    }
                }
            }
        ],
        "name": "GetCharacters",
        "longname": "ApiRange#GetCharacters",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 11349,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/GetCharacters.js"
        ]
    },
    {
        "comment": "/**\n\t * Filter type.\n\t * @typedef {(\"xlAnd\" | \"xlBottom10Items\" | \"xlBottom10Percent\" | \"xlFilterCellColor\" | \"xlFilterDynamic\" | \"xlFilterFontColor\" | \"xlFilterValues\" | \"xlOr\" | \"xlTop10Items\" | \"xlTop10Percent\")} XlAutoFilterOperator\n\t * @see office-js-api/Examples/Enumerations/XlAutoFilterOperator.js\n\t */",
        "description": "Filter type.",
        "name": "XlAutoFilterOperator",
        "longname": "XlAutoFilterOperator",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 11378,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/XlAutoFilterOperator.js"
        ],
        "type": {
            "names": [
                "\"xlAnd\"",
                "\"xlBottom10Items\"",
                "\"xlBottom10Percent\"",
                "\"xlFilterCellColor\"",
                "\"xlFilterDynamic\"",
                "\"xlFilterFontColor\"",
                "\"xlFilterValues\"",
                "\"xlOr\"",
                "\"xlTop10Items\"",
                "\"xlTop10Percent\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"xlAnd\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlBottom10Items\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlBottom10Percent\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlFilterCellColor\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlFilterDynamic\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlFilterFontColor\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlFilterValues\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlOr\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlTop10Items\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlTop10Percent\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Specifies the filter criterion.\n\t * @typedef {(\"xlFilterAboveAverage\" | \"xlFilterAllDatesInPeriodApril\" | \"xlFilterAllDatesInPeriodAugust\" | \"xlFilterAllDatesInPeriodDecember\"\n\t * | \"xlFilterAllDatesInPeriodFebruary\" | \"xlFilterAllDatesInPeriodJanuary\" | \"xlFilterAllDatesInPeriodJuly\" | \"xlFilterAllDatesInPeriodJune\"\n\t * | \"xlFilterAllDatesInPeriodMarch\" | \"xlFilterAllDatesInPeriodMay\" | \"xlFilterAllDatesInPeriodNovember\" | \"xlFilterAllDatesInPeriodOctober\"\n\t * | \"xlFilterAllDatesInPeriodQuarter1\" | \"xlFilterAllDatesInPeriodQuarter2\" | \"xlFilterAllDatesInPeriodQuarter3\" | \"xlFilterAllDatesInPeriodQuarter4\"\n\t * | \"xlFilterBelowAverage\" | \"xlFilterLastMonth\" | \"xlFilterLastQuarter\" | \"xlFilterLastWeek\"\n\t * | \"xlFilterLastYear\" | \"xlFilterNextMonth\" | \"xlFilterNextQuarter\" | \"xlFilterNextWeek\"\n\t * | \"xlFilterNextYear\" | \"xlFilterThisMonth\" | \"xlFilterThisQuarter\" | \"xlFilterThisWeek\"\n\t * | \"xlFilterThisYear\" | \"xlFilterToday\" | \"xlFilterTomorrow\" | \"xlFilterYearToDate\" | \"xlFilterYesterday\")} XlDynamicFilterCriteria\n\t * @see office-js-api/Examples/Enumerations/XlDynamicFilterCriteria.js\n\t */",
        "description": "Specifies the filter criterion.",
        "name": "XlDynamicFilterCriteria",
        "longname": "XlDynamicFilterCriteria",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 11384,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/XlDynamicFilterCriteria.js"
        ],
        "type": {
            "names": [
                "\"xlFilterAboveAverage\"",
                "\"xlFilterAllDatesInPeriodApril\"",
                "\"xlFilterAllDatesInPeriodAugust\"",
                "\"xlFilterAllDatesInPeriodDecember\"",
                "\"xlFilterAllDatesInPeriodFebruary\"",
                "\"xlFilterAllDatesInPeriodJanuary\"",
                "\"xlFilterAllDatesInPeriodJuly\"",
                "\"xlFilterAllDatesInPeriodJune\"",
                "\"xlFilterAllDatesInPeriodMarch\"",
                "\"xlFilterAllDatesInPeriodMay\"",
                "\"xlFilterAllDatesInPeriodNovember\"",
                "\"xlFilterAllDatesInPeriodOctober\"",
                "\"xlFilterAllDatesInPeriodQuarter1\"",
                "\"xlFilterAllDatesInPeriodQuarter2\"",
                "\"xlFilterAllDatesInPeriodQuarter3\"",
                "\"xlFilterAllDatesInPeriodQuarter4\"",
                "\"xlFilterBelowAverage\"",
                "\"xlFilterLastMonth\"",
                "\"xlFilterLastQuarter\"",
                "\"xlFilterLastWeek\"",
                "\"xlFilterLastYear\"",
                "\"xlFilterNextMonth\"",
                "\"xlFilterNextQuarter\"",
                "\"xlFilterNextWeek\"",
                "\"xlFilterNextYear\"",
                "\"xlFilterThisMonth\"",
                "\"xlFilterThisQuarter\"",
                "\"xlFilterThisWeek\"",
                "\"xlFilterThisYear\"",
                "\"xlFilterToday\"",
                "\"xlFilterTomorrow\"",
                "\"xlFilterYearToDate\"",
                "\"xlFilterYesterday\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"xlFilterAboveAverage\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlFilterAllDatesInPeriodApril\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlFilterAllDatesInPeriodAugust\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlFilterAllDatesInPeriodDecember\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlFilterAllDatesInPeriodFebruary\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlFilterAllDatesInPeriodJanuary\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlFilterAllDatesInPeriodJuly\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlFilterAllDatesInPeriodJune\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlFilterAllDatesInPeriodMarch\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlFilterAllDatesInPeriodMay\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlFilterAllDatesInPeriodNovember\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlFilterAllDatesInPeriodOctober\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlFilterAllDatesInPeriodQuarter1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlFilterAllDatesInPeriodQuarter2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlFilterAllDatesInPeriodQuarter3\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlFilterAllDatesInPeriodQuarter4\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlFilterBelowAverage\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlFilterLastMonth\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlFilterLastQuarter\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlFilterLastWeek\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlFilterLastYear\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlFilterNextMonth\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlFilterNextQuarter\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlFilterNextWeek\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlFilterNextYear\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlFilterThisMonth\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlFilterThisQuarter\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlFilterThisWeek\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlFilterThisYear\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlFilterToday\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlFilterTomorrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlFilterYearToDate\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlFilterYesterday\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Adds an AutoFilter to the current range.\n\t * @memberof ApiRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {?number} Field - The integer offset of the field on which you want to base the filter (from the left of the list; the leftmost field is field one).\n\t * @param {?string | string[] | ApiColor | XlDynamicFilterCriteria} Criteria1 - The criteria (a string; for example, \"101\"). Use \"=\" to find blank fields, \"<>\" to find non-blank fields, and \"><\" to select (No Data) fields in data types.\n\t * If this argument is omitted, the criteria is All. If Operator is xlTop10Items, Criteria1 specifies the number of items (for example, \"10\").\n\t * @param {?XlAutoFilterOperator} Operator - An XlAutoFilterOperator constant specifying the type of filter.\n\t * @param {?string} Criteria2 - The second criteria (a string). Used with Criteria1 and Operator to construct compound criteria.\n\t * @param {?boolean} VisibleDropDown - True to display the AutoFilter drop-down arrow for the filtered field. False to hide the AutoFilter drop-down arrow for the filtered field. True by default.\n\t * @since 8.3.0\n\t * @see office-js-api/Examples/{Editor}/ApiRange/Methods/SetAutoFilter.js\n\t */",
        "description": "Adds an AutoFilter to the current range.",
        "memberof": "ApiRange",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number",
                        "nullable": true
                    }
                },
                "name": "Field",
                "description": "The integer offset of the field on which you want to base the filter (from the left of the list; the leftmost field is field one).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string",
                        "Array.<string>",
                        "ApiColor",
                        "XlDynamicFilterCriteria"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "string",
                                "nullable": true
                            },
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "string",
                                        "type": "NameExpression"
                                    }
                                ]
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiColor"
                            },
                            {
                                "type": "NameExpression",
                                "name": "XlDynamicFilterCriteria"
                            }
                        ]
                    }
                },
                "name": "Criteria1",
                "description": "The criteria (a string; for example, \"101\"). Use \"=\" to find blank fields, \"<>\" to find non-blank fields, and \"><\" to select (No Data) fields in data types.\nIf this argument is omitted, the criteria is All. If Operator is xlTop10Items, Criteria1 specifies the number of items (for example, \"10\").",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "XlAutoFilterOperator"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "XlAutoFilterOperator",
                        "nullable": true
                    }
                },
                "name": "Operator",
                "description": "An XlAutoFilterOperator constant specifying the type of filter.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string",
                        "nullable": true
                    }
                },
                "name": "Criteria2",
                "description": "The second criteria (a string). Used with Criteria1 and Operator to construct compound criteria.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean",
                        "nullable": true
                    }
                },
                "name": "VisibleDropDown",
                "description": "True to display the AutoFilter drop-down arrow for the filtered field. False to hide the AutoFilter drop-down arrow for the filtered field. True by default.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetAutoFilter",
        "longname": "ApiRange#SetAutoFilter",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 11410,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiRange/Methods/SetAutoFilter.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the ApiDrawing class.\n\t * @memberof ApiDrawing\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {\"drawing\"}\n\t * @see office-js-api/Examples/{Editor}/ApiDrawing/Methods/GetClassType.js\n\t */",
        "description": "Returns a type of the ApiDrawing class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet drawing = worksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\ndrawing.SetSize(120 * 36000, 70 * 36000);\ndrawing.SetPosition(0, 2 * 36000, 1, 3 * 36000);\nlet classType = drawing.GetClassType();\nworksheet.SetColumnWidth(0, 15);\nworksheet.SetColumnWidth(1, 10);\nworksheet.GetRange(\"A1\").SetValue(\"Class Type = \" + classType);\n```",
        "memberof": "ApiDrawing",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"drawing\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"drawing\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiDrawing#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 11928,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiDrawing/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets a size of the object (image, shape, chart) bounding box.\n\t * @memberof ApiDrawing\n\t * @typeofeditors [\"CSE\"]\n\t * @param {EMU} nWidth - The object width measured in English measure units.\n\t * @param {EMU} nHeight - The object height measured in English measure units.\n\t * @see office-js-api/Examples/{Editor}/ApiDrawing/Methods/SetSize.js\n\t */",
        "description": "Sets a size of the object (image, shape, chart) bounding box.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet drawing = worksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\ndrawing.SetSize(120 * 36000, 70 * 36000);\ndrawing.SetPosition(0, 2 * 36000, 2, 3 * 36000);\n```",
        "memberof": "ApiDrawing",
        "params": [
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nWidth",
                "description": "The object width measured in English measure units.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nHeight",
                "description": "The object height measured in English measure units.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetSize",
        "longname": "ApiDrawing#SetSize",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 11940,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiDrawing/Methods/SetSize.js"
        ]
    },
    {
        "comment": "/**\n\t * Changes the position for the drawing object.\n\t * <note>Please note that the horizontal and vertical offsets are calculated within the limits of\n\t * the specified column and row cells only. If this value exceeds the cell width or height, another vertical/horizontal position will be set.</note>\n\t * @memberof ApiDrawing\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number} nFromCol - The number of the column where the beginning of the drawing object will be placed.\n\t * @param {EMU} nColOffset - The offset from the nFromCol column to the left part of the drawing object measured in English measure units.\n\t * @param {number} nFromRow - The number of the row where the beginning of the drawing object will be placed.\n\t * @param {EMU} nRowOffset - The offset from the nFromRow row to the upper part of the drawing object measured in English measure units.\n\t * @see office-js-api/Examples/{Editor}/ApiDrawing/Methods/SetPosition.js\n\t */",
        "description": "Changes the position for the drawing object.\n<note>Please note that the horizontal and vertical offsets are calculated within the limits of\nthe specified column and row cells only. If this value exceeds the cell width or height, another vertical/horizontal position will be set.</note>\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet drawing = worksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\ndrawing.SetSize(120 * 36000, 70 * 36000);\ndrawing.SetPosition(0, 2 * 36000, 2, 3 * 36000);\n```",
        "memberof": "ApiDrawing",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nFromCol",
                "description": "The number of the column where the beginning of the drawing object will be placed.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nColOffset",
                "description": "The offset from the nFromCol column to the left part of the drawing object measured in English measure units.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nFromRow",
                "description": "The number of the row where the beginning of the drawing object will be placed.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nRowOffset",
                "description": "The offset from the nFromRow row to the upper part of the drawing object measured in English measure units.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetPosition",
        "longname": "ApiDrawing#SetPosition",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 11963,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiDrawing/Methods/SetPosition.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the lock value for the specified lock type of the current drawing.\n\t * @typeofeditors [\"CSE\"]\n\t * @param {DrawingLockType} sType - Lock type in the string format.\n\t * @returns {bool}\n\t * @see office-js-api/Examples/{Editor}/ApiDrawing/Methods/GetLockValue.js\n\t */",
        "description": "Returns the lock value for the specified lock type of the current drawing.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet drawing = worksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\ndrawing.SetSize(120 * 36000, 70 * 36000);\ndrawing.SetPosition(0, 2 * 36000, 1, 3 * 36000);\ndrawing.SetLockValue(\"noSelect\", true);\nlet lockValue = drawing.GetLockValue(\"noSelect\");\nworksheet.GetRange(\"A1\").SetValue(\"This drawing cannot be selected: \" + lockValue);\n```",
        "memberof": "ApiDrawing",
        "params": [
            {
                "type": {
                    "names": [
                        "DrawingLockType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "DrawingLockType"
                    }
                },
                "name": "sType",
                "description": "Lock type in the string format.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "bool"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "bool"
                    }
                }
            }
        ],
        "name": "GetLockValue",
        "longname": "ApiDrawing#GetLockValue",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12012,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiDrawing/Methods/GetLockValue.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the lock value to the specified lock type of the current drawing.\n\t * @typeofeditors [\"CSE\"]\n\t * @param {DrawingLockType} sType - Lock type in the string format.\n\t * @param {bool} bValue - Specifies if the specified lock is applied to the current drawing.\n\t * @returns {bool}\n\t * @see office-js-api/Examples/{Editor}/ApiDrawing/Methods/SetLockValue.js\n\t */",
        "description": "Sets the lock value to the specified lock type of the current drawing.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet drawing = worksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\ndrawing.SetSize(120 * 36000, 70 * 36000);\ndrawing.SetPosition(0, 2 * 36000, 1, 3 * 36000);\ndrawing.SetLockValue(\"noSelect\", true);\nlet lockValue = drawing.GetLockValue(\"noSelect\");\nworksheet.GetRange(\"A1\").SetValue(\"This drawing cannot be selected: \" + lockValue);\n```",
        "memberof": "ApiDrawing",
        "params": [
            {
                "type": {
                    "names": [
                        "DrawingLockType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "DrawingLockType"
                    }
                },
                "name": "sType",
                "description": "Lock type in the string format.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "bool"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "bool"
                    }
                },
                "name": "bValue",
                "description": "Specifies if the specified lock is applied to the current drawing.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "bool"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "bool"
                    }
                }
            }
        ],
        "name": "SetLockValue",
        "longname": "ApiDrawing#SetLockValue",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12032,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiDrawing/Methods/SetLockValue.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the parent sheet of the current drawing.\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {?ApiWorksheet}\n\t * @since 8.3.0\n\t * @see office-js-api/Examples/{Editor}/ApiDrawing/Methods/GetParentSheet.js\n\t */",
        "description": "Returns the parent sheet of the current drawing.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet parentSheet = shape.GetParentSheet();\nlet content = shape.GetDocContent();\nlet paragraph = content.GetElement(0);\nparagraph.AddText(\"Parent sheet name is \" + parentSheet.GetName());\n```",
        "memberof": "ApiDrawing",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiWorksheet"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiWorksheet",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetParentSheet",
        "longname": "ApiDrawing#GetParentSheet",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12054,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiDrawing/Methods/GetParentSheet.js"
        ]
    },
    {
        "comment": "/**\n     * Returns a type of the ApiGroup class.\n     * @memberof ApiGroup\n     * @typeofeditors [\"CSE\"]\n     * @returns {\"group\"}\n\t * @since 8.3.0\n     * @see office-js-api/Examples/{Editor}/ApiGroup/Methods/GetClassType.js\n     */",
        "description": "Returns a type of the ApiGroup class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill1 = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet fill2 = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape1 = worksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill1, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet shape2 = worksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill2, stroke, 0, 15 * 36000, 0, 30 * 36000);\n\nlet group = worksheet.GroupDrawings([shape1, shape2]);\nlet classType = group.GetClassType();\n\nlet content1 = shape1.GetDocContent();\nlet paragraph1 = content1.GetElement(0);\nparagraph1.AddText(\"Class Type = \" + classType);\n\nlet content2 = shape2.GetDocContent();\nlet paragraph2 = content2.GetElement(0);\nparagraph2.AddText(\"Class Type = \" + classType);\n\n```",
        "memberof": "ApiGroup",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"group\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"group\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiGroup#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12077,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Cell/ApiGroup/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\n     * Ungroups the current group of drawings.\n     * @memberof ApiGroup\n     * @typeofeditors [\"CSE\"]\n     * @returns {boolean}\n\t * @since 8.3.0\n     * @see office-js-api/Examples/{Editor}/ApiGroup/Methods/Ungroup.js\n     */",
        "description": "Ungroups the current group of drawings.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill1 = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet fill2 = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape1 = worksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill1, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet shape2 = worksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill2, stroke, 0, 15 * 36000, 0, 30 * 36000);\n\nlet group = worksheet.GroupDrawings([shape1, shape2]);\ngroup.Ungroup();\n\nlet content1 = shape1.GetDocContent();\nlet paragraph1 = content1.GetElement(0);\nparagraph1.AddText(\"Shapes are ungrouped\");\n\nlet content2 = shape2.GetDocContent();\nlet paragraph2 = content2.GetElement(0);\nparagraph2.AddText(\"Shapes are ungrouped\");\n\n```",
        "memberof": "ApiGroup",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "Ungroup",
        "longname": "ApiGroup#Ungroup",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12089,
            "columnno": 4
        },
        "see": [
            "office-js-api/Examples/Cell/ApiGroup/Methods/Ungroup.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the ApiImage class.\n\t * @memberof ApiImage\n\t * @typeofeditors [\"CDE\", \"CSE\"]\n\t * @returns {\"image\"}\n\t * @see office-js-api/Examples/{Editor}/ApiImage/Methods/GetClassType.js\n\t */",
        "description": "Returns a type of the ApiImage class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet image = worksheet.AddImage(\"https://api.onlyoffice.com/content/img/docbuilder/examples/coordinate_aspects.png\", 60 * 36000, 35 * 36000, 0, 2 * 36000, 2, 3 * 36000);\nlet classType = image.GetClassType();\nworksheet.SetColumnWidth(0, 15);\nworksheet.SetColumnWidth(1, 10);\nworksheet.GetRange(\"A1\").SetValue(\"Class Type = \");\nworksheet.GetRange(\"B1\").SetValue(classType);\n```",
        "memberof": "ApiImage",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"image\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"image\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiImage#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12128,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiImage/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the shape inner contents where a paragraph or text runs can be inserted.\n\t * @memberof ApiShape\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {?ApiDocumentContent}\n\t * @see office-js-api/Examples/{Editor}/ApiShape/Methods/GetContent.js\n\t */",
        "description": "Returns the shape inner contents where a paragraph or text runs can be inserted.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 60 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\ncontent.RemoveAllElements();\nlet paragraph = Api.CreateParagraph();\nparagraph.SetJc(\"left\");\nparagraph.AddText(\"We removed all elements from the shape and added a new paragraph inside it.\");\ncontent.Push(paragraph);\n```",
        "memberof": "ApiShape",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiDocumentContent"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiDocumentContent",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetContent",
        "longname": "ApiShape#GetContent",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12156,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiShape/Methods/GetContent.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets values from the specified range to the specified series.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sRange - A range of cells from the sheet with series values. For example:\n\t * \"'sheet 1'!$A$2:$A$5\" - must be a single cell, row or column,\n\t * \"A1:A5\" - must be a single cell, row or column,\n\t * \"Example series\".\n\t * @param {number} nSeria - The index of the chart series.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetSeriaValues.js\n\t */",
        "description": "Sets values from the specified range to the specified series.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"B4\").SetValue(260);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"C4\").SetValue(270);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nworksheet.GetRange(\"D4\").SetValue(300);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nchart.SetSeriaValues(\"'Sheet1'!$B$4:$D$4\", 1);\nchart.SetShowPointDataLabel(1, 0, false, false, true, false);\nchart.SetShowPointDataLabel(1, 1, false, false, true, false);\nchart.SetShowPointDataLabel(1, 2, false, false, true, false);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sRange",
                "description": "A range of cells from the sheet with series values. For example:\n\"'sheet 1'!$A$2:$A$5\" - must be a single cell, row or column,\n\"A1:A5\" - must be a single cell, row or column,\n\"Example series\".",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nSeria",
                "description": "The index of the chart series.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetSeriaValues",
        "longname": "ApiChart#SetSeriaValues",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12244,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/SetSeriaValues.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the x-axis values from the specified range to the specified series. It is used with the scatter charts only.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sRange - A range of cells from the sheet with series x-axis values. For example:\n\t * \"'sheet 1'!$A$2:$A$5\" - must be a single cell, row or column,\n\t * \"A1:A5\" - must be a single cell, row or column,\n\t * \"Example series\".\n\t * @param {number} nSeria - The index of the chart series.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetSeriaXValues.js\n\t */",
        "description": "Sets the x-axis values from the specified range to the specified series. It is used with the scatter charts only.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"B4\").SetValue(2017);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"C4\").SetValue(2018);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nworksheet.GetRange(\"D4\").SetValue(2019);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"scatter\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nchart.SetSeriaXValues(\"'Sheet1'!$B$4:$D$4\", 0);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetMarkerFill(fill, 0, 0, true);\nlet stroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51)));\nchart.SetMarkerOutLine(stroke, 0, 0, true);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetMarkerFill(fill, 1, 0, true);\nstroke = Api.CreateStroke(0.5 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\nchart.SetMarkerOutLine(stroke, 1, 0, true);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sRange",
                "description": "A range of cells from the sheet with series x-axis values. For example:\n\"'sheet 1'!$A$2:$A$5\" - must be a single cell, row or column,\n\"A1:A5\" - must be a single cell, row or column,\n\"Example series\".",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nSeria",
                "description": "The index of the chart series.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetSeriaXValues",
        "longname": "ApiChart#SetSeriaXValues",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12260,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/SetSeriaXValues.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets a name to the specified series.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sNameRange - The series name. Can be a range of cells or usual text. For example:\n\t * \"'sheet 1'!$A$2:$A$5\" - must be a single cell, row or column,\n\t * \"A1:A5\" - must be a single cell, row or column,\n\t * \"Example series\".\n\t * @param {number} nSeria - The index of the chart series.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetSeriaName.js\n\t */",
        "description": "Sets a name to the specified series.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nchart.SetSeriaName(\"Projected Sales\", 0);\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sNameRange",
                "description": "The series name. Can be a range of cells or usual text. For example:\n\"'sheet 1'!$A$2:$A$5\" - must be a single cell, row or column,\n\"A1:A5\" - must be a single cell, row or column,\n\"Example series\".",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nSeria",
                "description": "The index of the chart series.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetSeriaName",
        "longname": "ApiChart#SetSeriaName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12276,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/SetSeriaName.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets a range with the category values to the current chart.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sRange - A range of cells from the sheet with the category names. For example:\n\t * \"'sheet 1'!$A$2:$A$5\" - must be a single cell, row or column,\n\t * \"A1:A5\" - must be a single cell, row or column.\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/SetCatFormula.js\n\t */",
        "description": "Sets a range with the category values to the current chart.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"B4\").SetValue(2020);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"C4\").SetValue(2021);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nworksheet.GetRange(\"D4\").SetValue(2022);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nchart.SetCatFormula(\"'Sheet1'!$B$4:$D$4\");\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sRange",
                "description": "A range of cells from the sheet with the category names. For example:\n\"'sheet 1'!$A$2:$A$5\" - must be a single cell, row or column,\n\"A1:A5\" - must be a single cell, row or column.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetCatFormula",
        "longname": "ApiChart#SetCatFormula",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12289,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/SetCatFormula.js"
        ]
    },
    {
        "comment": "/**\n\t * Adds a new series to the current chart.\n\t * @memberof ApiChart\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sNameRange - The series name. Can be a range of cells or usual text. For example:\n\t * \"'sheet 1'!$A$2:$A$5\" - must be a single cell, row or column,\n\t * \"A1:A5\" - must be a single cell, row or column,\n\t * \"Example series\".\n\t * @param {string} sValuesRange - A range of cells from the sheet with series values. For example:\n\t * \"'sheet 1'!$A$2:$A$5\" - must be a single cell, row or column,\n\t * \"A1:A5\" - must be a single cell, row or column.\n\t * @param {string} [sXValuesRange=undefined] - A range of cells from the sheet with series x-axis values. It is used with the scatter charts only. For example:\n\t * \"'sheet 1'!$A$2:$A$5\" - must be a single cell, row or column,\n\t * \"A1:A5\" - must be a single cell, row or column.\n\t * @see office-js-api/Examples/{Editor}/ApiChart/Methods/AddSeria.js\n\t */",
        "description": "Adds a new series to the current chart.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"B1\").SetValue(2014);\nworksheet.GetRange(\"C1\").SetValue(2015);\nworksheet.GetRange(\"D1\").SetValue(2016);\nworksheet.GetRange(\"A2\").SetValue(\"Projected Revenue\");\nworksheet.GetRange(\"A3\").SetValue(\"Estimated Costs\");\nworksheet.GetRange(\"A4\").SetValue(\"Cost price\");\nworksheet.GetRange(\"B2\").SetValue(200);\nworksheet.GetRange(\"B3\").SetValue(250);\nworksheet.GetRange(\"B4\").SetValue(50);\nworksheet.GetRange(\"C2\").SetValue(240);\nworksheet.GetRange(\"C3\").SetValue(260);\nworksheet.GetRange(\"C4\").SetValue(120);\nworksheet.GetRange(\"D2\").SetValue(280);\nworksheet.GetRange(\"D3\").SetValue(280);\nworksheet.GetRange(\"D4\").SetValue(160);\nlet chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);\nchart.SetTitle(\"Financial Overview\", 13);\nchart.AddSeria(\"Cost price\", \"'Sheet1'!$B$4:$D$4\");\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(51, 51, 51));\nchart.SetSeriesFill(fill, 0, false);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nchart.SetSeriesFill(fill, 1, false);\n```",
        "memberof": "ApiChart",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sNameRange",
                "description": "The series name. Can be a range of cells or usual text. For example:\n\"'sheet 1'!$A$2:$A$5\" - must be a single cell, row or column,\n\"A1:A5\" - must be a single cell, row or column,\n\"Example series\".",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sValuesRange",
                "description": "A range of cells from the sheet with series values. For example:\n\"'sheet 1'!$A$2:$A$5\" - must be a single cell, row or column,\n\"A1:A5\" - must be a single cell, row or column.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sXValuesRange",
                "description": "A range of cells from the sheet with series x-axis values. It is used with the scatter charts only. For example:\n\"'sheet 1'!$A$2:$A$5\" - must be a single cell, row or column,\n\"A1:A5\" - must be a single cell, row or column.",
                "optional": true,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "AddSeria",
        "longname": "ApiChart#AddSeria",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12309,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiChart/Methods/AddSeria.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the ApiColor class.\n\t * @memberof ApiColor\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {\"color\"}\n\t * @see office-js-api/Examples/{Editor}/ApiColor/Methods/GetClassType.js\n\t */",
        "description": "Returns a type of the ApiColor class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet color = Api.CreateColorFromRGB(255, 111, 61);\nworksheet.GetRange(\"A2\").SetValue(\"Text with color\");\nworksheet.GetRange(\"A2\").SetFontColor(color);\nlet colorClassType = color.GetClassType();\nworksheet.GetRange(\"A4\").SetValue(\"Class type = \" + colorClassType);\n```",
        "memberof": "ApiColor",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"color\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"color\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiColor#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12411,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiColor/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the ApiName class.\n\t * @memberof ApiName\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiName/Methods/GetName.js\n\t */",
        "description": "Returns a type of the ApiName class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nworksheet.GetRange(\"B1\").SetValue(\"2\");\nApi.AddDefName(\"numbers\", \"Sheet1!$A$1:$B$1\");\nlet defName = Api.GetDefName(\"numbers\");\nworksheet.GetRange(\"A3\").SetValue(\"Name: \" + defName.GetName());\n```",
        "memberof": "ApiName",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetName",
        "longname": "ApiName#GetName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12428,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiName/Methods/GetName.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets a string value representing the object name.\n\t * @memberof ApiName\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sName - New name for the range.\n\t * @returns {boolean} - returns false if sName is invalid.\n\t * @see office-js-api/Examples/{Editor}/ApiName/Methods/SetName.js\n\t */",
        "description": "Sets a string value representing the object name.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nworksheet.GetRange(\"B1\").SetValue(\"2\");\nApi.AddDefName(\"name\", \"Sheet1!$A$1:$B$1\");\nlet defName = Api.GetDefName(\"name\");\ndefName.SetName(\"new_name\");\nlet newDefName = Api.GetDefName(\"new_name\");\nworksheet.GetRange(\"A3\").SetValue(\"The new name of the range: \" + newDefName.GetName());\n```",
        "memberof": "ApiName",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sName",
                "description": "New name for the range.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetName",
        "longname": "ApiName#SetName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12444,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiName/Methods/SetName.js"
        ]
    },
    {
        "comment": "/**\n\t * Deletes the DefName object.\n\t * @memberof ApiName\n\t * @typeofeditors [\"CSE\"]\n\t * @see office-js-api/Examples/{Editor}/ApiName/Methods/Delete.js\n\t */",
        "description": "Deletes the DefName object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nworksheet.GetRange(\"B1\").SetValue(\"2\");\nApi.AddDefName(\"numbers\", \"Sheet1!$A$1:$B$1\");\nlet defName = Api.GetDefName(\"numbers\");\ndefName.Delete();\nworksheet.GetRange(\"A3\").SetValue(\"The name 'numbers' of the range A1:B1 was deleted.\");\n```",
        "memberof": "ApiName",
        "params": null,
        "returns": null,
        "name": "Delete",
        "longname": "ApiName#Delete",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12477,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiName/Methods/Delete.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets a formula that the name is defined to refer to.\n\t * @memberof ApiName\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sRef    - The range reference which must contain the sheet name, followed by sign ! and a range of cells.\n\t * Example: \"Sheet1!$A$1:$B$2\".\n\t * @see office-js-api/Examples/{Editor}/ApiName/Methods/SetRefersTo.js\n\t */",
        "description": "Sets a formula that the name is defined to refer to.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nworksheet.GetRange(\"B1\").SetValue(\"2\");\nworksheet.GetRange(\"C1\").SetValue(\"=SUM(A1:B1)\");\nApi.AddDefName(\"summa\", \"Sheet1!$A$1:$B$1\");\nlet defName = Api.GetDefName(\"summa\");\ndefName.SetRefersTo(\"=SUM(A1:B1)\");\nworksheet.GetRange(\"A3\").SetValue(\"The name 'summa' refers to the formula from the cell C1.\");\n```",
        "memberof": "ApiName",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sRef",
                "description": "The range reference which must contain the sheet name, followed by sign ! and a range of cells.\nExample: \"Sheet1!$A$1:$B$2\".",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetRefersTo",
        "longname": "ApiName#SetRefersTo",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12489,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiName/Methods/SetRefersTo.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a formula that the name is defined to refer to.\n\t * @memberof ApiName\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiName/Methods/GetRefersTo.js\n\t */",
        "description": "Returns a formula that the name is defined to refer to.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nworksheet.GetRange(\"B1\").SetValue(\"2\");\nworksheet.GetRange(\"C1\").SetValue(\"=SUM(A1:B1)\");\nApi.AddDefName(\"summa\", \"Sheet1!$A$1:$B$1\");\nlet defName = Api.GetDefName(\"summa\");\ndefName.SetRefersTo(\"=SUM(A1:B1)\");\nworksheet.GetRange(\"A3\").SetValue(\"The name 'summa' refers to the formula from the cell C1.\");\nworksheet.GetRange(\"A4\").SetValue(\"Formula: \" + defName.GetRefersTo());\n```",
        "memberof": "ApiName",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetRefersTo",
        "longname": "ApiName#GetRefersTo",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12500,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiName/Methods/GetRefersTo.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the ApiRange object by its name.\n\t * @memberof ApiName\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiRange}\n\t * @see office-js-api/Examples/{Editor}/ApiName/Methods/GetRefersToRange.js\n\t */",
        "description": "Returns the ApiRange object by its name.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nworksheet.GetRange(\"B1\").SetValue(\"2\");\nApi.AddDefName(\"numbers\", \"$A$1:$B$1\");\nlet defName = Api.GetDefName(\"numbers\");\nlet range = defName.GetRefersToRange();\nrange.SetBold(true);\n```",
        "memberof": "ApiName",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                }
            }
        ],
        "name": "GetRefersToRange",
        "longname": "ApiName#GetRefersToRange",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12520,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiName/Methods/GetRefersToRange.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the ApiComment class.\n\t * @memberof ApiComment\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {\"comment\"}\n\t * @see office-js-api/Examples/{Editor}/ApiComment/Methods/GetClassType.js\n\t */",
        "description": "Returns a type of the ApiComment class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nlet range = worksheet.GetRange(\"A1\");\nrange.AddComment(\"This is just a number.\");\nlet comment = range.GetComment();\nlet type = comment.GetClassType();\nworksheet.GetRange(\"A3\").SetValue(\"Type: \" + type);\n```",
        "memberof": "ApiComment",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"comment\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"comment\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiComment#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12547,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiComment/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the comment text.\n\t * @memberof ApiComment\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiComment/Methods/GetText.js\n\t */",
        "description": "Returns the comment text.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nlet range = worksheet.GetRange(\"A1\");\nrange.AddComment(\"This is just a number.\");\nworksheet.GetRange(\"A3\").SetValue(\"Comment: \");\nworksheet.GetRange(\"B3\").SetValue(range.GetComment().GetText());\n```",
        "memberof": "ApiComment",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetText",
        "longname": "ApiComment#GetText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12558,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiComment/Methods/GetText.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the comment text.\n\t * @memberof ApiComment\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} text - New text for comment.\n\t * @since 7.5.0\n\t * @see office-js-api/Examples/{Editor}/ApiComment/Methods/SetText.js\n\t */",
        "description": "Sets the comment text.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nlet range = worksheet.GetRange(\"A1\");\nlet comment = range.AddComment(\"This is just a number.\");\ncomment.SetText(\"New comment text\");\n```",
        "memberof": "ApiComment",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "text",
                "description": "New text for comment.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetText",
        "longname": "ApiComment#SetText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12570,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiComment/Methods/SetText.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the current comment ID.\n\t * @memberof ApiComment\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string}\n\t * @since 7.5.0\n\t * @see office-js-api/Examples/{Editor}/ApiComment/Methods/GetId.js\n\t */",
        "description": "Returns the current comment ID.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nlet range = worksheet.GetRange(\"A1\");\nrange.AddComment(\"This is just a number.\");\nworksheet.GetRange(\"A3\").SetValue(\"Comment: \");\nworksheet.GetRange(\"B3\").SetValue(range.GetComment().GetId());\n```",
        "memberof": "ApiComment",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetId",
        "longname": "ApiComment#GetId",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12594,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiComment/Methods/GetId.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the comment author's name.\n\t * @memberof ApiComment\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string}\n\t * @since 7.5.0\n\t * @see office-js-api/Examples/{Editor}/ApiComment/Methods/GetAuthorName.js\n\t */",
        "description": "Returns the comment author's name.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nlet range = worksheet.GetRange(\"A1\");\nlet comment = range.AddComment(\"This is just a number.\");\nworksheet.GetRange(\"A3\").SetValue(\"Comment's author: \");\nworksheet.GetRange(\"B3\").SetValue(comment.GetAuthorName());\n```",
        "memberof": "ApiComment",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetAuthorName",
        "longname": "ApiComment#GetAuthorName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12612,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiComment/Methods/GetAuthorName.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the comment author's name.\n\t * @memberof ApiComment\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sAuthorName - The comment author's name.\n\t * @since 7.5.0\n\t * @see office-js-api/Examples/{Editor}/ApiComment/Methods/SetAuthorName.js\n\t */",
        "description": "Sets the comment author's name.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nlet range = worksheet.GetRange(\"A1\");\nlet comment = range.AddComment(\"This is just a number.\", \"John Smith\");\nworksheet.GetRange(\"A3\").SetValue(\"Comment's author: \");\ncomment.SetAuthorName(\"Mark Potato\");\nworksheet.GetRange(\"B3\").SetValue(comment.GetAuthorName());\n```",
        "memberof": "ApiComment",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sAuthorName",
                "description": "The comment author's name.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetAuthorName",
        "longname": "ApiComment#SetAuthorName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12624,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiComment/Methods/SetAuthorName.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the user ID of the comment author.\n\t * @memberof ApiComment\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string}\n\t * @since 7.5.0\n\t * @see office-js-api/Examples/{Editor}/ApiComment/Methods/GetUserId.js\n\t */",
        "description": "Returns the user ID of the comment author.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nlet range = worksheet.GetRange(\"A1\");\nlet comment = range.AddComment(\"This is just a number.\");\nworksheet.GetRange(\"A3\").SetValue(\"Comment's user Id: \");\nworksheet.GetRange(\"B3\").SetValue(comment.GetUserId());\n```",
        "memberof": "ApiComment",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetUserId",
        "longname": "ApiComment#GetUserId",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12646,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiComment/Methods/GetUserId.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the user ID to the comment author.\n\t * @memberof ApiComment\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sUserId - The user ID of the comment author.\n\t * @since 7.5.0\n\t * @see office-js-api/Examples/{Editor}/ApiComment/Methods/SetUserId.js\n\t */",
        "description": "Sets the user ID to the comment author.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nlet range = worksheet.GetRange(\"A1\");\nlet comment = range.AddComment(\"This is just a number.\", \"John Smith\");\nworksheet.GetRange(\"A3\").SetValue(\"Comment's user Id: \");\ncomment.SetUserId(\"uid-2\");\nworksheet.GetRange(\"B3\").SetValue(comment.GetUserId());\n```",
        "memberof": "ApiComment",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sUserId",
                "description": "The user ID of the comment author.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetUserId",
        "longname": "ApiComment#SetUserId",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12658,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiComment/Methods/SetUserId.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks if a comment is solved or not.\n\t * @memberof ApiComment\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean}\n\t * @since 7.5.0\n\t * @see office-js-api/Examples/{Editor}/ApiComment/Methods/IsSolved.js\n\t */",
        "description": "Checks if a comment is solved or not.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nlet range = worksheet.GetRange(\"A1\");\nlet comment = range.AddComment(\"This is just a number.\");\nworksheet.GetRange(\"A3\").SetValue(\"Comment is solved: \");\nworksheet.GetRange(\"B3\").SetValue(comment.IsSolved());\n```",
        "memberof": "ApiComment",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "IsSolved",
        "longname": "ApiComment#IsSolved",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12680,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiComment/Methods/IsSolved.js"
        ]
    },
    {
        "comment": "/**\n\t * Marks a comment as solved.\n\t * @memberof ApiComment\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} bSolved - Specifies if a comment is solved or not.\n\t * @since 7.5.0\n\t * @see office-js-api/Examples/{Editor}/ApiComment/Methods/SetSolved.js\n\t */",
        "description": "Marks a comment as solved.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nlet range = worksheet.GetRange(\"A1\");\nlet comment = range.AddComment(\"This is just a number.\", \"John Smith\");\nworksheet.GetRange(\"A3\").SetValue(\"Comment is solved: \");\ncomment.SetSolved(true);\nworksheet.GetRange(\"B3\").SetValue(comment.IsSolved());\n```",
        "memberof": "ApiComment",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bSolved",
                "description": "Specifies if a comment is solved or not.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetSolved",
        "longname": "ApiComment#SetSolved",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12692,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiComment/Methods/SetSolved.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the timestamp of the comment creation in UTC format.\n\t * @memberof ApiComment\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {Number}\n\t * @since 7.5.0\n\t * @see office-js-api/Examples/{Editor}/ApiComment/Methods/GetTimeUTC.js\n\t */",
        "description": "Returns the timestamp of the comment creation in UTC format.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nlet range = worksheet.GetRange(\"A1\");\nlet comment = range.AddComment(\"This is just a number.\");\nworksheet.GetRange(\"A3\").SetValue(\"Timestamp UTC: \");\nworksheet.GetRange(\"B3\").SetValue(comment.GetTimeUTC());\n```",
        "memberof": "ApiComment",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Number"
                    }
                }
            }
        ],
        "name": "GetTimeUTC",
        "longname": "ApiComment#GetTimeUTC",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12714,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiComment/Methods/GetTimeUTC.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the timestamp of the comment creation in UTC format.\n\t * @memberof ApiComment\n\t * @typeofeditors [\"CSE\"]\n\t * @param {Number | String} nTimeStamp - The timestamp of the comment creation in UTC format.\n\t * @since 7.5.0\n\t * @see office-js-api/Examples/{Editor}/ApiComment/Methods/SetTimeUTC.js\n\t */",
        "description": "Sets the timestamp of the comment creation in UTC format.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nlet range = worksheet.GetRange(\"A1\");\nlet comment = range.AddComment(\"This is just a number.\", \"John Smith\");\nworksheet.GetRange(\"A3\").SetValue(\"Timestamp UTC: \");\ncomment.SetTimeUTC(Date.now());\nworksheet.GetRange(\"B3\").SetValue(comment.GetTimeUTC());\n```",
        "memberof": "ApiComment",
        "params": [
            {
                "type": {
                    "names": [
                        "Number",
                        "String"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "Number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "String"
                            }
                        ]
                    }
                },
                "name": "nTimeStamp",
                "description": "The timestamp of the comment creation in UTC format.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetTimeUTC",
        "longname": "ApiComment#SetTimeUTC",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12729,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiComment/Methods/SetTimeUTC.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the timestamp of the comment creation in the current time zone format.\n\t * @memberof ApiComment\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {Number}\n\t * @since 7.5.0\n\t * @see office-js-api/Examples/{Editor}/ApiComment/Methods/GetTime.js\n\t */",
        "description": "Returns the timestamp of the comment creation in the current time zone format.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nlet range = worksheet.GetRange(\"A1\");\nlet comment = range.AddComment(\"This is just a number.\");\nworksheet.GetRange(\"A3\").SetValue(\"Timestamp: \");\nworksheet.GetRange(\"B3\").SetValue(comment.GetTime());\n```",
        "memberof": "ApiComment",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Number"
                    }
                }
            }
        ],
        "name": "GetTime",
        "longname": "ApiComment#GetTime",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12756,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiComment/Methods/GetTime.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the timestamp of the comment creation in the current time zone format.\n\t * @memberof ApiComment\n\t * @typeofeditors [\"CSE\"]\n\t * @param {Number | String} nTimeStamp - The timestamp of the comment creation in the current time zone format.\n\t * @since 7.5.0\n\t * @see office-js-api/Examples/{Editor}/ApiComment/Methods/SetTime.js\n\t */",
        "description": "Sets the timestamp of the comment creation in the current time zone format.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nlet range = worksheet.GetRange(\"A1\");\nlet comment = range.AddComment(\"This is just a number.\", \"John Smith\");\nworksheet.GetRange(\"A3\").SetValue(\"Timestamp: \");\ncomment.SetTime(Date.now());\nworksheet.GetRange(\"B3\").SetValue(comment.GetTime());\n```",
        "memberof": "ApiComment",
        "params": [
            {
                "type": {
                    "names": [
                        "Number",
                        "String"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "Number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "String"
                            }
                        ]
                    }
                },
                "name": "nTimeStamp",
                "description": "The timestamp of the comment creation in the current time zone format.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetTime",
        "longname": "ApiComment#SetTime",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12771,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiComment/Methods/SetTime.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the quote text of the current comment.\n\t * @memberof ApiComment\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {String | null}\n\t * @since 7.5.0\n\t * @see office-js-api/Examples/{Editor}/ApiComment/Methods/GetQuoteText.js\n\t */",
        "description": "Returns the quote text of the current comment.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nlet range = worksheet.GetRange(\"A1\");\nlet comment = range.AddComment(\"This is just a number.\");\nworksheet.GetRange(\"A3\").SetValue(\"Comment's quote text: \");\nworksheet.GetRange(\"B3\").SetValue(comment.GetQuoteText());\n```",
        "memberof": "ApiComment",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "String",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "String"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetQuoteText",
        "longname": "ApiComment#GetQuoteText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12798,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiComment/Methods/GetQuoteText.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a number of the comment replies.\n\t * @memberof ApiComment\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {Number?}\n\t * @since 7.5.0\n\t * @see office-js-api/Examples/{Editor}/ApiComment/Methods/GetRepliesCount.js\n\t */",
        "description": "Returns a number of the comment replies.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nlet range = worksheet.GetRange(\"A1\");\nlet comment = range.AddComment(\"This is just a number.\");\ncomment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");\nworksheet.GetRange(\"A3\").SetValue(\"Comment replies count: \");\nworksheet.GetRange(\"B3\").SetValue(comment.GetRepliesCount());\n```",
        "memberof": "ApiComment",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Number",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetRepliesCount",
        "longname": "ApiComment#GetRepliesCount",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12821,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiComment/Methods/GetRepliesCount.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the specified comment reply.\n\t * @memberof ApiComment\n\t * @typeofeditors [\"CSE\"]\n\t * @param {Number} [nIndex = 0] - The comment reply index.\n\t * @returns {ApiCommentReply?}\n\t * @since 7.5.0\n\t * @see office-js-api/Examples/{Editor}/ApiComment/Methods/GetReply.js\n\t */",
        "description": "Returns the specified comment reply.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nlet range = worksheet.GetRange(\"A1\");\nlet comment = range.AddComment(\"This is just a number.\");\ncomment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");\nlet reply = comment.GetReply();\nworksheet.GetRange(\"A3\").SetValue(\"Comment's reply text: \");\nworksheet.GetRange(\"B3\").SetValue(reply.GetText());\n```",
        "memberof": "ApiComment",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Number"
                    }
                },
                "name": "nIndex",
                "description": "The comment reply index.",
                "optional": true,
                "defaultvalue": 0
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiCommentReply"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiCommentReply",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetReply",
        "longname": "ApiComment#GetReply",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12840,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiComment/Methods/GetReply.js"
        ]
    },
    {
        "comment": "/**\n\t * Adds a reply to a comment.\n\t * @memberof ApiComment\n\t * @typeofeditors [\"CSE\"]\n\t * @param {String} sText - The comment reply text (required).\n\t * @param {String} sAuthorName - The name of the comment reply author (optional).\n\t * @param {String} sUserId - The user ID of the comment reply author (optional).\n\t * @param {Number} [nPos=this.GetRepliesCount()] - The comment reply position.\n\t * @since 7.5.0\n\t * @see office-js-api/Examples/{Editor}/ApiComment/Methods/AddReply.js\n\t */",
        "description": "Adds a reply to a comment.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nlet range = worksheet.GetRange(\"A1\");\nlet comment = range.AddComment(\"This is just a number.\");\ncomment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");\nlet reply = comment.GetReply();\nworksheet.GetRange(\"A3\").SetValue(\"Comment's reply text: \");\nworksheet.GetRange(\"B3\").SetValue(reply.GetText());\n```",
        "memberof": "ApiComment",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "String"
                    }
                },
                "name": "sText",
                "description": "The comment reply text (required).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "String"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "String"
                    }
                },
                "name": "sAuthorName",
                "description": "The name of the comment reply author (optional).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "String"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "String"
                    }
                },
                "name": "sUserId",
                "description": "The user ID of the comment reply author (optional).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Number"
                    }
                },
                "name": "nPos",
                "description": "The comment reply position.",
                "optional": true,
                "defaultvalue": "this.GetRepliesCount()"
            }
        ],
        "returns": null,
        "name": "AddReply",
        "longname": "ApiComment#AddReply",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12862,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiComment/Methods/AddReply.js"
        ]
    },
    {
        "comment": "/**\n\t * Removes the specified comment replies.\n\t * @memberof ApiComment\n\t * @typeofeditors [\"CSE\"]\n\t * @param {Number} [nPos = 0] - The position of the first comment reply to remove.\n\t * @param {Number} [nCount = 1] - A number of comment replies to remove.\n\t * @param {boolean} [bRemoveAll = false] - Specifies whether to remove all comment replies or not.\n\t * @since 7.5.0\n\t * @see office-js-api/Examples/{Editor}/ApiComment/Methods/RemoveReplies.js\n\t */",
        "description": "Removes the specified comment replies.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nlet range = worksheet.GetRange(\"A1\");\nlet comment = range.AddComment(\"This is just a number.\");\ncomment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");\ncomment.AddReply(\"Reply 2\", \"John Smith\", \"uid-1\");\ncomment.RemoveReplies(0, 1, false);\nworksheet.GetRange(\"A3\").SetValue(\"Comment replies count: \");\nworksheet.GetRange(\"B3\").SetValue(comment.GetRepliesCount());\n```",
        "memberof": "ApiComment",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Number"
                    }
                },
                "name": "nPos",
                "description": "The position of the first comment reply to remove.",
                "optional": true,
                "defaultvalue": 0
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Number"
                    }
                },
                "name": "nCount",
                "description": "A number of comment replies to remove.",
                "optional": true,
                "defaultvalue": 1
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bRemoveAll",
                "description": "Specifies whether to remove all comment replies or not.",
                "optional": true,
                "defaultvalue": false
            }
        ],
        "returns": null,
        "name": "RemoveReplies",
        "longname": "ApiComment#RemoveReplies",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12892,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiComment/Methods/RemoveReplies.js"
        ]
    },
    {
        "comment": "/**\n\t * Deletes the ApiComment object.\n\t * @memberof ApiComment\n\t * @typeofeditors [\"CSE\"]\n\t * @see office-js-api/Examples/{Editor}/ApiComment/Methods/Delete.js\n\t */",
        "description": "Deletes the ApiComment object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nlet range = worksheet.GetRange(\"A1\");\nrange.AddComment(\"This is just a number.\");\nlet comment = range.GetComment();\ncomment.Delete();\nworksheet.GetRange(\"A3\").SetValue(\"The comment was just deleted from A1.\");\n```",
        "memberof": "ApiComment",
        "params": null,
        "returns": null,
        "name": "Delete",
        "longname": "ApiComment#Delete",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12917,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiComment/Methods/Delete.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the ApiCommentReply class.\n\t * @memberof ApiCommentReply\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {\"commentReply\"}\n\t * @since 7.5.0\n\t * @see office-js-api/Examples/{Editor}/ApiCommentReply/Methods/GetClassType.js\n\t */",
        "description": "Returns a type of the ApiCommentReply class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nlet range = worksheet.GetRange(\"A1\");\nlet comment = range.AddComment(\"This is just a number.\");\ncomment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");\nlet reply = comment.GetReply();\nlet type = reply.GetClassType();\nworksheet.GetRange(\"A3\").SetValue(\"Type: \" + type);\n```",
        "memberof": "ApiCommentReply",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"commentReply\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"commentReply\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiCommentReply#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12940,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiCommentReply/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the comment reply text.\n\t * @memberof ApiCommentReply\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string}\n\t * @since 7.5.0\n\t * @see office-js-api/Examples/{Editor}/ApiCommentReply/Methods/GetText.js\n\t */",
        "description": "Returns the comment reply text.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nlet range = worksheet.GetRange(\"A1\");\nlet comment = range.AddComment(\"This is just a number.\");\ncomment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");\nlet reply = comment.GetReply();\nworksheet.GetRange(\"A3\").SetValue(\"Comment's reply text: \");\nworksheet.GetRange(\"B3\").SetValue(reply.GetText());\n```",
        "memberof": "ApiCommentReply",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetText",
        "longname": "ApiCommentReply#GetText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12952,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiCommentReply/Methods/GetText.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the comment reply text.\n\t * @memberof ApiCommentReply\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sText - The comment reply text.\n\t * @since 7.5.0\n\t * @see office-js-api/Examples/{Editor}/ApiCommentReply/Methods/SetText.js\n\t */",
        "description": "Sets the comment reply text.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nlet range = worksheet.GetRange(\"A1\");\nlet comment = range.AddComment(\"This is just a number.\");\ncomment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");\nlet reply = comment.GetReply();\nreply.SetText(\"New reply text.\");\nworksheet.GetRange(\"A3\").SetValue(\"Comment's reply text: \");\nworksheet.GetRange(\"B3\").SetValue(reply.GetText());\n```",
        "memberof": "ApiCommentReply",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sText",
                "description": "The comment reply text.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetText",
        "longname": "ApiCommentReply#SetText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12964,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiCommentReply/Methods/SetText.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the comment reply author's name.\n\t * @memberof ApiCommentReply\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string}\n\t * @since 7.5.0\n\t * @see office-js-api/Examples/{Editor}/ApiCommentReply/Methods/GetAuthorName.js\n\t */",
        "description": "Returns the comment reply author's name.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nlet range = worksheet.GetRange(\"A1\");\nlet comment = range.AddComment(\"This is just a number.\");\ncomment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");\nlet reply = comment.GetReply();\nworksheet.GetRange(\"A3\").SetValue(\"Comment's reply author: \");\nworksheet.GetRange(\"B3\").SetValue(reply.GetAuthorName());\n```",
        "memberof": "ApiCommentReply",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetAuthorName",
        "longname": "ApiCommentReply#GetAuthorName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12986,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiCommentReply/Methods/GetAuthorName.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the comment reply author's name.\n\t * @memberof ApiCommentReply\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sAuthorName - The comment reply author's name.\n\t * @since 7.5.0\n\t * @see office-js-api/Examples/{Editor}/ApiCommentReply/Methods/SetAuthorName.js\n\t */",
        "description": "Sets the comment reply author's name.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nlet range = worksheet.GetRange(\"A1\");\nlet comment = range.AddComment(\"This is just a number.\");\ncomment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");\nlet reply = comment.GetReply();\nreply.SetAuthorName(\"Mark Potato\");\nworksheet.GetRange(\"A3\").SetValue(\"Comment's reply author: \");\nworksheet.GetRange(\"B3\").SetValue(reply.GetAuthorName());\n```",
        "memberof": "ApiCommentReply",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sAuthorName",
                "description": "The comment reply author's name.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetAuthorName",
        "longname": "ApiCommentReply#SetAuthorName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 12998,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiCommentReply/Methods/SetAuthorName.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the user ID of the comment reply author.\n\t * @memberof ApiCommentReply\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string}\n\t * @since 7.5.0\n\t * @see office-js-api/Examples/{Editor}/ApiCommentReply/Methods/GetUserId.js\n\t */",
        "description": "Returns the user ID of the comment reply author.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nlet range = worksheet.GetRange(\"A1\");\nlet comment = range.AddComment(\"This is just a number.\");\ncomment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");\nlet reply = comment.GetReply();\nworksheet.GetRange(\"A3\").SetValue(\"Comment's reply user Id: \");\nworksheet.GetRange(\"B3\").SetValue(reply.GetUserId());\n```",
        "memberof": "ApiCommentReply",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetUserId",
        "longname": "ApiCommentReply#GetUserId",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13020,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiCommentReply/Methods/GetUserId.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the user ID to the comment reply author.\n\t * @memberof ApiCommentReply\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sUserId - The user ID of the comment reply author.\n\t * @since 7.5.0\n\t * @see office-js-api/Examples/{Editor}/ApiCommentReply/Methods/SetUserId.js\n\t */",
        "description": "Sets the user ID to the comment reply author.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nlet range = worksheet.GetRange(\"A1\");\nlet comment = range.AddComment(\"This is just a number.\");\ncomment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");\nlet reply = comment.GetReply();\nreply.SetUserId(\"uid-2\");\nworksheet.GetRange(\"A3\").SetValue(\"Comment's reply user Id: \");\nworksheet.GetRange(\"B3\").SetValue(reply.GetUserId());\n```",
        "memberof": "ApiCommentReply",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sUserId",
                "description": "The user ID of the comment reply author.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetUserId",
        "longname": "ApiCommentReply#SetUserId",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13032,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiCommentReply/Methods/SetUserId.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the timestamp of the comment reply creation in UTC format.\n\t * @memberof ApiCommentReply\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {Number}\n\t * @since 7.5.0\n\t * @see office-js-api/Examples/{Editor}/ApiCommentReply/Methods/GetTimeUTC.js\n\t */",
        "description": "Returns the timestamp of the comment reply creation in UTC format.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nlet range = worksheet.GetRange(\"A1\");\nlet comment = range.AddComment(\"This is just a number.\");\ncomment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");\nlet reply = comment.GetReply();\nworksheet.GetRange(\"A3\").SetValue(\"Comment's reply timestamp UTC: \");\nworksheet.GetRange(\"B3\").SetValue(reply.GetTimeUTC());\n```",
        "memberof": "ApiCommentReply",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Number"
                    }
                }
            }
        ],
        "name": "GetTimeUTC",
        "longname": "ApiCommentReply#GetTimeUTC",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13054,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiCommentReply/Methods/GetTimeUTC.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the timestamp of the comment reply creation in UTC format.\n\t * @memberof ApiCommentReply\n\t * @typeofeditors [\"CSE\"]\n\t * @param {Number | String} nTimeStamp - The timestamp of the comment reply creation in UTC format.\n\t * @since 7.5.0\n\t * @see office-js-api/Examples/{Editor}/ApiCommentReply/Methods/SetTimeUTC.js\n\t */",
        "description": "Sets the timestamp of the comment reply creation in UTC format.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nlet range = worksheet.GetRange(\"A1\");\nlet comment = range.AddComment(\"This is just a number.\");\ncomment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");\nlet reply = comment.GetReply();\nreply.SetTimeUTC(Date.now());\nworksheet.GetRange(\"A3\").SetValue(\"Comment's reply timestamp UTC: \");\nworksheet.GetRange(\"B3\").SetValue(reply.GetTimeUTC());\n```",
        "memberof": "ApiCommentReply",
        "params": [
            {
                "type": {
                    "names": [
                        "Number",
                        "String"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "Number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "String"
                            }
                        ]
                    }
                },
                "name": "nTimeStamp",
                "description": "The timestamp of the comment reply creation in UTC format.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetTimeUTC",
        "longname": "ApiCommentReply#SetTimeUTC",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13069,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiCommentReply/Methods/SetTimeUTC.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the timestamp of the comment reply creation in the current time zone format.\n\t * @memberof ApiCommentReply\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {Number}\n\t * @since 7.5.0\n\t * @see office-js-api/Examples/{Editor}/ApiCommentReply/Methods/GetTime.js\n\t */",
        "description": "Returns the timestamp of the comment reply creation in the current time zone format.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nlet range = worksheet.GetRange(\"A1\");\nlet comment = range.AddComment(\"This is just a number.\");\ncomment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");\nlet reply = comment.GetReply();\nworksheet.GetRange(\"A3\").SetValue(\"Comment's reply timestamp: \");\nworksheet.GetRange(\"B3\").SetValue(reply.GetTime());\n```",
        "memberof": "ApiCommentReply",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Number"
                    }
                }
            }
        ],
        "name": "GetTime",
        "longname": "ApiCommentReply#GetTime",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13096,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiCommentReply/Methods/GetTime.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the timestamp of the comment reply creation in the current time zone format.\n\t * @memberof ApiCommentReply\n\t * @typeofeditors [\"CSE\"]\n\t * @param {Number | String} nTimeStamp - The timestamp of the comment reply creation in the current time zone format.\n\t * @since 7.5.0\n\t * @see office-js-api/Examples/{Editor}/ApiCommentReply/Methods/SetTime.js\n\t */",
        "description": "Sets the timestamp of the comment reply creation in the current time zone format.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nlet range = worksheet.GetRange(\"A1\");\nlet comment = range.AddComment(\"This is just a number.\");\ncomment.AddReply(\"Reply 1\", \"John Smith\", \"uid-1\");\nlet reply = comment.GetReply();\nreply.SetTime(Date.now());\nworksheet.GetRange(\"A3\").SetValue(\"Comment's reply timestamp: \");\nworksheet.GetRange(\"B3\").SetValue(reply.GetTime());\n```",
        "memberof": "ApiCommentReply",
        "params": [
            {
                "type": {
                    "names": [
                        "Number",
                        "String"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "Number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "String"
                            }
                        ]
                    }
                },
                "name": "nTimeStamp",
                "description": "The timestamp of the comment reply creation in the current time zone format.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetTime",
        "longname": "ApiCommentReply#SetTime",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13111,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiCommentReply/Methods/SetTime.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a value that represents the number of objects in the collection.\n\t * @memberof ApiAreas\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiAreas/Methods/GetCount.js\n\t */",
        "description": "Returns a value that represents the number of objects in the collection.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"B1:D1\");\nrange.SetValue(\"1\");\nrange.Select();\nlet areas = range.GetAreas();\nlet count = areas.GetCount();\nrange = worksheet.GetRange('A5');\nrange.SetValue(\"The number of ranges in the areas: \");\nrange.AutoFit(false, true);\nworksheet.GetRange('B5').SetValue(count);\n```",
        "memberof": "ApiAreas",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GetCount",
        "longname": "ApiAreas#GetCount",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13147,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiAreas/Methods/GetCount.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a single object from a collection by its ID.\n\t * @memberof ApiAreas\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number} ind - The index number of the object.\n\t * @returns {ApiRange}\n\t * @see office-js-api/Examples/{Editor}/ApiAreas/Methods/GetItem.js\n\t */",
        "description": "Returns a single object from a collection by its ID.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"B1:D1\");\nrange.SetValue(\"1\");\nrange.Select();\nlet areas = range.GetAreas();\nlet item = areas.GetItem(1);\nrange = worksheet.GetRange('A5');\nrange.SetValue(\"The first item from the areas: \");\nrange.AutoFit(false, true);\nworksheet.GetRange('B5').Paste(item);\n```",
        "memberof": "ApiAreas",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "ind",
                "description": "The index number of the object.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                }
            }
        ],
        "name": "GetItem",
        "longname": "ApiAreas#GetItem",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13165,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiAreas/Methods/GetItem.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the parent object for the specified collection.\n\t * @memberof ApiAreas\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {number}\n\t * @see office-js-api/Examples/{Editor}/ApiAreas/Methods/GetParent.js\n\t */",
        "description": "Returns the parent object for the specified collection.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"B1:D1\");\nrange.SetValue(\"1\");\nrange.Select();\nlet areas = range.GetAreas();\nlet parent = areas.GetParent();\nlet type = parent.GetClassType();\nrange = worksheet.GetRange('A4');\nrange.SetValue(\"The areas parent: \");\nrange.AutoFit(false, true);\nworksheet.GetRange('B4').Paste(parent);\nrange = worksheet.GetRange('A5');\nrange.SetValue(\"The type of the areas parent: \");\nrange.AutoFit(false, true);\nworksheet.GetRange('B5').SetValue(type);\n```",
        "memberof": "ApiAreas",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GetParent",
        "longname": "ApiAreas#GetParent",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13176,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiAreas/Methods/GetParent.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a value that represents a number of objects in the collection.\n\t * @memberof ApiCharacters\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {number}\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/{Editor}/ApiCharacters/Methods/GetCount.js\n\t */",
        "description": "Returns a value that represents a number of objects in the collection.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"B1\");\nrange.SetValue(\"This is just a sample text.\");\nlet characters = range.GetCharacters(23, 4);\nlet count = characters.GetCount();\nworksheet.GetRange(\"B3\").SetValue(\"Number of characters: \" + count);\n```",
        "memberof": "ApiCharacters",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GetCount",
        "longname": "ApiCharacters#GetCount",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13200,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiCharacters/Methods/GetCount.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the parent object of the specified characters.\n\t * @memberof ApiCharacters\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiRange}\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/{Editor}/ApiCharacters/Methods/GetParent.js\n\t */",
        "description": "Returns the parent object of the specified characters.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"B1\");\nrange.SetValue(\"This is just a sample text.\");\nlet characters = range.GetCharacters(23, 4);\nlet parent = characters.GetParent();\nparent.SetBorders(\"Bottom\", \"Thick\", Api.CreateColorFromRGB(255, 111, 61));\n```",
        "memberof": "ApiCharacters",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                }
            }
        ],
        "name": "GetParent",
        "longname": "ApiCharacters#GetParent",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13218,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiCharacters/Methods/GetParent.js"
        ]
    },
    {
        "comment": "/**\n\t * Deletes the ApiCharacters object.\n\t * @memberof ApiCharacters\n\t * @typeofeditors [\"CSE\"]\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/{Editor}/ApiCharacters/Methods/Delete.js\n\t */",
        "description": "Deletes the ApiCharacters object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"B1\");\nrange.SetValue(\"This is just a sample text.\");\nlet characters = range.GetCharacters(9, 4);\ncharacters.Delete();\n```",
        "memberof": "ApiCharacters",
        "params": null,
        "returns": null,
        "name": "Delete",
        "longname": "ApiCharacters#Delete",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13235,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiCharacters/Methods/Delete.js"
        ]
    },
    {
        "comment": "/**\n\t * Inserts a string replacing the specified characters.\n\t * @memberof ApiCharacters\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} String - The string to insert.\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/{Editor}/ApiCharacters/Methods/Insert.js\n\t */",
        "description": "Inserts a string replacing the specified characters.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"B1\");\nrange.SetValue(\"This is just a sample text.\");\nlet characters = range.GetCharacters(23, 4);\ncharacters.Insert(\"string\");\n```",
        "memberof": "ApiCharacters",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "String",
                "description": "The string to insert.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "Insert",
        "longname": "ApiCharacters#Insert",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13273,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiCharacters/Methods/Insert.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets a string value that represents the text of the specified range of characters.\n\t * @memberof ApiCharacters\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} Caption - A string value that represents the text of the specified range of characters.\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/{Editor}/ApiCharacters/Methods/SetCaption.js\n\t */",
        "description": "Sets a string value that represents the text of the specified range of characters.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"B1\");\nrange.SetValue(\"This is just a sample text.\");\nlet characters = range.GetCharacters(23, 4);\ncharacters.SetCaption(\"string\");\n```",
        "memberof": "ApiCharacters",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Caption",
                "description": "A string value that represents the text of the specified range of characters.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetCaption",
        "longname": "ApiCharacters#SetCaption",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13336,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiCharacters/Methods/SetCaption.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a string value that represents the text of the specified range of characters.\n\t * @memberof ApiCharacters\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string} - A string value that represents the text of the specified range of characters.\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/{Editor}/ApiCharacters/Methods/GetCaption.js\n\t */",
        "description": "Returns a string value that represents the text of the specified range of characters.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"B1\");\nrange.SetValue(\"This is just a sample text.\");\nlet characters = range.GetCharacters(23, 4);\nlet caption = characters.GetCaption();\nworksheet.GetRange(\"B3\").SetValue(\"Caption: \" + caption);\n```",
        "memberof": "ApiCharacters",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetCaption",
        "longname": "ApiCharacters#GetCaption",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13348,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiCharacters/Methods/GetCaption.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the text for the specified characters.\n\t * @memberof ApiCharacters\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} Text - The text to be set.\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/{Editor}/ApiCharacters/Methods/SetText.js\n\t */",
        "description": "Sets the text for the specified characters.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"B1\");\nrange.SetValue(\"This is just a sample text.\");\nlet characters = range.GetCharacters(23, 4);\ncharacters.SetText(\"string\");\n```",
        "memberof": "ApiCharacters",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Text",
                "description": "The text to be set.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetText",
        "longname": "ApiCharacters#SetText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13373,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiCharacters/Methods/SetText.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the text of the specified range of characters.\n\t * @memberof ApiCharacters\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string} - The text of the specified range of characters.\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/{Editor}/ApiCharacters/Methods/GetText.js\n\t */",
        "description": "Returns the text of the specified range of characters.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"B1\");\nrange.SetValue(\"This is just a sample text.\");\nlet characters = range.GetCharacters(23, 4);\nlet text = characters.GetText();\nworksheet.GetRange(\"B3\").SetValue(\"Text: \" + text);\n```",
        "memberof": "ApiCharacters",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetText",
        "longname": "ApiCharacters#GetText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13385,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiCharacters/Methods/GetText.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the ApiFont object that represents the font of the specified characters.\n\t * @memberof ApiCharacters\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiFont}\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/{Editor}/ApiCharacters/Methods/GetFont.js\n\t */",
        "description": "Returns the ApiFont object that represents the font of the specified characters.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"B1\");\nrange.SetValue(\"This is just a sample text.\");\nlet characters = range.GetCharacters(9, 4);\nlet font = characters.GetFont();\nfont.SetBold(true);\n```",
        "memberof": "ApiCharacters",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiFont"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiFont"
                    }
                }
            }
        ],
        "name": "GetFont",
        "longname": "ApiCharacters#GetFont",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13406,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiCharacters/Methods/GetFont.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the parent ApiCharacters object of the specified font.\n\t * @memberof ApiFont\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiCharacters} - The parent ApiCharacters object.\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/{Editor}/ApiFont/Methods/GetParent.js\n\t */",
        "description": "Returns the parent ApiCharacters object of the specified font.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"B1\");\nrange.SetValue(\"This is just a sample text.\");\nlet characters = range.GetCharacters(23, 4);\nlet font = characters.GetFont();\nlet parent = font.GetParent();\nparent.SetText(\"string\");\n```",
        "memberof": "ApiFont",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiCharacters"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiCharacters"
                    }
                }
            }
        ],
        "name": "GetParent",
        "longname": "ApiFont#GetParent",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13431,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiFont/Methods/GetParent.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the bold property of the specified font.\n\t * @memberof ApiFont\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean | null}\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/{Editor}/ApiFont/Methods/GetBold.js\n\t */",
        "description": "Returns the bold property of the specified font.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"B1\");\nrange.SetValue(\"This is just a sample text.\");\nlet characters = range.GetCharacters(9, 4);\nlet font = characters.GetFont();\nfont.SetBold(true);\nlet isBold = font.GetBold();\nworksheet.GetRange(\"B3\").SetValue(\"Bold property: \" + isBold);\n```",
        "memberof": "ApiFont",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetBold",
        "longname": "ApiFont#GetBold",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13449,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiFont/Methods/GetBold.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the bold property to the specified font.\n\t * <note>This method will work only with the text format of the cell.</note>\n\t * @memberof ApiFont\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} isBold - Specifies that the text characters are displayed bold.\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/{Editor}/ApiFont/Methods/SetBold.js\n\t */",
        "description": "Sets the bold property to the specified font.\n<note>This method will work only with the text format of the cell.</note>\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"B1\");\nrange.SetValue(\"This is just a sample text.\");\nlet characters = range.GetCharacters(9, 4);\nlet font = characters.GetFont();\nfont.SetBold(true);\n```",
        "memberof": "ApiFont",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isBold",
                "description": "Specifies that the text characters are displayed bold.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetBold",
        "longname": "ApiFont#SetBold",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13483,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiFont/Methods/SetBold.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the italic property of the specified font.\n\t * @memberof ApiFont\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean | null}\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/{Editor}/ApiFont/Methods/GetItalic.js\n\t */",
        "description": "Returns the italic property of the specified font.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"B1\");\nrange.SetValue(\"This is just a sample text.\");\nlet characters = range.GetCharacters(9, 4);\nlet font = characters.GetFont();\nfont.SetItalic(true);\nlet isItalic = font.GetItalic();\nworksheet.GetRange(\"B3\").SetValue(\"Italic property: \" + isItalic);\n```",
        "memberof": "ApiFont",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetItalic",
        "longname": "ApiFont#GetItalic",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13532,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiFont/Methods/GetItalic.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the italic property to the specified font.\n\t * <note>This method will work only with the text format of the cell.</note>\n\t * @memberof ApiFont\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} isItalic - Specifies that the text characters are displayed italic.\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/{Editor}/ApiFont/Methods/SetItalic.js\n\t */",
        "description": "Sets the italic property to the specified font.\n<note>This method will work only with the text format of the cell.</note>\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"B1\");\nrange.SetValue(\"This is just a sample text.\");\nlet characters = range.GetCharacters(9, 4);\nlet font = characters.GetFont();\nfont.SetItalic(true);\n```",
        "memberof": "ApiFont",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isItalic",
                "description": "Specifies that the text characters are displayed italic.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetItalic",
        "longname": "ApiFont#SetItalic",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13566,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiFont/Methods/SetItalic.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the font size property of the specified font.\n\t * @memberof ApiFont\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {number | null}\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/{Editor}/ApiFont/Methods/GetSize.js\n\t */",
        "description": "Returns the font size property of the specified font.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"B1\");\nrange.SetValue(\"This is just a sample text.\");\nlet characters = range.GetCharacters(9, 4);\nlet font = characters.GetFont();\nfont.SetSize(18);\nlet size = font.GetSize();\nworksheet.GetRange(\"B3\").SetValue(\"Size property: \" + size);\n```",
        "memberof": "ApiFont",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetSize",
        "longname": "ApiFont#GetSize",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13615,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiFont/Methods/GetSize.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the font size property to the specified font.\n\t * <note>This method will work only with the text format of the cell.</note>\n\t * @memberof ApiFont\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number} Size - Font size.\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/{Editor}/ApiFont/Methods/SetSize.js\n\t */",
        "description": "Sets the font size property to the specified font.\n<note>This method will work only with the text format of the cell.</note>\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"B1\");\nrange.SetValue(\"This is just a sample text.\");\nlet characters = range.GetCharacters(9, 4);\nlet font = characters.GetFont();\nfont.SetSize(18);\n```",
        "memberof": "ApiFont",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "Size",
                "description": "Font size.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetSize",
        "longname": "ApiFont#SetSize",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13649,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiFont/Methods/SetSize.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the strikethrough property of the specified font.\n\t * @memberof ApiFont\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean | null}\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/{Editor}/ApiFont/Methods/GetStrikethrough.js\n\t */",
        "description": "Returns the strikethrough property of the specified font.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"B1\");\nrange.SetValue(\"This is just a sample text.\");\nlet characters = range.GetCharacters(9, 4);\nlet font = characters.GetFont();\nfont.SetStrikethrough(true);\nlet isStrikethrough = font.GetStrikethrough();\nworksheet.GetRange(\"B3\").SetValue(\"Strikethrough property: \" + isStrikethrough);\n```",
        "memberof": "ApiFont",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetStrikethrough",
        "longname": "ApiFont#GetStrikethrough",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13698,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiFont/Methods/GetStrikethrough.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the strikethrough property to the specified font.\n\t * <note>This method will work only with the text format of the cell.</note>\n\t * @memberof ApiFont\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} isStrikethrough - Specifies that the text characters are displayed strikethrough.\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/{Editor}/ApiFont/Methods/SetStrikethrough.js\n\t */",
        "description": "Sets the strikethrough property to the specified font.\n<note>This method will work only with the text format of the cell.</note>\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"B1\");\nrange.SetValue(\"This is just a sample text.\");\nlet characters = range.GetCharacters(9, 4);\nlet font = characters.GetFont();\nfont.SetStrikethrough(true);\n```",
        "memberof": "ApiFont",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isStrikethrough",
                "description": "Specifies that the text characters are displayed strikethrough.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetStrikethrough",
        "longname": "ApiFont#SetStrikethrough",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13732,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiFont/Methods/SetStrikethrough.js"
        ]
    },
    {
        "comment": "/**\n\t * Underline type.\n\t * @typedef {(\"xlUnderlineStyleDouble\" | \"xlUnderlineStyleDoubleAccounting\" | \"xlUnderlineStyleNone\" | \"xlUnderlineStyleSingle\" | \"xlUnderlineStyleSingleAccounting\")} XlUnderlineStyle\n\t * @see office-js-api/Examples/Enumerations/XlUnderlineStyle.js\n\t */",
        "description": "Underline type.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nfont.SetUnderline(\"xlUnderlineStyleSingle\");\n```",
        "name": "XlUnderlineStyle",
        "longname": "XlUnderlineStyle",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 13773,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/XlUnderlineStyle.js"
        ],
        "type": {
            "names": [
                "\"xlUnderlineStyleDouble\"",
                "\"xlUnderlineStyleDoubleAccounting\"",
                "\"xlUnderlineStyleNone\"",
                "\"xlUnderlineStyleSingle\"",
                "\"xlUnderlineStyleSingleAccounting\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"xlUnderlineStyleDouble\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlUnderlineStyleDoubleAccounting\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlUnderlineStyleNone\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlUnderlineStyleSingle\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"xlUnderlineStyleSingleAccounting\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Returns the type of underline applied to the specified font.\n\t * @memberof ApiFont\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {XlUnderlineStyle | null}\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/{Editor}/ApiFont/Methods/GetUnderline.js\n\t */",
        "description": "Returns the type of underline applied to the specified font.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"B1\");\nrange.SetValue(\"This is just a sample text.\");\nlet characters = range.GetCharacters(9, 4);\nlet font = characters.GetFont();\nfont.SetUnderline(\"xlUnderlineStyleSingle\");\nlet underlineType = font.GetUnderline();\nworksheet.GetRange(\"B3\").SetValue(\"Underline property: \" + underlineType);\n```",
        "memberof": "ApiFont",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "XlUnderlineStyle",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "XlUnderlineStyle"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetUnderline",
        "longname": "ApiFont#GetUnderline",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13787,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiFont/Methods/GetUnderline.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets an underline of the type specified in the request to the current font.\n\t * <note>This method will work only with the text format of the cell.</note>\n\t * @memberof ApiFont\n\t * @typeofeditors [\"CSE\"]\n\t * @param {XlUnderlineStyle} Underline - Underline type.\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/{Editor}/ApiFont/Methods/SetUnderline.js\n\t */",
        "description": "Sets an underline of the type specified in the request to the current font.\n<note>This method will work only with the text format of the cell.</note>\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nvar oWorksheet = Api.GetActiveSheet();\nvar oRange = oWorksheet.GetRange(\"B1\");\noRange.SetValue(\"This is just a sample text.\");\nvar oCharacters = oRange.GetCharacters(9, 4);\nvar oFont = oCharacters.GetFont();\noFont.SetUnderline(\"xlUnderlineStyleSingle\");\n```",
        "memberof": "ApiFont",
        "params": [
            {
                "type": {
                    "names": [
                        "XlUnderlineStyle"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "XlUnderlineStyle"
                    }
                },
                "name": "Underline",
                "description": "Underline type.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetUnderline",
        "longname": "ApiFont#SetUnderline",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13847,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiFont/Methods/SetUnderline.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the subscript property of the specified font.\n\t * @memberof ApiFont\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean | null}\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/{Editor}/ApiFont/Methods/GetSubscript.js\n\t */",
        "description": "Returns the subscript property of the specified font.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"B1\");\nrange.SetValue(\"This is just a sample text.\");\nlet characters = range.GetCharacters(9, 4);\nlet font = characters.GetFont();\nfont.SetSubscript(true);\nlet isSubscript = font.GetSubscript();\nworksheet.GetRange(\"B3\").SetValue(\"Subscript property: \" + isSubscript);\n```",
        "memberof": "ApiFont",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetSubscript",
        "longname": "ApiFont#GetSubscript",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13921,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiFont/Methods/GetSubscript.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the subscript property to the specified font.\n\t * <note>This method will work only with the text format of the cell.</note>\n\t * @memberof ApiFont\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} isSubscript - Specifies that the text characters are displayed subscript.\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/{Editor}/ApiFont/Methods/SetSubscript.js\n\t */",
        "description": "Sets the subscript property to the specified font.\n<note>This method will work only with the text format of the cell.</note>\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nvar oWorksheet = Api.GetActiveSheet();\nvar oRange = oWorksheet.GetRange(\"B1\");\noRange.SetValue(\"This is just a sample text.\");\nvar oCharacters = oRange.GetCharacters(9, 4);\nvar oFont = oCharacters.GetFont();\noFont.SetSubscript(true);\n```",
        "memberof": "ApiFont",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isSubscript",
                "description": "Specifies that the text characters are displayed subscript.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetSubscript",
        "longname": "ApiFont#SetSubscript",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13955,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiFont/Methods/SetSubscript.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the superscript property of the specified font.\n\t * @memberof ApiFont\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean | null}\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/{Editor}/ApiFont/Methods/GetSuperscript.js\n\t */",
        "description": "Returns the superscript property of the specified font.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"B1\");\nrange.SetValue(\"This is just a sample text.\");\nlet characters = range.GetCharacters(9, 4);\nlet font = characters.GetFont();\nfont.SetSuperscript(true);\nlet isSuperscript = font.GetSuperscript();\nworksheet.GetRange(\"B3\").SetValue(\"Superscript property: \" + isSuperscript);\n```",
        "memberof": "ApiFont",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetSuperscript",
        "longname": "ApiFont#GetSuperscript",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14004,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiFont/Methods/GetSuperscript.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the superscript property to the specified font.\n\t * <note>This method will work only with the text format of the cell.</note>\n\t * @memberof ApiFont\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} isSuperscript - Specifies that the text characters are displayed superscript.\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/{Editor}/ApiFont/Methods/SetSuperscript.js\n\t */",
        "description": "Sets the superscript property to the specified font.\n<note>This method will work only with the text format of the cell.</note>\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nvar oWorksheet = Api.GetActiveSheet();\nvar oRange = oWorksheet.GetRange(\"B1\");\noRange.SetValue(\"This is just a sample text.\");\nvar oCharacters = oRange.GetCharacters(9, 4);\nvar oFont = oCharacters.GetFont();\noFont.SetSuperscript(true);\n```",
        "memberof": "ApiFont",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isSuperscript",
                "description": "Specifies that the text characters are displayed superscript.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetSuperscript",
        "longname": "ApiFont#SetSuperscript",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14038,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiFont/Methods/SetSuperscript.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the font name property of the specified font.\n\t * @memberof ApiFont\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string | null}\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/{Editor}/ApiFont/Methods/GetName.js\n\t */",
        "description": "Returns the font name property of the specified font.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"B1\");\nrange.SetValue(\"This is just a sample text.\");\nlet characters = range.GetCharacters(9, 4);\nlet font = characters.GetFont();\nfont.SetName(\"Font 1\");\nlet fontName = font.GetName();\nworksheet.GetRange(\"B3\").SetValue(\"Font name: \" + fontName);\n```",
        "memberof": "ApiFont",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetName",
        "longname": "ApiFont#GetName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14087,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiFont/Methods/GetName.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the font name property to the specified font.\n\t * <note>This method will work only with the text format of the cell.</note>\n\t * @memberof ApiFont\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} FontName - Font name.\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/{Editor}/ApiFont/Methods/SetName.js\n\t */",
        "description": "Sets the font name property to the specified font.\n<note>This method will work only with the text format of the cell.</note>\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"B1\");\nrange.SetValue(\"This is just a sample text.\");\nlet characters = range.GetCharacters(9, 4);\nlet font = characters.GetFont();\nfont.SetName(\"Font 1\");\nlet fontName = font.GetName();\nworksheet.GetRange(\"B3\").SetValue(\"Font name: \" + fontName);\n```",
        "memberof": "ApiFont",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "FontName",
                "description": "Font name.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetName",
        "longname": "ApiFont#SetName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14121,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiFont/Methods/SetName.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the font color property of the specified font.\n\t * @memberof ApiFont\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiColor | null}\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/{Editor}/ApiFont/Methods/GetColor.js\n\t */",
        "description": "Returns the font color property of the specified font.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"B1\");\nrange.SetValue(\"This is just a sample text.\");\nlet characters = range.GetCharacters(9, 4);\nlet font = characters.GetFont();\nlet color = Api.CreateColorFromRGB(255, 111, 61);\nfont.SetColor(color);\ncolor = font.GetColor();\ncharacters = range.GetCharacters(16, 6);\nfont = characters.GetFont();\nfont.SetColor(color);\n```",
        "memberof": "ApiFont",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiColor",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiColor"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetColor",
        "longname": "ApiFont#GetColor",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14171,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiFont/Methods/GetColor.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the font color property to the specified font.\n\t * <note>This method will work only with the text format of the cell.</note>\n\t * @memberof ApiFont\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiColor} Color - Font color.\n\t * @since 7.4.0\n\t * @see office-js-api/Examples/{Editor}/ApiFont/Methods/SetColor.js\n\t */",
        "description": "Sets the font color property to the specified font.\n<note>This method will work only with the text format of the cell.</note>\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet range = worksheet.GetRange(\"B1\");\nrange.SetValue(\"This is just a sample text.\");\nlet characters = range.GetCharacters(9, 4);\nlet font = characters.GetFont();\nlet color = Api.CreateColorFromRGB(255, 111, 61);\nfont.SetColor(color);\n```",
        "memberof": "ApiFont",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiColor"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiColor"
                    }
                },
                "name": "Color",
                "description": "Font color.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetColor",
        "longname": "ApiFont#SetColor",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14205,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiFont/Methods/SetColor.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the frozen cells in the active worksheet view. The range provided corresponds to the cells that will be frozen in the top- and left-most pane.\n\t * @memberof ApiFreezePanes\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange | String} frozenRange - A range that represents the cells to be frozen.\n\t * @since 8.0.0\n\t * @see office-js-api/Examples/{Editor}/ApiFreezePanes/Methods/FreezeAt.js\n\t */",
        "description": "Sets the frozen cells in the active worksheet view. The range provided corresponds to the cells that will be frozen in the top- and left-most pane.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet freezePanes = worksheet.GetFreezePanes();\nlet range = Api.GetRange('H2:K4');\nfreezePanes.FreezeAt(range);\n```",
        "memberof": "ApiFreezePanes",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "String"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NameExpression",
                                "name": "String"
                            }
                        ]
                    }
                },
                "name": "frozenRange",
                "description": "A range that represents the cells to be frozen.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "FreezeAt",
        "longname": "ApiFreezePanes#FreezeAt",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14262,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiFreezePanes/Methods/FreezeAt.js"
        ]
    },
    {
        "comment": "/**\n\t * Freezes the first column or columns of the current worksheet.\n\t * @memberof ApiFreezePanes\n\t * @typeofeditors [\"CSE\"]\n\t * @param {Number?} [count=0] - Optional number of columns to freeze, or zero to unfreeze all columns.\n\t * @since 8.0.0\n\t * @see office-js-api/Examples/{Editor}/ApiFreezePanes/Methods/FreezeColumns.js\n\t */",
        "description": "Freezes the first column or columns of the current worksheet.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet freezePanes = worksheet.GetFreezePanes();\nfreezePanes.FreezeColumns(1);\n```",
        "memberof": "ApiFreezePanes",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Number",
                        "nullable": true
                    }
                },
                "name": "count",
                "description": "Optional number of columns to freeze, or zero to unfreeze all columns.",
                "optional": true,
                "defaultvalue": 0
            }
        ],
        "returns": null,
        "name": "FreezeColumns",
        "longname": "ApiFreezePanes#FreezeColumns",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14284,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiFreezePanes/Methods/FreezeColumns.js"
        ]
    },
    {
        "comment": "/**\n\t * Freezes the top row or rows of the current worksheet.\n\t * @memberof ApiFreezePanes\n\t * @typeofeditors [\"CSE\"]\n\t * @param {Number?} [count=0] - Optional number of rows to freeze, or zero to unfreeze all rows.\n\t * @since 8.0.0\n\t * @see office-js-api/Examples/{Editor}/ApiFreezePanes/Methods/FreezeRows.js\n\t */",
        "description": "Freezes the top row or rows of the current worksheet.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet freezePanes = worksheet.GetFreezePanes();\nfreezePanes.FreezeRows(1);\n```",
        "memberof": "ApiFreezePanes",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Number",
                        "nullable": true
                    }
                },
                "name": "count",
                "description": "Optional number of rows to freeze, or zero to unfreeze all rows.",
                "optional": true,
                "defaultvalue": 0
            }
        ],
        "returns": null,
        "name": "FreezeRows",
        "longname": "ApiFreezePanes#FreezeRows",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14304,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiFreezePanes/Methods/FreezeRows.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a range that describes the frozen cells in the active worksheet view.\n\t * @memberof ApiFreezePanes\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiRange | null} - Returns null if there is no frozen pane.\n\t * @since 8.0.0\n\t * @see office-js-api/Examples/{Editor}/ApiFreezePanes/Methods/GetLocation.js\n\t */",
        "description": "Returns a range that describes the frozen cells in the active worksheet view.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nApi.SetFreezePanesType('column');\nlet worksheet = Api.GetActiveSheet();\nlet freezePanes = worksheet.GetFreezePanes();\nlet range = freezePanes.GetLocation();\nworksheet.GetRange(\"A1\").SetValue(\"Location: \");\nworksheet.GetRange(\"B1\").SetValue(range.GetAddress());\n```",
        "memberof": "ApiFreezePanes",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetLocation",
        "longname": "ApiFreezePanes#GetLocation",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14324,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiFreezePanes/Methods/GetLocation.js"
        ]
    },
    {
        "comment": "/**\n\t * Removes all frozen panes in the current worksheet.\n\t * @memberof ApiFreezePanes\n\t * @typeofeditors [\"CSE\"]\n\t * @since 8.0.0\n\t * @see office-js-api/Examples/{Editor}/ApiFreezePanes/Methods/Unfreeze.js\n\t */",
        "description": "Removes all frozen panes in the current worksheet.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nApi.SetFreezePanesType('column');\nlet worksheet = Api.GetActiveSheet();\nlet freezePanes = worksheet.GetFreezePanes();\nfreezePanes.Unfreeze();\nlet range = freezePanes.GetLocation();\nworksheet.GetRange(\"A1\").SetValue(\"Location: \");\nworksheet.GetRange(\"B1\").SetValue(range + \"\");\n```",
        "memberof": "ApiFreezePanes",
        "params": null,
        "returns": null,
        "name": "Unfreeze",
        "longname": "ApiFreezePanes#Unfreeze",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14356,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiFreezePanes/Methods/Unfreeze.js"
        ]
    },
    {
        "comment": "/**\n\t * Class representing a user-protected range.\n\t * @constructor\n\t */",
        "description": "Class representing a user-protected range.",
        "name": "ApiProtectedRange",
        "longname": "ApiProtectedRange",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 14365,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\n\t * Sets a title to the current protected range.\n\t * @memberof ApiProtectedRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sTitle - The title which will be displayed for the current protected range.\n\t * @returns {boolean} - Returns false if a user doesn't have permission to modify the protected range.\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiProtectedRange/Methods/SetTitle.js\n\t */",
        "description": "Sets a title to the current protected range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.AddProtectedRange(\"protectedRange\", \"Sheet1!$A$1:$B$1\");\nlet protectedRange = worksheet.GetProtectedRange(\"protectedRange\");\nprotectedRange.SetTitle(\"protectedRangeNew\");\n```",
        "memberof": "ApiProtectedRange",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sTitle",
                "description": "The title which will be displayed for the current protected range.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetTitle",
        "longname": "ApiProtectedRange#SetTitle",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14378,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiProtectedRange/Methods/SetTitle.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets a range to the current protected range.\n\t * @memberof ApiProtectedRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sRange - The cell range which will be set for the current protected range.\n\t * @returns {boolean} - Returns false if a user doesn't have permission to modify the protected range.\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiProtectedRange/Methods/SetRange.js\n\t */",
        "description": "Sets a range to the current protected range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.AddProtectedRange(\"protectedRange\", \"Sheet1!$A$1:$B$1\");\nlet protectedRange = worksheet.GetProtectedRange(\"protectedRange\");\nprotectedRange.SetRange(\"Sheet1!$A$2:$B$2\");\n```",
        "memberof": "ApiProtectedRange",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sRange",
                "description": "The cell range which will be set for the current protected range.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetRange",
        "longname": "ApiProtectedRange#SetRange",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14407,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiProtectedRange/Methods/SetRange.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies the user type of the protected range.\n\t * @typedef {(\"CanEdit\" | \"CanView\" | \"NotView\")} ProtectedRangeUserType\n\t * @see office-js-api/Examples/Enumerations/ProtectedRangeUserType.js\n\t */",
        "description": "Specifies the user type of the protected range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nprotectedRange.SetAnyoneType(\"NotView\");\n```",
        "name": "ProtectedRangeUserType",
        "longname": "ProtectedRangeUserType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 14427,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/ProtectedRangeUserType.js"
        ],
        "type": {
            "names": [
                "\"CanEdit\"",
                "\"CanView\"",
                "\"NotView\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"CanEdit\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"CanView\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"NotView\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Sets a user to the current protected range.\n\t * @memberof ApiProtectedRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sId - The user ID.\n\t * @param {string} sName - The user name.\n\t * @param {ProtectedRangeUserType} protectedRangeUserType - The user type of the protected range.\n\t * @returns {ApiProtectedRangeUserInfo | null} - Returns null if a user doesn't have permission to modify the protected range.\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiProtectedRange/Methods/AddUser.js\n\t */",
        "description": "Sets a user to the current protected range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.AddProtectedRange(\"protectedRange\", \"$A$1:$B$1\");\nlet protectedRange = worksheet.GetProtectedRange(\"protectedRange\");\nprotectedRange.AddUser(\"userId\", \"name\", \"CanView\");\n```",
        "memberof": "ApiProtectedRange",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sId",
                "description": "The user ID.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sName",
                "description": "The user name.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ProtectedRangeUserType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ProtectedRangeUserType"
                    }
                },
                "name": "protectedRangeUserType",
                "description": "The user type of the protected range.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiProtectedRangeUserInfo",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiProtectedRangeUserInfo"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "AddUser",
        "longname": "ApiProtectedRange#AddUser",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14445,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiProtectedRange/Methods/AddUser.js"
        ]
    },
    {
        "comment": "/**\n\t * Removes a user from the current protected range.\n\t * @memberof ApiProtectedRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sId - The user ID.\n\t * @returns {bool}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiProtectedRange/Methods/DeleteUser.js\n\t */",
        "description": "Removes a user from the current protected range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.AddProtectedRange(\"protectedRange\", \"$A$1:$B$1\");\nlet protectedRange = worksheet.GetProtectedRange(\"protectedRange\");\nprotectedRange.AddUser(\"userId\", \"name\", \"CanView\");\nprotectedRange.DeleteUser(\"userId\");\n```",
        "memberof": "ApiProtectedRange",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sId",
                "description": "The user ID.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "bool"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "bool"
                    }
                }
            }
        ],
        "name": "DeleteUser",
        "longname": "ApiProtectedRange#DeleteUser",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14490,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiProtectedRange/Methods/DeleteUser.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns all users from the current protected range.\n\t * @memberof ApiProtectedRange\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiProtectedRangeUserInfo[] | null}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiProtectedRange/Methods/GetAllUsers.js\n\t */",
        "description": "Returns all users from the current protected range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.GetRange(\"A1\").SetValue(\"1\");\nworksheet.GetRange(\"B1\").SetValue(\"2\");\nworksheet.GetRange(\"C1\").SetValue(\"3\");\nworksheet.AddProtectedRange(\"Protected range\", \"$A$1:$C$1\");\nlet protectedRange = worksheet.GetProtectedRange(\"Protected range\");\nprotectedRange.AddUser(\"uid-1\", \"John Smith\", \"CanEdit\");\nprotectedRange.AddUser(\"uid-2\", \"Mark Potato\", \"CanView\");\nlet users = protectedRange.GetAllUsers();\nworksheet.GetRange(\"A3\").SetValue(users[0].GetName());\n\n```",
        "memberof": "ApiProtectedRange",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ApiProtectedRangeUserInfo>",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "ApiProtectedRangeUserInfo",
                                        "type": "NameExpression"
                                    }
                                ]
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetAllUsers",
        "longname": "ApiProtectedRange#GetAllUsers",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14527,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiProtectedRange/Methods/GetAllUsers.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the type of the \"Anyone\" user to the current protected range.\n\t * @memberof ApiProtectedRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ProtectedRangeUserType} protectedRangeUserType - The user type of the protected range.\n\t * @returns {bool}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiProtectedRange/Methods/SetAnyoneType.js\n\t */",
        "description": "Sets the type of the \"Anyone\" user to the current protected range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.AddProtectedRange(\"protectedRange\", \"Sheet1!$A$1:$B$1\");\nlet protectedRange = worksheet.GetProtectedRange(\"protectedRange\");\nprotectedRange.SetAnyoneType(\"CanView\");\n```",
        "memberof": "ApiProtectedRange",
        "params": [
            {
                "type": {
                    "names": [
                        "ProtectedRangeUserType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ProtectedRangeUserType"
                    }
                },
                "name": "protectedRangeUserType",
                "description": "The user type of the protected range.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "bool"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "bool"
                    }
                }
            }
        ],
        "name": "SetAnyoneType",
        "longname": "ApiProtectedRange#SetAnyoneType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14553,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiProtectedRange/Methods/SetAnyoneType.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns an object that represents a user from the current protected range.\n\t * @memberof ApiProtectedRange\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} sId - The user ID.\n\t * @returns {ApiProtectedRangeUserInfo | null}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiProtectedRange/Methods/GetUser.js\n\t */",
        "description": "Returns an object that represents a user from the current protected range.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.AddProtectedRange(\"protectedRange\", \"$A$1:$B$1\").AddUser(\"userId\", \"name\", \"CanView\");\nlet protectedRange = worksheet.GetProtectedRange(\"protectedRange\");\nlet userInfo = protectedRange.GetUser(\"userId\");\nlet userName = userInfo.GetName();\nworksheet.GetRange(\"A3\").SetValue(\"User name: \" + userName);\n```",
        "memberof": "ApiProtectedRange",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sId",
                "description": "The user ID.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiProtectedRangeUserInfo",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiProtectedRangeUserInfo"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetUser",
        "longname": "ApiProtectedRange#GetUser",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14587,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiProtectedRange/Methods/GetUser.js"
        ]
    },
    {
        "comment": "/**\n\t * Class representing a user from the current protected range.\n\t * @constructor\n\t */",
        "description": "Class representing a user from the current protected range.",
        "name": "ApiProtectedRangeUserInfo",
        "longname": "ApiProtectedRangeUserInfo",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 14606,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\n\t * Returns the name property of the current user's information.\n\t * @memberof ApiProtectedRangeUserInfo\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string | null}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiProtectedRangeUserInfo/Methods/GetName.js\n\t */",
        "description": "Returns the name property of the current user's information.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.AddProtectedRange(\"protectedRange\", \"$A$1:$B$1\").AddUser(\"userId\", \"name\", \"CanView\");\nlet protectedRange = worksheet.GetProtectedRange(\"protectedRange\");\nlet userInfo = protectedRange.GetUser(\"userId\");\nlet userName = userInfo.GetName();\nworksheet.GetRange(\"A3\").SetValue(\"Name: \" + userName);\n```",
        "memberof": "ApiProtectedRangeUserInfo",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetName",
        "longname": "ApiProtectedRangeUserInfo#GetName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14619,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiProtectedRangeUserInfo/Methods/GetName.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the type property of the current user's information.\n\t * @memberof ApiProtectedRangeUserInfo\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ProtectedRangeUserType}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiProtectedRangeUserInfo/Methods/GetType.js\n\t */",
        "description": "Returns the type property of the current user's information.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.AddProtectedRange(\"protectedRange\", \"$A$1:$B$1\").AddUser(\"userId\", \"name\", \"CanView\");\nlet protectedRange = worksheet.GetProtectedRange(\"protectedRange\");\nlet userInfo = protectedRange.GetUser(\"userId\");\nlet userType = userInfo.GetType();\nworksheet.GetRange(\"A3\").SetValue(\"Type: \" + userType);\n```",
        "memberof": "ApiProtectedRangeUserInfo",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ProtectedRangeUserType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ProtectedRangeUserType"
                    }
                }
            }
        ],
        "name": "GetType",
        "longname": "ApiProtectedRangeUserInfo#GetType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14633,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiProtectedRangeUserInfo/Methods/GetType.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the ID property of the current user's information.\n\t * @memberof ApiProtectedRangeUserInfo\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string | null}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiProtectedRangeUserInfo/Methods/GetId.js\n\t */",
        "description": "Returns the ID property of the current user's information.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nworksheet.AddProtectedRange(\"protectedRange\", \"$A$1:$B$1\").AddUser(\"userId\", \"name\", \"CanView\");\nlet protectedRange = worksheet.GetProtectedRange(\"protectedRange\");\nlet userInfo = protectedRange.GetUser(\"userId\");\nlet userId = userInfo.GetId();\nworksheet.GetRange(\"A3\").SetValue(\"Id: \" + userId);\n```",
        "memberof": "ApiProtectedRangeUserInfo",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetId",
        "longname": "ApiProtectedRangeUserInfo#GetId",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14653,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiProtectedRangeUserInfo/Methods/GetId.js"
        ]
    },
    {
        "comment": "/**\n\t * Adds a data field to the pivot table report.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number | string} field - The index number or name of the data field.\n\t * @returns {ApiPivotDataField}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/AddDataField.js\n\t */",
        "description": "Adds a data field to the pivot table report.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Price');\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('C2').SetValue(42.5);\nworksheet.GetRange('C3').SetValue(35.2);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$C$3\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.MoveField('Region', 'Rows');\n\nlet dataField = pivotTable.AddDataField('Price');\ndataField.SetName('Regional prices');\n\n```",
        "memberof": "ApiPivotTable",
        "params": [
            {
                "type": {
                    "names": [
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "field",
                "description": "The index number or name of the data field.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiPivotDataField"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiPivotDataField"
                    }
                }
            }
        ],
        "name": "AddDataField",
        "longname": "ApiPivotTable#AddDataField",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14674,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/AddDataField.js"
        ]
    },
    {
        "comment": "/**\n\t * Adds the row, column, and page fields to the pivot table report.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @param {PivotTableFieldOptions} options - The settings for adding row, column, and page fields to the pivot table report.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/AddFields.js\n\t */",
        "description": "Adds the row, column, and page fields to the pivot table report.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\nlet dataField = pivotTable.AddDataField('Price');\ndataField.SetName('Regional prices');\npivotTable.AddFields({\n    rows: 'Region',\n    columns: 'Style',\n});\n\n```",
        "memberof": "ApiPivotTable",
        "params": [
            {
                "type": {
                    "names": [
                        "PivotTableFieldOptions"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PivotTableFieldOptions"
                    }
                },
                "name": "options",
                "description": "The settings for adding row, column, and page fields to the pivot table report.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "AddFields",
        "longname": "ApiPivotTable#AddFields",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14701,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/AddFields.js"
        ]
    },
    {
        "comment": "/**\n\t * Deletes all filters currently applied to the pivot table.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/ClearAllFilters.js\n\t */",
        "description": "Deletes all filters currently applied to the pivot table.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.ClearAllFilters();\n```",
        "memberof": "ApiPivotTable",
        "params": null,
        "returns": null,
        "name": "ClearAllFilters",
        "longname": "ApiPivotTable#ClearAllFilters",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14759,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/ClearAllFilters.js"
        ]
    },
    {
        "comment": "/**\n\t * Clears the pivot table.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/ClearTable.js\n\t */",
        "description": "Clears the pivot table.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\nlet dataField = pivotTable.AddDataField('Price');\n\ndataField.SetName('Regional prices');\n\npivotTable.AddFields({\n    rows: 'Region',\n    columns: 'Style',\n});\n\nApi.GetActiveSheet().GetRange('F4').SetValue('This pivot table will be cleared soon');\n\nsetTimeout(function () {\n    pivotTable.ClearTable();\n}, 5000);\n\n```",
        "memberof": "ApiPivotTable",
        "params": null,
        "returns": null,
        "name": "ClearTable",
        "longname": "ApiPivotTable#ClearTable",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14769,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/ClearTable.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the value for the data field in a pivot table.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string[]} items - Describes a single cell in the pivot table report.\n\t * For example, \"'Estimated Costs' Tables May\", which shows the estimated costs for tables in May\n\t * (Data field = Costs, Product = Tables, Month = May).\n\t * @returns {number | null}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/GetData.js\n\t */",
        "description": "Returns the value for the data field in a pivot table.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\nlet dataField = pivotTable.AddDataField('Price');\ndataField.SetName('Regional prices');\npivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});\n\nlet pivotWorksheet = Api.GetActiveSheet();\n\nlet value = pivotTable.GetData(['East', 'Tee']);\npivotWorksheet.GetRange('A9').SetValue('Value of East Tee Price:');\npivotWorksheet.GetRange('B9').SetValue(value);\n\n```",
        "memberof": "ApiPivotTable",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "string",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "items",
                "description": "Describes a single cell in the pivot table report.\nFor example, \"'Estimated Costs' Tables May\", which shows the estimated costs for tables in May\n(Data field = Costs, Product = Tables, Month = May).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetData",
        "longname": "ApiPivotTable#GetData",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14801,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/GetData.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a Range object with information about a data item in the pivot table report.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} [dataField] - The name of the field containing the data for the PivotTable.\n\t * @param {string[]} [fieldItemsArray] - An array of field items from the pivot table.\n\t * @returns {ApiRange}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/GetPivotData.js\n\t */",
        "description": "Returns a Range object with information about a data item in the pivot table report.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\nlet dataField = pivotTable.AddDataField('Price');\ndataField.SetName('Regional prices');\npivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});\n\nlet pivotWorksheet = Api.GetActiveSheet();\n\npivotWorksheet.GetRange('A9').SetValue('East Total:');\n\nlet range = pivotTable.GetPivotData('Price', ['Region', 'East']);\nlet value = range.GetValue();\npivotWorksheet.GetRange('B9').SetValue(value);\n\n```",
        "memberof": "ApiPivotTable",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "dataField",
                "description": "The name of the field containing the data for the PivotTable.",
                "optional": true,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "string",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "fieldItemsArray",
                "description": "An array of field items from the pivot table.",
                "optional": true,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                }
            }
        ],
        "name": "GetPivotData",
        "longname": "ApiPivotTable#GetPivotData",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14820,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/GetPivotData.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a collection that represents either a single pivot table field\n\t * or a collection of both the visible and hidden fields in the pivot table report.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string | number} [field] - The name or index of the field to be returned.\n\t * @returns {ApiPivotField[] | ApiPivotField | ApiPivotDataField | null}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/GetPivotFields.js\n\t */",
        "description": "Returns a collection that represents either a single pivot table field\nor a collection of both the visible and hidden fields in the pivot table report.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\npivotWorksheet.GetRange('A9').SetValue('Pivot Fields');\n\nlet pivotFields = pivotTable.GetPivotFields();\nfor (let i = 0; i < pivotFields.length; i += 1) {\n\tlet cell = pivotWorksheet.GetRangeByNumber(8 + i, 1);\n\tcell.SetValue(pivotFields[i].GetName());\n}\n\n```",
        "memberof": "ApiPivotTable",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                },
                "name": "field",
                "description": "The name or index of the field to be returned.",
                "optional": true,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ApiPivotField>",
                        "ApiPivotField",
                        "ApiPivotDataField",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "ApiPivotField",
                                        "type": "NameExpression"
                                    }
                                ]
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiPivotField"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiPivotDataField"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetPivotFields",
        "longname": "ApiPivotTable#GetPivotFields",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14840,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/GetPivotFields.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the value of a pivot table cell.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number} rowLine - The position of the pivot line (a line of rows in the pivot table) on the row area.\n\t * @param {number} colLine - The position of the pivot line (a line of columns in the pivot table) on the column area.\n\t * @returns {number | string | null}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/PivotValueCell.js\n\t */",
        "description": "Returns the value of a pivot table cell.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\n\npivotWorksheet.GetRange('A9').SetValue('First value in Pivot Table');\n\npivotWorksheet.GetRange('C9').SetValue(pivotTable.PivotValueCell(1, 1));\n\n```",
        "memberof": "ApiPivotTable",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "rowLine",
                "description": "The position of the pivot line (a line of rows in the pivot table) on the row area.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "colLine",
                "description": "The position of the pivot line (a line of columns in the pivot table) on the column area.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number",
                        "string",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "PivotValueCell",
        "longname": "ApiPivotTable#PivotValueCell",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14877,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/PivotValueCell.js"
        ]
    },
    {
        "comment": "/**\n\t * Shows details of the pivot table cell.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number} rowLine - The position of the pivot line (a line of rows in the pivot table) on the row area.\n\t * @param {number} colLine - The position of the pivot line (a line of columns in the pivot table) on the column area.\n\t * @returns {boolean} - Returns true if the operation is successful.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/ShowDetails.js\n\t */",
        "description": "Shows details of the pivot table cell.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});\n\npivotTable.AddDataField('Price');\n\npivotTable.ShowDetails(1, 3);\n\nlet showDetailsSheet = Api.GetActiveSheet();\nshowDetailsSheet.GetRange('A5').SetValue('East details');\n\n```",
        "memberof": "ApiPivotTable",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "rowLine",
                "description": "The position of the pivot line (a line of rows in the pivot table) on the row area.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "colLine",
                "description": "The position of the pivot line (a line of columns in the pivot table) on the column area.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "ShowDetails",
        "longname": "ApiPivotTable#ShowDetails",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14902,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/ShowDetails.js"
        ]
    },
    {
        "comment": "/**\n\t * Refreshes the pivot table report from the source data.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/RefreshTable.js\n\t */",
        "description": "Refreshes the pivot table report from the source data.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n \nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: 'Region',\n    columns: 'Style'\n});\n\npivotTable.AddDataField('Price');\n\npivotTable.RefreshTable();\n\n```",
        "memberof": "ApiPivotTable",
        "params": null,
        "returns": null,
        "name": "RefreshTable",
        "longname": "ApiPivotTable#RefreshTable",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14924,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/RefreshTable.js"
        ]
    },
    {
        "comment": "/**\n\t * Updates the current pivot table.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/Update.js\n\t */",
        "description": "Updates the current pivot table.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\n \nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: 'Region',\n    columns: 'Style'\n});\n\npivotTable.AddDataField('Price');\n\npivotTable.Update();\n\n```",
        "memberof": "ApiPivotTable",
        "params": null,
        "returns": null,
        "name": "Update",
        "longname": "ApiPivotTable#Update",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14934,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/Update.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies whether to repeat item labels for all pivot fields in the specified pivot table.\n\t * @memberof ApiPivotTable\n\t * @param {boolean} repeat - Specifies whether to repeat all field item labels in a pivot table report.\n\t * @typeofeditors [\"CSE\"]\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/SetRepeatAllLabels.js\n\t */",
        "description": "Specifies whether to repeat item labels for all pivot fields in the specified pivot table.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\tcolumns: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\npivotTable.SetRepeatAllLabels(true);\n\n```",
        "memberof": "ApiPivotTable",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "repeat",
                "description": "Specifies whether to repeat all field item labels in a pivot table report.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetRepeatAllLabels",
        "longname": "ApiPivotTable#SetRepeatAllLabels",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14945,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/SetRepeatAllLabels.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the way the specified pivot table items appear — in table format or in outline format.\n\t * @memberof ApiPivotTable\n\t * @param {PivotLayoutType} type - The layout type of the pivot table report.\n\t * @param {boolean} compact - Specifies whether the pivot table items will be displayed in the compact form.\n\t * @typeofeditors [\"CSE\"]\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/SetRowAxisLayout.js\n\t */",
        "description": "Sets the way the specified pivot table items appear — in table format or in outline format.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\npivotTable.SetRowAxisLayout('Tabular', false);\n```",
        "memberof": "ApiPivotTable",
        "params": [
            {
                "type": {
                    "names": [
                        "PivotLayoutType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PivotLayoutType"
                    }
                },
                "name": "type",
                "description": "The layout type of the pivot table report.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "compact",
                "description": "Specifies whether the pivot table items will be displayed in the compact form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetRowAxisLayout",
        "longname": "ApiPivotTable#SetRowAxisLayout",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14968,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/SetRowAxisLayout.js"
        ]
    },
    {
        "comment": "/**\n\t * The type of the pivot table subtotal layout.\n\t * @typedef { \"Hidden\" | \"Top\" | \"Bottom\" } PivotSubtotalLayoutType\n\t */",
        "description": "The type of the pivot table subtotal layout.",
        "name": "PivotSubtotalLayoutType",
        "longname": "PivotSubtotalLayoutType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 14995,
            "columnno": 1
        },
        "properties": null,
        "see": null,
        "type": {
            "names": [
                "\"Hidden\"",
                "\"Top\"",
                "\"Bottom\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"Hidden\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Top\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Bottom\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Sets the layout subtotal location in the pivot table.\n\t * @memberof ApiPivotTable\n\t * @param {PivotSubtotalLayoutType} type - The type of the pivot table subtotal layout.\n\t * @typeofeditors [\"CSE\"]\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/SetSubtotalLocation.js\n\t */",
        "description": "Sets the layout subtotal location in the pivot table.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\npivotTable.SetSubtotalLocation('Bottom');\n```",
        "memberof": "ApiPivotTable",
        "params": [
            {
                "type": {
                    "names": [
                        "PivotSubtotalLayoutType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PivotSubtotalLayoutType"
                    }
                },
                "name": "type",
                "description": "The type of the pivot table subtotal layout.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetSubtotalLocation",
        "longname": "ApiPivotTable#SetSubtotalLocation",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15007,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/SetSubtotalLocation.js"
        ]
    },
    {
        "comment": "/**\n\t * Removes the specified field from all the pivot table categories.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number | string} identifier - The index number or name of the field.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/RemoveField.js\n\t */",
        "description": "Removes the specified field from all the pivot table categories.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});\n\npivotTable.AddDataField('Price');\n\nApi.GetActiveSheet().GetRange('F4').SetValue('Region field will be cleared soon');\n\nsetTimeout(function () {\n\tpivotTable.RemoveField('Region');\n}, 5000);\n\n```",
        "memberof": "ApiPivotTable",
        "params": [
            {
                "type": {
                    "names": [
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "identifier",
                "description": "The index number or name of the field.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "RemoveField",
        "longname": "ApiPivotTable#RemoveField",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15035,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/RemoveField.js"
        ]
    },
    {
        "comment": "/**\n\t * The direction to move the pivot table field.\n\t * @typedef { \"Up\" | \"Down\" | \"Begin\" | \"End\" } PivotMoveFieldType\n\t */",
        "description": "The direction to move the pivot table field.",
        "name": "PivotMoveFieldType",
        "longname": "PivotMoveFieldType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 15042,
            "columnno": 1
        },
        "properties": null,
        "see": null,
        "type": {
            "names": [
                "\"Up\"",
                "\"Down\"",
                "\"Begin\"",
                "\"End\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"Up\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Down\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Begin\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"End\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * The pivot field orientation type.\n\t * @typedef {\"Rows\" | \"Columns\" | \"Filters\" | \"Values\" | \"Hidden\" } PivotFieldOrientationType\n\t */",
        "description": "The pivot field orientation type.",
        "name": "PivotFieldOrientationType",
        "longname": "PivotFieldOrientationType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 15046,
            "columnno": 1
        },
        "properties": null,
        "see": null,
        "type": {
            "names": [
                "\"Rows\"",
                "\"Columns\"",
                "\"Filters\"",
                "\"Values\"",
                "\"Hidden\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"Rows\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Columns\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Filters\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Values\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Hidden\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Moves the specified field from one category to another.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number | string} identifier - The index number or name of the field.\n\t * @param {PivotMoveFieldType | PivotFieldOrientationType} type - The direction to move the pivot table field,\n\t * or the pivot field orientation type.\n\t * @param {number} [index] - The field index in a new category.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/MoveField.js\n\t */",
        "description": "Moves the specified field from one category to another.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nApi.GetActiveSheet().GetRange('F4').SetValue('Style field will be moved in columns soon');\n\nsetTimeout(function () {\n\tpivotTable.MoveField('Style', 'Columns');\n}, 5000);\n\n```",
        "memberof": "ApiPivotTable",
        "params": [
            {
                "type": {
                    "names": [
                        "number",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "identifier",
                "description": "The index number or name of the field.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "PivotMoveFieldType",
                        "PivotFieldOrientationType"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "PivotMoveFieldType"
                            },
                            {
                                "type": "NameExpression",
                                "name": "PivotFieldOrientationType"
                            }
                        ]
                    }
                },
                "name": "type",
                "description": "The direction to move the pivot table field,\nor the pivot field orientation type.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "index",
                "description": "The field index in a new category.",
                "optional": true,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "MoveField",
        "longname": "ApiPivotTable#MoveField",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15062,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/MoveField.js"
        ]
    },
    {
        "comment": "/**\n\t * Selects the current pivot table.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/Select.js\n\t */",
        "description": "Selects the current pivot table.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\tcolumns: 'Region',\n\trows: 'Style',\n});\n\npivotTable.AddDataField('Price');\n\npivotTable.Select();\n\n```",
        "memberof": "ApiPivotTable",
        "params": null,
        "returns": null,
        "name": "Select",
        "longname": "ApiPivotTable#Select",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15075,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/Select.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a collection that is currently displayed as column fields in the pivot table.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number | string | undefined} field - The name or index of the field to be returned.\n\t * @returns {ApiPivotField[]}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/GetColumnFields.js\n\t */",
        "description": "Returns a collection that is currently displayed as column fields in the pivot table.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddDataField('Price');\n\npivotTable.AddFields({\n    columns: 'Region',\n    rows: 'Style',\n});\n\nlet pivotWorksheet = Api.GetActiveSheet();\npivotWorksheet.GetRange('A9').SetValue('Column Fields');\n\nlet pivotFields = pivotTable.GetColumnFields();\nfor (let i = 0; i < pivotFields.length; i += 1) {\n    let cell = pivotWorksheet.GetRangeByNumber(8 + i, 1);\n    cell.SetValue(pivotFields[i].GetName());\n}\n\n```",
        "memberof": "ApiPivotTable",
        "params": [
            {
                "type": {
                    "names": [
                        "number",
                        "string",
                        "undefined"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "UndefinedLiteral"
                            }
                        ]
                    }
                },
                "name": "field",
                "description": "The name or index of the field to be returned.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ApiPivotField>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiPivotField",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetColumnFields",
        "longname": "ApiPivotTable#GetColumnFields",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15090,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/GetColumnFields.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a collection that represents either a single pivot table data field\n\t * or a collection of all visible data fields.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number | string |undefined} field - The name or index of the field to be returned.\n\t * @returns {ApiPivotDataField[] | ApiPivotDataField | null}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/GetDataFields.js\n\t */",
        "description": "Returns a collection that represents either a single pivot table data field\nor a collection of all visible data fields.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\tcolumns: 'Region',\n\trows: 'Style',\n});\n\npivotTable.AddDataField('Price');\npivotTable.AddDataField('Price');\n\nlet dataFields = pivotTable.GetDataFields();\nfor (let i = 0; i < dataFields.length; i += 1) {\n\tdataFields[i].SetName('Count of Price' + (i + 1));\n\tdataFields[i].SetFunction('Count');\n}\n\n\n```",
        "memberof": "ApiPivotTable",
        "params": [
            {
                "type": {
                    "names": [
                        "number",
                        "string",
                        "undefined"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "UndefinedLiteral"
                            }
                        ]
                    }
                },
                "name": "field",
                "description": "The name or index of the field to be returned.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ApiPivotDataField>",
                        "ApiPivotDataField",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "ApiPivotDataField",
                                        "type": "NameExpression"
                                    }
                                ]
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiPivotDataField"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetDataFields",
        "longname": "ApiPivotTable#GetDataFields",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15115,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/GetDataFields.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns an array that represents all the hidden fields in the pivot table.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiPivotField[]}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/GetHiddenFields.js\n\t */",
        "description": "Returns an array that represents all the hidden fields in the pivot table.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\tcolumns: 'Region',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\npivotWorksheet.GetRange('A9').SetValue('Hidden Fields');\n\nlet hiddenFields = pivotTable.GetHiddenFields();\nfor (let i = 0; i < hiddenFields.length; i += 1) {\n\tlet cell = pivotWorksheet.GetRangeByNumber(8 + i, 1);\n\tcell.SetValue(hiddenFields[i].GetName());\n}\n```",
        "memberof": "ApiPivotTable",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ApiPivotField>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiPivotField",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetHiddenFields",
        "longname": "ApiPivotTable#GetHiddenFields",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15154,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/GetHiddenFields.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns an array that represents all the visible fields in the pivot table.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiPivotField[]}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/GetVisibleFields.js\n\t */",
        "description": "Returns an array that represents all the visible fields in the pivot table.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\tcolumns: 'Region',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\npivotWorksheet.GetRange('A9').SetValue('Visible Fields');\n\nlet visibleFields = pivotTable.GetVisibleFields();\nfor (let i = 0; i < visibleFields.length; i += 1) {\n\tlet cell = pivotWorksheet.GetRangeByNumber(8 + i, 1);\n\tcell.SetValue(visibleFields[i].GetName());\n}\n\n```",
        "memberof": "ApiPivotTable",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ApiPivotField>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiPivotField",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetVisibleFields",
        "longname": "ApiPivotTable#GetVisibleFields",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15178,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/GetVisibleFields.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a collection that represents either a single pivot table page field\n\t * or a collection of all visible page fields.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number | string |undefined} field - The name or index of the field to be returned.\n\t * @returns {ApiPivotField[]}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/GetPageFields.js\n\t */",
        "description": "Returns a collection that represents either a single pivot table page field\nor a collection of all visible page fields.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\tcolumns: 'Region',\n\tpages: 'Style'\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\npivotWorksheet.GetRange('A9').SetValue('Page Fields');\n\nlet pageFields = pivotTable.GetPageFields();\nfor (let i = 0; i < pageFields.length; i += 1) {\n\tlet cell = pivotWorksheet.GetRangeByNumber(8 + i, 1);\n\tcell.SetValue(pageFields[i].GetName());\n}\n\n```",
        "memberof": "ApiPivotTable",
        "params": [
            {
                "type": {
                    "names": [
                        "number",
                        "string",
                        "undefined"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "UndefinedLiteral"
                            }
                        ]
                    }
                },
                "name": "field",
                "description": "The name or index of the field to be returned.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ApiPivotField>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiPivotField",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetPageFields",
        "longname": "ApiPivotTable#GetPageFields",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15205,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/GetPageFields.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a collection that is currently displayed as row fields in the pivot table.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number | string |undefined} field - The name or index of the field to be returned.\n\t * @returns {ApiPivotField[]}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/GetRowFields.js\n\t */",
        "description": "Returns a collection that is currently displayed as row fields in the pivot table.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\npivotWorksheet.GetRange('A9').SetValue('Row Fields');\n\nlet rowFields = pivotTable.GetRowFields();\nfor (let i = 0; i < rowFields.length; i += 1) {\n\tlet cell = pivotWorksheet.GetRangeByNumber(8 + i, 1);\n\tcell.SetValue(rowFields[i].GetName());\n}\n\n```",
        "memberof": "ApiPivotTable",
        "params": [
            {
                "type": {
                    "names": [
                        "number",
                        "string",
                        "undefined"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "UndefinedLiteral"
                            }
                        ]
                    }
                },
                "name": "field",
                "description": "The name or index of the field to be returned.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ApiPivotField>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "ApiPivotField",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetRowFields",
        "longname": "ApiPivotTable#GetRowFields",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15229,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/GetRowFields.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the pivot table name.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/GetName.js\n\t */",
        "description": "Returns the pivot table name.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\npivotWorksheet.GetRange('A9').SetValue('Pivot Table name');\npivotWorksheet.GetRange('B9').SetValue(pivotTable.GetName());\n\n```",
        "memberof": "ApiPivotTable",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetName",
        "longname": "ApiPivotTable#GetName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15252,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/GetName.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the pivot table name.\n\t * @memberof ApiPivotTable\n\t * @param {string} name - The pivot table name.\n\t * @typeofeditors [\"CSE\"]\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/SetName.js\n\t */",
        "description": "Sets the pivot table name.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\npivotWorksheet.GetRange('A9').SetValue('Pivot Table name');\npivotWorksheet.GetRange('B9').SetValue(pivotTable.GetName());\n\npivotWorksheet.GetRange('A11').SetValue('New Pivot Table name');\npivotTable.SetName('My Pivot Table');\npivotWorksheet.GetRange('B11').SetValue(pivotTable.GetName());\n```",
        "memberof": "ApiPivotTable",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "name",
                "description": "The pivot table name.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetName",
        "longname": "ApiPivotTable#SetName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15264,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/SetName.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the <b>Grand Totals</b> setting of the pivot table columns.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/GetColumnGrand.js\n\t */",
        "description": "Returns the <b>Grand Totals</b> setting of the pivot table columns.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddDataField('Price');\n\npivotTable.AddFields({\n\tcolumns: 'Region',\n\trows: 'Style',\n});\n\nlet pivotWorksheet = Api.GetActiveSheet();\npivotWorksheet.GetRange('A9').SetValue('Is Column Grand');\npivotWorksheet.GetRange('B9').SetValue(pivotTable.GetColumnGrand());\n```",
        "memberof": "ApiPivotTable",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "GetColumnGrand",
        "longname": "ApiPivotTable#GetColumnGrand",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15291,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/GetColumnGrand.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the <b>Grand Totals</b> setting to the pivot table columns.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} show - Specifies whether to display the grand totals for columns.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/SetColumnGrand.js\n\t */",
        "description": "Sets the <b>Grand Totals</b> setting to the pivot table columns.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddDataField('Price');\n\npivotTable.AddFields({\n\tcolumns: 'Region',\n\trows: 'Style',\n});\n\npivotTable.SetColumnGrand(false);\n\nlet pivotWorksheet = Api.GetActiveSheet();\npivotWorksheet.GetRange('A9').SetValue('Is Column Grand');\npivotWorksheet.GetRange('B9').SetValue(pivotTable.GetColumnGrand());\n```",
        "memberof": "ApiPivotTable",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "show",
                "description": "Specifies whether to display the grand totals for columns.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetColumnGrand",
        "longname": "ApiPivotTable#SetColumnGrand",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15303,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/SetColumnGrand.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the <b>Grand Totals</b> setting of the pivot table rows.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/GetRowGrand.js\n\t */",
        "description": "Returns the <b>Grand Totals</b> setting of the pivot table rows.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddDataField('Price');\n\npivotTable.AddFields({\n\tcolumns: 'Region',\n\trows: 'Style',\n});\n\nlet pivotWorksheet = Api.GetActiveSheet();\npivotWorksheet.GetRange('A9').SetValue('Is Row Grand');\npivotWorksheet.GetRange('B9').SetValue(pivotTable.GetRowGrand());\n```",
        "memberof": "ApiPivotTable",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "GetRowGrand",
        "longname": "ApiPivotTable#GetRowGrand",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15330,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/GetRowGrand.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the <b>Grand Totals</b> setting to the pivot table rows.\n\t * @memberof ApiPivotTable\n\t * @param {boolean} show - Specifies whether to display the grand totals for rows.\n\t * @typeofeditors [\"CSE\"]\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/SetRowGrand.js\n\t */",
        "description": "Sets the <b>Grand Totals</b> setting to the pivot table rows.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddDataField('Price');\n\npivotTable.AddFields({\n\tcolumns: 'Region',\n\trows: 'Style',\n});\n\npivotTable.SetRowGrand(false);\n\nlet pivotWorksheet = Api.GetActiveSheet();\npivotWorksheet.GetRange('A9').SetValue('Is Row Grand');\npivotWorksheet.GetRange('B9').SetValue(pivotTable.GetRowGrand());\n```",
        "memberof": "ApiPivotTable",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "show",
                "description": "Specifies whether to display the grand totals for rows.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetRowGrand",
        "longname": "ApiPivotTable#SetRowGrand",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15342,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/SetRowGrand.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies how the report filter fields are located.\n\t * @typedef {\"OverThenDown\" | \"DownThenOver\"} FieldsInReportFilterType\n\t */",
        "description": "Specifies how the report filter fields are located.",
        "name": "FieldsInReportFilterType",
        "longname": "FieldsInReportFilterType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 15361,
            "columnno": 1
        },
        "properties": null,
        "see": null,
        "type": {
            "names": [
                "\"OverThenDown\"",
                "\"DownThenOver\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"OverThenDown\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"DownThenOver\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Returns the pivot table display fields in the report filter area settings.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {PivotTableFilterAreaInfo}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/GetDisplayFieldsInReportFilterArea.js\n\t */",
        "description": "Returns the pivot table display fields in the report filter area settings.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddDataField('Price');\n\npivotTable.AddFields({\n\tpages: ['Style', 'Region']\n});\n\nconst info = pivotTable.GetDisplayFieldsInReportFilterArea();\n\nlet pivotWorksheet = Api.GetActiveSheet();\npivotWorksheet.GetRange('A9').SetValue('Type');\npivotWorksheet.GetRange('B9').SetValue(info.Type);\n\npivotWorksheet.GetRange('A10').SetValue('ReportFilterFields');\npivotWorksheet.GetRange('B10').SetValue(info.ReportFilterFields);\n```",
        "memberof": "ApiPivotTable",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "PivotTableFilterAreaInfo"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PivotTableFilterAreaInfo"
                    }
                }
            }
        ],
        "name": "GetDisplayFieldsInReportFilterArea",
        "longname": "ApiPivotTable#GetDisplayFieldsInReportFilterArea",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15374,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/GetDisplayFieldsInReportFilterArea.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the pivot table display fields in the report filter area settings.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @param {FieldsInReportFilterType} type - Specifies how the report filter fields are located.\n\t * @param {number} fields - A number of the report filter fields.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/SetDisplayFieldsInReportFilterArea.js\n\t */",
        "description": "Sets the pivot table display fields in the report filter area settings.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddDataField('Price');\n\npivotTable.AddFields({\n\tpages: ['Region','Style', 'Price'],\n});\n\npivotTable.SetDisplayFieldsInReportFilterArea('OverThenDown', 3);\nconst info = pivotTable.GetDisplayFieldsInReportFilterArea();\n\nlet pivotWorksheet = Api.GetActiveSheet();\npivotWorksheet.GetRange('A9').SetValue('Type');\npivotWorksheet.GetRange('B9').SetValue(info.Type);\n\npivotWorksheet.GetRange('A10').SetValue('ReportFilterFields');\npivotWorksheet.GetRange('B10').SetValue(info.ReportFilterFields);\n```",
        "memberof": "ApiPivotTable",
        "params": [
            {
                "type": {
                    "names": [
                        "FieldsInReportFilterType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "FieldsInReportFilterType"
                    }
                },
                "name": "type",
                "description": "Specifies how the report filter fields are located.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "fields",
                "description": "A number of the report filter fields.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetDisplayFieldsInReportFilterArea",
        "longname": "ApiPivotTable#SetDisplayFieldsInReportFilterArea",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15390,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/SetDisplayFieldsInReportFilterArea.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the setting which specifies whether to display field headers for rows and columns.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/GetDisplayFieldCaptions.js\n\t */",
        "description": "Returns the setting which specifies whether to display field headers for rows and columns.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddDataField('Price');\n\npivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});\n\nlet pivotWorksheet = Api.GetActiveSheet();\npivotWorksheet.GetRange('A9').SetValue('Disaply field captions');\npivotWorksheet.GetRange('B9').SetValue(pivotTable.GetDisplayFieldCaptions());\n\n```",
        "memberof": "ApiPivotTable",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "GetDisplayFieldCaptions",
        "longname": "ApiPivotTable#GetDisplayFieldCaptions",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15424,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/GetDisplayFieldCaptions.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the setting which specifies whether to display field headers for rows and columns.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} show - Specifies whether to display field headers for rows and columns.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/SetDisplayFieldCaptions.js\n\t */",
        "description": "Returns the setting which specifies whether to display field headers for rows and columns.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddDataField('Price');\n\npivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});\n\npivotTable.SetDisplayFieldCaptions(false);\n\nlet pivotWorksheet = Api.GetActiveSheet();\npivotWorksheet.GetRange('A9').SetValue('Disaply field captions');\npivotWorksheet.GetRange('B9').SetValue(pivotTable.GetDisplayFieldCaptions());\n\n```",
        "memberof": "ApiPivotTable",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "show",
                "description": "Specifies whether to display field headers for rows and columns.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetDisplayFieldCaptions",
        "longname": "ApiPivotTable#SetDisplayFieldCaptions",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15436,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/SetDisplayFieldCaptions.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the pivot table title.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/GetTitle.js\n\t */",
        "description": "Returns the pivot table title.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\npivotWorksheet.GetRange('A9').SetValue('Pivot Table title');\npivotWorksheet.GetRange('B9').SetValue(pivotTable.GetTitle());\n\n```",
        "memberof": "ApiPivotTable",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetTitle",
        "longname": "ApiPivotTable#GetTitle",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15463,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/GetTitle.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the pivot table title.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} title - The pivot table title.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/SetTitle.js\n\t */",
        "description": "Sets the pivot table title.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\npivotWorksheet.GetRange('A9').SetValue('Pivot Table title');\npivotWorksheet.GetRange('B9').SetValue(pivotTable.GetTitle());\n\npivotWorksheet.GetRange('A11').SetValue('New Pivot Table title');\npivotTable.SetTitle('My Pivot Table');\npivotWorksheet.GetRange('B11').SetValue(pivotTable.GetTitle());\n```",
        "memberof": "ApiPivotTable",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "title",
                "description": "The pivot table title.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetTitle",
        "longname": "ApiPivotTable#SetTitle",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15475,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/SetTitle.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the pivot table description.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/GetDescription.js\n\t */",
        "description": "Returns the pivot table description.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\npivotWorksheet.GetRange('A9').SetValue('Default description');\npivotWorksheet.GetRange('B9').SetValue(pivotTable.GetDescription());\n\npivotWorksheet.GetRange('A11').SetValue('My description');\npivotTable.SetDescription('Awesome description');\npivotWorksheet.GetRange('B11').SetValue(pivotTable.GetDescription());\n```",
        "memberof": "ApiPivotTable",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetDescription",
        "longname": "ApiPivotTable#GetDescription",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15502,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/GetDescription.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the pivot table description.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} description - The pivot table description.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/SetDescription.js\n\t */",
        "description": "Sets the pivot table description.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\npivotWorksheet.GetRange('A9').SetValue('Default description');\npivotWorksheet.GetRange('B9').SetValue(pivotTable.GetDescription());\n\npivotWorksheet.GetRange('A11').SetValue('My description');\npivotTable.SetDescription('Awesome description');\npivotWorksheet.GetRange('B11').SetValue(pivotTable.GetDescription());\n```",
        "memberof": "ApiPivotTable",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "description",
                "description": "The pivot table description.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetDescription",
        "longname": "ApiPivotTable#SetDescription",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15514,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/SetDescription.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the pivot table style name.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/GetStyleName.js\n\t */",
        "description": "Returns the pivot table style name.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\npivotWorksheet.GetRange('A9').SetValue('Style name');\npivotWorksheet.GetRange('B9').SetValue(pivotTable.GetStyleName());\n\n```",
        "memberof": "ApiPivotTable",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetStyleName",
        "longname": "ApiPivotTable#GetStyleName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15541,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/GetStyleName.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the pivot table style name.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} name - The pivot table style name.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/SetStyleName.js\n\t */",
        "description": "Sets the pivot table style name.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\npivotWorksheet.GetRange('B9').SetValue('Pivot Table Style will change soon');\n\nsetTimeout(function () {\n\tpivotTable.SetStyleName('PivotStyleLight14');\n}, 5000);\n\n```",
        "memberof": "ApiPivotTable",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "name",
                "description": "The pivot table style name.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetStyleName",
        "longname": "ApiPivotTable#SetStyleName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15553,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/SetStyleName.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the setting which specifies whether the row headers of the pivot table will be highlighted with the special formatting.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/GetTableStyleRowHeaders.js\n\t */",
        "description": "Returns the setting which specifies whether the row headers of the pivot table will be highlighted with the special formatting.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style']\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\n\npivotWorksheet.GetRange('A12').SetValue('Table Style Row Headers');\npivotWorksheet.GetRange('B12').SetValue(pivotTable.GetTableStyleRowHeaders());\n\n```",
        "memberof": "ApiPivotTable",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "GetTableStyleRowHeaders",
        "longname": "ApiPivotTable#GetTableStyleRowHeaders",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15578,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/GetTableStyleRowHeaders.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the setting which specifies whether the row headers of the pivot table will be highlighted with the special formatting.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} show - Specifies whether the row headers of the pivot table will be highlighted with the special formatting.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/SetTableStyleRowHeaders.js\n\t */",
        "description": "Sets the setting which specifies whether the row headers of the pivot table will be highlighted with the special formatting.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\npivotTable.SetTableStyleRowHeaders(false);\n\nlet pivotWorksheet = Api.GetActiveSheet();\n\npivotWorksheet.GetRange('A12').SetValue('Table Style Row Headers');\npivotWorksheet.GetRange('B12').SetValue(pivotTable.GetTableStyleRowHeaders());\n\n```",
        "memberof": "ApiPivotTable",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "show",
                "description": "Specifies whether the row headers of the pivot table will be highlighted with the special formatting.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetTableStyleRowHeaders",
        "longname": "ApiPivotTable#SetTableStyleRowHeaders",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15590,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/SetTableStyleRowHeaders.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the setting which specifies whether the column headers of the pivot table will be highlighted with the special formatting.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/GetTableStyleColumnHeaders.js\n\t */",
        "description": "Returns the setting which specifies whether the column headers of the pivot table will be highlighted with the special formatting.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\tcolumns: ['Region', 'Style']\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\n\npivotWorksheet.GetRange('A12').SetValue('Table Style Column Headers');\npivotWorksheet.GetRange('B12').SetValue(pivotTable.GetTableStyleColumnHeaders());\n\n```",
        "memberof": "ApiPivotTable",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "GetTableStyleColumnHeaders",
        "longname": "ApiPivotTable#GetTableStyleColumnHeaders",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15615,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/GetTableStyleColumnHeaders.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the setting which specifies whether the column headers of the pivot table will be highlighted with the special formatting.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} show - Specifies whether the column headers of the pivot table will be highlighted with the special formatting.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/SetTableStyleColumnHeaders.js\n\t */",
        "description": "Sets the setting which specifies whether the column headers of the pivot table will be highlighted with the special formatting.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\tcolumns: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\npivotTable.SetTableStyleColumnHeaders(false);\n\nlet pivotWorksheet = Api.GetActiveSheet();\n\npivotWorksheet.GetRange('A12').SetValue('Table Style Column Headers');\npivotWorksheet.GetRange('B12').SetValue(pivotTable.GetTableStyleColumnHeaders());\n\n```",
        "memberof": "ApiPivotTable",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "show",
                "description": "Specifies whether the column headers of the pivot table will be highlighted with the special formatting.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetTableStyleColumnHeaders",
        "longname": "ApiPivotTable#SetTableStyleColumnHeaders",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15627,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/SetTableStyleColumnHeaders.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the setting which specifies whether the background color alternation for odd and even rows will be enabled for the pivot table.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/GetTableStyleRowStripes.js\n\t */",
        "description": "Returns the setting which specifies whether the background color alternation for odd and even rows will be enabled for the pivot table.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\n\npivotWorksheet.GetRange('A12').SetValue('Table Style Row Stripes');\npivotWorksheet.GetRange('B12').SetValue(pivotTable.GetTableStyleRowStripes());\n\n```",
        "memberof": "ApiPivotTable",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "GetTableStyleRowStripes",
        "longname": "ApiPivotTable#GetTableStyleRowStripes",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15652,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/GetTableStyleRowStripes.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the setting which specifies whether the background color alternation for odd and even rows will be enabled for the pivot table.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} show - Specifies whether the background color alternation for odd and even rows will be enabled for the pivot table.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/SetTableStyleRowStripes.js\n\t */",
        "description": "Sets the setting which specifies whether the background color alternation for odd and even rows will be enabled for the pivot table.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\npivotTable.SetTableStyleRowStripes(true);\n\nlet pivotWorksheet = Api.GetActiveSheet();\n\npivotWorksheet.GetRange('A12').SetValue('Table Style Row Stripes');\npivotWorksheet.GetRange('B12').SetValue(pivotTable.GetTableStyleRowStripes());\n\n```",
        "memberof": "ApiPivotTable",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "show",
                "description": "Specifies whether the background color alternation for odd and even rows will be enabled for the pivot table.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetTableStyleRowStripes",
        "longname": "ApiPivotTable#SetTableStyleRowStripes",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15664,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/SetTableStyleRowStripes.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the setting which specifies whether the background color alternation for odd and even columns will be enabled for the pivot table.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/GetTableStyleColumnStripes.js\n\t */",
        "description": "Returns the setting which specifies whether the background color alternation for odd and even columns will be enabled for the pivot table.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\tcolumns: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\n\npivotWorksheet.GetRange('A12').SetValue('Table Style Column Stripes');\npivotWorksheet.GetRange('B12').SetValue(pivotTable.GetTableStyleColumnStripes());\n\n```",
        "memberof": "ApiPivotTable",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "GetTableStyleColumnStripes",
        "longname": "ApiPivotTable#GetTableStyleColumnStripes",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15689,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/GetTableStyleColumnStripes.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the setting which specifies whether the background color alternation for odd and even columns will be enabled for the pivot table.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} show - Specifies whether the background color alternation for odd and even columns will be enabled for the pivot table.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/SetTableStyleColumnStripes.js\n\t */",
        "description": "Sets the setting which specifies whether the background color alternation for odd and even columns will be enabled for the pivot table.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\tcolumns: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\npivotTable.SetTableStyleColumnStripes(true);\n\nlet pivotWorksheet = Api.GetActiveSheet();\n\npivotWorksheet.GetRange('A12').SetValue('Table Style Column Stripes');\npivotWorksheet.GetRange('B12').SetValue(pivotTable.GetTableStyleColumnStripes());\n\n```",
        "memberof": "ApiPivotTable",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "show",
                "description": "Specifies whether the background color alternation for odd and even columns will be enabled for the pivot table.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetTableStyleColumnStripes",
        "longname": "ApiPivotTable#SetTableStyleColumnStripes",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15701,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/SetTableStyleColumnStripes.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the source range for the pivot table.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiRange}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/GetSource.js\n\t */",
        "description": "Returns the source range for the pivot table.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\tcolumns: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\n\npivotWorksheet.GetRange('A12').SetValue('Source Range');\npivotWorksheet.GetRange('B12').SetValue(pivotTable.GetSource().GetAddress(true, true));\n\n```",
        "memberof": "ApiPivotTable",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                }
            }
        ],
        "name": "GetSource",
        "longname": "ApiPivotTable#GetSource",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15726,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/GetSource.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the source range for the pivot table.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @param {ApiRange} source - The range where the pivot table will be located.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/SetSource.js\n\t */",
        "description": "Sets the source range for the pivot table.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\n\npivotWorksheet.GetRange('A12').SetValue('Source Range');\npivotWorksheet.GetRange('B12').SetValue(pivotTable.GetSource().GetAddress(true, true));\n\nApi.GetActiveSheet().GetRange('D12').SetValue('Source range will be changed soon');\n\nsetTimeout(function () {\n\tpivotTable.SetSource(worksheet.GetRange('C1:D5'));\n}, 5000);\n\n```",
        "memberof": "ApiPivotTable",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                },
                "name": "source",
                "description": "The range where the pivot table will be located.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetSource",
        "longname": "ApiPivotTable#SetSource",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15739,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/SetSource.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a Range object that represents the column area in the pivot table report.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiRange | null}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/GetColumnRange.js\n\t */",
        "description": "Returns a Range object that represents the column area in the pivot table report.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});\n\npivotTable.AddDataField('Price');\n\npivotTable.GetColumnRange().Select();\n\n```",
        "memberof": "ApiPivotTable",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetColumnRange",
        "longname": "ApiPivotTable#GetColumnRange",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15767,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/GetColumnRange.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a Range object that represents the row area in the pivot table report.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiRange | null}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/GetRowRange.js\n\t */",
        "description": "Returns a Range object that represents the row area in the pivot table report.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});\n\npivotTable.AddDataField('Price');\n\npivotTable.GetRowRange().Select();\n\n```",
        "memberof": "ApiPivotTable",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetRowRange",
        "longname": "ApiPivotTable#GetRowRange",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15789,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/GetRowRange.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a Range object that represents the range of values in the pivot table.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiRange}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/GetDataBodyRange.js\n\t */",
        "description": "Returns a Range object that represents the range of values in the pivot table.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});\n\npivotTable.AddDataField('Price');\n\npivotTable.GetDataBodyRange().Select();\n```",
        "memberof": "ApiPivotTable",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRange"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiRange"
                    }
                }
            }
        ],
        "name": "GetDataBodyRange",
        "longname": "ApiPivotTable#GetDataBodyRange",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15811,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/GetDataBodyRange.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a Range object that represents the entire pivot table report, but doesn't include page fields.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiRange | null}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/GetTableRange1.js\n\t */",
        "description": "Returns a Range object that represents the entire pivot table report, but doesn't include page fields.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: 'Region',\n\tpages: 'Style',\n});\n\npivotTable.AddDataField('Price');\n\npivotTable.GetTableRange1().Select();\n```",
        "memberof": "ApiPivotTable",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetTableRange1",
        "longname": "ApiPivotTable#GetTableRange1",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15833,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/GetTableRange1.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a Range object that represents the entire pivot table report, including page fields.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiRange | null}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/GetTableRange2.js\n\t */",
        "description": "Returns a Range object that represents the entire pivot table report, including page fields.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: 'Region',\n\tpages: 'Style',\n});\n\npivotTable.AddDataField('Price');\n\npivotTable.GetTableRange2().Select();\n```",
        "memberof": "ApiPivotTable",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiRange",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiRange"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetTableRange2",
        "longname": "ApiPivotTable#GetTableRange2",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15852,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/GetTableRange2.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the text string label that is displayed in the grand total column or row heading in the specified pivot table report.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/GetGrandTotalName.js\n\t */",
        "description": "Returns the text string label that is displayed in the grand total column or row heading in the specified pivot table report.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\npivotWorksheet.GetRange('A9').SetValue('Grand Total name');\npivotWorksheet.GetRange('B9').SetValue(pivotTable.GetGrandTotalName());\n\n```",
        "memberof": "ApiPivotTable",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetGrandTotalName",
        "longname": "ApiPivotTable#GetGrandTotalName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15883,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/GetGrandTotalName.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the text string label that is displayed in the grand total column or row heading in the specified pivot table report.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} name - The grand total name.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/SetGrandTotalName.js\n\t */",
        "description": "Sets the text string label that is displayed in the grand total column or row heading in the specified pivot table report.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\npivotWorksheet.GetRange('A9').SetValue('Grand Total name');\npivotWorksheet.GetRange('B9').SetValue(pivotTable.GetGrandTotalName());\n\npivotWorksheet.GetRange('A11').SetValue('New Grand total name');\npivotTable.SetGrandTotalName('My GT name');\npivotWorksheet.GetRange('B11').SetValue(pivotTable.GetGrandTotalName());\n```",
        "memberof": "ApiPivotTable",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "name",
                "description": "The grand total name.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetGrandTotalName",
        "longname": "ApiPivotTable#SetGrandTotalName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15895,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/SetGrandTotalName.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the setting which specifies whether to insert blank rows after each item.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} insert - Specifies whether to insert blank rows after each item.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/SetLayoutBlankLine.js\n\t */",
        "description": "Sets the setting which specifies whether to insert blank rows after each item.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\npivotTable.SetLayoutBlankLine(true);\n\n```",
        "memberof": "ApiPivotTable",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "insert",
                "description": "Specifies whether to insert blank rows after each item.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetLayoutBlankLine",
        "longname": "ApiPivotTable#SetLayoutBlankLine",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15921,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/SetLayoutBlankLine.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the setting which specifies whether to show subtotals.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} show - Specifies whether to show subtotals.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/SetLayoutSubtotals.js\n\t */",
        "description": "Sets the setting which specifies whether to show subtotals.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\npivotTable.SetLayoutSubtotals(false);\n```",
        "memberof": "ApiPivotTable",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "show",
                "description": "Specifies whether to show subtotals.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetLayoutSubtotals",
        "longname": "ApiPivotTable#SetLayoutSubtotals",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15945,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/SetLayoutSubtotals.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the parent object for the current pivot table.\n\t * @memberof ApiPivotTable\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiWorksheet} - The parent object for the current pivot table.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotTable/Methods/GetParent.js\n\t */",
        "description": "Returns the parent object for the current pivot table.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});\n\npivotTable.AddDataField('Price');\n\npivotTable.GetParent().GetRange('A9').SetValue('Parent name');\npivotTable.GetParent().GetRange('B9').SetValue(pivotTable.GetParent().GetName());\n\n```",
        "memberof": "ApiPivotTable",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiWorksheet"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiWorksheet"
                    }
                }
            }
        ],
        "name": "GetParent",
        "longname": "ApiPivotTable#GetParent",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15969,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotTable/Methods/GetParent.js"
        ]
    },
    {
        "comment": "/**\n\t * Removes  the current data field from the category.\n\t * @memberof ApiPivotDataField\n\t * @typeofeditors [\"CSE\"]\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotDataField/Methods/Remove.js\n\t */",
        "description": "Removes  the current data field from the category.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet dataField = pivotTable.GetDataFields('Sum of Price');\n\npivotWorksheet.GetRange('A12').SetValue('Sum of Price will be deleted soon');\n\nsetTimeout(function() {\n    dataField.Remove();\n}, 5000);\n\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": null,
        "name": "Remove",
        "longname": "ApiPivotDataField#Remove",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 15994,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotDataField/Methods/Remove.js"
        ]
    },
    {
        "comment": "/**\n\t * Moves the current data field inside the category.\n\t * @memberof ApiPivotDataField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {PivotMoveFieldType | PivotFieldOrientationType} type - The direction to move the pivot table field,\n\t * or the pivot field orientation type.\n\t * @param {number} [index] - The index of the data field in a new category.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotDataField/Methods/Move.js\n\t */",
        "description": "Moves the current data field inside the category.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet dataField = pivotTable.GetDataFields('Sum of Price');\n\npivotWorksheet.GetRange('A16').SetValue('Sum of Price will be moved soon');\n\nsetTimeout(function() {\n    dataField.Move(\"Rows\");\n}, 5000);\n\n```",
        "memberof": "ApiPivotDataField",
        "params": [
            {
                "type": {
                    "names": [
                        "PivotMoveFieldType",
                        "PivotFieldOrientationType"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "PivotMoveFieldType"
                            },
                            {
                                "type": "NameExpression",
                                "name": "PivotFieldOrientationType"
                            }
                        ]
                    }
                },
                "name": "type",
                "description": "The direction to move the pivot table field,\nor the pivot field orientation type.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "index",
                "description": "The index of the data field in a new category.",
                "optional": true,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "Move",
        "longname": "ApiPivotDataField#Move",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16007,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotDataField/Methods/Move.js"
        ]
    },
    {
        "comment": "/**\n\t * The type of calculation to perform on the data field items.\n\t * @typedef {\"Average\" | \"CountNumbers\" | \"Count\" | \"Max\" | \"Min\" | \"Product\" |\n\t * \"StdDev\" | \"StdDevP\" | \"Sum\" | \"Var\" | \"VarP\"} DataConsolidateFunctionType\n\t */",
        "description": "The type of calculation to perform on the data field items.",
        "name": "DataConsolidateFunctionType",
        "longname": "DataConsolidateFunctionType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 16050,
            "columnno": 1
        },
        "properties": null,
        "see": null,
        "type": {
            "names": [
                "\"Average\"",
                "\"CountNumbers\"",
                "\"Count\"",
                "\"Max\"",
                "\"Min\"",
                "\"Product\"",
                "\"StdDev\"",
                "\"StdDevP\"",
                "\"Sum\"",
                "\"Var\"",
                "\"VarP\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"Average\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"CountNumbers\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Count\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Max\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Min\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Product\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"StdDev\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"StdDevP\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Sum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Var\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"VarP\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Sets a function to the current data field.\n\t * @memberof ApiPivotDataField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {DataConsolidateFunctionType} func - The function to perform in the added data field.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotDataField/Methods/SetFunction.js\n\t */",
        "description": "Sets a function to the current data field.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet dataField = pivotTable.GetDataFields('Sum of Price');\ndataField.SetFunction('Count');\n\n```",
        "memberof": "ApiPivotDataField",
        "params": [
            {
                "type": {
                    "names": [
                        "DataConsolidateFunctionType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "DataConsolidateFunctionType"
                    }
                },
                "name": "func",
                "description": "The function to perform in the added data field.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetFunction",
        "longname": "ApiPivotDataField#SetFunction",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16064,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotDataField/Methods/SetFunction.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a function performed in the data field.\n\t * @memberof ApiPivotDataField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {DataConsolidateFunctionType} func - The function performed in the added data field.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotDataField/Methods/GetFunction.js\n\t */",
        "description": "Returns a function performed in the data field.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\n\nlet sumDataField = pivotTable.AddDataField('Price');\nlet countDataField = pivotTable.AddDataField('Price');\ncountDataField.SetFunction('Count');\n\nlet pivotWorksheet = Api.GetActiveSheet();\n\npivotWorksheet.GetRange('A15').SetValue('Functions:');\npivotWorksheet.GetRange('B15').SetValue(sumDataField.GetFunction());\npivotWorksheet.GetRange('B16').SetValue(countDataField.GetFunction());\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "DataConsolidateFunctionType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "DataConsolidateFunctionType"
                    }
                }
            }
        ],
        "name": "GetFunction",
        "longname": "ApiPivotDataField#GetFunction",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16114,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotDataField/Methods/GetFunction.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a value that represents the data field position within a category.\n\t * @memberof ApiPivotDataField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {number}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotDataField/Methods/GetPosition.js\n\t */",
        "description": "Returns a value that represents the data field position within a category.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\nlet dataField = pivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\n\npivotWorksheet.GetRange('A15').SetValue('Sum of Price2 position:');\npivotWorksheet.GetRange('B15').SetValue(dataField.GetPosition());\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GetPosition",
        "longname": "ApiPivotDataField#GetPosition",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16150,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotDataField/Methods/GetPosition.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets a value that represents the data field position within a category.\n\t * @memberof ApiPivotDataField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number} position - The data field position.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotDataField/Methods/SetPosition.js\n\t */",
        "description": "Sets a value that represents the data field position within a category.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\nlet dataField = pivotTable.AddDataField('Price');\ndataField.SetPosition(1);\n\nlet pivotWorksheet = Api.GetActiveSheet();\n\npivotWorksheet.GetRange('A15').SetValue('Sum of Price2 position:');\npivotWorksheet.GetRange('B15').SetValue(dataField.GetPosition());\n```",
        "memberof": "ApiPivotDataField",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "position",
                "description": "The data field position.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetPosition",
        "longname": "ApiPivotDataField#SetPosition",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16162,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotDataField/Methods/SetPosition.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a data field orientation value that represents the data field location in the specified pivot table report.\n\t * @memberof ApiPivotDataField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {PivotFieldOrientationType}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotDataField/Methods/GetOrientation.js\n\t */",
        "description": "Returns a data field orientation value that represents the data field location in the specified pivot table report.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\nlet dataField = pivotTable.AddDataField('Price');\ndataField.SetPosition(1);\n\nlet pivotWorksheet = Api.GetActiveSheet();\n\npivotWorksheet.GetRange('A15').SetValue('Sum of Price2 orientation:');\npivotWorksheet.GetRange('B15').SetValue(dataField.GetOrientation());\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "PivotFieldOrientationType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PivotFieldOrientationType"
                    }
                }
            }
        ],
        "name": "GetOrientation",
        "longname": "ApiPivotDataField#GetOrientation",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16192,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotDataField/Methods/GetOrientation.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a value representing the name of the specified data field in the pivot table report.\n\t * @memberof ApiPivotDataField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotDataField/Methods/GetValue.js\n\t */",
        "description": "Returns a value representing the name of the specified data field in the pivot table report.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet dataField = pivotTable.GetDataFields('Sum of Price');\n\npivotWorksheet.GetRange('A12').SetValue('The Data field value');\npivotWorksheet.GetRange('B12').SetValue(dataField.GetValue());\n\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetValue",
        "longname": "ApiPivotDataField#GetValue",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16211,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotDataField/Methods/GetValue.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets a value representing the name of the specified data field in the pivot table report.\n\t * @memberof ApiPivotDataField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} name - The name of the specified field in the pivot table report.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotDataField/Methods/SetValue.js\n\t */",
        "description": "Sets a value representing the name of the specified data field in the pivot table report.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet dataField = pivotTable.GetDataFields('Sum of Price');\n\npivotWorksheet.GetRange('A12').SetValue('Data field value');\npivotWorksheet.GetRange('B12').SetValue(dataField.GetValue());\n\ndataField.SetValue('My Sum of Price');\npivotWorksheet.GetRange('A13').SetValue('New Data field value');\npivotWorksheet.GetRange('B13').SetValue(dataField.GetValue());\n\n```",
        "memberof": "ApiPivotDataField",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "name",
                "description": "The name of the specified field in the pivot table report.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetValue",
        "longname": "ApiPivotDataField#SetValue",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16223,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotDataField/Methods/SetValue.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a value that represents the label text for the data field.\n\t * @memberof ApiPivotDataField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotDataField/Methods/GetCaption.js\n\t */",
        "description": "Returns a value that represents the label text for the data field.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet dataField = pivotTable.GetDataFields('Sum of Price');\n\npivotWorksheet.GetRange('A12').SetValue('The Data field caption');\npivotWorksheet.GetRange('B12').SetValue(dataField.GetCaption());\n\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetCaption",
        "longname": "ApiPivotDataField#GetCaption",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16243,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotDataField/Methods/GetCaption.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets a value that represents the label text for the data field.\n\t * @memberof ApiPivotDataField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} caption - The label text for the data field.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotDataField/Methods/SetCaption.js\n\t */",
        "description": "Sets a value that represents the label text for the data field.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet dataField = pivotTable.GetDataFields('Sum of Price');\n\npivotWorksheet.GetRange('A12').SetValue('Data field caption');\npivotWorksheet.GetRange('B12').SetValue(dataField.GetCaption());\n\ndataField.SetCaption('My Sum of Price');\npivotWorksheet.GetRange('A13').SetValue('New Data field caption');\npivotWorksheet.GetRange('B13').SetValue(dataField.GetCaption());\n```",
        "memberof": "ApiPivotDataField",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "caption",
                "description": "The label text for the data field.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetCaption",
        "longname": "ApiPivotDataField#SetCaption",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16254,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotDataField/Methods/SetCaption.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a value representing the object name.\n\t * @memberof ApiPivotDataField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotDataField/Methods/GetName.js\n\t */",
        "description": "Returns a value representing the object name.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet dataField = pivotTable.GetDataFields('Sum of Price');\n\npivotWorksheet.GetRange('A12').SetValue('The Data field name');\npivotWorksheet.GetRange('B12').SetValue(dataField.GetName());\n\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetName",
        "longname": "ApiPivotDataField#GetName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16275,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotDataField/Methods/GetName.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets a value representing the object name.\n\t * @memberof ApiPivotDataField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} name - The object name.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotDataField/Methods/SetName.js\n\t */",
        "description": "Sets a value representing the object name.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet dataField = pivotTable.GetDataFields('Sum of Price');\n\npivotWorksheet.GetRange('A12').SetValue('Data field name');\npivotWorksheet.GetRange('B12').SetValue(dataField.GetName());\n\ndataField.SetName('My Sum of Price');\npivotWorksheet.GetRange('A13').SetValue('New Data field name');\npivotWorksheet.GetRange('B13').SetValue(dataField.GetName());\n\n```",
        "memberof": "ApiPivotDataField",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "name",
                "description": "The object name.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetName",
        "longname": "ApiPivotDataField#SetName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16287,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotDataField/Methods/SetName.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a value that represents the format code for the object.\n\t * @memberof ApiPivotDataField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string | null}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotDataField/Methods/GetNumberFormat.js\n\t */",
        "description": "Returns a value that represents the format code for the object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet dataField = pivotTable.GetDataFields('Sum of Price');\n\npivotWorksheet.GetRange('A15').SetValue('Number format:');\npivotWorksheet.GetRange('B15').SetValue(dataField.GetNumberFormat());\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetNumberFormat",
        "longname": "ApiPivotDataField#GetNumberFormat",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16314,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotDataField/Methods/GetNumberFormat.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets a value that represents the format code for the object.\n\t * @memberof ApiPivotDataField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} format - The format code for the object.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotDataField/Methods/SetNumberFormat.js\n\t */",
        "description": "Sets a value that represents the format code for the object.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet dataField = pivotTable.GetDataFields('Sum of Price');\ndataField.SetNumberFormat('0.00E+00');\n```",
        "memberof": "ApiPivotDataField",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "format",
                "description": "The format code for the object.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetNumberFormat",
        "longname": "ApiPivotDataField#SetNumberFormat",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16325,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotDataField/Methods/SetNumberFormat.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns an index of the data field.\n\t * @memberof ApiPivotDataField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {number}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotDataField/Methods/GetIndex.js\n\t */",
        "description": "Returns an index of the data field.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet dataField = pivotTable.GetDataFields('Sum of Price');\n\npivotWorksheet.GetRange('A15').SetValue('Sum of Price index:');\npivotWorksheet.GetRange('B15').SetValue(dataField.GetIndex());\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GetIndex",
        "longname": "ApiPivotDataField#GetIndex",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16346,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotDataField/Methods/GetIndex.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the pivot field from which the data field was created.\n\t * @memberof ApiPivotDataField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiPivotField}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotDataField/Methods/GetPivotField.js\n\t */",
        "description": "Returns the pivot field from which the data field was created.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet dataField = pivotTable.GetDataFields('Sum of Price');\n\npivotWorksheet.GetRange('A15').SetValue('Sum of Price position:');\npivotWorksheet.GetRange('B15').SetValue(dataField.GetIndex());\n\npivotWorksheet.GetRange('A16').SetValue('Price position:');\npivotWorksheet.GetRange('B16').SetValue(dataField.GetPivotField().GetIndex());\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiPivotField"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiPivotField"
                    }
                }
            }
        ],
        "name": "GetPivotField",
        "longname": "ApiPivotDataField#GetPivotField",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16363,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotDataField/Methods/GetPivotField.js"
        ]
    },
    {
        "comment": "/**\n\t * Deletes all filters currently applied to the pivot field.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/ClearAllFilters.js\n\t */",
        "description": "Deletes all filters currently applied to the pivot field.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\npivotField.ClearAllFilters();\n```",
        "memberof": "ApiPivotField",
        "params": null,
        "returns": null,
        "name": "ClearAllFilters",
        "longname": "ApiPivotField#ClearAllFilters",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16388,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/ClearAllFilters.js"
        ]
    },
    {
        "comment": "/**\n\t * Deletes all label filters or all date filters from the pivot filters collection.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/ClearLabelFilters.js\n\t */",
        "description": "Deletes all label filters or all date filters from the pivot filters collection.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\npivotField.ClearLabelFilters();\n```",
        "memberof": "ApiPivotField",
        "params": null,
        "returns": null,
        "name": "ClearLabelFilters",
        "longname": "ApiPivotField#ClearLabelFilters",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16398,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/ClearLabelFilters.js"
        ]
    },
    {
        "comment": "/**\n\t * Deletes all manual filters from the pivot filters collection.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/ClearManualFilters.js\n\t */",
        "description": "Deletes all manual filters from the pivot filters collection.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: 'Region',\n    columns: 'Style',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\npivotField.ClearManualFilters();\n```",
        "memberof": "ApiPivotField",
        "params": null,
        "returns": null,
        "name": "ClearManualFilters",
        "longname": "ApiPivotField#ClearManualFilters",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16408,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/ClearManualFilters.js"
        ]
    },
    {
        "comment": "/**\n\t * Deletes all value filters from the pivot filters collection.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/ClearValueFilters.js\n\t */",
        "description": "Deletes all value filters from the pivot filters collection.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: 'Region',\n    columns: 'Style',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\npivotField.ClearValueFilters();\n```",
        "memberof": "ApiPivotField",
        "params": null,
        "returns": null,
        "name": "ClearValueFilters",
        "longname": "ApiPivotField#ClearValueFilters",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16418,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/ClearValueFilters.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns an object that represents either a single pivot table item (the ApiPivotItem object)\n\t * or a collection of all the visible and hidden items (an array of the ApiPivotItem objects) in the specified field.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number} [index] - The item index.\n\t * @returns {ApiPivotItem[] | ApiPivotItem | null}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetPivotItems.js\n\t */",
        "description": "Returns an object that represents either a single pivot table item (the ApiPivotItem object)\nor a collection of all the visible and hidden items (an array of the ApiPivotItem objects) in the specified field.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});\n\nlet pivotWorksheet = Api.GetActiveSheet();\npivotTable.AddDataField('Price');\n\nlet pivotField = pivotTable.GetPivotFields('Region');\nlet pivotItems = pivotField.GetPivotItems();\npivotWorksheet.GetRange('A10').SetValue('Region pivot items');\n\nfor (let i = 0; i < pivotItems.length; i += 1) {\n    pivotWorksheet.GetRangeByNumber(9 + i, 1).SetValue(pivotItems[i].GetName());\n}\n```",
        "memberof": "ApiPivotField",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "index",
                "description": "The item index.",
                "optional": true,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ApiPivotItem>",
                        "ApiPivotItem",
                        "null"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "TypeApplication",
                                "expression": {
                                    "type": "NameExpression",
                                    "name": "Array"
                                },
                                "applications": [
                                    {
                                        "name": "ApiPivotItem",
                                        "type": "NameExpression"
                                    }
                                ]
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiPivotItem"
                            },
                            {
                                "type": "NullLiteral"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetPivotItems",
        "longname": "ApiPivotField#GetPivotItems",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16431,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetPivotItems.js"
        ]
    },
    {
        "comment": "/**\n\t * Moves the current pivot field inside the category.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {PivotMoveFieldType | PivotFieldOrientationType} type - The direction to move the pivot table field,\n\t * or the pivot field orientation type.\n\t * @param {number | undefined} index - The field index in a new category.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/Move.js\n\t */",
        "description": "Moves the current pivot field inside the category.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});\n\nlet pivotWorksheet = Api.GetActiveSheet();\npivotTable.AddDataField('Price');\nlet pivotField = pivotTable.GetPivotFields('Region');\npivotWorksheet.GetRange('A10').SetValue('The Region field will be moved soon');\n\nsetTimeout(function () {\n\tpivotField.Move('Columns');\n}, 5000);\n\n```",
        "memberof": "ApiPivotField",
        "params": [
            {
                "type": {
                    "names": [
                        "PivotMoveFieldType",
                        "PivotFieldOrientationType"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "PivotMoveFieldType"
                            },
                            {
                                "type": "NameExpression",
                                "name": "PivotFieldOrientationType"
                            }
                        ]
                    }
                },
                "name": "type",
                "description": "The direction to move the pivot table field,\nor the pivot field orientation type.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number",
                        "undefined"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "number"
                            },
                            {
                                "type": "UndefinedLiteral"
                            }
                        ]
                    }
                },
                "name": "index",
                "description": "The field index in a new category.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "Move",
        "longname": "ApiPivotField#Move",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16466,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/Move.js"
        ]
    },
    {
        "comment": "/**\n\t * Removes the current pivot field from the pivot table.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/Remove.js\n\t */",
        "description": "Removes the current pivot field from the pivot table.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: 'Region',\n    columns: 'Style',\n});\n\nlet pivotWorksheet = Api.GetActiveSheet();\npivotTable.AddDataField('Price');\nlet pivotField = pivotTable.GetPivotFields('Region');\npivotWorksheet.GetRange('A10').SetValue('The Region field will be removed soon');\n\nsetTimeout(function () {\n    pivotField.Remove();\n}, 5000);\n\n```",
        "memberof": "ApiPivotField",
        "params": null,
        "returns": null,
        "name": "Remove",
        "longname": "ApiPivotField#Remove",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16541,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/Remove.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a value that represents the position of the field (first, second, third, and so on)\n\t * among all the fields in its orientation (Rows, Columns, Pages, Data).\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {number}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetPosition.js\n\t */",
        "description": "Returns a value that represents the position of the field (first, second, third, and so on)\namong all the fields in its orientation (Rows, Columns, Pages, Data).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\nlet pivotWorksheet = Api.GetActiveSheet();\npivotTable.AddDataField('Price');\nlet pivotField = pivotTable.GetPivotFields('Style');\npivotWorksheet.GetRange('A12').SetValue('Style field position');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetPosition());\n\n```",
        "memberof": "ApiPivotField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GetPosition",
        "longname": "ApiPivotField#GetPosition",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16556,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetPosition.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets a value that represents the position of the field (first, second, third, and so on)\n\t * among all the fields in its orientation (Rows, Columns, Pages, Data).\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number} position - The field position.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetPosition.js\n\t */",
        "description": "Sets a value that represents the position of the field (first, second, third, and so on)\namong all the fields in its orientation (Rows, Columns, Pages, Data).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\npivotWorksheet.GetRange('A12').SetValue('The Style field position will change soon');\n\nlet pivotField = pivotTable.GetPivotFields('Style');\n\nsetTimeout(function () {\n\tpivotField.SetPosition(1);\n}, 5000);\n\n```",
        "memberof": "ApiPivotField",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "position",
                "description": "The field position.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetPosition",
        "longname": "ApiPivotField#SetPosition",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16580,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetPosition.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a pivot field orientation value that represents the location\n\t * of the field in the specified pivot table report.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {PivotFieldOrientationType}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetOrientation.js\n\t */",
        "description": "Returns a pivot field orientation value that represents the location\nof the field in the specified pivot table report.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Style');\npivotWorksheet.GetRange('A12').SetValue('The Style field orientation');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetOrientation());\n\n```",
        "memberof": "ApiPivotField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "PivotFieldOrientationType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PivotFieldOrientationType"
                    }
                }
            }
        ],
        "name": "GetOrientation",
        "longname": "ApiPivotField#GetOrientation",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16615,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetOrientation.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets a pivot field orientation value that represents the location\n\t * of the field in the specified pivot table report.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {PivotFieldOrientationType} type - The pivot field orientation type.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetOrientation.js\n\t */",
        "description": "Sets a pivot field orientation value that represents the location\nof the field in the specified pivot table report.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\npivotWorksheet.GetRange('A12').SetValue('The Style field orientation will change soon');\n\nlet pivotField = pivotTable.GetPivotFields('Style');\n\nsetTimeout(function () {\n\tpivotField.SetOrientation(\"Columns\");\n}, 5000);\n\n```",
        "memberof": "ApiPivotField",
        "params": [
            {
                "type": {
                    "names": [
                        "PivotFieldOrientationType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PivotFieldOrientationType"
                    }
                },
                "name": "type",
                "description": "The pivot field orientation type.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetOrientation",
        "longname": "ApiPivotField#SetOrientation",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16636,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetOrientation.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a value representing the name of the specified field in the pivot table report.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetValue.js\n\t */",
        "description": "Returns a value representing the name of the specified field in the pivot table report.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Style');\n\npivotWorksheet.GetRange('A12').SetValue('The Style field value');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetValue());\n\n```",
        "memberof": "ApiPivotField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetValue",
        "longname": "ApiPivotField#GetValue",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16687,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetValue.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets a value representing the name of the specified field in the pivot table report.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} name - The name of the specified field in the pivot table report.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetValue.js\n\t */",
        "description": "Sets a value representing the name of the specified field in the pivot table report.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\npivotTable.SetRowAxisLayout(\"Tabular\", false);\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Style');\n\npivotWorksheet.GetRange('A12').SetValue('Style field value');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetValue());\n\npivotWorksheet.GetRange('A14').SetValue('New Style field value');\npivotField.SetValue('My value');\npivotWorksheet.GetRange('B14').SetValue(pivotField.GetValue());\n\n```",
        "memberof": "ApiPivotField",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "name",
                "description": "The name of the specified field in the pivot table report.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetValue",
        "longname": "ApiPivotField#SetValue",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16699,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetValue.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a value that represents the label text for the pivot field.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetCaption.js\n\t */",
        "description": "Returns a value that represents the label text for the pivot field.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Style');\n\npivotWorksheet.GetRange('A12').SetValue('The Style field caption');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetCaption());\n```",
        "memberof": "ApiPivotField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetCaption",
        "longname": "ApiPivotField#GetCaption",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16719,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetCaption.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets a value that represents the label text for the pivot field.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} caption - The label text for the pivot field.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetCaption.js\n\t */",
        "description": "Sets a value that represents the label text for the pivot field.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\npivotTable.SetRowAxisLayout(\"Tabular\", false);\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Style');\n\npivotWorksheet.GetRange('A12').SetValue('Style field caption');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetCaption());\n\npivotWorksheet.GetRange('A14').SetValue('New Style field caption');\npivotField.SetCaption('My caption');\npivotWorksheet.GetRange('B14').SetValue(pivotField.GetCaption());\n\n```",
        "memberof": "ApiPivotField",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "caption",
                "description": "The label text for the pivot field.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetCaption",
        "longname": "ApiPivotField#SetCaption",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16730,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetCaption.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a value representing the object name.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetName.js\n\t */",
        "description": "Returns a value representing the object name.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Style');\n\npivotWorksheet.GetRange('A12').SetValue('The Style field name');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetName());\n\n```",
        "memberof": "ApiPivotField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetName",
        "longname": "ApiPivotField#GetName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16751,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetName.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets a value representing the object name.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} name - The object name.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetName.js\n\t */",
        "description": "Sets a value representing the object name.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\npivotTable.SetRowAxisLayout(\"Tabular\", false);\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Style');\n\npivotWorksheet.GetRange('A12').SetValue('Style field name');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetName());\n\npivotWorksheet.GetRange('A14').SetValue('New Style field name');\npivotField.SetName('My name');\npivotWorksheet.GetRange('B14').SetValue(pivotField.GetName());\n\n```",
        "memberof": "ApiPivotField",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "name",
                "description": "The object name.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetName",
        "longname": "ApiPivotField#SetName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16763,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetName.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a source name for the pivot table field.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetSourceName.js\n\t */",
        "description": "Returns a source name for the pivot table field.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\npivotTable.SetRowAxisLayout(\"Tabular\", false);\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Style');\n\npivotWorksheet.GetRange('A12').SetValue('Style field value');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetName());\n\npivotWorksheet.GetRange('A14').SetValue('New Style field name');\npivotField.SetName('My name');\npivotWorksheet.GetRange('B14').SetValue(pivotField.GetName());\n\npivotWorksheet.GetRange('A15').SetValue('Source Style field name');\npivotWorksheet.GetRange('B15').SetValue(pivotField.GetSourceName());\n```",
        "memberof": "ApiPivotField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetSourceName",
        "longname": "ApiPivotField#GetSourceName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16790,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetSourceName.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns an index for the pivot table field.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {number}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetIndex.js\n\t */",
        "description": "Returns an index for the pivot table field.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Style');\n\npivotWorksheet.GetRange('A12').SetValue('The Style field index');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetIndex());\n```",
        "memberof": "ApiPivotField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GetIndex",
        "longname": "ApiPivotField#GetIndex",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16808,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetIndex.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the ApiPivotTable object which represents the pivot table for the current field.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiPivotTable}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetTable.js\n\t */",
        "description": "Returns the ApiPivotTable object which represents the pivot table for the current field.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Style');\n\npivotField.GetTable().AddDataField('Region');\n```",
        "memberof": "ApiPivotField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiPivotTable"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiPivotTable"
                    }
                }
            }
        ],
        "name": "GetTable",
        "longname": "ApiPivotField#GetTable",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16826,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetTable.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the parent object for the current field.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiPivotTable}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetParent.js\n\t */",
        "description": "Returns the parent object for the current field.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Style');\n\npivotField.GetParent().AddDataField('Region');\n```",
        "memberof": "ApiPivotField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiPivotTable"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiPivotTable"
                    }
                }
            }
        ],
        "name": "GetParent",
        "longname": "ApiPivotField#GetParent",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16844,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetParent.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the setting which specifies whether a pivot table field is compacted.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetLayoutCompactRow.js\n\t */",
        "description": "Returns the setting which specifies whether a pivot table field is compacted.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotWorksheet.GetRange('A12').SetValue('Region layout compact');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetLayoutCompactRow());\n\n```",
        "memberof": "ApiPivotField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "GetLayoutCompactRow",
        "longname": "ApiPivotField#GetLayoutCompactRow",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16862,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetLayoutCompactRow.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the setting which specifies whether a pivot table field is compacted.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} compact - Specifies whether a pivot table field is compacted.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetLayoutCompactRow.js\n\t */",
        "description": "Sets the setting which specifies whether a pivot table field is compacted.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotField.SetLayoutCompactRow(false);\n\npivotWorksheet.GetRange('A12').SetValue('Region layout compact');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetLayoutCompactRow());\n\n```",
        "memberof": "ApiPivotField",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "compact",
                "description": "Specifies whether a pivot table field is compacted.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetLayoutCompactRow",
        "longname": "ApiPivotField#SetLayoutCompactRow",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16875,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetLayoutCompactRow.js"
        ]
    },
    {
        "comment": "/**\n\t * The layout type of the pivot table report.\n\t * @typedef {\"Tabular\" | \"Outline\"} PivotLayoutType\n\t */",
        "description": "The layout type of the pivot table report.",
        "name": "PivotLayoutType",
        "longname": "PivotLayoutType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 16895,
            "columnno": 1
        },
        "properties": null,
        "see": null,
        "type": {
            "names": [
                "\"Tabular\"",
                "\"Outline\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"Tabular\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Outline\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Returns the way the specified pivot table items appear — in table format or in outline format.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {PivotLayoutType}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetLayoutForm.js\n\t */",
        "description": "Returns the way the specified pivot table items appear — in table format or in outline format.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotWorksheet.GetRange('A12').SetValue('Region layout form');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetLayoutForm());\n\n```",
        "memberof": "ApiPivotField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "PivotLayoutType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PivotLayoutType"
                    }
                }
            }
        ],
        "name": "GetLayoutForm",
        "longname": "ApiPivotField#GetLayoutForm",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16908,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetLayoutForm.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the way the specified pivot table items appear — in table format or in outline format.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {PivotLayoutType} type - The layout type of the pivot table report.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetLayoutForm.js\n\t */",
        "description": "Sets the way the specified pivot table items appear — in table format or in outline format.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotField.SetLayoutForm(\"Tabular\");\n\npivotWorksheet.GetRange('A12').SetValue('Region layout form');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetLayoutForm());\n```",
        "memberof": "ApiPivotField",
        "params": [
            {
                "type": {
                    "names": [
                        "PivotLayoutType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PivotLayoutType"
                    }
                },
                "name": "type",
                "description": "The layout type of the pivot table report.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetLayoutForm",
        "longname": "ApiPivotField#SetLayoutForm",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16920,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetLayoutForm.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the setting which specifies whether to insert a page break after each field.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetLayoutPageBreak.js\n\t */",
        "description": "Returns the setting which specifies whether to insert a page break after each field.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotWorksheet.GetRange('A15').SetValue('Page break:');\npivotWorksheet.GetRange('B15').SetValue(pivotField.GetLayoutPageBreak());\n```",
        "memberof": "ApiPivotField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "GetLayoutPageBreak",
        "longname": "ApiPivotField#GetLayoutPageBreak",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16947,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetLayoutPageBreak.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the setting which specifies whether to insert a page break after each field.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} insert - Specifies whether to insert a page break after each field.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetLayoutPageBreak.js\n\t */",
        "description": "Sets the setting which specifies whether to insert a page break after each field.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotField.SetLayoutPageBreak(true);\n\npivotWorksheet.GetRange('A15').SetValue('Page break:');\npivotWorksheet.GetRange('B15').SetValue(pivotField.GetLayoutPageBreak());\n```",
        "memberof": "ApiPivotField",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "insert",
                "description": "Specifies whether to insert a page break after each field.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetLayoutPageBreak",
        "longname": "ApiPivotField#SetLayoutPageBreak",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16959,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetLayoutPageBreak.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the setting which specifies whether the pivot table field is currently visible in the pivot table.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetShowingInAxis.js\n\t */",
        "description": "Returns the setting which specifies whether the pivot table field is currently visible in the pivot table.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\n\npivotWorksheet.GetRange('A12').SetValue('Region showing in axis');\npivotWorksheet.GetRange('B12').SetValue(pivotTable.GetPivotFields('Region').GetShowingInAxis());\n\npivotWorksheet.GetRange('A13').SetValue('Style showing in axis');\npivotWorksheet.GetRange('B13').SetValue(pivotTable.GetPivotFields('Style').GetShowingInAxis());\n\n```",
        "memberof": "ApiPivotField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "GetShowingInAxis",
        "longname": "ApiPivotField#GetShowingInAxis",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16984,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetShowingInAxis.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the setting which specifies whether to repeat items labels at each row.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetRepeatLabels.js\n\t */",
        "description": "Returns the setting which specifies whether to repeat items labels at each row.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\npivotTable.SetRowAxisLayout('Tabular');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotWorksheet.GetRange('A12').SetValue('Region repeat labels');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetRepeatLabels());\n\n```",
        "memberof": "ApiPivotField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "GetRepeatLabels",
        "longname": "ApiPivotField#GetRepeatLabels",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17002,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetRepeatLabels.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the setting which specifies whether to repeat items labels at each row.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} repeat - Specifies whether to repeat items labels at each row.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetRepeatLabels.js\n\t */",
        "description": "Sets the setting which specifies whether to repeat items labels at each row.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\npivotTable.SetRowAxisLayout('Tabular');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\npivotField.SetRepeatLabels(true);\n\npivotWorksheet.GetRange('A12').SetValue('Region repeat labels');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetRepeatLabels());\n\n```",
        "memberof": "ApiPivotField",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "repeat",
                "description": "Specifies whether to repeat items labels at each row.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetRepeatLabels",
        "longname": "ApiPivotField#SetRepeatLabels",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17014,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetRepeatLabels.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the setting which specifies whether to insert blank rows after each item.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetLayoutBlankLine.js\n\t */",
        "description": "Returns the setting which specifies whether to insert blank rows after each item.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\npivotTable.SetRowAxisLayout('Tabular');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotWorksheet.GetRange('A14').SetValue('Region blank line');\npivotWorksheet.GetRange('B14').SetValue(pivotField.GetLayoutBlankLine());\n\n```",
        "memberof": "ApiPivotField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "GetLayoutBlankLine",
        "longname": "ApiPivotField#GetLayoutBlankLine",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17041,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetLayoutBlankLine.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the setting which specifies whether to insert blank rows after each item.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} insert - Specifies whether to insert blank rows after each item.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetLayoutBlankLine.js\n\t */",
        "description": "Sets the setting which specifies whether to insert blank rows after each item.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\npivotTable.SetRowAxisLayout('Tabular');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\npivotField.SetLayoutBlankLine(true);\n\npivotWorksheet.GetRange('A14').SetValue('Region blank line');\npivotWorksheet.GetRange('B14').SetValue(pivotField.GetLayoutBlankLine());\n\n```",
        "memberof": "ApiPivotField",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "insert",
                "description": "Specifies whether to insert blank rows after each item.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetLayoutBlankLine",
        "longname": "ApiPivotField#SetLayoutBlankLine",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17053,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetLayoutBlankLine.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the setting which specifies whether to show items with no data.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetShowAllItems.js\n\t */",
        "description": "Returns the setting which specifies whether to show items with no data.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Tee');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Style');\n\npivotWorksheet.GetRange('A12').SetValue('Style get show all items');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetShowAllItems());\n\n```",
        "memberof": "ApiPivotField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "GetShowAllItems",
        "longname": "ApiPivotField#GetShowAllItems",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17080,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetShowAllItems.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the setting which specifies whether to show items with no data.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} show - Specifies whether to show items with no data.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetShowAllItems.js\n\t */",
        "description": "Sets the setting which specifies whether to show items with no data.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Tee');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Style');\n\npivotField.SetShowAllItems(true);\n\npivotWorksheet.GetRange('A12').SetValue('Style get show all items');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetShowAllItems());\n```",
        "memberof": "ApiPivotField",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "show",
                "description": "Specifies whether to show items with no data.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetShowAllItems",
        "longname": "ApiPivotField#SetShowAllItems",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17092,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetShowAllItems.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the setting which specifies whether to show subtotals.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetLayoutSubtotals.js\n\t */",
        "description": "Returns the setting which specifies whether to show subtotals.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotWorksheet.GetRange('A14').SetValue('Region layout subtotals');\npivotWorksheet.GetRange('B14').SetValue(pivotField.GetLayoutSubtotals());\n```",
        "memberof": "ApiPivotField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "GetLayoutSubtotals",
        "longname": "ApiPivotField#GetLayoutSubtotals",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17119,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetLayoutSubtotals.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the setting which specifies whether to show subtotals.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} show - Specifies whether to show subtotals.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetLayoutSubtotals.js\n\t */",
        "description": "Sets the setting which specifies whether to show subtotals.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotField.SetLayoutSubtotals(false);\n\npivotWorksheet.GetRange('A14').SetValue('Region layout subtotals');\npivotWorksheet.GetRange('B14').SetValue(pivotField.GetLayoutSubtotals());\n```",
        "memberof": "ApiPivotField",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "show",
                "description": "Specifies whether to show subtotals.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetLayoutSubtotals",
        "longname": "ApiPivotField#SetLayoutSubtotals",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17131,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetLayoutSubtotals.js"
        ]
    },
    {
        "comment": "/**\n\t * The layout subtotal location. \n\t * @typedef { \"Top\" | \"Bottom\" } LayoutSubtotalLocationType\n\t */",
        "description": "The layout subtotal location.",
        "name": "LayoutSubtotalLocationType",
        "longname": "LayoutSubtotalLocationType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 17150,
            "columnno": 1
        },
        "properties": null,
        "see": null,
        "type": {
            "names": [
                "\"Top\"",
                "\"Bottom\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"Top\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Bottom\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Returns the layout subtotal location.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {LayoutSubtotalLocationType}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetLayoutSubtotalLocation.js\n\t */",
        "description": "Returns the layout subtotal location.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotWorksheet.GetRange('A14').SetValue('Region layout subtotal location');\npivotWorksheet.GetRange('B14').SetValue(pivotField.GetLayoutSubtotalLocation());\n```",
        "memberof": "ApiPivotField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "LayoutSubtotalLocationType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "LayoutSubtotalLocationType"
                    }
                }
            }
        ],
        "name": "GetLayoutSubtotalLocation",
        "longname": "ApiPivotField#GetLayoutSubtotalLocation",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17163,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetLayoutSubtotalLocation.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the layout subtotal location.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {LayoutSubtotalLocationType} type - The layout subtotal location.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetLayoutSubtotalLocation.js\n\t */",
        "description": "Sets the layout subtotal location.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotField.SetLayoutSubtotalLocation('Bottom');\n\npivotWorksheet.GetRange('A14').SetValue('Region layout subtotal location');\npivotWorksheet.GetRange('B14').SetValue(pivotField.GetLayoutSubtotalLocation());\n```",
        "memberof": "ApiPivotField",
        "params": [
            {
                "type": {
                    "names": [
                        "LayoutSubtotalLocationType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "LayoutSubtotalLocationType"
                    }
                },
                "name": "type",
                "description": "The layout subtotal location.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetLayoutSubtotalLocation",
        "longname": "ApiPivotField#SetLayoutSubtotalLocation",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17175,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetLayoutSubtotalLocation.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the text label displayed in the subtotal column or row heading in the specified pivot table report.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetSubtotalName.js\n\t */",
        "description": "Returns the text label displayed in the subtotal column or row heading in the specified pivot table report.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\tcolumns: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotField.SetSubtotalName('My name');\n\npivotWorksheet.GetRange('A14').SetValue('Region subtotal name');\npivotWorksheet.GetRange('B14').SetValue(pivotField.GetSubtotalName());\n```",
        "memberof": "ApiPivotField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetSubtotalName",
        "longname": "ApiPivotField#GetSubtotalName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17202,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetSubtotalName.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the text label displayed in the subtotal column or row heading in the specified pivot table report.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} caption - The text label displayed in the subtotal column or row heading.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetSubtotalName.js\n\t */",
        "description": "Sets the text label displayed in the subtotal column or row heading in the specified pivot table report.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\npivotField.SetLayoutSubtotalLocation('Bottom');\n\npivotField.SetSubtotalName('My name');\n\npivotWorksheet.GetRange('A14').SetValue('Region subtotal name');\npivotWorksheet.GetRange('B14').SetValue(pivotField.GetSubtotalName());\n```",
        "memberof": "ApiPivotField",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "caption",
                "description": "The text label displayed in the subtotal column or row heading.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetSubtotalName",
        "longname": "ApiPivotField#SetSubtotalName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17214,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetSubtotalName.js"
        ]
    },
    {
        "comment": "/**\n\t * Subtotal pivot field types (functions for subtotals).\n\t * @typedef {Object} PivotFieldSubtotals\n\t * @property {boolean} Sum - Specififes whether the SUM function will be used.\n\t * @property {boolean} Count - Specififes whether the COUNTA function will be used.\n\t * @property {boolean} Average - Specififes whether the AVERAGE function will be used.\n\t * @property {boolean} Max - Specififes whether the MAX function will be used.\n\t * @property {boolean} Min - Specififes whether the MIN function will be used.\n\t * @property {boolean} Product - Specififes whether the PRODUCT function will be used.\n\t * @property {boolean} CountNumbers - Specififes whether the COUNT function will be used.\n\t * @property {boolean} StdDev - Specififes whether the STDEV function will be used.\n\t * @property {boolean} StdDevP - Specififes whether the STDEV.P function will be used.\n\t * @property {boolean} Var - Specififes whether the VAR function will be used.\n\t * @property {boolean} VarP - Specififes whether the VAR.P function will be used.\n\t */",
        "description": "Subtotal pivot field types (functions for subtotals).",
        "name": "PivotFieldSubtotals",
        "longname": "PivotFieldSubtotals",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 17233,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "Sum",
                "description": "Specififes whether the SUM function will be used.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "Count",
                "description": "Specififes whether the COUNTA function will be used.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "Average",
                "description": "Specififes whether the AVERAGE function will be used.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "Max",
                "description": "Specififes whether the MAX function will be used.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "Min",
                "description": "Specififes whether the MIN function will be used.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "Product",
                "description": "Specififes whether the PRODUCT function will be used.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "CountNumbers",
                "description": "Specififes whether the COUNT function will be used.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "StdDev",
                "description": "Specififes whether the STDEV function will be used.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "StdDevP",
                "description": "Specififes whether the STDEV.P function will be used.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "Var",
                "description": "Specififes whether the VAR function will be used.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "VarP",
                "description": "Specififes whether the VAR.P function will be used.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "see": null,
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        }
    },
    {
        "comment": "/**\n\t * Returns an object that represents all subtotals.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {PivotFieldSubtotals}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetSubtotals.js\n\t */",
        "description": "Returns an object that represents all subtotals.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\tcolumns: ['Style'],\n\trows: 'Region',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\nlet subtotals = pivotField.GetSubtotals();\npivotWorksheet.GetRange('A11').SetValue('Region subtotals');\nlet k = 12;\nfor (let i in subtotals) {\n    pivotWorksheet.GetRangeByNumber(k, 0).SetValue(i);\n    pivotWorksheet.GetRangeByNumber(k++, 1).SetValue(subtotals[i]);\n}\n\n```",
        "memberof": "ApiPivotField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "PivotFieldSubtotals"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PivotFieldSubtotals"
                    }
                }
            }
        ],
        "name": "GetSubtotals",
        "longname": "ApiPivotField#GetSubtotals",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17257,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetSubtotals.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets an object that represents all subtotals.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {PivotFieldSubtotals} subtotals - An object that represents all subtotals or some of them.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetSubtotals.js\n\t */",
        "description": "Sets an object that represents all subtotals.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    columns: ['Style'],\n    rows: 'Region',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotField.SetSubtotals({\n    Count: true,\n});\n\nlet subtotals = pivotField.GetSubtotals();\npivotWorksheet.GetRange('A11').SetValue('Region subtotals');\nlet k = 12;\nfor (let i in subtotals) {\n    pivotWorksheet.GetRangeByNumber(k, 0).SetValue(i);\n    pivotWorksheet.GetRangeByNumber(k++, 1).SetValue(subtotals[i]);\n}\n\n```",
        "memberof": "ApiPivotField",
        "params": [
            {
                "type": {
                    "names": [
                        "PivotFieldSubtotals"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PivotFieldSubtotals"
                    }
                },
                "name": "subtotals",
                "description": "An object that represents all subtotals or some of them.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetSubtotals",
        "longname": "ApiPivotField#SetSubtotals",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17322,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetSubtotals.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the setting which specifies whether the specified field can be dragged to the column position.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetDragToColumn.js\n\t */",
        "description": "Returns the setting which specifies whether the specified field can be dragged to the column position.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    columns: ['Style'],\n    rows: 'Region',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotWorksheet.GetRange('A13').SetValue('Drag to column');\npivotWorksheet.GetRange('B13').SetValue(pivotField.GetDragToColumn());\n\n```",
        "memberof": "ApiPivotField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "GetDragToColumn",
        "longname": "ApiPivotField#GetDragToColumn",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17387,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetDragToColumn.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the setting which specifies whether the specified field can be dragged to the column position.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} flag - Specifies whether the specified field can be dragged to the column position.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetDragToColumn.js\n\t */",
        "description": "Sets the setting which specifies whether the specified field can be dragged to the column position.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    columns: ['Style'],\n    rows: 'Region',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotField.SetDragToColumn(false);\n\npivotWorksheet.GetRange('A13').SetValue('Drag to column');\npivotWorksheet.GetRange('B13').SetValue(pivotField.GetDragToColumn());\npivotWorksheet.GetRange('A14').SetValue('Try drag Region to columns!');\n\n```",
        "memberof": "ApiPivotField",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "flag",
                "description": "Specifies whether the specified field can be dragged to the column position.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetDragToColumn",
        "longname": "ApiPivotField#SetDragToColumn",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17399,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetDragToColumn.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the setting which specifies whether the specified field can be dragged to the row position.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetDragToRow.js\n\t */",
        "description": "Returns the setting which specifies whether the specified field can be dragged to the row position.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Style'],\n    columns: 'Region',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotWorksheet.GetRange('A13').SetValue('Drag to row');\npivotWorksheet.GetRange('B13').SetValue(pivotField.GetDragToRow());\n\n```",
        "memberof": "ApiPivotField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "GetDragToRow",
        "longname": "ApiPivotField#GetDragToRow",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17424,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetDragToRow.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the setting which specifies whether the specified field can be dragged to the row position.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} flag - Specifies whether the specified field can be dragged to the row position.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetDragToRow.js\n\t */",
        "description": "Sets the setting which specifies whether the specified field can be dragged to the row position.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Style'],\n    columns: 'Region',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotField.SetDragToRow(false);\n\npivotWorksheet.GetRange('A13').SetValue('Drag to row');\npivotWorksheet.GetRange('B13').SetValue(pivotField.GetDragToRow());\npivotWorksheet.GetRange('A14').SetValue('Try drag Region to rows!');\n\n```",
        "memberof": "ApiPivotField",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "flag",
                "description": "Specifies whether the specified field can be dragged to the row position.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetDragToRow",
        "longname": "ApiPivotField#SetDragToRow",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17436,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetDragToRow.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the setting which specifies whether the specified field can be dragged to the data position.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetDragToData.js\n\t */",
        "description": "Returns the setting which specifies whether the specified field can be dragged to the data position.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Style'],\n    columns: 'Region',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotWorksheet.GetRange('A13').SetValue('Drag to data');\npivotWorksheet.GetRange('B13').SetValue(pivotField.GetDragToData());\n\n```",
        "memberof": "ApiPivotField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "GetDragToData",
        "longname": "ApiPivotField#GetDragToData",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17461,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetDragToData.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the setting which specifies whether the specified field can be dragged to the data position.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} flag - Specifies whether the specified field can be dragged to the data position.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetDragToData.js\n\t */",
        "description": "Sets the setting which specifies whether the specified field can be dragged to the data position.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Style'],\n    columns: 'Region',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotField.SetDragToData(false);\n\npivotWorksheet.GetRange('A13').SetValue('Drag to data');\npivotWorksheet.GetRange('B13').SetValue(pivotField.GetDragToData());\npivotWorksheet.GetRange('A14').SetValue('Try drag Region to data!');\n\n```",
        "memberof": "ApiPivotField",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "flag",
                "description": "Specifies whether the specified field can be dragged to the data position.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetDragToData",
        "longname": "ApiPivotField#SetDragToData",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17473,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetDragToData.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the setting which specifies whether the specified field can be dragged to the page position.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetDragToPage.js\n\t */",
        "description": "Returns the setting which specifies whether the specified field can be dragged to the page position.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Style'],\n    columns: 'Region',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotWorksheet.GetRange('A13').SetValue('Drag to page');\npivotWorksheet.GetRange('B13').SetValue(pivotField.GetDragToPage());\n\n```",
        "memberof": "ApiPivotField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "GetDragToPage",
        "longname": "ApiPivotField#GetDragToPage",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17498,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetDragToPage.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the setting which specifies whether the specified field can be dragged to the page position.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} flag - Specifies whether the specified field can be dragged to the page position.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetDragToPage.js\n\t */",
        "description": "Sets the setting which specifies whether the specified field can be dragged to the page position.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Style'],\n    columns: 'Region',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotField.SetDragToPage(false);\n\npivotWorksheet.GetRange('A13').SetValue('Drag to page');\npivotWorksheet.GetRange('B13').SetValue(pivotField.GetDragToPage());\npivotWorksheet.GetRange('A14').SetValue('Try drag Region to pages!');\n\n```",
        "memberof": "ApiPivotField",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "flag",
                "description": "Specifies whether the specified field can be dragged to the page position.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetDragToPage",
        "longname": "ApiPivotField#SetDragToPage",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17510,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetDragToPage.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the current page which is displayed for the page field (valid only for page fields).\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string | number}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetCurrentPage.js\n\t */",
        "description": "Returns the current page which is displayed for the page field (valid only for page fields).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    pages: ['Style'],\n    rows: 'Region',\n});\n\npivotTable.AddDataField('Style');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Style');\n\npivotWorksheet.GetRange('A13').SetValue('Current Page');\npivotWorksheet.GetRange('B13').SetValue(pivotField.GetCurrentPage());\n\n```",
        "memberof": "ApiPivotField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string",
                        "number"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "number"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetCurrentPage",
        "longname": "ApiPivotField#GetCurrentPage",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17535,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetCurrentPage.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a name of the pivot item.\n\t * @memberof ApiPivotItem\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotItem/Methods/GetName.js\n\t */",
        "description": "Returns a name of the pivot item.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    columns: ['Style'],\n    rows: 'Region',\n});\n\npivotTable.AddDataField('Style');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Style');\nlet pivotItems = pivotField.GetPivotItems();\npivotWorksheet.GetRangeByNumber(15, 0).SetValue('Style item names');\n\nfor (let i = 0; i < pivotItems.length; i += 1) {\n    pivotWorksheet.GetRangeByNumber(15 + i, 1).SetValue(pivotItems[i].GetName());\n}\n\n```",
        "memberof": "ApiPivotItem",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetName",
        "longname": "ApiPivotItem#GetName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17611,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotItem/Methods/GetName.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a caption of the pivot item.\n\t * @memberof ApiPivotItem\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotItem/Methods/GetCaption.js\n\t */",
        "description": "Returns a caption of the pivot item.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    columns: ['Style'],\n    rows: 'Region',\n});\n\npivotTable.AddDataField('Style');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Style');\nlet pivotItems = pivotField.GetPivotItems();\npivotWorksheet.GetRangeByNumber(15, 0).SetValue('Style item captions');\n\nfor (let i = 0; i < pivotItems.length; i += 1) {\n    pivotWorksheet.GetRangeByNumber(15 + i, 1).SetValue(pivotItems[i].GetCaption());\n}\n\n```",
        "memberof": "ApiPivotItem",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetCaption",
        "longname": "ApiPivotItem#GetCaption",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17637,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotItem/Methods/GetCaption.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a name of the specified item in the pivot table field.\n\t * @memberof ApiPivotItem\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotItem/Methods/GetValue.js\n\t */",
        "description": "Returns a name of the specified item in the pivot table field.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    columns: ['Style'],\n    rows: 'Region',\n});\n\npivotTable.AddDataField('Style');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Style');\nlet pivotItems = pivotField.GetPivotItems();\npivotWorksheet.GetRangeByNumber(15, 0).SetValue('Style item values');\n\nfor (let i = 0; i < pivotItems.length; i += 1) {\n    pivotWorksheet.GetRangeByNumber(15 + i, 1).SetValue(pivotItems[i].GetValue());\n}\n\n```",
        "memberof": "ApiPivotItem",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetValue",
        "longname": "ApiPivotItem#GetValue",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17655,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotItem/Methods/GetValue.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a parent of the pivot item.\n\t * @memberof ApiPivotItem\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiPivotField}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotItem/Methods/GetParent.js\n\t */",
        "description": "Returns a parent of the pivot item.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    pages: ['Style'],\n    rows: 'Region',\n});\n\npivotTable.AddDataField('Style');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Style');\nlet pivotItem = pivotField.GetPivotItems()[0];\n\npivotWorksheet.GetRange('A15').SetValue(pivotItem.GetName() + ' parent:');\npivotWorksheet.GetRange('B15').SetValue(pivotItem.GetParent().GetName());\n\n```",
        "memberof": "ApiPivotItem",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiPivotField"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiPivotField"
                    }
                }
            }
        ],
        "name": "GetParent",
        "longname": "ApiPivotItem#GetParent",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17673,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotItem/Methods/GetParent.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the ApiParaPr class.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {\"paraPr\"}\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetClassType.js\n\t */",
        "description": "Returns a type of the ApiParaPr class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet paraPr = paragraph.GetParaPr();\nlet classType = paraPr.GetClassType();\nparaPr.SetIndFirstLine(1440);\nparagraph.AddText(\"This is the first paragraph with the indent of 1 inch set to the first line. \");\nparagraph.AddText(\"This indent is set by the paragraph style. No paragraph inline style is applied. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Class Type = \" + classType);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"paraPr\""
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiParagraph#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13762,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the paragraph left side indentation.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {twips} nValue - The paragraph left side indentation value measured in twentieths of a point (1/1440 of an inch).\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetIndLeft.js\n\t */",
        "description": "Sets the paragraph left side indentation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet paraPr = paragraph.GetParaPr();\nparaPr.SetIndLeft(2880);\nparagraph.AddText(\"This is the first paragraph with the indent of 2 inches set to it. \");\nparagraph.AddText(\"This indent is set by the paragraph style. No paragraph inline style is applied. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\n```",
        "memberof": "ApiParagraph",
        "params": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": null
                },
                "name": "nValue",
                "description": "The paragraph left side indentation value measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetIndLeft",
        "longname": "ApiParagraph#SetIndLeft",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13831,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/SetIndLeft.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the paragraph left side indentation.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {twips | undefined} - The paragraph left side indentation value measured in twentieths of a point (1/1440 of an inch).\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetIndLeft.js\n\t */",
        "description": "Returns the paragraph left side indentation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet paraPr = paragraph.GetParaPr();\nparaPr.SetIndLeft(2880);\nparagraph.AddText(\"This is the first paragraph with the indent of 2 inches set to it. \");\nparagraph.AddText(\"This indent is set by the paragraph style. No paragraph inline style is applied. \");\nlet indLeft = paraPr.GetIndLeft();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Left indent: \" + indLeft);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "twips",
                        "undefined"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetIndLeft",
        "longname": "ApiParagraph#GetIndLeft",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13843,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/GetIndLeft.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the paragraph right side indentation.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {twips} nValue - The paragraph right side indentation value measured in twentieths of a point (1/1440 of an inch).\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetIndRight.js\n\t */",
        "description": "Sets the paragraph right side indentation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet paraPr = paragraph.GetParaPr();\nparaPr.SetIndRight(2880);\nparagraph.AddText(\"This is the first paragraph with the right offset of 2 inches set to it. \");\nparagraph.AddText(\"This offset is set by the paragraph style. No paragraph inline style is applied. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\n```",
        "memberof": "ApiParagraph",
        "params": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": null
                },
                "name": "nValue",
                "description": "The paragraph right side indentation value measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetIndRight",
        "longname": "ApiParagraph#SetIndRight",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13860,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/SetIndRight.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the paragraph right side indentation.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {twips | undefined} - The paragraph right side indentation value measured in twentieths of a point (1/1440 of an inch).\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetIndRight.js\n\t */",
        "description": "Returns the paragraph right side indentation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet paraPr = paragraph.GetParaPr();\nparaPr.SetIndRight(2880);\nparaPr.SetJc(\"right\");\nparagraph.AddText(\"This is the first paragraph with the right offset of 2 inches set to it. \");\nparagraph.AddText(\"This indent is set by the paragraph style. No paragraph inline style is applied. \");\nlet indRight = paraPr.GetIndRight();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Right indent: \" + indRight);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "twips",
                        "undefined"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetIndRight",
        "longname": "ApiParagraph#GetIndRight",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13872,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/GetIndRight.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the paragraph first line indentation.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {twips} nValue - The paragraph first line indentation value measured in twentieths of a point (1/1440 of an inch).\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetIndFirstLine.js\n\t */",
        "description": "Sets the paragraph first line indentation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet paraPr = paragraph.GetParaPr();\nparaPr.SetIndFirstLine(1440);\nparagraph.AddText(\"This is the first paragraph with the indent of 1 inch set to the first line. \");\nparagraph.AddText(\"This indent is set by the paragraph style. No paragraph inline style is applied. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\n```",
        "memberof": "ApiParagraph",
        "params": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": null
                },
                "name": "nValue",
                "description": "The paragraph first line indentation value measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetIndFirstLine",
        "longname": "ApiParagraph#SetIndFirstLine",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13890,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/SetIndFirstLine.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the paragraph first line indentation.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {twips | undefined} - The paragraph first line indentation value measured in twentieths of a point (1/1440 of an inch).\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetIndFirstLine.js\n\t */",
        "description": "Returns the paragraph first line indentation.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet paraPr = paragraph.GetParaPr();\nparaPr.SetIndFirstLine(1440);\nparagraph.AddText(\"This is the first paragraph with the indent of 1 inch set to the first line. \");\nparagraph.AddText(\"This indent is set by the paragraph style. No paragraph inline style is applied. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\nlet indFirstLine = paraPr.GetIndFirstLine();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"First line indent: \" + indFirstLine);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "twips",
                        "undefined"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetIndFirstLine",
        "longname": "ApiParagraph#GetIndFirstLine",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13902,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/GetIndFirstLine.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the paragraph contents justification.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {(\"left\" | \"right\" | \"both\" | \"center\")} sJc - The justification type that\n\t * will be applied to the paragraph contents.\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetJc.js\n\t */",
        "description": "Sets the paragraph contents justification.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet paraPr = paragraph.GetParaPr();\nparaPr.SetJc(\"center\");\nparagraph.AddText(\"This is a paragraph with the text in it aligned by the center. \");\nparagraph.AddText(\"The justification is specified in the paragraph style. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\n```",
        "memberof": "ApiParagraph",
        "params": [
            {
                "type": {
                    "names": [
                        "\"left\"",
                        "\"right\"",
                        "\"both\"",
                        "\"center\""
                    ],
                    "parsedType": null
                },
                "name": "sJc",
                "description": "The justification type that\nwill be applied to the paragraph contents.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetJc",
        "longname": "ApiParagraph#SetJc",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13922,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/SetJc.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the paragraph contents justification.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {(\"left\" | \"right\" | \"both\" | \"center\" | undefined)} \n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetJc.js\n\t */",
        "description": "Returns the paragraph contents justification.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet paraPr = paragraph.GetParaPr();\nparaPr.SetJc(\"center\");\nparagraph.AddText(\"This is a paragraph with the text in it aligned by the center. \");\nparagraph.AddText(\"The justification is specified in the paragraph style. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\nlet justification = paraPr.GetJc();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Justification: \" + justification);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"left\"",
                        "\"right\"",
                        "\"both\"",
                        "\"center\"",
                        "undefined"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetJc",
        "longname": "ApiParagraph#GetJc",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13934,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/GetJc.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the paragraph line spacing. If the value of the sLineRule parameter is either \n\t * \"atLeast\" or \"exact\", then the value of nLine will be interpreted as twentieths of a point. If \n\t * the value of the sLineRule parameter is \"auto\", then the value of the \n\t * nLine parameter will be interpreted as 240ths of a line.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {(twips | line240)} nLine - The line spacing value measured either in twentieths of a point (1/1440 of an inch) or in 240ths of a line.\n\t * @param {(\"auto\" | \"atLeast\" | \"exact\")} sLineRule - The rule that determines the measuring units of the line spacing.\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetSpacingLine.js\n\t */",
        "description": "Sets the paragraph line spacing. If the value of the sLineRule parameter is either \n\"atLeast\" or \"exact\", then the value of nLine will be interpreted as twentieths of a point. If \nthe value of the sLineRule parameter is \"auto\", then the value of the \nnLine parameter will be interpreted as 240ths of a line.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet paraPr = paragraph.GetParaPr();\nparaPr.SetSpacingLine(3 * 240, \"auto\");\nparagraph.AddText(\"Paragraph 1. Spacing: 3 times of a common paragraph line spacing.\");\nparagraph.AddLineBreak();\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\n```",
        "memberof": "ApiParagraph",
        "params": [
            {
                "type": {
                    "names": [
                        "twips",
                        "line240"
                    ],
                    "parsedType": null
                },
                "name": "nLine",
                "description": "The line spacing value measured either in twentieths of a point (1/1440 of an inch) or in 240ths of a line.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "\"auto\"",
                        "\"atLeast\"",
                        "\"exact\""
                    ],
                    "parsedType": null
                },
                "name": "sLineRule",
                "description": "The rule that determines the measuring units of the line spacing.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetSpacingLine",
        "longname": "ApiParagraph#SetSpacingLine",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14014,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/SetSpacingLine.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the paragraph line spacing value.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {twips | line240 | undefined} - to know is twips or line240 use ApiParaPr.prototype.GetSpacingLineRule().\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetSpacingLineValue.js\n\t */",
        "description": "Returns the paragraph line spacing value.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet paraPr = paragraph.GetParaPr();\nparaPr.SetSpacingLine(3 * 240, \"auto\");\nparagraph.AddText(\"Paragraph 1. Spacing: 3 times of a common paragraph line spacing.\");\nparagraph.AddLineBreak();\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\nlet spacingLineValue = paraPr.GetSpacingLineValue();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Spacing line value : \" + spacingLineValue);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "twips",
                        "line240",
                        "undefined"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetSpacingLineValue",
        "longname": "ApiParagraph#GetSpacingLineValue",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14045,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/GetSpacingLineValue.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the paragraph line spacing rule.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {\"auto\" | \"atLeast\" | \"exact\" | undefined} \n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetSpacingLineRule.js\n\t */",
        "description": "Returns the paragraph line spacing rule.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet paraPr = paragraph.GetParaPr();\nparaPr.SetSpacingLine(3 * 240, \"auto\");\nparagraph.AddText(\"Paragraph 1. Spacing: 3 times of a common paragraph line spacing.\");\nparagraph.AddLineBreak();\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\nlet spacingRule = paraPr.GetSpacingLineRule();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Spacing line rule : \" + spacingRule);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"auto\"",
                        "\"atLeast\"",
                        "\"exact\"",
                        "undefined"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetSpacingLineRule",
        "longname": "ApiParagraph#GetSpacingLineRule",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14078,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/GetSpacingLineRule.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the spacing before the current paragraph. If the value of the isBeforeAuto parameter is true, then \n\t * any value of the nBefore is ignored. If isBeforeAuto parameter is not specified, then \n\t * it will be interpreted as false.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {twips} nBefore - The value of the spacing before the current paragraph measured in twentieths of a point (1/1440 of an inch).\n\t * @param {boolean} [isBeforeAuto=false] - The true value disables the spacing before the current paragraph.\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetSpacingBefore.js\n\t */",
        "description": "Sets the spacing before the current paragraph. If the value of the isBeforeAuto parameter is true, then \nany value of the nBefore is ignored. If isBeforeAuto parameter is not specified, then \nit will be interpreted as false.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nparagraph.AddText(\"This is an example of setting a space before a paragraph. \");\nparagraph.AddText(\"The second paragraph will have an offset of one inch from the top. \");\nparagraph.AddText(\"This is due to the fact that the second paragraph has this offset enabled.\");\nparagraph = Api.CreateParagraph();\nlet paraPr = paragraph.GetParaPr();\nparaPr.SetSpacingBefore(1440);\nparagraph.AddText(\"This is the second paragraph and it is one inch away from the first paragraph.\");\ncontent.Push(paragraph);\n```",
        "memberof": "ApiParagraph",
        "params": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": null
                },
                "name": "nBefore",
                "description": "The value of the spacing before the current paragraph measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "isBeforeAuto",
                "description": "The true value disables the spacing before the current paragraph.",
                "optional": true,
                "defaultvalue": false
            }
        ],
        "returns": null,
        "name": "SetSpacingBefore",
        "longname": "ApiParagraph#SetSpacingBefore",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14116,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/SetSpacingBefore.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the spacing before value of the current paragraph.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {twips} - The value of the spacing before the current paragraph measured in twentieths of a point (1/1440 of an inch).\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetSpacingBefore.js\n\t */",
        "description": "Returns the spacing before value of the current paragraph.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nparagraph.AddText(\"This is an example of setting a space before a paragraph.\");\nparagraph.AddText(\"The second paragraph will have an offset of one inch from the top. \");\nparagraph.AddText(\"This is due to the fact that the second paragraph has this offset enabled.\");\nlet paragraph2 = Api.CreateParagraph();\nparagraph2.AddText(\"This is the second paragraph and it is one inch away from the first paragraph.\");\ncontent.Push(paragraph2);\nlet paraPr = paragraph2.GetParaPr();\nparaPr.SetSpacingBefore(1440);\nlet spacingBefore = paraPr.GetSpacingBefore();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Spacing before: \" + spacingBefore);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetSpacingBefore",
        "longname": "ApiParagraph#GetSpacingBefore",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14133,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/GetSpacingBefore.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the spacing after the current paragraph. If the value of the isAfterAuto parameter is true, then \n\t * any value of the nAfter is ignored. If isAfterAuto parameter is not specified, then it \n\t * will be interpreted as false.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {twips} nAfter - The value of the spacing after the current paragraph measured in twentieths of a point (1/1440 of an inch).\n\t * @param {boolean} [isAfterAuto=false] - The true value disables the spacing after the current paragraph.\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetSpacingAfter.js\n\t */",
        "description": "Sets the spacing after the current paragraph. If the value of the isAfterAuto parameter is true, then \nany value of the nAfter is ignored. If isAfterAuto parameter is not specified, then it \nwill be interpreted as false.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet paraPr = paragraph.GetParaPr();\nparaPr.SetSpacingAfter(1440);\nparagraph.AddText(\"This is an example of setting a space after a paragraph. \");\nparagraph.AddText(\"The second paragraph will have an offset of one inch from the top. \");\nparagraph.AddText(\"This is due to the fact that the first paragraph has this offset enabled.\");\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"This is the second paragraph and it is one inch away from the first paragraph.\");\ncontent.Push(paragraph);\n```",
        "memberof": "ApiParagraph",
        "params": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": null
                },
                "name": "nAfter",
                "description": "The value of the spacing after the current paragraph measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "isAfterAuto",
                "description": "The true value disables the spacing after the current paragraph.",
                "optional": true,
                "defaultvalue": false
            }
        ],
        "returns": null,
        "name": "SetSpacingAfter",
        "longname": "ApiParagraph#SetSpacingAfter",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14155,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/SetSpacingAfter.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the spacing after value of the current paragraph. \n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {twips} - The value of the spacing after the current paragraph measured in twentieths of a point (1/1440 of an inch).\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetSpacingAfter.js\n\t */",
        "description": "Returns the spacing after value of the current paragraph.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet paraPr = paragraph.GetParaPr();\nparaPr.SetSpacingAfter(1440);\nparagraph.AddText(\"This is an example of setting a space after a paragraph. \");\nparagraph.AddText(\"The second paragraph will have an offset of one inch from the top. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes. \");\nparagraph.AddText(\"These sentences are used to add lines for demonstrative purposes.\");\nlet spacingAfter = paraPr.GetSpacingAfter();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Spacing after : \" + spacingAfter);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetSpacingAfter",
        "longname": "ApiParagraph#GetSpacingAfter",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14172,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/GetSpacingAfter.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies a sequence of custom tab stops which will be used for any tab characters in the current paragraph.\n\t * <b>Warning</b>: The lengths of aPos array and aVal array <b>MUST BE</b> equal to each other.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {twips[]} aPos - An array of the positions of custom tab stops with respect to the current page margins\n\t * measured in twentieths of a point (1/1440 of an inch).\n\t * @param {TabJc[]} aVal - An array of the styles of custom tab stops, which determines the behavior of the tab\n\t * stop and the alignment which will be applied to text entered at the current custom tab stop.\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetTabs.js\n\t */",
        "description": "Specifies a sequence of custom tab stops which will be used for any tab characters in the current paragraph.\n<b>Warning</b>: The lengths of aPos array and aVal array <b>MUST BE</b> equal to each other.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 150 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet paraPr = paragraph.GetParaPr();\nparaPr.SetTabs([1440, 2880, 4320], [\"left\", \"center\", \"right\"]);\nparagraph.AddTabStop();\nparagraph.AddText(\"Custom tab - 1 inch left\");\nparagraph.AddLineBreak();\nparagraph.AddTabStop();\nparagraph.AddTabStop();\nparagraph.AddText(\"Custom tab - 2 inches center\");\nparagraph.AddLineBreak();\nparagraph.AddTabStop();\nparagraph.AddTabStop();\nparagraph.AddTabStop();\nparagraph.AddText(\"Custom tab - 3 inches right\");\n```",
        "memberof": "ApiParagraph",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<twips>"
                    ],
                    "parsedType": null
                },
                "name": "aPos",
                "description": "An array of the positions of custom tab stops with respect to the current page margins\nmeasured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "Array.<TabJc>"
                    ],
                    "parsedType": null
                },
                "name": "aVal",
                "description": "An array of the styles of custom tab stops, which determines the behavior of the tab\nstop and the alignment which will be applied to text entered at the current custom tab stop.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetTabs",
        "longname": "ApiParagraph#SetTabs",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14345,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/SetTabs.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the bullet or numbering to the current paragraph.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CSE\", \"CPE\"]\n\t * @param {?ApiBullet} oBullet - The bullet object created with the {@link Api#CreateBullet} or {@link Api#CreateNumbering} method.\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetBullet.js\n\t */",
        "description": "Sets the bullet or numbering to the current paragraph.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet paraPr = paragraph.GetParaPr();\nlet bullet = Api.CreateBullet(\"-\");\nparaPr.SetBullet(bullet);\nparagraph.AddText(\" This is an example of the bulleted paragraph.\");\n```",
        "memberof": "ApiParagraph",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiBullet"
                    ],
                    "parsedType": null
                },
                "name": "oBullet",
                "description": "The bullet object created with the {@link Api#CreateBullet} or {@link Api#CreateNumbering} method.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetBullet",
        "longname": "ApiParagraph#SetBullet",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14389,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/SetBullet.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the outline level for the specified properties.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {Number?} [nLvl=undefined] - The outline level. Possible values: 0-8. The 0 value means the basic outline level.\n\t * To set no outline level, use this method without a parameter.\n\t * @returns {boolean}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/SetOutlineLvl.js\n\t */",
        "description": "Sets the outline level for the specified properties.",
        "memberof": "ApiParagraph",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ],
                    "parsedType": null
                },
                "name": "nLvl",
                "description": "The outline level. Possible values: 0-8. The 0 value means the basic outline level.\nTo set no outline level, use this method without a parameter.",
                "optional": true,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetOutlineLvl",
        "longname": "ApiParagraph#SetOutlineLvl",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14409,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/SetOutlineLvl.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the outline level of the specified properties.\n\t * @memberof ApiParaPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {Number?}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiParaPr/Methods/GetOutlineLvl.js\n\t */",
        "description": "Returns the outline level of the specified properties.",
        "memberof": "ApiParagraph",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetOutlineLvl",
        "longname": "ApiParagraph#GetOutlineLvl",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 14433,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiParaPr/Methods/GetOutlineLvl.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the ApiTextPr class.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @returns {\"textPr\"}\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetClassType.js\n\t */",
        "description": "Returns a type of the ApiTextPr class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet docContent = shape.GetContent();\nlet paragraph = docContent.GetElement(0);\nlet run = Api.CreateRun();\nlet textProps = run.GetTextPr();\ntextProps.SetFontSize(30);\nparagraph.SetJc(\"left\");\nlet classType = textProps.GetClassType();\nrun.AddText(\"Class Type = \" + classType);\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"textPr\""
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiRun#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13040,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the bold property to the text character.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {boolean} isBold - Specifies that the contents of the run are displayed bold.\n\t * @return {ApiTextPr} - this text properties.\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetBold.js\n\t */",
        "description": "Sets the bold property to the text character.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nlet textProps = run.GetTextPr();\ntextProps.SetFontSize(30);\ntextProps.SetBold(true);\nparagraph.SetJc(\"left\");\nrun.AddText(\"This is a sample text inside the shape with the font weight set to bold using the text properties.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "isBold",
                "description": "Specifies that the contents of the run are displayed bold.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetBold",
        "longname": "ApiRun#SetBold",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13093,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/SetBold.js"
        ]
    },
    {
        "comment": "/**\n\t * Gets the bold property from the current text properties.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @return {?boolean}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetBold.js\n\t */",
        "description": "Gets the bold property from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nrun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\nrun.AddLineBreak();\nparagraph.AddElement(run);\nlet textProps = run.GetTextPr();\ntextProps.SetBold(true);\nparagraph = Api.CreateParagraph();\nlet isBold = textProps.GetBold();\nparagraph.AddText(\"Bold property: \" + isBold);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetBold",
        "longname": "ApiRun#GetBold",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13108,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/GetBold.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the italic property to the text character.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {boolean} isItalic - Specifies that the contents of the current run are displayed italicized.\n\t * @return {ApiTextPr} - this text properties.\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetItalic.js\n\t */",
        "description": "Sets the italic property to the text character.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nlet textProps = run.GetTextPr();\ntextProps.SetFontSize(30);\ntextProps.SetItalic(true);\nparagraph.SetJc(\"left\");\nrun.AddText(\"This is a sample text inside the shape with the font set to italicized letters using the text properties.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "isItalic",
                "description": "Specifies that the contents of the current run are displayed italicized.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetItalic",
        "longname": "ApiRun#SetItalic",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13121,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/SetItalic.js"
        ]
    },
    {
        "comment": "/**\n\t * Gets the italic property from the current text properties.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @return {?boolean}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetItalic.js\n\t */",
        "description": "Gets the italic property from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nrun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\nrun.AddLineBreak();\nparagraph.AddElement(run);\nlet textProps = run.GetTextPr();\ntextProps.SetItalic(true);\nparagraph = Api.CreateParagraph();\nlet isItalic = textProps.GetItalic();\nparagraph.AddText(\"Italic property: \" + isItalic);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetItalic",
        "longname": "ApiRun#GetItalic",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13136,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/GetItalic.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies that the contents of the run are displayed with a single horizontal line through the center of the line.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {boolean} isStrikeout - Specifies that the contents of the current run are displayed struck through.\n\t * @return {ApiTextPr} - this text properties.\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetStrikeout.js\n\t */",
        "description": "Specifies that the contents of the run are displayed with a single horizontal line through the center of the line.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nlet textProps = run.GetTextPr();\ntextProps.SetFontSize(30);\ntextProps.SetStrikeout(true);\nparagraph.SetJc(\"left\");\nrun.AddText(\"This is a struck out text inside the shape.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "isStrikeout",
                "description": "Specifies that the contents of the current run are displayed struck through.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetStrikeout",
        "longname": "ApiRun#SetStrikeout",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13149,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/SetStrikeout.js"
        ]
    },
    {
        "comment": "/**\n\t * Gets the strikeout property from the current text properties.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @return {?boolean}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetStrikeout.js\n\t */",
        "description": "Gets the strikeout property from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nrun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\nrun.AddLineBreak();\nparagraph.AddElement(run);\nlet textProps = run.GetTextPr();\ntextProps.SetStrikeout(true);\nparagraph = Api.CreateParagraph();\nlet isStrikeout = textProps.GetStrikeout();\nparagraph.AddText(\"Strikeout property: \" + isStrikeout);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetStrikeout",
        "longname": "ApiRun#GetStrikeout",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13164,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/GetStrikeout.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies that the contents of the run are displayed along with a line appearing directly below the character\n\t * (less than all the spacing above and below the characters on the line).\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {boolean} isUnderline - Specifies that the contents of the current run are displayed underlined.\n\t * @return {ApiTextPr} - this text properties.\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetUnderline.js\n\t */",
        "description": "Specifies that the contents of the run are displayed along with a line appearing directly below the character\n(less than all the spacing above and below the characters on the line).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nlet textProps = run.GetTextPr();\ntextProps.SetFontSize(30);\ntextProps.SetUnderline(true);\nparagraph.SetJc(\"left\");\nrun.AddText(\"This is an underlined text inside the shape.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "isUnderline",
                "description": "Specifies that the contents of the current run are displayed underlined.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetUnderline",
        "longname": "ApiRun#SetUnderline",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13178,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/SetUnderline.js"
        ]
    },
    {
        "comment": "/**\n\t * Gets the underline property from the current text properties.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @return {?boolean}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetUnderline.js\n\t */",
        "description": "Gets the underline property from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nrun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\nrun.AddLineBreak();\nparagraph.AddElement(run);\nlet textProps = run.GetTextPr();\ntextProps.SetUnderline(true);\nparagraph = Api.CreateParagraph();\nlet isUnderline = textProps.GetUnderline();\nparagraph.AddText(\"Underline property: \" + isUnderline);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetUnderline",
        "longname": "ApiRun#GetUnderline",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13193,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/GetUnderline.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets all 4 font slots with the specified font family.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {string} sFontFamily - The font family or families used for the current text run.\n\t * @return {ApiTextPr} - this text properties.\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetFontFamily.js\n\t */",
        "description": "Sets all 4 font slots with the specified font family.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nlet textProps = run.GetTextPr();\ntextProps.SetFontSize(30);\ntextProps.SetFontFamily(\"Comic Sans MS\");\nparagraph.SetJc(\"left\");\nrun.AddText(\"This is a sample text inside the shape with the font family set to 'Comic Sans MS' using the text properties.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                },
                "name": "sFontFamily",
                "description": "The font family or families used for the current text run.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetFontFamily",
        "longname": "ApiRun#SetFontFamily",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13206,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/SetFontFamily.js"
        ]
    },
    {
        "comment": "/**\n\t * Gets the font family from the current text properties.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @return {?string}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetFontFamily.js\n\t */",
        "description": "Gets the font family from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nrun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\nrun.AddLineBreak();\nparagraph.AddElement(run);\nlet textProps = run.GetTextPr();\ntextProps.SetFontFamily(\"Arial\");\nparagraph = Api.CreateParagraph();\nlet fontFamily = textProps.GetFontFamily();\nparagraph.AddText(\"Font family: \" + fontFamily);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetFontFamily",
        "longname": "ApiRun#GetFontFamily",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13222,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/GetFontFamily.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the font size to the characters of the current text run.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {hps} nSize - The text size value measured in half-points (1/144 of an inch).\n\t * @return {ApiTextPr} - this text properties.\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetFontSize.js\n\t */",
        "description": "Sets the font size to the characters of the current text run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nlet textProps = run.GetTextPr();\ntextProps.SetFontSize(30);\nparagraph.SetJc(\"left\");\nrun.AddText(\"This is a sample text inside the shape with the font size set to 15 points using the text properties.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "hps"
                    ],
                    "parsedType": null
                },
                "name": "nSize",
                "description": "The text size value measured in half-points (1/144 of an inch).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetFontSize",
        "longname": "ApiRun#SetFontSize",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13235,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/SetFontSize.js"
        ]
    },
    {
        "comment": "/**\n\t * Gets the font size from the current text properties.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @return {?hps}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetFontSize.js\n\t */",
        "description": "Gets the font size from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nrun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\nrun.AddLineBreak();\nparagraph.AddElement(run);\nlet textProps = run.GetTextPr();\ntextProps.SetFontSize(30);\nparagraph = Api.CreateParagraph();\nlet fontSize = textProps.GetFontSize();\nparagraph.AddText(\"Font size: \" + fontSize);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "hps"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetFontSize",
        "longname": "ApiRun#GetFontSize",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13250,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/GetFontSize.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies the alignment which will be applied to the contents of the run in relation to the default appearance of the run text:\n\t * <b>\"baseline\"</b> - the characters in the current text run will be aligned by the default text baseline.\n\t * <b>\"subscript\"</b> - the characters in the current text run will be aligned below the default text baseline.\n\t * <b>\"superscript\"</b> - the characters in the current text run will be aligned above the default text baseline.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {(\"baseline\" | \"subscript\" | \"superscript\")} sType - The vertical alignment type applied to the text contents.\n\t * @return {ApiTextPr} - this text properties.\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetVertAlign.js\n\t */",
        "description": "Specifies the alignment which will be applied to the contents of the run in relation to the default appearance of the run text:\n<b>\"baseline\"</b> - the characters in the current text run will be aligned by the default text baseline.\n<b>\"subscript\"</b> - the characters in the current text run will be aligned below the default text baseline.\n<b>\"superscript\"</b> - the characters in the current text run will be aligned above the default text baseline.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nlet textProps = run.GetTextPr();\ntextProps.SetVertAlign(\"superscript\");\nparagraph.SetJc(\"left\");\nrun.AddText(\"This is a text inside the shape with vertical alignment set to 'superscript'.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "\"baseline\"",
                        "\"subscript\"",
                        "\"superscript\""
                    ],
                    "parsedType": null
                },
                "name": "sType",
                "description": "The vertical alignment type applied to the text contents.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetVertAlign",
        "longname": "ApiRun#SetVertAlign",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13306,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/SetVertAlign.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the text spacing measured in twentieths of a point.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {twips} nSpacing - The value of the text spacing measured in twentieths of a point (1/1440 of an inch).\n\t * @return {ApiTextPr} - this text properties.\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetSpacing.js\n\t */",
        "description": "Sets the text spacing measured in twentieths of a point.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nlet textProps = run.GetTextPr();\ntextProps.SetFontSize(30);\ntextProps.SetSpacing(80);\nparagraph.SetJc(\"left\");\nrun.AddText(\"This is a sample text inside the shape with the spacing set to 4 points (80 twentieths of a point).\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": null
                },
                "name": "nSpacing",
                "description": "The value of the text spacing measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetSpacing",
        "longname": "ApiRun#SetSpacing",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13402,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/SetSpacing.js"
        ]
    },
    {
        "comment": "/**\n\t * Gets the text spacing from the current text properties measured in twentieths of a point.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @return {?twips}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetSpacing.js\n\t */",
        "description": "Gets the text spacing from the current text properties measured in twentieths of a point.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nrun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\nrun.AddLineBreak();\nparagraph.AddElement(run);\nlet textProps = run.GetTextPr();\ntextProps.SetSpacing(80);\nparagraph = Api.CreateParagraph();\nlet spacing = textProps.GetSpacing();\nparagraph.AddText(\"Text spacing: \" + spacing);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetSpacing",
        "longname": "ApiRun#GetSpacing",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13417,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/GetSpacing.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies that the contents of the run are displayed with two horizontal lines through each character displayed on the line.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {boolean} isDoubleStrikeout - Specifies that the contents of the current run are displayed double struck through.\n\t * @return {ApiTextPr} - this text properties.\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetDoubleStrikeout.js\n\t */",
        "description": "Specifies that the contents of the run are displayed with two horizontal lines through each character displayed on the line.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nlet textProps = run.GetTextPr();\ntextProps.SetFontSize(30);\ntextProps.SetDoubleStrikeout(true);\nparagraph.SetJc(\"left\");\nrun.AddText(\"This is a sample text inside the shape struck out with two lines using the text properties.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "isDoubleStrikeout",
                "description": "Specifies that the contents of the current run are displayed double struck through.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetDoubleStrikeout",
        "longname": "ApiRun#SetDoubleStrikeout",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13435,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/SetDoubleStrikeout.js"
        ]
    },
    {
        "comment": "/**\n\t * Gets the double strikeout property from the current text properties.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @return {?boolean}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetDoubleStrikeout.js\n\t */",
        "description": "Gets the double strikeout property from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nrun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\nrun.AddLineBreak();\nparagraph.AddElement(run);\nlet textProps = run.GetTextPr();\ntextProps.SetDoubleStrikeout(true);\nparagraph = Api.CreateParagraph();\nlet isDoubleStrikeout = textProps.GetDoubleStrikeout();\nparagraph.AddText(\"Double strikeout property: \" + isDoubleStrikeout);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetDoubleStrikeout",
        "longname": "ApiRun#GetDoubleStrikeout",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13450,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/GetDoubleStrikeout.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies that any lowercase characters in the text run are formatted for display only as their capital letter character equivalents.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {boolean} isCaps - Specifies that the contents of the current run are displayed capitalized.\n\t * @return {ApiTextPr} - this text properties.\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetCaps.js\n\t */",
        "description": "Specifies that any lowercase characters in the text run are formatted for display only as their capital letter character equivalents.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nlet textProps = run.GetTextPr();\ntextProps.SetFontSize(30);\ntextProps.SetCaps(true);\nparagraph.SetJc(\"left\");\nrun.AddText(\"This is a sample text inside the shape set to capital letters using the text properties.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "isCaps",
                "description": "Specifies that the contents of the current run are displayed capitalized.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetCaps",
        "longname": "ApiRun#SetCaps",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13463,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/SetCaps.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies whether the text with the current text properties are capitalized.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @return {?boolean}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetCaps.js\n\t */",
        "description": "Specifies whether the text with the current text properties are capitalized.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nrun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\nrun.AddLineBreak();\nparagraph.AddElement(run);\nlet textProps = run.GetTextPr();\ntextProps.SetCaps(true);\nparagraph = Api.CreateParagraph();\nlet isCaps = textProps.GetCaps();\nparagraph.AddText(\"Property of the capitalized letters: \" + isCaps);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetCaps",
        "longname": "ApiRun#GetCaps",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13478,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/GetCaps.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies that all the small letter characters in the text run are formatted for display only as their capital\n\t * letter character equivalents which are two points smaller than the actual font size specified for this text.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @param {boolean} isSmallCaps - Specifies if the contents of the current run are displayed capitalized two points smaller or not.\n\t * @return {ApiTextPr} - this text properties.\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetSmallCaps.js\n\t */",
        "description": "Specifies that all the small letter characters in the text run are formatted for display only as their capital\nletter character equivalents which are two points smaller than the actual font size specified for this text.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nlet textProps = run.GetTextPr();\ntextProps.SetFontSize(30);\ntextProps.SetSmallCaps(true);\nparagraph.SetJc(\"left\");\nrun.AddText(\"This is a sample text inside the shape with the font set to small capitalized letters.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "isSmallCaps",
                "description": "Specifies if the contents of the current run are displayed capitalized two points smaller or not.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetSmallCaps",
        "longname": "ApiRun#SetSmallCaps",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13492,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/SetSmallCaps.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies whether the text with the current text properties are displayed capitalized two points smaller than the actual font size.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @return {?boolean}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetSmallCaps.js\n\t */",
        "description": "Specifies whether the text with the current text properties are displayed capitalized two points smaller than the actual font size.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nrun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\nrun.AddLineBreak();\nparagraph.AddElement(run);\nlet textProps = run.GetTextPr();\ntextProps.SetSmallCaps(true);\nparagraph = Api.CreateParagraph();\nlet isSmallCaps = textProps.GetSmallCaps();\nparagraph.AddText(\"Property of the small capitalized letters: \" + isSmallCaps);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetSmallCaps",
        "longname": "ApiRun#GetSmallCaps",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13507,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/GetSmallCaps.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the text color to the current text run.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CSE\", \"CPE\"]\n\t * @param {ApiFill} oApiFill - The color or pattern used to fill the text color.\n\t * @return {ApiTextPr} - this text properties.\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetFill.js\n\t */",
        "description": "Sets the text color to the current text run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 35 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nlet textProps = run.GetTextPr();\nfill = Api.CreateSolidFill(Api.CreateRGBColor(128, 128, 128));\ntextProps.SetFill(fill);\nrun.AddText(\"This is a text run with the font color set to gray.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": null
                },
                "name": "oApiFill",
                "description": "The color or pattern used to fill the text color.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetFill",
        "longname": "ApiRun#SetFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13633,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/SetFill.js"
        ]
    },
    {
        "comment": "/**\n\t * Gets the text color from the current text properties.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CSE\", \"CPE\"]\n\t * @return {ApiFill}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetFill.js\n\t */",
        "description": "Gets the text color from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nrun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\nrun.AddLineBreak();\nparagraph.AddElement(run);\nlet textProps = run.GetTextPr();\nfill = Api.CreateSolidFill(Api.CreateRGBColor(128, 128, 128));\ntextProps.SetFill(fill);\nparagraph = Api.CreateParagraph();\nfill = textProps.GetFill();\nlet type = fill.GetClassType();\nparagraph.AddText(\"Text color type: \" + type);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetFill",
        "longname": "ApiRun#GetFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13648,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/GetFill.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the text fill to the current text run.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\n\t * @param {ApiFill} oApiFill - The color or pattern used to fill the text color.\n\t * @return {ApiTextPr} - this text properties.\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetTextFill.js\n\t */",
        "description": "Sets the text fill to the current text run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nlet textProps = run.GetTextPr();\ntextProps.SetFontSize(30);\nfill = Api.CreateSolidFill(Api.CreateRGBColor(128, 128, 128));\nrun.SetTextFill(fill);\nparagraph.SetJc(\"left\");\nrun.AddText(\"This is a text run with the gray text set using the text properties.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": null
                },
                "name": "oApiFill",
                "description": "The color or pattern used to fill the text color.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetTextFill",
        "longname": "ApiRun#SetTextFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13666,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/SetTextFill.js"
        ]
    },
    {
        "comment": "/**\n\t * Gets the text fill from the current text properties.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @return {ApiFill}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetTextFill.js\n\t */",
        "description": "Gets the text fill from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nrun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\nrun.AddLineBreak();\nparagraph.AddElement(run);\nlet textProps = run.GetTextPr();\nfill = Api.CreateSolidFill(Api.CreateRGBColor(128, 128, 128));\nrun.SetTextFill(fill);\nparagraph = Api.CreateParagraph();\nfill = textProps.GetTextFill();\nlet type = fill.GetClassType();\nparagraph.AddText(\"Text fill type: \" + type);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiFill"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetTextFill",
        "longname": "ApiRun#GetTextFill",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13681,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/GetTextFill.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the text outline to the current text run.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CPE\", \"CSE\"]\n\t * @param {ApiStroke} oStroke - The stroke used to create the text outline.\n\t * @return {ApiTextPr} - this text properties.\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/SetOutLine.js\n\t */",
        "description": "Sets the text outline to the current text run.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nlet textProps = run.GetTextPr();\ntextProps.SetFontSize(30);\nstroke = Api.CreateStroke(0.2 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(128, 128, 128)));\ntextProps.SetOutLine(stroke);\nparagraph.SetJc(\"left\");\nrun.AddText(\"This is a text run with the gray text outline set using the text properties.\");\nparagraph.AddElement(run);\n```",
        "memberof": "ApiRun",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiStroke"
                    ],
                    "parsedType": null
                },
                "name": "oStroke",
                "description": "The stroke used to create the text outline.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetOutLine",
        "longname": "ApiRun#SetOutLine",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13699,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/SetOutLine.js"
        ]
    },
    {
        "comment": "/**\n\t * Gets the text outline from the current text properties.\n\t * @memberof ApiTextPr\n\t * @typeofeditors [\"CDE\", \"CSE\", \"CPE\"]\n\t * @return {ApiStroke}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiTextPr/Methods/GetOutLine.js\n\t */",
        "description": "Gets the text outline from the current text properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\nlet fill = Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61));\nlet stroke = Api.CreateStroke(0, Api.CreateNoFill());\nlet shape = worksheet.AddShape(\"flowChartOnlineStorage\", 120 * 36000, 70 * 36000, fill, stroke, 0, 2 * 36000, 0, 3 * 36000);\nlet content = shape.GetContent();\nlet paragraph = content.GetElement(0);\nlet run = Api.CreateRun();\nrun.AddText(\"This is just a sample text. \");\nrun.AddText(\"The text properties are changed and the style is added to the paragraph. \");\nrun.AddLineBreak();\nparagraph.AddElement(run);\nlet textProps = run.GetTextPr();\nstroke = Api.CreateStroke(0.2 * 36000, Api.CreateSolidFill(Api.CreateRGBColor(128, 128, 128)));\ntextProps.SetOutLine(stroke);\nparagraph = Api.CreateParagraph();\nstroke = textProps.GetOutLine();\nlet type = stroke.GetClassType();\nparagraph.AddText(\"Text outline type: \" + type);\ncontent.Push(paragraph);\n```",
        "memberof": "ApiRun",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiStroke"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetOutLine",
        "longname": "ApiRun#GetOutLine",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 13714,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiTextPr/Methods/GetOutLine.js"
        ]
    },
    {
        "comment": "/**\n\t * Deletes all filters currently applied to the pivot field.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/ClearAllFilters.js\n\t */",
        "description": "Deletes all filters currently applied to the pivot field.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\npivotField.ClearAllFilters();\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": null,
        "name": "ClearAllFilters",
        "longname": "ApiPivotDataField#ClearAllFilters",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16388,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/ClearAllFilters.js"
        ]
    },
    {
        "comment": "/**\n\t * Deletes all label filters or all date filters from the pivot filters collection.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/ClearLabelFilters.js\n\t */",
        "description": "Deletes all label filters or all date filters from the pivot filters collection.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\npivotField.ClearLabelFilters();\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": null,
        "name": "ClearLabelFilters",
        "longname": "ApiPivotDataField#ClearLabelFilters",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16398,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/ClearLabelFilters.js"
        ]
    },
    {
        "comment": "/**\n\t * Deletes all manual filters from the pivot filters collection.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/ClearManualFilters.js\n\t */",
        "description": "Deletes all manual filters from the pivot filters collection.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: 'Region',\n    columns: 'Style',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\npivotField.ClearManualFilters();\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": null,
        "name": "ClearManualFilters",
        "longname": "ApiPivotDataField#ClearManualFilters",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16408,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/ClearManualFilters.js"
        ]
    },
    {
        "comment": "/**\n\t * Deletes all value filters from the pivot filters collection.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/ClearValueFilters.js\n\t */",
        "description": "Deletes all value filters from the pivot filters collection.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: 'Region',\n    columns: 'Style',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\npivotField.ClearValueFilters();\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": null,
        "name": "ClearValueFilters",
        "longname": "ApiPivotDataField#ClearValueFilters",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16418,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/ClearValueFilters.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns an object that represents either a single pivot table item (the ApiPivotItem object)\n\t * or a collection of all the visible and hidden items (an array of the ApiPivotItem objects) in the specified field.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number} [index] - The item index.\n\t * @returns {ApiPivotItem[] | ApiPivotItem | null}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetPivotItems.js\n\t */",
        "description": "Returns an object that represents either a single pivot table item (the ApiPivotItem object)\nor a collection of all the visible and hidden items (an array of the ApiPivotItem objects) in the specified field.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});\n\nlet pivotWorksheet = Api.GetActiveSheet();\npivotTable.AddDataField('Price');\n\nlet pivotField = pivotTable.GetPivotFields('Region');\nlet pivotItems = pivotField.GetPivotItems();\npivotWorksheet.GetRange('A10').SetValue('Region pivot items');\n\nfor (let i = 0; i < pivotItems.length; i += 1) {\n    pivotWorksheet.GetRangeByNumber(9 + i, 1).SetValue(pivotItems[i].GetName());\n}\n```",
        "memberof": "ApiPivotDataField",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": null
                },
                "name": "index",
                "description": "The item index.",
                "optional": true,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ApiPivotItem>",
                        "ApiPivotItem",
                        "null"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetPivotItems",
        "longname": "ApiPivotDataField#GetPivotItems",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16431,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetPivotItems.js"
        ]
    },
    {
        "comment": "/**\n\t * Moves the current pivot field inside the category.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {PivotMoveFieldType | PivotFieldOrientationType} type - The direction to move the pivot table field,\n\t * or the pivot field orientation type.\n\t * @param {number | undefined} index - The field index in a new category.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/Move.js\n\t */",
        "description": "Moves the current pivot field inside the category.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});\n\nlet pivotWorksheet = Api.GetActiveSheet();\npivotTable.AddDataField('Price');\nlet pivotField = pivotTable.GetPivotFields('Region');\npivotWorksheet.GetRange('A10').SetValue('The Region field will be moved soon');\n\nsetTimeout(function () {\n\tpivotField.Move('Columns');\n}, 5000);\n\n```",
        "memberof": "ApiPivotDataField",
        "params": [
            {
                "type": {
                    "names": [
                        "PivotMoveFieldType",
                        "PivotFieldOrientationType"
                    ],
                    "parsedType": null
                },
                "name": "type",
                "description": "The direction to move the pivot table field,\nor the pivot field orientation type.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number",
                        "undefined"
                    ],
                    "parsedType": null
                },
                "name": "index",
                "description": "The field index in a new category.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "Move",
        "longname": "ApiPivotDataField#Move",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16466,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/Move.js"
        ]
    },
    {
        "comment": "/**\n\t * Removes the current pivot field from the pivot table.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/Remove.js\n\t */",
        "description": "Removes the current pivot field from the pivot table.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: 'Region',\n    columns: 'Style',\n});\n\nlet pivotWorksheet = Api.GetActiveSheet();\npivotTable.AddDataField('Price');\nlet pivotField = pivotTable.GetPivotFields('Region');\npivotWorksheet.GetRange('A10').SetValue('The Region field will be removed soon');\n\nsetTimeout(function () {\n    pivotField.Remove();\n}, 5000);\n\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": null,
        "name": "Remove",
        "longname": "ApiPivotDataField#Remove",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16541,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/Remove.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a value that represents the position of the field (first, second, third, and so on)\n\t * among all the fields in its orientation (Rows, Columns, Pages, Data).\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {number}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetPosition.js\n\t */",
        "description": "Returns a value that represents the position of the field (first, second, third, and so on)\namong all the fields in its orientation (Rows, Columns, Pages, Data).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\nlet pivotWorksheet = Api.GetActiveSheet();\npivotTable.AddDataField('Price');\nlet pivotField = pivotTable.GetPivotFields('Style');\npivotWorksheet.GetRange('A12').SetValue('Style field position');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetPosition());\n\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetPosition",
        "longname": "ApiPivotDataField#GetPosition",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16556,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetPosition.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets a value that represents the position of the field (first, second, third, and so on)\n\t * among all the fields in its orientation (Rows, Columns, Pages, Data).\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {number} position - The field position.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetPosition.js\n\t */",
        "description": "Sets a value that represents the position of the field (first, second, third, and so on)\namong all the fields in its orientation (Rows, Columns, Pages, Data).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\npivotWorksheet.GetRange('A12').SetValue('The Style field position will change soon');\n\nlet pivotField = pivotTable.GetPivotFields('Style');\n\nsetTimeout(function () {\n\tpivotField.SetPosition(1);\n}, 5000);\n\n```",
        "memberof": "ApiPivotDataField",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": null
                },
                "name": "position",
                "description": "The field position.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetPosition",
        "longname": "ApiPivotDataField#SetPosition",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16580,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetPosition.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a pivot field orientation value that represents the location\n\t * of the field in the specified pivot table report.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {PivotFieldOrientationType}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetOrientation.js\n\t */",
        "description": "Returns a pivot field orientation value that represents the location\nof the field in the specified pivot table report.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: 'Region',\n\tcolumns: 'Style',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Style');\npivotWorksheet.GetRange('A12').SetValue('The Style field orientation');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetOrientation());\n\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "PivotFieldOrientationType"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetOrientation",
        "longname": "ApiPivotDataField#GetOrientation",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16615,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetOrientation.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets a pivot field orientation value that represents the location\n\t * of the field in the specified pivot table report.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {PivotFieldOrientationType} type - The pivot field orientation type.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetOrientation.js\n\t */",
        "description": "Sets a pivot field orientation value that represents the location\nof the field in the specified pivot table report.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\npivotWorksheet.GetRange('A12').SetValue('The Style field orientation will change soon');\n\nlet pivotField = pivotTable.GetPivotFields('Style');\n\nsetTimeout(function () {\n\tpivotField.SetOrientation(\"Columns\");\n}, 5000);\n\n```",
        "memberof": "ApiPivotDataField",
        "params": [
            {
                "type": {
                    "names": [
                        "PivotFieldOrientationType"
                    ],
                    "parsedType": null
                },
                "name": "type",
                "description": "The pivot field orientation type.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetOrientation",
        "longname": "ApiPivotDataField#SetOrientation",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16636,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetOrientation.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a value representing the name of the specified field in the pivot table report.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetValue.js\n\t */",
        "description": "Returns a value representing the name of the specified field in the pivot table report.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Style');\n\npivotWorksheet.GetRange('A12').SetValue('The Style field value');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetValue());\n\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetValue",
        "longname": "ApiPivotDataField#GetValue",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16687,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetValue.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets a value representing the name of the specified field in the pivot table report.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} name - The name of the specified field in the pivot table report.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetValue.js\n\t */",
        "description": "Sets a value representing the name of the specified field in the pivot table report.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\npivotTable.SetRowAxisLayout(\"Tabular\", false);\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Style');\n\npivotWorksheet.GetRange('A12').SetValue('Style field value');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetValue());\n\npivotWorksheet.GetRange('A14').SetValue('New Style field value');\npivotField.SetValue('My value');\npivotWorksheet.GetRange('B14').SetValue(pivotField.GetValue());\n\n```",
        "memberof": "ApiPivotDataField",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                },
                "name": "name",
                "description": "The name of the specified field in the pivot table report.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetValue",
        "longname": "ApiPivotDataField#SetValue",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16699,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetValue.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a value that represents the label text for the pivot field.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetCaption.js\n\t */",
        "description": "Returns a value that represents the label text for the pivot field.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Style');\n\npivotWorksheet.GetRange('A12').SetValue('The Style field caption');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetCaption());\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetCaption",
        "longname": "ApiPivotDataField#GetCaption",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16719,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetCaption.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets a value that represents the label text for the pivot field.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} caption - The label text for the pivot field.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetCaption.js\n\t */",
        "description": "Sets a value that represents the label text for the pivot field.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\npivotTable.SetRowAxisLayout(\"Tabular\", false);\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Style');\n\npivotWorksheet.GetRange('A12').SetValue('Style field caption');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetCaption());\n\npivotWorksheet.GetRange('A14').SetValue('New Style field caption');\npivotField.SetCaption('My caption');\npivotWorksheet.GetRange('B14').SetValue(pivotField.GetCaption());\n\n```",
        "memberof": "ApiPivotDataField",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                },
                "name": "caption",
                "description": "The label text for the pivot field.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetCaption",
        "longname": "ApiPivotDataField#SetCaption",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16730,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetCaption.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a value representing the object name.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetName.js\n\t */",
        "description": "Returns a value representing the object name.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Style');\n\npivotWorksheet.GetRange('A12').SetValue('The Style field name');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetName());\n\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetName",
        "longname": "ApiPivotDataField#GetName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16751,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetName.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets a value representing the object name.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} name - The object name.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetName.js\n\t */",
        "description": "Sets a value representing the object name.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\npivotTable.SetRowAxisLayout(\"Tabular\", false);\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Style');\n\npivotWorksheet.GetRange('A12').SetValue('Style field name');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetName());\n\npivotWorksheet.GetRange('A14').SetValue('New Style field name');\npivotField.SetName('My name');\npivotWorksheet.GetRange('B14').SetValue(pivotField.GetName());\n\n```",
        "memberof": "ApiPivotDataField",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                },
                "name": "name",
                "description": "The object name.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetName",
        "longname": "ApiPivotDataField#SetName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16763,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetName.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a source name for the pivot table field.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetSourceName.js\n\t */",
        "description": "Returns a source name for the pivot table field.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\npivotTable.SetRowAxisLayout(\"Tabular\", false);\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Style');\n\npivotWorksheet.GetRange('A12').SetValue('Style field value');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetName());\n\npivotWorksheet.GetRange('A14').SetValue('New Style field name');\npivotField.SetName('My name');\npivotWorksheet.GetRange('B14').SetValue(pivotField.GetName());\n\npivotWorksheet.GetRange('A15').SetValue('Source Style field name');\npivotWorksheet.GetRange('B15').SetValue(pivotField.GetSourceName());\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetSourceName",
        "longname": "ApiPivotDataField#GetSourceName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16790,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetSourceName.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns an index for the pivot table field.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {number}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetIndex.js\n\t */",
        "description": "Returns an index for the pivot table field.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Style');\n\npivotWorksheet.GetRange('A12').SetValue('The Style field index');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetIndex());\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetIndex",
        "longname": "ApiPivotDataField#GetIndex",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16808,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetIndex.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the ApiPivotTable object which represents the pivot table for the current field.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiPivotTable}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetTable.js\n\t */",
        "description": "Returns the ApiPivotTable object which represents the pivot table for the current field.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Style');\n\npivotField.GetTable().AddDataField('Region');\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiPivotTable"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetTable",
        "longname": "ApiPivotDataField#GetTable",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16826,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetTable.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the parent object for the current field.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {ApiPivotTable}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetParent.js\n\t */",
        "description": "Returns the parent object for the current field.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Style');\n\npivotField.GetParent().AddDataField('Region');\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiPivotTable"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetParent",
        "longname": "ApiPivotDataField#GetParent",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16844,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetParent.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the setting which specifies whether a pivot table field is compacted.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetLayoutCompactRow.js\n\t */",
        "description": "Returns the setting which specifies whether a pivot table field is compacted.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotWorksheet.GetRange('A12').SetValue('Region layout compact');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetLayoutCompactRow());\n\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetLayoutCompactRow",
        "longname": "ApiPivotDataField#GetLayoutCompactRow",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16862,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetLayoutCompactRow.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the setting which specifies whether a pivot table field is compacted.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} compact - Specifies whether a pivot table field is compacted.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetLayoutCompactRow.js\n\t */",
        "description": "Sets the setting which specifies whether a pivot table field is compacted.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotField.SetLayoutCompactRow(false);\n\npivotWorksheet.GetRange('A12').SetValue('Region layout compact');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetLayoutCompactRow());\n\n```",
        "memberof": "ApiPivotDataField",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "compact",
                "description": "Specifies whether a pivot table field is compacted.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetLayoutCompactRow",
        "longname": "ApiPivotDataField#SetLayoutCompactRow",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16875,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetLayoutCompactRow.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the way the specified pivot table items appear — in table format or in outline format.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {PivotLayoutType}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetLayoutForm.js\n\t */",
        "description": "Returns the way the specified pivot table items appear — in table format or in outline format.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotWorksheet.GetRange('A12').SetValue('Region layout form');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetLayoutForm());\n\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "PivotLayoutType"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetLayoutForm",
        "longname": "ApiPivotDataField#GetLayoutForm",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16908,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetLayoutForm.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the way the specified pivot table items appear — in table format or in outline format.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {PivotLayoutType} type - The layout type of the pivot table report.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetLayoutForm.js\n\t */",
        "description": "Sets the way the specified pivot table items appear — in table format or in outline format.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotField.SetLayoutForm(\"Tabular\");\n\npivotWorksheet.GetRange('A12').SetValue('Region layout form');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetLayoutForm());\n```",
        "memberof": "ApiPivotDataField",
        "params": [
            {
                "type": {
                    "names": [
                        "PivotLayoutType"
                    ],
                    "parsedType": null
                },
                "name": "type",
                "description": "The layout type of the pivot table report.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetLayoutForm",
        "longname": "ApiPivotDataField#SetLayoutForm",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16920,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetLayoutForm.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the setting which specifies whether to insert a page break after each field.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetLayoutPageBreak.js\n\t */",
        "description": "Returns the setting which specifies whether to insert a page break after each field.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotWorksheet.GetRange('A15').SetValue('Page break:');\npivotWorksheet.GetRange('B15').SetValue(pivotField.GetLayoutPageBreak());\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetLayoutPageBreak",
        "longname": "ApiPivotDataField#GetLayoutPageBreak",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16947,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetLayoutPageBreak.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the setting which specifies whether to insert a page break after each field.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} insert - Specifies whether to insert a page break after each field.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetLayoutPageBreak.js\n\t */",
        "description": "Sets the setting which specifies whether to insert a page break after each field.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotField.SetLayoutPageBreak(true);\n\npivotWorksheet.GetRange('A15').SetValue('Page break:');\npivotWorksheet.GetRange('B15').SetValue(pivotField.GetLayoutPageBreak());\n```",
        "memberof": "ApiPivotDataField",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "insert",
                "description": "Specifies whether to insert a page break after each field.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetLayoutPageBreak",
        "longname": "ApiPivotDataField#SetLayoutPageBreak",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16959,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetLayoutPageBreak.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the setting which specifies whether the pivot table field is currently visible in the pivot table.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetShowingInAxis.js\n\t */",
        "description": "Returns the setting which specifies whether the pivot table field is currently visible in the pivot table.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\n\npivotWorksheet.GetRange('A12').SetValue('Region showing in axis');\npivotWorksheet.GetRange('B12').SetValue(pivotTable.GetPivotFields('Region').GetShowingInAxis());\n\npivotWorksheet.GetRange('A13').SetValue('Style showing in axis');\npivotWorksheet.GetRange('B13').SetValue(pivotTable.GetPivotFields('Style').GetShowingInAxis());\n\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetShowingInAxis",
        "longname": "ApiPivotDataField#GetShowingInAxis",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 16984,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetShowingInAxis.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the setting which specifies whether to repeat items labels at each row.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetRepeatLabels.js\n\t */",
        "description": "Returns the setting which specifies whether to repeat items labels at each row.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\npivotTable.SetRowAxisLayout('Tabular');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotWorksheet.GetRange('A12').SetValue('Region repeat labels');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetRepeatLabels());\n\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetRepeatLabels",
        "longname": "ApiPivotDataField#GetRepeatLabels",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17002,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetRepeatLabels.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the setting which specifies whether to repeat items labels at each row.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} repeat - Specifies whether to repeat items labels at each row.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetRepeatLabels.js\n\t */",
        "description": "Sets the setting which specifies whether to repeat items labels at each row.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\npivotTable.SetRowAxisLayout('Tabular');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\npivotField.SetRepeatLabels(true);\n\npivotWorksheet.GetRange('A12').SetValue('Region repeat labels');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetRepeatLabels());\n\n```",
        "memberof": "ApiPivotDataField",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "repeat",
                "description": "Specifies whether to repeat items labels at each row.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetRepeatLabels",
        "longname": "ApiPivotDataField#SetRepeatLabels",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17014,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetRepeatLabels.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the setting which specifies whether to insert blank rows after each item.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetLayoutBlankLine.js\n\t */",
        "description": "Returns the setting which specifies whether to insert blank rows after each item.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\npivotTable.SetRowAxisLayout('Tabular');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotWorksheet.GetRange('A14').SetValue('Region blank line');\npivotWorksheet.GetRange('B14').SetValue(pivotField.GetLayoutBlankLine());\n\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetLayoutBlankLine",
        "longname": "ApiPivotDataField#GetLayoutBlankLine",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17041,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetLayoutBlankLine.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the setting which specifies whether to insert blank rows after each item.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} insert - Specifies whether to insert blank rows after each item.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetLayoutBlankLine.js\n\t */",
        "description": "Sets the setting which specifies whether to insert blank rows after each item.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\npivotTable.SetRowAxisLayout('Tabular');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\npivotField.SetLayoutBlankLine(true);\n\npivotWorksheet.GetRange('A14').SetValue('Region blank line');\npivotWorksheet.GetRange('B14').SetValue(pivotField.GetLayoutBlankLine());\n\n```",
        "memberof": "ApiPivotDataField",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "insert",
                "description": "Specifies whether to insert blank rows after each item.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetLayoutBlankLine",
        "longname": "ApiPivotDataField#SetLayoutBlankLine",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17053,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetLayoutBlankLine.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the setting which specifies whether to show items with no data.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetShowAllItems.js\n\t */",
        "description": "Returns the setting which specifies whether to show items with no data.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Tee');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Style');\n\npivotWorksheet.GetRange('A12').SetValue('Style get show all items');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetShowAllItems());\n\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetShowAllItems",
        "longname": "ApiPivotDataField#GetShowAllItems",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17080,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetShowAllItems.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the setting which specifies whether to show items with no data.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} show - Specifies whether to show items with no data.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetShowAllItems.js\n\t */",
        "description": "Sets the setting which specifies whether to show items with no data.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Tee');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Style');\n\npivotField.SetShowAllItems(true);\n\npivotWorksheet.GetRange('A12').SetValue('Style get show all items');\npivotWorksheet.GetRange('B12').SetValue(pivotField.GetShowAllItems());\n```",
        "memberof": "ApiPivotDataField",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "show",
                "description": "Specifies whether to show items with no data.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetShowAllItems",
        "longname": "ApiPivotDataField#SetShowAllItems",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17092,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetShowAllItems.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the setting which specifies whether to show subtotals.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetLayoutSubtotals.js\n\t */",
        "description": "Returns the setting which specifies whether to show subtotals.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotWorksheet.GetRange('A14').SetValue('Region layout subtotals');\npivotWorksheet.GetRange('B14').SetValue(pivotField.GetLayoutSubtotals());\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetLayoutSubtotals",
        "longname": "ApiPivotDataField#GetLayoutSubtotals",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17119,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetLayoutSubtotals.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the setting which specifies whether to show subtotals.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} show - Specifies whether to show subtotals.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetLayoutSubtotals.js\n\t */",
        "description": "Sets the setting which specifies whether to show subtotals.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotField.SetLayoutSubtotals(false);\n\npivotWorksheet.GetRange('A14').SetValue('Region layout subtotals');\npivotWorksheet.GetRange('B14').SetValue(pivotField.GetLayoutSubtotals());\n```",
        "memberof": "ApiPivotDataField",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "show",
                "description": "Specifies whether to show subtotals.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetLayoutSubtotals",
        "longname": "ApiPivotDataField#SetLayoutSubtotals",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17131,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetLayoutSubtotals.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the layout subtotal location.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {LayoutSubtotalLocationType}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetLayoutSubtotalLocation.js\n\t */",
        "description": "Returns the layout subtotal location.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotWorksheet.GetRange('A14').SetValue('Region layout subtotal location');\npivotWorksheet.GetRange('B14').SetValue(pivotField.GetLayoutSubtotalLocation());\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "LayoutSubtotalLocationType"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetLayoutSubtotalLocation",
        "longname": "ApiPivotDataField#GetLayoutSubtotalLocation",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17163,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetLayoutSubtotalLocation.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the layout subtotal location.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {LayoutSubtotalLocationType} type - The layout subtotal location.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetLayoutSubtotalLocation.js\n\t */",
        "description": "Sets the layout subtotal location.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\trows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotField.SetLayoutSubtotalLocation('Bottom');\n\npivotWorksheet.GetRange('A14').SetValue('Region layout subtotal location');\npivotWorksheet.GetRange('B14').SetValue(pivotField.GetLayoutSubtotalLocation());\n```",
        "memberof": "ApiPivotDataField",
        "params": [
            {
                "type": {
                    "names": [
                        "LayoutSubtotalLocationType"
                    ],
                    "parsedType": null
                },
                "name": "type",
                "description": "The layout subtotal location.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetLayoutSubtotalLocation",
        "longname": "ApiPivotDataField#SetLayoutSubtotalLocation",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17175,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetLayoutSubtotalLocation.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the text label displayed in the subtotal column or row heading in the specified pivot table report.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetSubtotalName.js\n\t */",
        "description": "Returns the text label displayed in the subtotal column or row heading in the specified pivot table report.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\tcolumns: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotField.SetSubtotalName('My name');\n\npivotWorksheet.GetRange('A14').SetValue('Region subtotal name');\npivotWorksheet.GetRange('B14').SetValue(pivotField.GetSubtotalName());\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetSubtotalName",
        "longname": "ApiPivotDataField#GetSubtotalName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17202,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetSubtotalName.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the text label displayed in the subtotal column or row heading in the specified pivot table report.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {string} caption - The text label displayed in the subtotal column or row heading.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetSubtotalName.js\n\t */",
        "description": "Sets the text label displayed in the subtotal column or row heading in the specified pivot table report.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Region', 'Style'],\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\npivotField.SetLayoutSubtotalLocation('Bottom');\n\npivotField.SetSubtotalName('My name');\n\npivotWorksheet.GetRange('A14').SetValue('Region subtotal name');\npivotWorksheet.GetRange('B14').SetValue(pivotField.GetSubtotalName());\n```",
        "memberof": "ApiPivotDataField",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                },
                "name": "caption",
                "description": "The text label displayed in the subtotal column or row heading.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetSubtotalName",
        "longname": "ApiPivotDataField#SetSubtotalName",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17214,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetSubtotalName.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns an object that represents all subtotals.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {PivotFieldSubtotals}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetSubtotals.js\n\t */",
        "description": "Returns an object that represents all subtotals.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n\tcolumns: ['Style'],\n\trows: 'Region',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\nlet subtotals = pivotField.GetSubtotals();\npivotWorksheet.GetRange('A11').SetValue('Region subtotals');\nlet k = 12;\nfor (let i in subtotals) {\n    pivotWorksheet.GetRangeByNumber(k, 0).SetValue(i);\n    pivotWorksheet.GetRangeByNumber(k++, 1).SetValue(subtotals[i]);\n}\n\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "PivotFieldSubtotals"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetSubtotals",
        "longname": "ApiPivotDataField#GetSubtotals",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17257,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetSubtotals.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets an object that represents all subtotals.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {PivotFieldSubtotals} subtotals - An object that represents all subtotals or some of them.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetSubtotals.js\n\t */",
        "description": "Sets an object that represents all subtotals.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    columns: ['Style'],\n    rows: 'Region',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotField.SetSubtotals({\n    Count: true,\n});\n\nlet subtotals = pivotField.GetSubtotals();\npivotWorksheet.GetRange('A11').SetValue('Region subtotals');\nlet k = 12;\nfor (let i in subtotals) {\n    pivotWorksheet.GetRangeByNumber(k, 0).SetValue(i);\n    pivotWorksheet.GetRangeByNumber(k++, 1).SetValue(subtotals[i]);\n}\n\n```",
        "memberof": "ApiPivotDataField",
        "params": [
            {
                "type": {
                    "names": [
                        "PivotFieldSubtotals"
                    ],
                    "parsedType": null
                },
                "name": "subtotals",
                "description": "An object that represents all subtotals or some of them.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetSubtotals",
        "longname": "ApiPivotDataField#SetSubtotals",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17322,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetSubtotals.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the setting which specifies whether the specified field can be dragged to the column position.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetDragToColumn.js\n\t */",
        "description": "Returns the setting which specifies whether the specified field can be dragged to the column position.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    columns: ['Style'],\n    rows: 'Region',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotWorksheet.GetRange('A13').SetValue('Drag to column');\npivotWorksheet.GetRange('B13').SetValue(pivotField.GetDragToColumn());\n\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetDragToColumn",
        "longname": "ApiPivotDataField#GetDragToColumn",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17387,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetDragToColumn.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the setting which specifies whether the specified field can be dragged to the column position.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} flag - Specifies whether the specified field can be dragged to the column position.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetDragToColumn.js\n\t */",
        "description": "Sets the setting which specifies whether the specified field can be dragged to the column position.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    columns: ['Style'],\n    rows: 'Region',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotField.SetDragToColumn(false);\n\npivotWorksheet.GetRange('A13').SetValue('Drag to column');\npivotWorksheet.GetRange('B13').SetValue(pivotField.GetDragToColumn());\npivotWorksheet.GetRange('A14').SetValue('Try drag Region to columns!');\n\n```",
        "memberof": "ApiPivotDataField",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "flag",
                "description": "Specifies whether the specified field can be dragged to the column position.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetDragToColumn",
        "longname": "ApiPivotDataField#SetDragToColumn",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17399,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetDragToColumn.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the setting which specifies whether the specified field can be dragged to the row position.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetDragToRow.js\n\t */",
        "description": "Returns the setting which specifies whether the specified field can be dragged to the row position.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Style'],\n    columns: 'Region',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotWorksheet.GetRange('A13').SetValue('Drag to row');\npivotWorksheet.GetRange('B13').SetValue(pivotField.GetDragToRow());\n\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetDragToRow",
        "longname": "ApiPivotDataField#GetDragToRow",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17424,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetDragToRow.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the setting which specifies whether the specified field can be dragged to the row position.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} flag - Specifies whether the specified field can be dragged to the row position.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetDragToRow.js\n\t */",
        "description": "Sets the setting which specifies whether the specified field can be dragged to the row position.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Style'],\n    columns: 'Region',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotField.SetDragToRow(false);\n\npivotWorksheet.GetRange('A13').SetValue('Drag to row');\npivotWorksheet.GetRange('B13').SetValue(pivotField.GetDragToRow());\npivotWorksheet.GetRange('A14').SetValue('Try drag Region to rows!');\n\n```",
        "memberof": "ApiPivotDataField",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "flag",
                "description": "Specifies whether the specified field can be dragged to the row position.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetDragToRow",
        "longname": "ApiPivotDataField#SetDragToRow",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17436,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetDragToRow.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the setting which specifies whether the specified field can be dragged to the data position.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetDragToData.js\n\t */",
        "description": "Returns the setting which specifies whether the specified field can be dragged to the data position.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Style'],\n    columns: 'Region',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotWorksheet.GetRange('A13').SetValue('Drag to data');\npivotWorksheet.GetRange('B13').SetValue(pivotField.GetDragToData());\n\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetDragToData",
        "longname": "ApiPivotDataField#GetDragToData",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17461,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetDragToData.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the setting which specifies whether the specified field can be dragged to the data position.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} flag - Specifies whether the specified field can be dragged to the data position.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetDragToData.js\n\t */",
        "description": "Sets the setting which specifies whether the specified field can be dragged to the data position.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Style'],\n    columns: 'Region',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotField.SetDragToData(false);\n\npivotWorksheet.GetRange('A13').SetValue('Drag to data');\npivotWorksheet.GetRange('B13').SetValue(pivotField.GetDragToData());\npivotWorksheet.GetRange('A14').SetValue('Try drag Region to data!');\n\n```",
        "memberof": "ApiPivotDataField",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "flag",
                "description": "Specifies whether the specified field can be dragged to the data position.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetDragToData",
        "longname": "ApiPivotDataField#SetDragToData",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17473,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetDragToData.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the setting which specifies whether the specified field can be dragged to the page position.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {boolean}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetDragToPage.js\n\t */",
        "description": "Returns the setting which specifies whether the specified field can be dragged to the page position.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Style'],\n    columns: 'Region',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotWorksheet.GetRange('A13').SetValue('Drag to page');\npivotWorksheet.GetRange('B13').SetValue(pivotField.GetDragToPage());\n\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetDragToPage",
        "longname": "ApiPivotDataField#GetDragToPage",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17498,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetDragToPage.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the setting which specifies whether the specified field can be dragged to the page position.\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @param {boolean} flag - Specifies whether the specified field can be dragged to the page position.\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/SetDragToPage.js\n\t */",
        "description": "Sets the setting which specifies whether the specified field can be dragged to the page position.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    rows: ['Style'],\n    columns: 'Region',\n});\n\npivotTable.AddDataField('Price');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Region');\n\npivotField.SetDragToPage(false);\n\npivotWorksheet.GetRange('A13').SetValue('Drag to page');\npivotWorksheet.GetRange('B13').SetValue(pivotField.GetDragToPage());\npivotWorksheet.GetRange('A14').SetValue('Try drag Region to pages!');\n\n```",
        "memberof": "ApiPivotDataField",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "flag",
                "description": "Specifies whether the specified field can be dragged to the page position.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetDragToPage",
        "longname": "ApiPivotDataField#SetDragToPage",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17510,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/SetDragToPage.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the current page which is displayed for the page field (valid only for page fields).\n\t * @memberof ApiPivotField\n\t * @typeofeditors [\"CSE\"]\n\t * @returns {string | number}\n\t * @since 8.2.0\n\t * @see office-js-api/Examples/{Editor}/ApiPivotField/Methods/GetCurrentPage.js\n\t */",
        "description": "Returns the current page which is displayed for the page field (valid only for page fields).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"cell\"}\nlet worksheet = Api.GetActiveSheet();\n\nworksheet.GetRange('B1').SetValue('Region');\nworksheet.GetRange('C1').SetValue('Style');\nworksheet.GetRange('D1').SetValue('Price');\n\nworksheet.GetRange('B2').SetValue('East');\nworksheet.GetRange('B3').SetValue('West');\nworksheet.GetRange('B4').SetValue('East');\nworksheet.GetRange('B5').SetValue('West');\n\nworksheet.GetRange('C2').SetValue('Fancy');\nworksheet.GetRange('C3').SetValue('Fancy');\nworksheet.GetRange('C4').SetValue('Tee');\nworksheet.GetRange('C5').SetValue('Tee');\n\nworksheet.GetRange('D2').SetValue(42.5);\nworksheet.GetRange('D3').SetValue(35.2);\nworksheet.GetRange('D4').SetValue(12.3);\nworksheet.GetRange('D5').SetValue(24.8);\n\nlet dataRef = Api.GetRange(\"'Sheet1'!$B$1:$D$5\");\nlet pivotTable = Api.InsertPivotNewWorksheet(dataRef);\n\npivotTable.AddFields({\n    pages: ['Style'],\n    rows: 'Region',\n});\n\npivotTable.AddDataField('Style');\n\nlet pivotWorksheet = Api.GetActiveSheet();\nlet pivotField = pivotTable.GetPivotFields('Style');\n\npivotWorksheet.GetRange('A13').SetValue('Current Page');\npivotWorksheet.GetRange('B13').SetValue(pivotField.GetCurrentPage());\n\n```",
        "memberof": "ApiPivotDataField",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string",
                        "number"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetCurrentPage",
        "longname": "ApiPivotDataField#GetCurrentPage",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 17535,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Cell/ApiPivotField/Methods/GetCurrentPage.js"
        ]
    }
]