[
    {
        "comment": "/**\n\t * Base class\n\t * @global\n\t * @class\n\t * @name Api\n\t */",
        "description": "Base class",
        "name": "Api",
        "longname": "Api",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 50,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\n\t * Class representing a document form base.\n\t * @constructor\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t */",
        "description": "Class representing a document form base.",
        "name": "ApiFormBase",
        "longname": "ApiFormBase",
        "kind": "class",
        "scope": "global",
        "augments": null,
        "meta": {
            "lineno": 3234,
            "columnno": 1
        },
        "properties": null,
        "see": null
    },
    {
        "comment": "/**\n\t * Class representing a document text field.\n\t * @constructor\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @extends {ApiFormBase}\n\t * @see office-js-api/Examples/{Editor}/ApiTextForm/Methods/constructor.js\n\t */",
        "description": "Class representing a document text field.",
        "name": "ApiTextForm",
        "longname": "ApiTextForm",
        "kind": "class",
        "scope": "global",
        "augments": [
            "ApiFormBase"
        ],
        "meta": {
            "lineno": 3246,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Word/ApiTextForm/Methods/constructor.js"
        ]
    },
    {
        "comment": "/**\n\t * Class representing a document combo box / dropdown list.\n\t * @constructor\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @extends {ApiFormBase}\n\t * @see office-js-api/Examples/{Editor}/ApiComboBoxForm/Methods/constructor.js\n\t */",
        "description": "Class representing a document combo box / dropdown list.",
        "name": "ApiComboBoxForm",
        "longname": "ApiComboBoxForm",
        "kind": "class",
        "scope": "global",
        "augments": [
            "ApiFormBase"
        ],
        "meta": {
            "lineno": 3261,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Word/ApiComboBoxForm/Methods/constructor.js"
        ]
    },
    {
        "comment": "/**\n\t * Class representing a document checkbox / radio button.\n\t * @constructor\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @extends {ApiFormBase}\n\t * @see office-js-api/Examples/{Editor}/ApiCheckBoxForm/Methods/constructor.js\n\t */",
        "description": "Class representing a document checkbox / radio button.",
        "name": "ApiCheckBoxForm",
        "longname": "ApiCheckBoxForm",
        "kind": "class",
        "scope": "global",
        "augments": [
            "ApiFormBase"
        ],
        "meta": {
            "lineno": 3276,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Word/ApiCheckBoxForm/Methods/constructor.js"
        ]
    },
    {
        "comment": "/**\n\t * Class representing a document picture form.\n\t * @constructor\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @extends {ApiFormBase}\n\t * @see office-js-api/Examples/{Editor}/ApiPictureForm/Methods/constructor.js\n\t */",
        "description": "Class representing a document picture form.",
        "name": "ApiPictureForm",
        "longname": "ApiPictureForm",
        "kind": "class",
        "scope": "global",
        "augments": [
            "ApiFormBase"
        ],
        "meta": {
            "lineno": 3291,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Word/ApiPictureForm/Methods/constructor.js"
        ]
    },
    {
        "comment": "/**\n\t * Class representing a document date field.\n\t * @constructor\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @extends {ApiFormBase}\n\t * @see office-js-api/Examples/{Editor}/ApiDateForm/Methods/constructor.js\n\t */",
        "description": "Class representing a document date field.",
        "name": "ApiDateForm",
        "longname": "ApiDateForm",
        "kind": "class",
        "scope": "global",
        "augments": [
            "ApiFormBase"
        ],
        "meta": {
            "lineno": 3306,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Word/ApiDateForm/Methods/constructor.js"
        ]
    },
    {
        "comment": "/**\n\t * Class representing a complex field.\n\t * @param oSdt\n\t * @constructor\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @extends {ApiFormBase}\n\t * @see office-js-api/Examples/{Editor}/ApiComplexForm/Methods/constructor.js\n\t */",
        "description": "Class representing a complex field.",
        "name": "ApiComplexForm",
        "longname": "ApiComplexForm",
        "kind": "class",
        "scope": "global",
        "augments": [
            "ApiFormBase"
        ],
        "meta": {
            "lineno": 3322,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Word/ApiComplexForm/Methods/constructor.js"
        ]
    },
    {
        "comment": "/**\n\t * Twentieths of a point (equivalent to 1/1440th of an inch).\n\t * @typedef {number} twips\n\t * @see office-js-api/Examples/Enumerations/twips.js\n\t */",
        "description": "Twentieths of a point (equivalent to 1/1440th of an inch).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nparagraph.SetEqualColumns(2, 720);\n```",
        "name": "twips",
        "longname": "twips",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 3867,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/twips.js"
        ],
        "type": {
            "names": [
                "number"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "number"
            }
        }
    },
    {
        "comment": "/**\n     * Any valid element which can be added to the document structure.\n\t * @typedef {(ApiParagraph | ApiTable | ApiBlockLvlSdt)} DocumentElement\n\t * @see office-js-api/Examples/Enumerations/DocumentElement.js\n\t */",
        "description": "Any valid element which can be added to the document structure.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\ndoc.AddElement(paragraph);\n```",
        "name": "DocumentElement",
        "longname": "DocumentElement",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 3873,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/DocumentElement.js"
        ],
        "type": {
            "names": [
                "ApiParagraph",
                "ApiTable",
                "ApiBlockLvlSdt"
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "ApiParagraph"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiTable"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiBlockLvlSdt"
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n     * The style type used for the document element.\n\t * @typedef {(\"paragraph\" | \"table\" | \"run\" | \"numbering\")} StyleType\n\t * @see office-js-api/Examples/Enumerations/StyleType.js\n\t */",
        "description": "The style type used for the document element.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet normalStyle = doc.GetDefaultStyle(\"paragraph\");\n```",
        "name": "StyleType",
        "longname": "StyleType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 3879,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/StyleType.js"
        ],
        "type": {
            "names": [
                "\"paragraph\"",
                "\"table\"",
                "\"run\"",
                "\"numbering\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"paragraph\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"table\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"run\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"numbering\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * 240ths of a line.\n\t * @typedef {number} line240\n\t * @see office-js-api/Examples/Enumerations/line240.js\n\t */",
        "description": "240ths of a line.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nparaPr.SetSpacingLine(240, \"auto\");\n```",
        "name": "line240",
        "longname": "line240",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 3885,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/line240.js"
        ],
        "type": {
            "names": [
                "number"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "number"
            }
        }
    },
    {
        "comment": "/**\n\t * Half-points (2 half-points = 1 point).\n\t * @typedef {number} hps\n\t * @see office-js-api/Examples/Enumerations/hps.js\n\t */",
        "description": "Half-points (2 half-points = 1 point).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\ntextPr.SetFontSize(22);\n```",
        "name": "hps",
        "longname": "hps",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 3891,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/hps.js"
        ],
        "type": {
            "names": [
                "number"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "number"
            }
        }
    },
    {
        "comment": "/**\n\t * A numeric value from 0 to 255.\n\t * @typedef {number} byte\n\t * @see office-js-api/Examples/Enumerations/byte.js\n\t */",
        "description": "A numeric value from 0 to 255.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\n// The resulting color is green, the bytes are measured in decimal numbers:\nlet rgbColorGreen = Api.CreateRGBColor(0, 255, 0);\n// The resulting color is red, the bytes are measured in hexadecimal numbers:\nlet rgbColorRed = Api.CreateRGBColor(0xff, 0, 0);\n```",
        "name": "byte",
        "longname": "byte",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 3897,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/byte.js"
        ],
        "type": {
            "names": [
                "number"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "number"
            }
        }
    },
    {
        "comment": "/**\n\t * 60000th of a degree (5400000 = 90 degrees).\n\t * @typedef {number} PositiveFixedAngle\n\t * @see office-js-api/Examples/Enumerations/PositiveFixedAngle.js\n\t */",
        "description": "60000th of a degree (5400000 = 90 degrees).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet fill = Api.CreateLinearGradientFill([gs1, gs2], 5400000);\n```",
        "name": "PositiveFixedAngle",
        "longname": "PositiveFixedAngle",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 3903,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/PositiveFixedAngle.js"
        ],
        "type": {
            "names": [
                "number"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "number"
            }
        }
    },
    {
        "comment": "/**\n\t * A border type which will be added to the document element.\n     * <b>\"none\"</b> - no border will be added to the created element or the selected element side.\n     * <b>\"single\"</b> - a single border will be added to the created element or the selected element side.\n\t * @typedef {(\"none\" | \"single\")} BorderType\n\t * @see office-js-api/Examples/Enumerations/BorderType.js\n\t */",
        "description": "A border type which will be added to the document element.\n<b>\"none\"</b> - no border will be added to the created element or the selected element side.\n<b>\"single\"</b> - a single border will be added to the created element or the selected element side.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nparaPr.SetBottomBorder(\"single\", 24, 0, 0, 255, 0);\n```",
        "name": "BorderType",
        "longname": "BorderType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 3909,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/BorderType.js"
        ],
        "type": {
            "names": [
                "\"none\"",
                "\"single\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"none\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"single\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * A shade type which can be added to the document element.\n\t * @typedef {(\"nil\" | \"clear\")} ShdType\n\t * @see office-js-api/Examples/Enumerations/ShdType.js\n\t */",
        "description": "A shade type which can be added to the document element.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\ntablePr.SetShd(\"clear\", 0, 255, 0, false);\n```",
        "name": "ShdType",
        "longname": "ShdType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 3917,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/ShdType.js"
        ],
        "type": {
            "names": [
                "\"nil\"",
                "\"clear\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"nil\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"clear\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Custom tab types.\n\t * @typedef {(\"clear\" | \"left\" | \"right\" | \"center\")} TabJc\n\t * @see office-js-api/Examples/Enumerations/TabJc.js\n\t */",
        "description": "Custom tab types.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nparaPr.SetTabs([1000, 1500, 3000], [\"center\", \"left\", \"right\"]);\n```",
        "name": "TabJc",
        "longname": "TabJc",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 3923,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/TabJc.js"
        ],
        "type": {
            "names": [
                "\"clear\"",
                "\"left\"",
                "\"right\"",
                "\"center\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"clear\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"left\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"right\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"center\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Eighths of a point (24 eighths of a point = 3 points).\n\t * @typedef {number} pt_8\n\t * @see office-js-api/Examples/Enumerations/pt_8.js\n\t */",
        "description": "Eighths of a point (24 eighths of a point = 3 points).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nparaPr.SetBottomBorder(\"single\", 48, 0, 0, 255, 0);\n```",
        "name": "pt_8",
        "longname": "pt_8",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 3929,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/pt_8.js"
        ],
        "type": {
            "names": [
                "number"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "number"
            }
        }
    },
    {
        "comment": "/**\n\t * A point.\n\t * @typedef {number} pt\n\t * @see office-js-api/Examples/Enumerations/pt.js\n\t */",
        "description": "A point.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nparaPr.SetBottomBorder(\"single\", 24, 1, 0, 255, 0);\n```",
        "name": "pt",
        "longname": "pt",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 3935,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/pt.js"
        ],
        "type": {
            "names": [
                "number"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "number"
            }
        }
    },
    {
        "comment": "/**\n\t * Header and footer types which can be applied to the document sections.\n     * <b>\"default\"</b> - a header or footer which can be applied to any default page.\n     * <b>\"title\"</b> - a header or footer which is applied to the title page.\n     * <b>\"even\"</b> - a header or footer which can be applied to even pages to distinguish them from the odd ones (which will be considered default).\n\t * @typedef {(\"default\" | \"title\" | \"even\")} HdrFtrType\n\t * @see office-js-api/Examples/Enumerations/HdrFtrType.js\n\t */",
        "description": "Header and footer types which can be applied to the document sections.\n<b>\"default\"</b> - a header or footer which can be applied to any default page.\n<b>\"title\"</b> - a header or footer which is applied to the title page.\n<b>\"even\"</b> - a header or footer which can be applied to even pages to distinguish them from the odd ones (which will be considered default).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet docContent = finalSection.RemoveHeader(\"title\");\n```",
        "name": "HdrFtrType",
        "longname": "HdrFtrType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 3941,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/HdrFtrType.js"
        ],
        "type": {
            "names": [
                "\"default\"",
                "\"title\"",
                "\"even\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"default\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"title\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"even\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * The possible values for the units of the width property are defined by a specific table or table cell width property.\n     * <b>\"auto\"</b> - sets the table or table cell width to auto width.\n     * <b>\"twips\"</b> - sets the table or table cell width to be measured in twentieths of a point.\n     * <b>\"nul\"</b> - sets the table or table cell width to be of a zero value.\n     * <b>\"percent\"</b> - sets the table or table cell width to be measured in percent to the parent container.\n\t * @typedef {(\"auto\" | \"twips\" | \"nul\" | \"percent\")} TableWidth\n\t * @see office-js-api/Examples/Enumerations/TableWidth.js\n\t */",
        "description": "The possible values for the units of the width property are defined by a specific table or table cell width property.\n<b>\"auto\"</b> - sets the table or table cell width to auto width.\n<b>\"twips\"</b> - sets the table or table cell width to be measured in twentieths of a point.\n<b>\"nul\"</b> - sets the table or table cell width to be of a zero value.\n<b>\"percent\"</b> - sets the table or table cell width to be measured in percent to the parent container.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\ntableCell.SetWidth(\"twips\", 2000);\n```",
        "name": "TableWidth",
        "longname": "TableWidth",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 3950,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/TableWidth.js"
        ],
        "type": {
            "names": [
                "\"auto\"",
                "\"twips\"",
                "\"nul\"",
                "\"percent\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"auto\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"twips\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"nul\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"percent\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * This simple type specifies possible values for the table sections to which the current conditional formatting properties will be applied when this selected table style is used.\n\t * <b>\"topLeftCell\"</b> - specifies that the table formatting is applied to the top left cell.\n\t * <b>\"topRightCell\"</b> - specifies that the table formatting is applied to the top right cell.\n\t * <b>\"bottomLeftCell\"</b> - specifies that the table formatting is applied to the bottom left cell.\n\t * <b>\"bottomRightCell\"</b> - specifies that the table formatting is applied to the bottom right cell.\n\t * <b>\"firstRow\"</b> - specifies that the table formatting is applied to the first row.\n\t * <b>\"lastRow\"</b> - specifies that the table formatting is applied to the last row.\n\t * <b>\"firstColumn\"</b> - specifies that the table formatting is applied to the first column. Any subsequent row which is in *table header* ({@link ApiTableRowPr#SetTableHeader}) will also use this conditional format.\n\t * <b>\"lastColumn\"</b> - specifies that the table formatting is applied to the last column.\n\t * <b>\"bandedColumn\"</b> - specifies that the table formatting is applied to odd numbered groupings of rows.\n\t * <b>\"bandedColumnEven\"</b> - specifies that the table formatting is applied to even numbered groupings of rows.\n\t * <b>\"bandedRow\"</b> - specifies that the table formatting is applied to odd numbered groupings of columns.\n\t * <b>\"bandedRowEven\"</b> - specifies that the table formatting is applied to even numbered groupings of columns.\n\t * <b>\"wholeTable\"</b> - specifies that the conditional formatting is applied to the whole table.\n\t * @typedef {(\"topLeftCell\" | \"topRightCell\" | \"bottomLeftCell\" | \"bottomRightCell\" | \"firstRow\" | \"lastRow\" |\n\t *     \"firstColumn\" | \"lastColumn\" | \"bandedColumn\" | \"bandedColumnEven\" | \"bandedRow\" | \"bandedRowEven\" |\n\t *     \"wholeTable\")} TableStyleOverrideType\n\t * @see office-js-api/Examples/Enumerations/TableStyleOverrideType.js\n\t */",
        "description": "This simple type specifies possible values for the table sections to which the current conditional formatting properties will be applied when this selected table style is used.\n<b>\"topLeftCell\"</b> - specifies that the table formatting is applied to the top left cell.\n<b>\"topRightCell\"</b> - specifies that the table formatting is applied to the top right cell.\n<b>\"bottomLeftCell\"</b> - specifies that the table formatting is applied to the bottom left cell.\n<b>\"bottomRightCell\"</b> - specifies that the table formatting is applied to the bottom right cell.\n<b>\"firstRow\"</b> - specifies that the table formatting is applied to the first row.\n<b>\"lastRow\"</b> - specifies that the table formatting is applied to the last row.\n<b>\"firstColumn\"</b> - specifies that the table formatting is applied to the first column. Any subsequent row which is in *table header* ({@link ApiTableRowPr#SetTableHeader}) will also use this conditional format.\n<b>\"lastColumn\"</b> - specifies that the table formatting is applied to the last column.\n<b>\"bandedColumn\"</b> - specifies that the table formatting is applied to odd numbered groupings of rows.\n<b>\"bandedColumnEven\"</b> - specifies that the table formatting is applied to even numbered groupings of rows.\n<b>\"bandedRow\"</b> - specifies that the table formatting is applied to odd numbered groupings of columns.\n<b>\"bandedRowEven\"</b> - specifies that the table formatting is applied to even numbered groupings of columns.\n<b>\"wholeTable\"</b> - specifies that the conditional formatting is applied to the whole table.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\ntableStyle.GetConditionalTableStyle(\"topLeftCell\").GetTableCellPr().SetShd(\"clear\", 255, 0, 0);\n```",
        "name": "TableStyleOverrideType",
        "longname": "TableStyleOverrideType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 3960,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/TableStyleOverrideType.js"
        ],
        "type": {
            "names": [
                "\"topLeftCell\"",
                "\"topRightCell\"",
                "\"bottomLeftCell\"",
                "\"bottomRightCell\"",
                "\"firstRow\"",
                "\"lastRow\"",
                "\"firstColumn\"",
                "\"lastColumn\"",
                "\"bandedColumn\"",
                "\"bandedColumnEven\"",
                "\"bandedRow\"",
                "\"bandedRowEven\"",
                "\"wholeTable\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"topLeftCell\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"topRightCell\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bottomLeftCell\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bottomRightCell\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"firstRow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lastRow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"firstColumn\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lastColumn\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bandedColumn\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bandedColumnEven\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bandedRow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bandedRowEven\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"wholeTable\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * The types of elements that can be added to the paragraph structure.\n\t * @typedef {(ApiUnsupported | ApiRun | ApiInlineLvlSdt | ApiHyperlink | ApiFormBase)} ParagraphContent\n\t * @see office-js-api/Examples/Enumerations/ParagraphContent.js\n\t */",
        "description": "The types of elements that can be added to the paragraph structure.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nparagraph.AddElement(run, 0);\n```",
        "name": "ParagraphContent",
        "longname": "ParagraphContent",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 3981,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/ParagraphContent.js"
        ],
        "type": {
            "names": [
                "ApiUnsupported",
                "ApiRun",
                "ApiInlineLvlSdt",
                "ApiHyperlink",
                "ApiFormBase"
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "ApiUnsupported"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiRun"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiInlineLvlSdt"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiHyperlink"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiFormBase"
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * The possible values for the base which the relative horizontal positioning of an object will be calculated from.\n\t * @typedef {(\"character\" | \"column\" | \"leftMargin\" | \"rightMargin\" | \"margin\" | \"page\")} RelFromH\n\t * @see office-js-api/Examples/Enumerations/RelFromH.js\n\t */",
        "description": "The possible values for the base which the relative horizontal positioning of an object will be calculated from.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\ndrawing.SetHorAlign(\"page\", \"center\");\n```",
        "name": "RelFromH",
        "longname": "RelFromH",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 3987,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/RelFromH.js"
        ],
        "type": {
            "names": [
                "\"character\"",
                "\"column\"",
                "\"leftMargin\"",
                "\"rightMargin\"",
                "\"margin\"",
                "\"page\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"character\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"column\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"leftMargin\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"rightMargin\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"margin\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"page\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * The possible values for the base which the relative vertical positioning of an object will be calculated from.\n\t * @typedef {(\"bottomMargin\" | \"topMargin\" | \"margin\" | \"page\" | \"line\" | \"paragraph\")} RelFromV\n\t * @see office-js-api/Examples/Enumerations/RelFromV.js\n\t */",
        "description": "The possible values for the base which the relative vertical positioning of an object will be calculated from.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\ndrawing.SetVerAlign(\"page\", \"center\");\n```",
        "name": "RelFromV",
        "longname": "RelFromV",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 3993,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/RelFromV.js"
        ],
        "type": {
            "names": [
                "\"bottomMargin\"",
                "\"topMargin\"",
                "\"margin\"",
                "\"page\"",
                "\"line\"",
                "\"paragraph\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"bottomMargin\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"topMargin\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"margin\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"page\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"line\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"paragraph\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * English measure unit. 1 mm = 36000 EMUs, 1 inch = 914400 EMUs.\n\t * @typedef {number} EMU\n\t * @see office-js-api/Examples/Enumerations/EMU.js\n\t */",
        "description": "English measure unit. 1 mm = 36000 EMUs, 1 inch = 914400 EMUs.",
        "name": "EMU",
        "longname": "EMU",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 3999,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/EMU.js"
        ],
        "type": {
            "names": [
                "number"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "number"
            }
        }
    },
    {
        "comment": "/**\n\t * This type specifies the preset shape geometry that will be used for a shape.\n\t * @typedef {(\"accentBorderCallout1\" | \"accentBorderCallout2\" | \"accentBorderCallout3\" | \"accentCallout1\" |\n\t *     \"accentCallout2\" | \"accentCallout3\" | \"actionButtonBackPrevious\" | \"actionButtonBeginning\" |\n\t *     \"actionButtonBlank\" | \"actionButtonDocument\" | \"actionButtonEnd\" | \"actionButtonForwardNext\" |\n\t *     \"actionButtonHelp\" | \"actionButtonHome\" | \"actionButtonInformation\" | \"actionButtonMovie\" |\n\t *     \"actionButtonReturn\" | \"actionButtonSound\" | \"arc\" | \"bentArrow\" | \"bentConnector2\" | \"bentConnector3\" |\n\t *     \"bentConnector4\" | \"bentConnector5\" | \"bentUpArrow\" | \"bevel\" | \"blockArc\" | \"borderCallout1\" |\n\t *     \"borderCallout2\" | \"borderCallout3\" | \"bracePair\" | \"bracketPair\" | \"callout1\" | \"callout2\" | \"callout3\" |\n\t *     \"can\" | \"chartPlus\" | \"chartStar\" | \"chartX\" | \"chevron\" | \"chord\" | \"circularArrow\" | \"cloud\" |\n\t *     \"cloudCallout\" | \"corner\" | \"cornerTabs\" | \"cube\" | \"curvedConnector2\" | \"curvedConnector3\" |\n\t *     \"curvedConnector4\" | \"curvedConnector5\" | \"curvedDownArrow\" | \"curvedLeftArrow\" | \"curvedRightArrow\" |\n\t *     \"curvedUpArrow\" | \"decagon\" | \"diagStripe\" | \"diamond\" | \"dodecagon\" | \"donut\" | \"doubleWave\" | \"downArrow\" | \"downArrowCallout\" | \"ellipse\" | \"ellipseRibbon\" | \"ellipseRibbon2\" | \"flowChartAlternateProcess\" | \"flowChartCollate\" | \"flowChartConnector\" | \"flowChartDecision\" | \"flowChartDelay\" | \"flowChartDisplay\" | \"flowChartDocument\" | \"flowChartExtract\" | \"flowChartInputOutput\" | \"flowChartInternalStorage\" | \"flowChartMagneticDisk\" | \"flowChartMagneticDrum\" | \"flowChartMagneticTape\" | \"flowChartManualInput\" | \"flowChartManualOperation\" | \"flowChartMerge\" | \"flowChartMultidocument\" | \"flowChartOfflineStorage\" | \"flowChartOffpageConnector\" | \"flowChartOnlineStorage\" | \"flowChartOr\" | \"flowChartPredefinedProcess\" | \"flowChartPreparation\" | \"flowChartProcess\" | \"flowChartPunchedCard\" | \"flowChartPunchedTape\" | \"flowChartSort\" | \"flowChartSummingJunction\" | \"flowChartTerminator\" | \"foldedCorner\" | \"frame\" | \"funnel\" | \"gear6\" | \"gear9\" | \"halfFrame\" | \"heart\" | \"heptagon\" | \"hexagon\" | \"homePlate\" | \"horizontalScroll\" | \"irregularSeal1\" | \"irregularSeal2\" | \"leftArrow\" | \"leftArrowCallout\" | \"leftBrace\" | \"leftBracket\" | \"leftCircularArrow\" | \"leftRightArrow\" | \"leftRightArrowCallout\" | \"leftRightCircularArrow\" | \"leftRightRibbon\" | \"leftRightUpArrow\" | \"leftUpArrow\" | \"lightningBolt\" | \"line\" | \"lineInv\" | \"mathDivide\" | \"mathEqual\" | \"mathMinus\" | \"mathMultiply\" | \"mathNotEqual\" | \"mathPlus\" | \"moon\" | \"nonIsoscelesTrapezoid\" | \"noSmoking\" | \"notchedRightArrow\" | \"octagon\" | \"parallelogram\" | \"pentagon\" | \"pie\" | \"pieWedge\" | \"plaque\" | \"plaqueTabs\" | \"plus\" | \"quadArrow\" | \"quadArrowCallout\" | \"rect\" | \"ribbon\" | \"ribbon2\" | \"rightArrow\" | \"rightArrowCallout\" | \"rightBrace\" | \"rightBracket\" | \"round1Rect\" | \"round2DiagRect\" | \"round2SameRect\" | \"roundRect\" | \"rtTriangle\" | \"smileyFace\" | \"snip1Rect\" | \"snip2DiagRect\" | \"snip2SameRect\" | \"snipRoundRect\" | \"squareTabs\" | \"star10\" | \"star12\" | \"star16\" | \"star24\" | \"star32\" | \"star4\" | \"star5\" | \"star6\" | \"star7\" | \"star8\" | \"straightConnector1\" | \"stripedRightArrow\" | \"sun\" | \"swooshArrow\" | \"teardrop\" | \"trapezoid\" | \"triangle\" | \"upArrowCallout\" | \"upDownArrow\" | \"upDownArrow\" | \"upDownArrowCallout\" | \"uturnArrow\" | \"verticalScroll\" | \"wave\" | \"wedgeEllipseCallout\" | \"wedgeRectCallout\" | \"wedgeRoundRectCallout\")} ShapeType\n\t * @see office-js-api/Examples/Enumerations/ShapeType.js\n\t */",
        "description": "This type specifies the preset shape geometry that will be used for a shape.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet drawing = Api.CreateShape(\"diamond\", 100 * 36000, 100 * 36000, fill, stroke);\n```",
        "name": "ShapeType",
        "longname": "ShapeType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4005,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/ShapeType.js"
        ],
        "type": {
            "names": [
                "\"accentBorderCallout1\"",
                "\"accentBorderCallout2\"",
                "\"accentBorderCallout3\"",
                "\"accentCallout1\"",
                "\"accentCallout2\"",
                "\"accentCallout3\"",
                "\"actionButtonBackPrevious\"",
                "\"actionButtonBeginning\"",
                "\"actionButtonBlank\"",
                "\"actionButtonDocument\"",
                "\"actionButtonEnd\"",
                "\"actionButtonForwardNext\"",
                "\"actionButtonHelp\"",
                "\"actionButtonHome\"",
                "\"actionButtonInformation\"",
                "\"actionButtonMovie\"",
                "\"actionButtonReturn\"",
                "\"actionButtonSound\"",
                "\"arc\"",
                "\"bentArrow\"",
                "\"bentConnector2\"",
                "\"bentConnector3\"",
                "\"bentConnector4\"",
                "\"bentConnector5\"",
                "\"bentUpArrow\"",
                "\"bevel\"",
                "\"blockArc\"",
                "\"borderCallout1\"",
                "\"borderCallout2\"",
                "\"borderCallout3\"",
                "\"bracePair\"",
                "\"bracketPair\"",
                "\"callout1\"",
                "\"callout2\"",
                "\"callout3\"",
                "\"can\"",
                "\"chartPlus\"",
                "\"chartStar\"",
                "\"chartX\"",
                "\"chevron\"",
                "\"chord\"",
                "\"circularArrow\"",
                "\"cloud\"",
                "\"cloudCallout\"",
                "\"corner\"",
                "\"cornerTabs\"",
                "\"cube\"",
                "\"curvedConnector2\"",
                "\"curvedConnector3\"",
                "\"curvedConnector4\"",
                "\"curvedConnector5\"",
                "\"curvedDownArrow\"",
                "\"curvedLeftArrow\"",
                "\"curvedRightArrow\"",
                "\"curvedUpArrow\"",
                "\"decagon\"",
                "\"diagStripe\"",
                "\"diamond\"",
                "\"dodecagon\"",
                "\"donut\"",
                "\"doubleWave\"",
                "\"downArrow\"",
                "\"downArrowCallout\"",
                "\"ellipse\"",
                "\"ellipseRibbon\"",
                "\"ellipseRibbon2\"",
                "\"flowChartAlternateProcess\"",
                "\"flowChartCollate\"",
                "\"flowChartConnector\"",
                "\"flowChartDecision\"",
                "\"flowChartDelay\"",
                "\"flowChartDisplay\"",
                "\"flowChartDocument\"",
                "\"flowChartExtract\"",
                "\"flowChartInputOutput\"",
                "\"flowChartInternalStorage\"",
                "\"flowChartMagneticDisk\"",
                "\"flowChartMagneticDrum\"",
                "\"flowChartMagneticTape\"",
                "\"flowChartManualInput\"",
                "\"flowChartManualOperation\"",
                "\"flowChartMerge\"",
                "\"flowChartMultidocument\"",
                "\"flowChartOfflineStorage\"",
                "\"flowChartOffpageConnector\"",
                "\"flowChartOnlineStorage\"",
                "\"flowChartOr\"",
                "\"flowChartPredefinedProcess\"",
                "\"flowChartPreparation\"",
                "\"flowChartProcess\"",
                "\"flowChartPunchedCard\"",
                "\"flowChartPunchedTape\"",
                "\"flowChartSort\"",
                "\"flowChartSummingJunction\"",
                "\"flowChartTerminator\"",
                "\"foldedCorner\"",
                "\"frame\"",
                "\"funnel\"",
                "\"gear6\"",
                "\"gear9\"",
                "\"halfFrame\"",
                "\"heart\"",
                "\"heptagon\"",
                "\"hexagon\"",
                "\"homePlate\"",
                "\"horizontalScroll\"",
                "\"irregularSeal1\"",
                "\"irregularSeal2\"",
                "\"leftArrow\"",
                "\"leftArrowCallout\"",
                "\"leftBrace\"",
                "\"leftBracket\"",
                "\"leftCircularArrow\"",
                "\"leftRightArrow\"",
                "\"leftRightArrowCallout\"",
                "\"leftRightCircularArrow\"",
                "\"leftRightRibbon\"",
                "\"leftRightUpArrow\"",
                "\"leftUpArrow\"",
                "\"lightningBolt\"",
                "\"line\"",
                "\"lineInv\"",
                "\"mathDivide\"",
                "\"mathEqual\"",
                "\"mathMinus\"",
                "\"mathMultiply\"",
                "\"mathNotEqual\"",
                "\"mathPlus\"",
                "\"moon\"",
                "\"nonIsoscelesTrapezoid\"",
                "\"noSmoking\"",
                "\"notchedRightArrow\"",
                "\"octagon\"",
                "\"parallelogram\"",
                "\"pentagon\"",
                "\"pie\"",
                "\"pieWedge\"",
                "\"plaque\"",
                "\"plaqueTabs\"",
                "\"plus\"",
                "\"quadArrow\"",
                "\"quadArrowCallout\"",
                "\"rect\"",
                "\"ribbon\"",
                "\"ribbon2\"",
                "\"rightArrow\"",
                "\"rightArrowCallout\"",
                "\"rightBrace\"",
                "\"rightBracket\"",
                "\"round1Rect\"",
                "\"round2DiagRect\"",
                "\"round2SameRect\"",
                "\"roundRect\"",
                "\"rtTriangle\"",
                "\"smileyFace\"",
                "\"snip1Rect\"",
                "\"snip2DiagRect\"",
                "\"snip2SameRect\"",
                "\"snipRoundRect\"",
                "\"squareTabs\"",
                "\"star10\"",
                "\"star12\"",
                "\"star16\"",
                "\"star24\"",
                "\"star32\"",
                "\"star4\"",
                "\"star5\"",
                "\"star6\"",
                "\"star7\"",
                "\"star8\"",
                "\"straightConnector1\"",
                "\"stripedRightArrow\"",
                "\"sun\"",
                "\"swooshArrow\"",
                "\"teardrop\"",
                "\"trapezoid\"",
                "\"triangle\"",
                "\"upArrowCallout\"",
                "\"upDownArrow\"",
                "\"upDownArrow\"",
                "\"upDownArrowCallout\"",
                "\"uturnArrow\"",
                "\"verticalScroll\"",
                "\"wave\"",
                "\"wedgeEllipseCallout\"",
                "\"wedgeRectCallout\"",
                "\"wedgeRoundRectCallout\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"accentBorderCallout1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"accentBorderCallout2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"accentBorderCallout3\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"accentCallout1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"accentCallout2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"accentCallout3\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"actionButtonBackPrevious\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"actionButtonBeginning\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"actionButtonBlank\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"actionButtonDocument\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"actionButtonEnd\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"actionButtonForwardNext\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"actionButtonHelp\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"actionButtonHome\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"actionButtonInformation\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"actionButtonMovie\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"actionButtonReturn\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"actionButtonSound\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"arc\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bentArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bentConnector2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bentConnector3\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bentConnector4\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bentConnector5\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bentUpArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bevel\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"blockArc\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"borderCallout1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"borderCallout2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"borderCallout3\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bracePair\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bracketPair\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"callout1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"callout2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"callout3\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"can\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"chartPlus\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"chartStar\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"chartX\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"chevron\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"chord\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"circularArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"cloud\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"cloudCallout\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"corner\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"cornerTabs\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"cube\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"curvedConnector2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"curvedConnector3\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"curvedConnector4\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"curvedConnector5\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"curvedDownArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"curvedLeftArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"curvedRightArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"curvedUpArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"decagon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"diagStripe\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"diamond\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dodecagon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"donut\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"doubleWave\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"downArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"downArrowCallout\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ellipse\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ellipseRibbon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ellipseRibbon2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartAlternateProcess\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartCollate\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartConnector\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartDecision\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartDelay\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartDisplay\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartDocument\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartExtract\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartInputOutput\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartInternalStorage\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartMagneticDisk\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartMagneticDrum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartMagneticTape\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartManualInput\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartManualOperation\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartMerge\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartMultidocument\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartOfflineStorage\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartOffpageConnector\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartOnlineStorage\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartOr\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartPredefinedProcess\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartPreparation\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartProcess\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartPunchedCard\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartPunchedTape\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartSort\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartSummingJunction\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"flowChartTerminator\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"foldedCorner\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"frame\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"funnel\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"gear6\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"gear9\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"halfFrame\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"heart\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"heptagon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"hexagon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"homePlate\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"horizontalScroll\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"irregularSeal1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"irregularSeal2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"leftArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"leftArrowCallout\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"leftBrace\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"leftBracket\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"leftCircularArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"leftRightArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"leftRightArrowCallout\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"leftRightCircularArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"leftRightRibbon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"leftRightUpArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"leftUpArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightningBolt\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"line\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lineInv\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mathDivide\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mathEqual\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mathMinus\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mathMultiply\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mathNotEqual\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mathPlus\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"moon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"nonIsoscelesTrapezoid\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noSmoking\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"notchedRightArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"octagon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"parallelogram\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pentagon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pie\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pieWedge\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"plaque\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"plaqueTabs\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"plus\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"quadArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"quadArrowCallout\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"rect\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ribbon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ribbon2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"rightArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"rightArrowCallout\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"rightBrace\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"rightBracket\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"round1Rect\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"round2DiagRect\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"round2SameRect\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"roundRect\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"rtTriangle\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"smileyFace\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"snip1Rect\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"snip2DiagRect\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"snip2SameRect\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"snipRoundRect\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"squareTabs\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"star10\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"star12\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"star16\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"star24\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"star32\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"star4\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"star5\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"star6\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"star7\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"star8\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"straightConnector1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"stripedRightArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"sun\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"swooshArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"teardrop\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"trapezoid\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"triangle\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"upArrowCallout\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"upDownArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"upDownArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"upDownArrowCallout\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"uturnArrow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"verticalScroll\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"wave\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"wedgeEllipseCallout\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"wedgeRectCallout\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"wedgeRoundRectCallout\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * This type specifies the available chart types which can be used to create a new chart.\n\t * @typedef {(\"bar\" | \"barStacked\" | \"barStackedPercent\" | \"bar3D\" | \"barStacked3D\" | \"barStackedPercent3D\" |\n\t *     \"barStackedPercent3DPerspective\" | \"horizontalBar\" | \"horizontalBarStacked\" | \"horizontalBarStackedPercent\"\n\t *     | \"horizontalBar3D\" | \"horizontalBarStacked3D\" | \"horizontalBarStackedPercent3D\" | \"lineNormal\" |\n\t *     \"lineStacked\" | \"lineStackedPercent\" | \"line3D\" | \"pie\" | \"pie3D\" | \"doughnut\" | \"scatter\" | \"stock\" |\n\t *     \"area\" | \"areaStacked\" | \"areaStackedPercent\" | \"comboBarLine\" | \"comboBarLineSecondary\" | \"comboCustom\" | \"unknown\")} ChartType\n\t * @see office-js-api/Examples/Enumerations/ChartType.js\n\t */",
        "description": "This type specifies the available chart types which can be used to create a new chart.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\n// ChartType used in text documents\n// The resulting chart will have a 'bar3D' type:\nvar chart = Api.CreateChart(\"bar3D\", [[200, 240, 280],[250, 260, 280]], [\"Projected Revenue\", \"Estimated Costs\"], [2014, 2015, 2016], 4051300, 2347595, 24);\n\n// ChartType used in spreadsheets\n// The resulting chart will have a 'bar3D' type:\nvar chart = worksheet.AddChart(\"'Sheet1'!$A$1:$D$3\", true, \"bar3D\", 2, 100 * 36000, 70 * 36000, 0, 2 * 36000, 7, 3 * 36000);\n```",
        "name": "ChartType",
        "longname": "ChartType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4021,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/ChartType.js"
        ],
        "type": {
            "names": [
                "\"bar\"",
                "\"barStacked\"",
                "\"barStackedPercent\"",
                "\"bar3D\"",
                "\"barStacked3D\"",
                "\"barStackedPercent3D\"",
                "\"barStackedPercent3DPerspective\"",
                "\"horizontalBar\"",
                "\"horizontalBarStacked\"",
                "\"horizontalBarStackedPercent\"",
                "\"horizontalBar3D\"",
                "\"horizontalBarStacked3D\"",
                "\"horizontalBarStackedPercent3D\"",
                "\"lineNormal\"",
                "\"lineStacked\"",
                "\"lineStackedPercent\"",
                "\"line3D\"",
                "\"pie\"",
                "\"pie3D\"",
                "\"doughnut\"",
                "\"scatter\"",
                "\"stock\"",
                "\"area\"",
                "\"areaStacked\"",
                "\"areaStackedPercent\"",
                "\"comboBarLine\"",
                "\"comboBarLineSecondary\"",
                "\"comboCustom\"",
                "\"unknown\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"bar\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"barStacked\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"barStackedPercent\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bar3D\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"barStacked3D\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"barStackedPercent3D\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"barStackedPercent3DPerspective\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"horizontalBar\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"horizontalBarStacked\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"horizontalBarStackedPercent\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"horizontalBar3D\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"horizontalBarStacked3D\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"horizontalBarStackedPercent3D\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lineNormal\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lineStacked\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lineStackedPercent\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"line3D\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pie\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pie3D\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"doughnut\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"scatter\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"stock\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"area\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"areaStacked\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"areaStackedPercent\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"comboBarLine\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"comboBarLineSecondary\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"comboCustom\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"unknown\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * This type specifies the type of drawing lock.\n\t * @typedef {(\"noGrp\" | \"noUngrp\" | \"noSelect\" | \"noRot\" | \"noChangeAspect\" | \"noMove\" | \"noResize\" | \"noEditPoints\" | \"noAdjustHandles\"\n\t * \t| \"noChangeArrowheads\" | \"noChangeShapeType\" | \"noDrilldown\" | \"noTextEdit\" | \"noCrop\" | \"txBox\")} DrawingLockType\n\t * @see office-js-api/Examples/Enumerations/DrawingLockType.js\n\t */",
        "description": "This type specifies the type of drawing lock.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet lockValue = drawing.GetLockValue(\"noSelect\");\n```",
        "name": "DrawingLockType",
        "longname": "DrawingLockType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4031,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/DrawingLockType.js"
        ],
        "type": {
            "names": [
                "\"noGrp\"",
                "\"noUngrp\"",
                "\"noSelect\"",
                "\"noRot\"",
                "\"noChangeAspect\"",
                "\"noMove\"",
                "\"noResize\"",
                "\"noEditPoints\"",
                "\"noAdjustHandles\"",
                "\"noChangeArrowheads\"",
                "\"noChangeShapeType\"",
                "\"noDrilldown\"",
                "\"noTextEdit\"",
                "\"noCrop\"",
                "\"txBox\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"noGrp\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noUngrp\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noSelect\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noRot\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noChangeAspect\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noMove\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noResize\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noEditPoints\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noAdjustHandles\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noChangeArrowheads\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noChangeShapeType\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noDrilldown\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noTextEdit\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noCrop\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"txBox\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n     * The available text vertical alignment (used to align text in a shape with a placement for text inside it).\n\t * @typedef {(\"top\" | \"center\" | \"bottom\")} VerticalTextAlign\n\t * @see office-js-api/Examples/Enumerations/VerticalTextAlign.js\n\t */",
        "description": "The available text vertical alignment (used to align text in a shape with a placement for text inside it).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\ndrawing.SetVerticalTextAlign(\"top\");\n```",
        "name": "VerticalTextAlign",
        "longname": "VerticalTextAlign",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4040,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/VerticalTextAlign.js"
        ],
        "type": {
            "names": [
                "\"top\"",
                "\"center\"",
                "\"bottom\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"top\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"center\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bottom\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n     * The available color scheme identifiers.\n\t * @typedef {(\"accent1\" | \"accent2\" | \"accent3\" | \"accent4\" | \"accent5\" | \"accent6\" | \"bg1\" | \"bg2\" | \"dk1\" | \"dk2\"\n\t *     | \"lt1\" | \"lt2\" | \"tx1\" | \"tx2\")} SchemeColorId\n\t * @see office-js-api/Examples/Enumerations/SchemeColorId.js\n\t */",
        "description": "The available color scheme identifiers.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet schemeColor = Api.CreateSchemeColor(\"accent2\");\n```",
        "name": "SchemeColorId",
        "longname": "SchemeColorId",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4046,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/SchemeColorId.js"
        ],
        "type": {
            "names": [
                "\"accent1\"",
                "\"accent2\"",
                "\"accent3\"",
                "\"accent4\"",
                "\"accent5\"",
                "\"accent6\"",
                "\"bg1\"",
                "\"bg2\"",
                "\"dk1\"",
                "\"dk2\"",
                "\"lt1\"",
                "\"lt2\"",
                "\"tx1\"",
                "\"tx2\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"accent1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"accent2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"accent3\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"accent4\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"accent5\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"accent6\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bg1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bg2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dk1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dk2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lt1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lt2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"tx1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"tx2\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n     * The available preset color names.\n\t * @typedef {(\"aliceBlue\" | \"antiqueWhite\" | \"aqua\" | \"aquamarine\" | \"azure\" | \"beige\" | \"bisque\" | \"black\" |\n\t *     \"blanchedAlmond\" | \"blue\" | \"blueViolet\" | \"brown\" | \"burlyWood\" | \"cadetBlue\" | \"chartreuse\" | \"chocolate\"\n\t *     | \"coral\" | \"cornflowerBlue\" | \"cornsilk\" | \"crimson\" | \"cyan\" | \"darkBlue\" | \"darkCyan\" | \"darkGoldenrod\" |\n\t *     \"darkGray\" | \"darkGreen\" | \"darkGrey\" | \"darkKhaki\" | \"darkMagenta\" | \"darkOliveGreen\" | \"darkOrange\" |\n\t *     \"darkOrchid\" | \"darkRed\" | \"darkSalmon\" | \"darkSeaGreen\" | \"darkSlateBlue\" | \"darkSlateGray\" |\n\t *     \"darkSlateGrey\" | \"darkTurquoise\" | \"darkViolet\" | \"deepPink\" | \"deepSkyBlue\" | \"dimGray\" | \"dimGrey\" |\n\t *     \"dkBlue\" | \"dkCyan\" | \"dkGoldenrod\" | \"dkGray\" | \"dkGreen\" | \"dkGrey\" | \"dkKhaki\" | \"dkMagenta\" |\n\t *     \"dkOliveGreen\" | \"dkOrange\" | \"dkOrchid\" | \"dkRed\" | \"dkSalmon\" | \"dkSeaGreen\" | \"dkSlateBlue\" |\n\t *     \"dkSlateGray\" | \"dkSlateGrey\" | \"dkTurquoise\" | \"dkViolet\" | \"dodgerBlue\" | \"firebrick\" | \"floralWhite\" |\n\t *     \"forestGreen\" | \"fuchsia\" | \"gainsboro\" | \"ghostWhite\" | \"gold\" | \"goldenrod\" | \"gray\" | \"green\" |\n\t *     \"greenYellow\" | \"grey\" | \"honeydew\" | \"hotPink\" | \"indianRed\" | \"indigo\" | \"ivory\" | \"khaki\" | \"lavender\" | \"lavenderBlush\" | \"lawnGreen\" | \"lemonChiffon\" | \"lightBlue\" | \"lightCoral\" | \"lightCyan\" | \"lightGoldenrodYellow\" | \"lightGray\" | \"lightGreen\" | \"lightGrey\" | \"lightPink\" | \"lightSalmon\" | \"lightSeaGreen\" | \"lightSkyBlue\" | \"lightSlateGray\" | \"lightSlateGrey\" | \"lightSteelBlue\" | \"lightYellow\" | \"lime\" | \"limeGreen\" | \"linen\" | \"ltBlue\" | \"ltCoral\" | \"ltCyan\" | \"ltGoldenrodYellow\" | \"ltGray\" | \"ltGreen\" | \"ltGrey\" | \"ltPink\" | \"ltSalmon\" | \"ltSeaGreen\" | \"ltSkyBlue\" | \"ltSlateGray\" | \"ltSlateGrey\" | \"ltSteelBlue\" | \"ltYellow\" | \"magenta\" | \"maroon\" | \"medAquamarine\" | \"medBlue\" | \"mediumAquamarine\" | \"mediumBlue\" | \"mediumOrchid\" | \"mediumPurple\" | \"mediumSeaGreen\" | \"mediumSlateBlue\" | \"mediumSpringGreen\" | \"mediumTurquoise\" | \"mediumVioletRed\" | \"medOrchid\" | \"medPurple\" | \"medSeaGreen\" | \"medSlateBlue\" | \"medSpringGreen\" | \"medTurquoise\" | \"medVioletRed\" | \"midnightBlue\" | \"mintCream\" | \"mistyRose\" | \"moccasin\" | \"navajoWhite\" | \"navy\" | \"oldLace\" | \"olive\" | \"oliveDrab\" | \"orange\" | \"orangeRed\" | \"orchid\" | \"paleGoldenrod\" | \"paleGreen\" | \"paleTurquoise\" | \"paleVioletRed\" | \"papayaWhip\" | \"peachPuff\" | \"peru\" | \"pink\" | \"plum\" | \"powderBlue\" | \"purple\" | \"red\" | \"rosyBrown\" | \"royalBlue\" | \"saddleBrown\" | \"salmon\" | \"sandyBrown\" | \"seaGreen\" | \"seaShell\" | \"sienna\" | \"silver\" | \"skyBlue\" | \"slateBlue\" | \"slateGray\" | \"slateGrey\" | \"snow\" | \"springGreen\" | \"steelBlue\" | \"tan\" | \"teal\" | \"thistle\" | \"tomato\" | \"turquoise\" | \"violet\" | \"wheat\" | \"white\" | \"whiteSmoke\" | \"yellow\" | \"yellowGreen\")} PresetColor\n\t * @see office-js-api/Examples/Enumerations/PresetColor.js\n\t */",
        "description": "The available preset color names.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet schemeColor = Api.CreatePresetColor(\"lightYellow\");\n```",
        "name": "PresetColor",
        "longname": "PresetColor",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4053,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/PresetColor.js"
        ],
        "type": {
            "names": [
                "\"aliceBlue\"",
                "\"antiqueWhite\"",
                "\"aqua\"",
                "\"aquamarine\"",
                "\"azure\"",
                "\"beige\"",
                "\"bisque\"",
                "\"black\"",
                "\"blanchedAlmond\"",
                "\"blue\"",
                "\"blueViolet\"",
                "\"brown\"",
                "\"burlyWood\"",
                "\"cadetBlue\"",
                "\"chartreuse\"",
                "\"chocolate\"",
                "\"coral\"",
                "\"cornflowerBlue\"",
                "\"cornsilk\"",
                "\"crimson\"",
                "\"cyan\"",
                "\"darkBlue\"",
                "\"darkCyan\"",
                "\"darkGoldenrod\"",
                "\"darkGray\"",
                "\"darkGreen\"",
                "\"darkGrey\"",
                "\"darkKhaki\"",
                "\"darkMagenta\"",
                "\"darkOliveGreen\"",
                "\"darkOrange\"",
                "\"darkOrchid\"",
                "\"darkRed\"",
                "\"darkSalmon\"",
                "\"darkSeaGreen\"",
                "\"darkSlateBlue\"",
                "\"darkSlateGray\"",
                "\"darkSlateGrey\"",
                "\"darkTurquoise\"",
                "\"darkViolet\"",
                "\"deepPink\"",
                "\"deepSkyBlue\"",
                "\"dimGray\"",
                "\"dimGrey\"",
                "\"dkBlue\"",
                "\"dkCyan\"",
                "\"dkGoldenrod\"",
                "\"dkGray\"",
                "\"dkGreen\"",
                "\"dkGrey\"",
                "\"dkKhaki\"",
                "\"dkMagenta\"",
                "\"dkOliveGreen\"",
                "\"dkOrange\"",
                "\"dkOrchid\"",
                "\"dkRed\"",
                "\"dkSalmon\"",
                "\"dkSeaGreen\"",
                "\"dkSlateBlue\"",
                "\"dkSlateGray\"",
                "\"dkSlateGrey\"",
                "\"dkTurquoise\"",
                "\"dkViolet\"",
                "\"dodgerBlue\"",
                "\"firebrick\"",
                "\"floralWhite\"",
                "\"forestGreen\"",
                "\"fuchsia\"",
                "\"gainsboro\"",
                "\"ghostWhite\"",
                "\"gold\"",
                "\"goldenrod\"",
                "\"gray\"",
                "\"green\"",
                "\"greenYellow\"",
                "\"grey\"",
                "\"honeydew\"",
                "\"hotPink\"",
                "\"indianRed\"",
                "\"indigo\"",
                "\"ivory\"",
                "\"khaki\"",
                "\"lavender\"",
                "\"lavenderBlush\"",
                "\"lawnGreen\"",
                "\"lemonChiffon\"",
                "\"lightBlue\"",
                "\"lightCoral\"",
                "\"lightCyan\"",
                "\"lightGoldenrodYellow\"",
                "\"lightGray\"",
                "\"lightGreen\"",
                "\"lightGrey\"",
                "\"lightPink\"",
                "\"lightSalmon\"",
                "\"lightSeaGreen\"",
                "\"lightSkyBlue\"",
                "\"lightSlateGray\"",
                "\"lightSlateGrey\"",
                "\"lightSteelBlue\"",
                "\"lightYellow\"",
                "\"lime\"",
                "\"limeGreen\"",
                "\"linen\"",
                "\"ltBlue\"",
                "\"ltCoral\"",
                "\"ltCyan\"",
                "\"ltGoldenrodYellow\"",
                "\"ltGray\"",
                "\"ltGreen\"",
                "\"ltGrey\"",
                "\"ltPink\"",
                "\"ltSalmon\"",
                "\"ltSeaGreen\"",
                "\"ltSkyBlue\"",
                "\"ltSlateGray\"",
                "\"ltSlateGrey\"",
                "\"ltSteelBlue\"",
                "\"ltYellow\"",
                "\"magenta\"",
                "\"maroon\"",
                "\"medAquamarine\"",
                "\"medBlue\"",
                "\"mediumAquamarine\"",
                "\"mediumBlue\"",
                "\"mediumOrchid\"",
                "\"mediumPurple\"",
                "\"mediumSeaGreen\"",
                "\"mediumSlateBlue\"",
                "\"mediumSpringGreen\"",
                "\"mediumTurquoise\"",
                "\"mediumVioletRed\"",
                "\"medOrchid\"",
                "\"medPurple\"",
                "\"medSeaGreen\"",
                "\"medSlateBlue\"",
                "\"medSpringGreen\"",
                "\"medTurquoise\"",
                "\"medVioletRed\"",
                "\"midnightBlue\"",
                "\"mintCream\"",
                "\"mistyRose\"",
                "\"moccasin\"",
                "\"navajoWhite\"",
                "\"navy\"",
                "\"oldLace\"",
                "\"olive\"",
                "\"oliveDrab\"",
                "\"orange\"",
                "\"orangeRed\"",
                "\"orchid\"",
                "\"paleGoldenrod\"",
                "\"paleGreen\"",
                "\"paleTurquoise\"",
                "\"paleVioletRed\"",
                "\"papayaWhip\"",
                "\"peachPuff\"",
                "\"peru\"",
                "\"pink\"",
                "\"plum\"",
                "\"powderBlue\"",
                "\"purple\"",
                "\"red\"",
                "\"rosyBrown\"",
                "\"royalBlue\"",
                "\"saddleBrown\"",
                "\"salmon\"",
                "\"sandyBrown\"",
                "\"seaGreen\"",
                "\"seaShell\"",
                "\"sienna\"",
                "\"silver\"",
                "\"skyBlue\"",
                "\"slateBlue\"",
                "\"slateGray\"",
                "\"slateGrey\"",
                "\"snow\"",
                "\"springGreen\"",
                "\"steelBlue\"",
                "\"tan\"",
                "\"teal\"",
                "\"thistle\"",
                "\"tomato\"",
                "\"turquoise\"",
                "\"violet\"",
                "\"wheat\"",
                "\"white\"",
                "\"whiteSmoke\"",
                "\"yellow\"",
                "\"yellowGreen\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"aliceBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"antiqueWhite\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"aqua\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"aquamarine\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"azure\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"beige\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bisque\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"black\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"blanchedAlmond\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"blue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"blueViolet\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"brown\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"burlyWood\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"cadetBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"chartreuse\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"chocolate\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"coral\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"cornflowerBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"cornsilk\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"crimson\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"cyan\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkCyan\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkGoldenrod\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkGray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkGrey\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkKhaki\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkMagenta\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkOliveGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkOrange\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkOrchid\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkRed\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkSalmon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkSeaGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkSlateBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkSlateGray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkSlateGrey\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkTurquoise\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkViolet\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"deepPink\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"deepSkyBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dimGray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dimGrey\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkCyan\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkGoldenrod\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkGray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkGrey\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkKhaki\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkMagenta\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkOliveGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkOrange\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkOrchid\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkRed\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkSalmon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkSeaGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkSlateBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkSlateGray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkSlateGrey\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkTurquoise\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkViolet\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dodgerBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"firebrick\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"floralWhite\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"forestGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"fuchsia\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"gainsboro\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ghostWhite\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"gold\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"goldenrod\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"gray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"green\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"greenYellow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"grey\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"honeydew\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"hotPink\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"indianRed\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"indigo\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ivory\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"khaki\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lavender\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lavenderBlush\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lawnGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lemonChiffon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightCoral\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightCyan\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightGoldenrodYellow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightGray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightGrey\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightPink\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightSalmon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightSeaGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightSkyBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightSlateGray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightSlateGrey\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightSteelBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightYellow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lime\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"limeGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"linen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltCoral\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltCyan\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltGoldenrodYellow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltGray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltGrey\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltPink\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltSalmon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltSeaGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltSkyBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltSlateGray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltSlateGrey\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltSteelBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltYellow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"magenta\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"maroon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"medAquamarine\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"medBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mediumAquamarine\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mediumBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mediumOrchid\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mediumPurple\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mediumSeaGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mediumSlateBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mediumSpringGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mediumTurquoise\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mediumVioletRed\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"medOrchid\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"medPurple\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"medSeaGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"medSlateBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"medSpringGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"medTurquoise\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"medVioletRed\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"midnightBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mintCream\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mistyRose\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"moccasin\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"navajoWhite\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"navy\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"oldLace\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"olive\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"oliveDrab\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"orange\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"orangeRed\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"orchid\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"paleGoldenrod\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"paleGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"paleTurquoise\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"paleVioletRed\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"papayaWhip\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"peachPuff\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"peru\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pink\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"plum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"powderBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"purple\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"red\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"rosyBrown\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"royalBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"saddleBrown\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"salmon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"sandyBrown\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"seaGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"seaShell\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"sienna\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"silver\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"skyBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"slateBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"slateGray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"slateGrey\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"snow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"springGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"steelBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"tan\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"teal\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"thistle\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"tomato\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"turquoise\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"violet\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"wheat\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"white\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"whiteSmoke\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"yellow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"yellowGreen\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n     * Possible values for the position of chart tick labels (either horizontal or vertical).\n     * <b>\"none\"</b> - not display the selected tick labels.\n     * <b>\"nextTo\"</b> - sets the position of the selected tick labels next to the main label.\n     * <b>\"low\"</b> - sets the position of the selected tick labels in the part of the chart with lower values.\n     * <b>\"high\"</b> - sets the position of the selected tick labels in the part of the chart with higher values.\n\t * @typedef {(\"none\" | \"nextTo\" | \"low\" | \"high\")} TickLabelPosition\n\t * @see office-js-api/Examples/Enumerations/TickLabelPosition.js\n\t */",
        "description": "Possible values for the position of chart tick labels (either horizontal or vertical).\n<b>\"none\"</b> - not display the selected tick labels.\n<b>\"nextTo\"</b> - sets the position of the selected tick labels next to the main label.\n<b>\"low\"</b> - sets the position of the selected tick labels in the part of the chart with lower values.\n<b>\"high\"</b> - sets the position of the selected tick labels in the part of the chart with higher values.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nchart.SetVertAxisTickLabelPosition(\"nextTo\");\n```",
        "name": "TickLabelPosition",
        "longname": "TickLabelPosition",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4070,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/TickLabelPosition.js"
        ],
        "type": {
            "names": [
                "\"none\"",
                "\"nextTo\"",
                "\"low\"",
                "\"high\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"none\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"nextTo\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"low\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"high\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n     * The type of a fill which uses an image as a background.\n     * <b>\"tile\"</b> - if the image is smaller than the shape which is filled, the image will be tiled all over the created shape surface.\n     * <b>\"stretch\"</b> - if the image is smaller than the shape which is filled, the image will be stretched to fit the created shape surface.\n\t * @typedef {\"tile\" | \"stretch\"} BlipFillType\n\t * @see office-js-api/Examples/Enumerations/BlipFillType.js\n\t */",
        "description": "The type of a fill which uses an image as a background.\n<b>\"tile\"</b> - if the image is smaller than the shape which is filled, the image will be tiled all over the created shape surface.\n<b>\"stretch\"</b> - if the image is smaller than the shape which is filled, the image will be stretched to fit the created shape surface.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet blipFill = Api.CreateBlipFill(\"https://example.com/myimage.png\", \"tile\");\n```",
        "name": "BlipFillType",
        "longname": "BlipFillType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4080,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/BlipFillType.js"
        ],
        "type": {
            "names": [
                "\"tile\"",
                "\"stretch\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"tile\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"stretch\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n     * The available preset patterns which can be used for the fill.\n\t * @typedef {\"cross\" | \"dashDnDiag\" | \"dashHorz\" | \"dashUpDiag\" | \"dashVert\" | \"diagBrick\" | \"diagCross\" | \"divot\"\n\t *     | \"dkDnDiag\" | \"dkHorz\" | \"dkUpDiag\" | \"dkVert\" | \"dnDiag\" | \"dotDmnd\" | \"dotGrid\" | \"horz\" | \"horzBrick\" |\n\t *     \"lgCheck\" | \"lgConfetti\" | \"lgGrid\" | \"ltDnDiag\" | \"ltHorz\" | \"ltUpDiag\" | \"ltVert\" | \"narHorz\" | \"narVert\"\n\t *     | \"openDmnd\" | \"pct10\" | \"pct20\" | \"pct25\" | \"pct30\" | \"pct40\" | \"pct5\" | \"pct50\" | \"pct60\" | \"pct70\" |\n\t *     \"pct75\" | \"pct80\" | \"pct90\" | \"plaid\" | \"shingle\" | \"smCheck\" | \"smConfetti\" | \"smGrid\" | \"solidDmnd\" |\n\t *     \"sphere\" | \"trellis\" | \"upDiag\" | \"vert\" | \"wave\" | \"wdDnDiag\" | \"wdUpDiag\" | \"weave\" | \"zigZag\"}\n\t *     PatternType\n\t * @see office-js-api/Examples/Enumerations/PatternType.js\n\t */",
        "description": "The available preset patterns which can be used for the fill.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet fill = Api.CreatePatternFill(\"dashDnDiag\", Api.CreateRGBColor(0, 225, 0), Api.CreateRGBColor(255, 0, 0));\n```",
        "name": "PatternType",
        "longname": "PatternType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4088,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/PatternType.js"
        ],
        "type": {
            "names": [
                "\"cross\"",
                "\"dashDnDiag\"",
                "\"dashHorz\"",
                "\"dashUpDiag\"",
                "\"dashVert\"",
                "\"diagBrick\"",
                "\"diagCross\"",
                "\"divot\"",
                "\"dkDnDiag\"",
                "\"dkHorz\"",
                "\"dkUpDiag\"",
                "\"dkVert\"",
                "\"dnDiag\"",
                "\"dotDmnd\"",
                "\"dotGrid\"",
                "\"horz\"",
                "\"horzBrick\"",
                "\"lgCheck\"",
                "\"lgConfetti\"",
                "\"lgGrid\"",
                "\"ltDnDiag\"",
                "\"ltHorz\"",
                "\"ltUpDiag\"",
                "\"ltVert\"",
                "\"narHorz\"",
                "\"narVert\"",
                "\"openDmnd\"",
                "\"pct10\"",
                "\"pct20\"",
                "\"pct25\"",
                "\"pct30\"",
                "\"pct40\"",
                "\"pct5\"",
                "\"pct50\"",
                "\"pct60\"",
                "\"pct70\"",
                "\"pct75\"",
                "\"pct80\"",
                "\"pct90\"",
                "\"plaid\"",
                "\"shingle\"",
                "\"smCheck\"",
                "\"smConfetti\"",
                "\"smGrid\"",
                "\"solidDmnd\"",
                "\"sphere\"",
                "\"trellis\"",
                "\"upDiag\"",
                "\"vert\"",
                "\"wave\"",
                "\"wdDnDiag\"",
                "\"wdUpDiag\"",
                "\"weave\"",
                "\"zigZag\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"cross\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dashDnDiag\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dashHorz\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dashUpDiag\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dashVert\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"diagBrick\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"diagCross\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"divot\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkDnDiag\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkHorz\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkUpDiag\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dkVert\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dnDiag\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dotDmnd\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dotGrid\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"horz\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"horzBrick\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lgCheck\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lgConfetti\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lgGrid\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltDnDiag\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltHorz\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltUpDiag\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ltVert\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"narHorz\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"narVert\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"openDmnd\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pct10\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pct20\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pct25\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pct30\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pct40\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pct5\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pct50\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pct60\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pct70\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pct75\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pct80\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pct90\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"plaid\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"shingle\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"smCheck\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"smConfetti\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"smGrid\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"solidDmnd\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"sphere\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"trellis\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"upDiag\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"vert\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"wave\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"wdDnDiag\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"wdUpDiag\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"weave\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"zigZag\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t *\n\t * The lock type of the content control.\n\t * @typedef {\"unlocked\" | \"contentLocked\" | \"sdtContentLocked\" | \"sdtLocked\"} SdtLock\n\t * @see office-js-api/Examples/Enumerations/SdtLock.js\n\t */",
        "description": "The lock type of the content control.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\ninlineLvlSdt.SetLock(\"sdtContentLocked\");\n```",
        "name": "SdtLock",
        "longname": "SdtLock",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4100,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/SdtLock.js"
        ],
        "type": {
            "names": [
                "\"unlocked\"",
                "\"contentLocked\"",
                "\"sdtContentLocked\"",
                "\"sdtLocked\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"unlocked\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"contentLocked\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"sdtContentLocked\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"sdtLocked\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n     * Text transform type.\n\t * @typedef {(\"textArchDown\" | \"textArchDownPour\" | \"textArchUp\" | \"textArchUpPour\" | \"textButton\" | \"textButtonPour\" | \"textCanDown\"\n\t * | \"textCanUp\" | \"textCascadeDown\" | \"textCascadeUp\" | \"textChevron\" | \"textChevronInverted\" | \"textCircle\" | \"textCirclePour\"\n\t * | \"textCurveDown\" | \"textCurveUp\" | \"textDeflate\" | \"textDeflateBottom\" | \"textDeflateInflate\" | \"textDeflateInflateDeflate\" | \"textDeflateTop\"\n\t * | \"textDoubleWave1\" | \"textFadeDown\" | \"textFadeLeft\" | \"textFadeRight\" | \"textFadeUp\" | \"textInflate\" | \"textInflateBottom\" | \"textInflateTop\"\n\t * | \"textPlain\" | \"textRingInside\" | \"textRingOutside\" | \"textSlantDown\" | \"textSlantUp\" | \"textStop\" | \"textTriangle\" | \"textTriangleInverted\"\n\t * | \"textWave1\" | \"textWave2\" | \"textWave4\" | \"textNoShape\")} TextTransform\n\t * @see office-js-api/Examples/Enumerations/TextTransform.js\n\t */",
        "description": "Text transform type.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet textArt = Api.CreateWordArt(oTextPr, \"onlyoffice\", \"textArchUp\", fill, stroke, 0, 150 * 36000, 50 * 36000);\n```",
        "name": "TextTransform",
        "longname": "TextTransform",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4107,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/TextTransform.js"
        ],
        "type": {
            "names": [
                "\"textArchDown\"",
                "\"textArchDownPour\"",
                "\"textArchUp\"",
                "\"textArchUpPour\"",
                "\"textButton\"",
                "\"textButtonPour\"",
                "\"textCanDown\"",
                "\"textCanUp\"",
                "\"textCascadeDown\"",
                "\"textCascadeUp\"",
                "\"textChevron\"",
                "\"textChevronInverted\"",
                "\"textCircle\"",
                "\"textCirclePour\"",
                "\"textCurveDown\"",
                "\"textCurveUp\"",
                "\"textDeflate\"",
                "\"textDeflateBottom\"",
                "\"textDeflateInflate\"",
                "\"textDeflateInflateDeflate\"",
                "\"textDeflateTop\"",
                "\"textDoubleWave1\"",
                "\"textFadeDown\"",
                "\"textFadeLeft\"",
                "\"textFadeRight\"",
                "\"textFadeUp\"",
                "\"textInflate\"",
                "\"textInflateBottom\"",
                "\"textInflateTop\"",
                "\"textPlain\"",
                "\"textRingInside\"",
                "\"textRingOutside\"",
                "\"textSlantDown\"",
                "\"textSlantUp\"",
                "\"textStop\"",
                "\"textTriangle\"",
                "\"textTriangleInverted\"",
                "\"textWave1\"",
                "\"textWave2\"",
                "\"textWave4\"",
                "\"textNoShape\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"textArchDown\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textArchDownPour\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textArchUp\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textArchUpPour\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textButton\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textButtonPour\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textCanDown\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textCanUp\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textCascadeDown\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textCascadeUp\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textChevron\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textChevronInverted\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textCircle\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textCirclePour\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textCurveDown\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textCurveUp\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textDeflate\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textDeflateBottom\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textDeflateInflate\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textDeflateInflateDeflate\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textDeflateTop\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textDoubleWave1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textFadeDown\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textFadeLeft\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textFadeRight\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textFadeUp\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textInflate\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textInflateBottom\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textInflateTop\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textPlain\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textRingInside\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textRingOutside\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textSlantDown\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textSlantUp\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textStop\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textTriangle\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textTriangleInverted\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textWave1\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textWave2\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textWave4\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"textNoShape\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Form type.\n\t * The available form types.\n\t * @typedef {\"textForm\" | \"comboBoxForm\" | \"dropDownForm\" | \"checkBoxForm\" | \"radioButtonForm\" | \"pictureForm\"} FormType\n\t * @see office-js-api/Examples/Enumerations/FormType.js\n\t */",
        "description": "Form type.\nThe available form types.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet formType = textForm.GetFormType();\n```",
        "name": "FormType",
        "longname": "FormType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4118,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/FormType.js"
        ],
        "type": {
            "names": [
                "\"textForm\"",
                "\"comboBoxForm\"",
                "\"dropDownForm\"",
                "\"checkBoxForm\"",
                "\"radioButtonForm\"",
                "\"pictureForm\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"textForm\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"comboBoxForm\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dropDownForm\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"checkBoxForm\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"radioButtonForm\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pictureForm\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * 1 millimetre equals 1/10th of a centimetre.\n\t * @typedef {number} mm\n\t * @see office-js-api/Examples/Enumerations/mm.js\n\t */",
        "description": "1 millimetre equals 1/10th of a centimetre.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\ntextForm.SetCellWidth(7);\n```",
        "name": "mm",
        "longname": "mm",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4125,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/mm.js"
        ],
        "type": {
            "names": [
                "number"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "number"
            }
        }
    },
    {
        "comment": "/**\n\t * The condition to scale an image in the picture form.\n\t * @typedef {\"always\" | \"never\" | \"tooBig\" | \"tooSmall\"} ScaleFlag\n\t * @see office-js-api/Examples/Enumerations/ScaleFlag.js\n\t */",
        "description": "The condition to scale an image in the picture form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\npictureForm.SetScaleFlag(\"tooBig\");\n```",
        "name": "ScaleFlag",
        "longname": "ScaleFlag",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 133,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/ScaleFlag.js"
        ],
        "type": {
            "names": [
                "\"always\"",
                "\"never\"",
                "\"tooBig\"",
                "\"tooSmall\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"always\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"never\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"tooBig\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"tooSmall\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Value from 0 to 100.\n\t * @typedef {number} percentage\n\t * @see office-js-api/Examples/Enumerations/percentage.js\n\t */",
        "description": "Value from 0 to 100.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\npictureForm.SetPicturePosition(70, 70);\n```",
        "name": "percentage",
        "longname": "percentage",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 139,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/percentage.js"
        ],
        "type": {
            "names": [
                "number"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "number"
            }
        }
    },
    {
        "comment": "/**\n\t * Available highlight colors.\n\t * @typedef {\"black\" | \"blue\" | \"cyan\" | \"green\" | \"magenta\" | \"red\" | \"yellow\" | \"white\" | \"darkBlue\" |\n\t * \"darkCyan\" | \"darkGreen\" | \"darkMagenta\" | \"darkRed\" | \"darkYellow\" | \"darkGray\" | \"lightGray\" | \"none\"} highlightColor\n\t * @see office-js-api/Examples/Enumerations/highlightColor.js\n\t */",
        "description": "Available highlight colors.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nparagraph.SetHighlight(\"green\");\n```",
        "name": "highlightColor",
        "longname": "highlightColor",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4143,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/highlightColor.js"
        ],
        "type": {
            "names": [
                "\"black\"",
                "\"blue\"",
                "\"cyan\"",
                "\"green\"",
                "\"magenta\"",
                "\"red\"",
                "\"yellow\"",
                "\"white\"",
                "\"darkBlue\"",
                "\"darkCyan\"",
                "\"darkGreen\"",
                "\"darkMagenta\"",
                "\"darkRed\"",
                "\"darkYellow\"",
                "\"darkGray\"",
                "\"lightGray\"",
                "\"none\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"black\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"blue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"cyan\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"green\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"magenta\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"red\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"yellow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"white\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkBlue\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkCyan\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkGreen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkMagenta\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkRed\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkYellow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"darkGray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"lightGray\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"none\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Available values of the \"numbered\" reference type:\n\t * <b>\"pageNum\"</b> - the numbered item page number;\n     * <b>\"paraNum\"</b> - the numbered item paragraph number;\n\t * <b>\"noCtxParaNum\"</b> - the abbreviated paragraph number (the specific item only, e.g. instead of \"4.1.1\" you refer to \"1\" only);\n     * <b>\"fullCtxParaNum\"</b> - the full paragraph number, e.g. \"4.1.1\";\n\t * <b>\"text\"</b> - the paragraph text value, e.g. if you have \"4.1.1. Terms and Conditions\", you refer to \"Terms and Conditions\" only;\n     * <b>\"aboveBelow\"</b> - the words \"above\" or \"below\" depending on the item position.\n\t * @typedef {\"pageNum\" | \"paraNum\" | \"noCtxParaNum\" | \"fullCtxParaNum\" | \"text\" | \"aboveBelow\"} numberedRefTo\n\t * @see office-js-api/Examples/Enumerations/numberedRefTo.js\n\t */",
        "description": "Available values of the \"numbered\" reference type:\n<b>\"pageNum\"</b> - the numbered item page number;\n<b>\"paraNum\"</b> - the numbered item paragraph number;\n<b>\"noCtxParaNum\"</b> - the abbreviated paragraph number (the specific item only, e.g. instead of \"4.1.1\" you refer to \"1\" only);\n<b>\"fullCtxParaNum\"</b> - the full paragraph number, e.g. \"4.1.1\";\n<b>\"text\"</b> - the paragraph text value, e.g. if you have \"4.1.1. Terms and Conditions\", you refer to \"Terms and Conditions\" only;\n<b>\"aboveBelow\"</b> - the words \"above\" or \"below\" depending on the item position.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nparagraph.AddNumberedCrossRef(\"pageNum\", numberedParagraph, true, true);\n```",
        "name": "numberedRefTo",
        "longname": "numberedRefTo",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4156,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/numberedRefTo.js"
        ],
        "type": {
            "names": [
                "\"pageNum\"",
                "\"paraNum\"",
                "\"noCtxParaNum\"",
                "\"fullCtxParaNum\"",
                "\"text\"",
                "\"aboveBelow\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"pageNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"paraNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noCtxParaNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"fullCtxParaNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"text\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"aboveBelow\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Available values of the \"heading\" reference type:\n\t * <b>\"text\"</b> - the entire heading text;\n\t * <b>\"pageNum\"</b> - the heading page number;\n     * <b>\"headingNum\"</b> - the heading sequence number;\n\t * <b>\"noCtxHeadingNum\"</b> - the abbreviated heading number. Make sure the cursor pointer is in the section you are referencing to, e.g. you are in section 4 and you wish to refer to heading 4.B, so instead of \"4.B\" you receive \"B\" only;\n     * <b>\"fullCtxHeadingNum\"</b> - the full heading number even if the cursor pointer is in the same section;\n     * <b>\"aboveBelow\"</b> - the words \"above\" or \"below\" depending on the item position.\n\t * @typedef {\"text\" | \"pageNum\" | \"headingNum\" | \"noCtxHeadingNum\" | \"fullCtxHeadingNum\" | \"aboveBelow\"} headingRefTo\n\t * @see office-js-api/Examples/Enumerations/headingRefTo.js\n\t */",
        "description": "Available values of the \"heading\" reference type:\n<b>\"text\"</b> - the entire heading text;\n<b>\"pageNum\"</b> - the heading page number;\n<b>\"headingNum\"</b> - the heading sequence number;\n<b>\"noCtxHeadingNum\"</b> - the abbreviated heading number. Make sure the cursor pointer is in the section you are referencing to, e.g. you are in section 4 and you wish to refer to heading 4.B, so instead of \"4.B\" you receive \"B\" only;\n<b>\"fullCtxHeadingNum\"</b> - the full heading number even if the cursor pointer is in the same section;\n<b>\"aboveBelow\"</b> - the words \"above\" or \"below\" depending on the item position.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nparagraph.AddHeadingCrossRef(\"pageNum\", headingParagraph);\n```",
        "name": "headingRefTo",
        "longname": "headingRefTo",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4168,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/headingRefTo.js"
        ],
        "type": {
            "names": [
                "\"text\"",
                "\"pageNum\"",
                "\"headingNum\"",
                "\"noCtxHeadingNum\"",
                "\"fullCtxHeadingNum\"",
                "\"aboveBelow\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"text\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pageNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"headingNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noCtxHeadingNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"fullCtxHeadingNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"aboveBelow\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Available values of the \"bookmark\" reference type:\n\t * <b>\"text\"</b> - the entire bookmark text;\n\t * <b>\"pageNum\"</b> - the bookmark page number;\n     * <b>\"paraNum\"</b> - the bookmark paragraph number;\n\t * <b>\"noCtxParaNum\"</b> - the abbreviated paragraph number (the specific item only, e.g. instead of \"4.1.1\" you refer to \"1\" only);\n     * <b>\"fullCtxParaNum</b> - the full paragraph number, e.g. \"4.1.1\";\n     * <b>\"aboveBelow\"</b> - the words \"above\" or \"below\" depending on the item position.\n\t * @typedef {\"text\" | \"pageNum\" | \"paraNum\" | \"noCtxParaNum\" | \"fullCtxParaNum\" | \"aboveBelow\"} bookmarkRefTo\n\t * @see office-js-api/Examples/Enumerations/bookmarkRefTo.js\n\t */",
        "description": "Available values of the \"bookmark\" reference type:\n<b>\"text\"</b> - the entire bookmark text;\n<b>\"pageNum\"</b> - the bookmark page number;\n<b>\"paraNum\"</b> - the bookmark paragraph number;\n<b>\"noCtxParaNum\"</b> - the abbreviated paragraph number (the specific item only, e.g. instead of \"4.1.1\" you refer to \"1\" only);\n<b>\"fullCtxParaNum</b> - the full paragraph number, e.g. \"4.1.1\";\n<b>\"aboveBelow\"</b> - the words \"above\" or \"below\" depending on the item position.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nparagraph.AddBookmarkCrossRef(\"pageNum\", bookmark);\n```",
        "name": "bookmarkRefTo",
        "longname": "bookmarkRefTo",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4180,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/bookmarkRefTo.js"
        ],
        "type": {
            "names": [
                "\"text\"",
                "\"pageNum\"",
                "\"paraNum\"",
                "\"noCtxParaNum\"",
                "\"fullCtxParaNum\"",
                "\"aboveBelow\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"text\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pageNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"paraNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"noCtxParaNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"fullCtxParaNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"aboveBelow\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Available values of the \"footnote\" reference type:\n\t * <b>\"footnoteNum\"</b> - the footnote number;\n\t * <b>\"pageNum\"</b> - the page number of the footnote;\n     * <b>\"aboveBelow\"</b> - the words \"above\" or \"below\" depending on the position of the item;\n\t * <b>\"formFootnoteNum\"</b> - the form number formatted as a footnote. The numbering of the actual footnotes is not affected.\n\t * @typedef {\"footnoteNum\" | \"pageNum\" | \"aboveBelow\" | \"formFootnoteNum\"} footnoteRefTo\n\t * @see office-js-api/Examples/Enumerations/footnoteRefTo.js\n\t */",
        "description": "Available values of the \"footnote\" reference type:\n<b>\"footnoteNum\"</b> - the footnote number;\n<b>\"pageNum\"</b> - the page number of the footnote;\n<b>\"aboveBelow\"</b> - the words \"above\" or \"below\" depending on the position of the item;\n<b>\"formFootnoteNum\"</b> - the form number formatted as a footnote. The numbering of the actual footnotes is not affected.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nparagraph.AddFootnoteCrossRef(\"pageNum\", footnoteParagraph);\n```",
        "name": "footnoteRefTo",
        "longname": "footnoteRefTo",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4192,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/footnoteRefTo.js"
        ],
        "type": {
            "names": [
                "\"footnoteNum\"",
                "\"pageNum\"",
                "\"aboveBelow\"",
                "\"formFootnoteNum\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"footnoteNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pageNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"aboveBelow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"formFootnoteNum\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Available values of the \"endnote\" reference type:\n\t * <b>\"endnoteNum\"</b> - the endnote number;\n\t * <b>\"pageNum\"</b> - the endnote page number;\n     * <b>\"aboveBelow\"</b> - the words \"above\" or \"below\" depending on the item position;\n\t * <b>\"formEndnoteNum\"</b> - the form number formatted as an endnote. The numbering of the actual endnotes is not affected.\n\t * @typedef {\"endnoteNum\" | \"pageNum\" | \"aboveBelow\" | \"formEndnoteNum\"} endnoteRefTo\n\t * @see office-js-api/Examples/Enumerations/endnoteRefTo.js\n\t */",
        "description": "Available values of the \"endnote\" reference type:\n<b>\"endnoteNum\"</b> - the endnote number;\n<b>\"pageNum\"</b> - the endnote page number;\n<b>\"aboveBelow\"</b> - the words \"above\" or \"below\" depending on the item position;\n<b>\"formEndnoteNum\"</b> - the form number formatted as an endnote. The numbering of the actual endnotes is not affected.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nparagraph.AddEndnoteCrossRef(\"pageNum\", endnoteParagraph);\n```",
        "name": "endnoteRefTo",
        "longname": "endnoteRefTo",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4202,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/endnoteRefTo.js"
        ],
        "type": {
            "names": [
                "\"endnoteNum\"",
                "\"pageNum\"",
                "\"aboveBelow\"",
                "\"formEndnoteNum\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"endnoteNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pageNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"aboveBelow\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"formEndnoteNum\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Available values of the \"equation\"/\"figure\"/\"table\" reference type:\n\t * <b>\"entireCaption\"</b>- the entire caption text;\n\t * <b>\"labelNumber\"</b> - the label and object number only, e.g. \"Table 1.1\";\n     * <b>\"captionText\"</b> - the caption text only;\n\t * <b>\"pageNum\"</b> - the page number containing the referenced object;\n\t * <b>\"aboveBelow\"</b> - the words \"above\" or \"below\" depending on the item position.\n\t * @typedef {\"entireCaption\" | \"labelNumber\" | \"captionText\" | \"pageNum\" | \"aboveBelow\"} captionRefTo\n\t * @see office-js-api/Examples/Enumerations/captionRefTo.js\n\t */",
        "description": "Available values of the \"equation\"/\"figure\"/\"table\" reference type:\n<b>\"entireCaption\"</b>- the entire caption text;\n<b>\"labelNumber\"</b> - the label and object number only, e.g. \"Table 1.1\";\n<b>\"captionText\"</b> - the caption text only;\n<b>\"pageNum\"</b> - the page number containing the referenced object;\n<b>\"aboveBelow\"</b> - the words \"above\" or \"below\" depending on the item position.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nparagraph.AddCaptionCrossRef(\"table\", \"pageNum\", caption);\n```",
        "name": "captionRefTo",
        "longname": "captionRefTo",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4212,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/captionRefTo.js"
        ],
        "type": {
            "names": [
                "\"entireCaption\"",
                "\"labelNumber\"",
                "\"captionText\"",
                "\"pageNum\"",
                "\"aboveBelow\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"entireCaption\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"labelNumber\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"captionText\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"pageNum\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"aboveBelow\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Axis position in the chart.\n\t * @typedef {(\"top\" | \"bottom\" | \"right\" | \"left\")} AxisPos\n\t * @see office-js-api/Examples/Enumerations/AxisPos.js\n\t */",
        "description": "Axis position in the chart.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nchart.SetAxieNumFormat(\"top\", \"0.00\");\n```",
        "name": "AxisPos",
        "longname": "AxisPos",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4225,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/AxisPos.js"
        ],
        "type": {
            "names": [
                "\"top\"",
                "\"bottom\"",
                "\"right\"",
                "\"left\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"top\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"bottom\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"right\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"left\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Standard numeric format.\n\t * @typedef {(\"General\" | \"0\" | \"0.00\" | \"#,##0\" | \"#,##0.00\" | \"0%\" | \"0.00%\" |\n\t * \"0.00E+00\" | \"# ?/?\" | \"# ??/??\" | \"m/d/yyyy\" | \"d-mmm-yy\" | \"d-mmm\" | \"mmm-yy\" | \"h:mm AM/PM\" |\n\t * \"h:mm:ss AM/PM\" | \"h:mm\" | \"h:mm:ss\" | \"m/d/yyyy h:mm\" | \"#,##0_);(#,##0)\" | \"#,##0_);[Red](#,##0)\" | \n\t * \"#,##0.00_);(#,##0.00)\" | \"#,##0.00_);[Red](#,##0.00)\" | \"mm:ss\" | \"[h]:mm:ss\" | \"mm:ss.0\" | \"##0.0E+0\" | \"@\")} NumFormat\n\t * @see office-js-api/Examples/Enumerations/NumFormat.js\n\t */",
        "description": "Standard numeric format.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nworksheet.GetRange(\"A1\").SetOrientation(\"xlUpward\");\n```",
        "name": "NumFormat",
        "longname": "NumFormat",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4231,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/NumFormat.js"
        ],
        "type": {
            "names": [
                "\"General\"",
                "\"0\"",
                "\"0.00\"",
                "\"#,##0\"",
                "\"#,##0.00\"",
                "\"0%\"",
                "\"0.00%\"",
                "\"0.00E+00\"",
                "\"# ?/?\"",
                "\"# ??/??\"",
                "\"m/d/yyyy\"",
                "\"d-mmm-yy\"",
                "\"d-mmm\"",
                "\"mmm-yy\"",
                "\"h:mm AM/PM\"",
                "\"h:mm:ss AM/PM\"",
                "\"h:mm\"",
                "\"h:mm:ss\"",
                "\"m/d/yyyy h:mm\"",
                "\"#,##0_);(#,##0)\"",
                "\"#,##0_);[Red](#,##0)\"",
                "\"#,##0.00_);(#,##0.00)\"",
                "\"#,##0.00_);[Red](#,##0.00)\"",
                "\"mm:ss\"",
                "\"[h]:mm:ss\"",
                "\"mm:ss.0\"",
                "\"##0.0E+0\"",
                "\"@\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"General\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"0\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"0.00\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"#,##0\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"#,##0.00\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"0%\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"0.00%\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"0.00E+00\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"# ?/?\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"# ??/??\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"m/d/yyyy\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"d-mmm-yy\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"d-mmm\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mmm-yy\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"h:mm AM/PM\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"h:mm:ss AM/PM\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"h:mm\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"h:mm:ss\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"m/d/yyyy h:mm\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"#,##0_);(#,##0)\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"#,##0_);[Red](#,##0)\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"#,##0.00_);(#,##0.00)\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"#,##0.00_);[Red](#,##0.00)\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mm:ss\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"[h]:mm:ss\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"mm:ss.0\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"##0.0E+0\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"@\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Types of all supported forms.\n\t * @typedef {ApiTextForm | ApiComboBoxForm | ApiCheckBoxForm | ApiPictureForm | ApiDateForm | ApiComplexForm} ApiForm\n\t * @see office-js-api/Examples/Enumerations/ApiForm.js\n\t */",
        "description": "Types of all supported forms.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet copyTextForm = textForm.Copy();\n```",
        "name": "ApiForm",
        "longname": "ApiForm",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4240,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/ApiForm.js"
        ],
        "type": {
            "names": [
                "ApiTextForm",
                "ApiComboBoxForm",
                "ApiCheckBoxForm",
                "ApiPictureForm",
                "ApiDateForm",
                "ApiComplexForm"
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "ApiTextForm"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiComboBoxForm"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiCheckBoxForm"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiPictureForm"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiDateForm"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiComplexForm"
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n     * Possible values for the caption numbering format.\n     * <b>\"ALPHABETIC\"</b> - upper letter.\n     * <b>\"alphabetic\"</b> - lower letter.\n     * <b>\"Roman\"</b> - upper Roman.\n     * <b>\"roman\"</b> - lower Roman.\n\t * <b>\"Arabic\"</b> - arabic.\n\t * @typedef {(\"ALPHABETIC\" | \"alphabetic\" | \"Roman\" | \"roman\" | \"Arabic\")} CaptionNumberingFormat\n\t * @see office-js-api/Examples/Enumerations/CaptionNumberingFormat.js\n\t */",
        "description": "Possible values for the caption numbering format.\n<b>\"ALPHABETIC\"</b> - upper letter.\n<b>\"alphabetic\"</b> - lower letter.\n<b>\"Roman\"</b> - upper Roman.\n<b>\"roman\"</b> - lower Roman.\n<b>\"Arabic\"</b> - arabic.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nparagraph.AddCaption(\"\", \"Figure\", false, \"Arabic\", false, undefined, \"hyphen\");\n```",
        "name": "CaptionNumberingFormat",
        "longname": "CaptionNumberingFormat",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4246,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/CaptionNumberingFormat.js"
        ],
        "type": {
            "names": [
                "\"ALPHABETIC\"",
                "\"alphabetic\"",
                "\"Roman\"",
                "\"roman\"",
                "\"Arabic\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"ALPHABETIC\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"alphabetic\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Roman\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"roman\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Arabic\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n     * Possible values for the caption separator.\n     * <b>\"hyphen\"</b> - the \"-\" punctuation mark.\n     * <b>\"period\"</b> - the \".\" punctuation mark.\n     * <b>\"colon\"</b> - the \":\" punctuation mark.\n     * <b>\"longDash\"</b> - the \"—\" punctuation mark.\n\t * <b>\"dash\"</b> - the \"-\" punctuation mark.\n\t * @typedef {(\"hyphen\" | \"period\" | \"colon\" | \"longDash\" | \"dash\")} CaptionSep\n\t * @see office-js-api/Examples/Enumerations/CaptionSep.js\n\t */",
        "description": "Possible values for the caption separator.\n<b>\"hyphen\"</b> - the \"-\" punctuation mark.\n<b>\"period\"</b> - the \".\" punctuation mark.\n<b>\"colon\"</b> - the \":\" punctuation mark.\n<b>\"longDash\"</b> - the \"—\" punctuation mark.\n<b>\"dash\"</b> - the \"-\" punctuation mark.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nparagraph.AddCaption(\"\", \"Figure\", false, \"Arabic\", false, undefined, \"hyphen\");\n```",
        "name": "CaptionSep",
        "longname": "CaptionSep",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4257,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/CaptionSep.js"
        ],
        "type": {
            "names": [
                "\"hyphen\"",
                "\"period\"",
                "\"colon\"",
                "\"longDash\"",
                "\"dash\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"hyphen\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"period\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"colon\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"longDash\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dash\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n     * Possible values for the caption label.\n     * @typedef {(\"Table\" | \"Equation\" | \"Figure\")} CaptionLabel\n\t * @see office-js-api/Examples/Enumerations/CaptionLabel.js\n\t */",
        "description": "Possible values for the caption label.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nparagraph.AddCaptionCrossRef(\"Table\", \"pageNum\", caption);\n```",
        "name": "CaptionLabel",
        "longname": "CaptionLabel",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4268,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/CaptionLabel.js"
        ],
        "type": {
            "names": [
                "\"Table\"",
                "\"Equation\"",
                "\"Figure\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"Table\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Equation\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Figure\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Table of contents properties.\n\t * @typedef {Object} TocPr\n\t * @property {boolean} [ShowPageNums=true] - Specifies whether to show page numbers in the table of contents.\n\t * @property {boolean} [RightAlgn=true] - Specifies whether to right-align page numbers in the table of contents.\n\t * @property {TocLeader} [LeaderType=\"dot\"] - The leader type in the table of contents.\n\t * @property {boolean} [FormatAsLinks=true] - Specifies whether to format the table of contents as links.\n\t * @property {TocBuildFromPr} [BuildFrom={OutlineLvls=9}] - Specifies whether to generate the table of contents from the outline levels or the specified styles.\n\t * @property {TocStyle} [TocStyle=\"standard\"] - The table of contents style type.\n\t * @see office-js-api/Examples/Enumerations/TocPr.js\n\t */",
        "description": "Table of contents properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet tocPr = {\"ShowPageNums\": true, \"RightAlgn\": true, \"LeaderType\": \"dot\", \"FormatAsLinks\": true, \"BuildFrom\": {\"OutlineLvls\": 9}, \"TocStyle\": \"standard\"};\ndoc.AddTableOfContents(tocPr);\n```",
        "name": "TocPr",
        "longname": "TocPr",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4274,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "ShowPageNums",
                "description": "Specifies whether to show page numbers in the table of contents.",
                "optional": true,
                "defaultvalue": true
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "RightAlgn",
                "description": "Specifies whether to right-align page numbers in the table of contents.",
                "optional": true,
                "defaultvalue": true
            },
            {
                "type": {
                    "names": [
                        "TocLeader"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "TocLeader"
                    }
                },
                "name": "LeaderType",
                "description": "The leader type in the table of contents.",
                "optional": true,
                "defaultvalue": "\"dot\""
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "FormatAsLinks",
                "description": "Specifies whether to format the table of contents as links.",
                "optional": true,
                "defaultvalue": true
            },
            {
                "type": {
                    "names": [
                        "TocBuildFromPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "TocBuildFromPr"
                    }
                },
                "name": "BuildFrom",
                "description": "Specifies whether to generate the table of contents from the outline levels or the specified styles.",
                "optional": true,
                "defaultvalue": "{OutlineLvls=9}"
            },
            {
                "type": {
                    "names": [
                        "TocStyle"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "TocStyle"
                    }
                },
                "name": "TocStyle",
                "description": "The table of contents style type.",
                "optional": true,
                "defaultvalue": "\"standard\""
            }
        ],
        "see": [
            "office-js-api/Examples/Enumerations/TocPr.js"
        ],
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        }
    },
    {
        "comment": "/**\n\t * Table of figures properties.\n\t * @typedef {Object} TofPr\n\t * @property {boolean} [ShowPageNums=true] - Specifies whether to show page numbers in the table of figures.\n\t * @property {boolean} [RightAlgn=true] - Specifies whether to right-align page numbers in the table of figures.\n\t * @property {TocLeader} [LeaderType=\"dot\"] - The leader type in the table of figures.\n\t * @property {boolean} [FormatAsLinks=true] - Specifies whether to format the table of figures as links.\n\t * @property {CaptionLabel | string} [BuildFrom=\"Figure\"] - Specifies whether to generate the table of figures based on the specified caption label or the paragraph style name used (for example, \"Heading 1\").\n\t * @property {boolean} [LabelNumber=true] - Specifies whether to include the label and number in the table of figures.\n\t * @property {TofStyle} [TofStyle=\"distinctive\"] - The table of figures style type.\n\t * @see office-js-api/Examples/Enumerations/TofPr.js\n\t */",
        "description": "Table of figures properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet tofPr = {\"ShowPageNums\": true, \"RightAlgn\": true, \"LeaderType\": \"dot\", \"FormatAsLinks\": true, \"BuildFrom\": \"Figure\", \"LabelNumber\": true, \"TofStyle\": \"distinctive\"};\ndoc.AddTableOfFigures(tofPr);\n```",
        "name": "TofPr",
        "longname": "TofPr",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4286,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "ShowPageNums",
                "description": "Specifies whether to show page numbers in the table of figures.",
                "optional": true,
                "defaultvalue": true
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "RightAlgn",
                "description": "Specifies whether to right-align page numbers in the table of figures.",
                "optional": true,
                "defaultvalue": true
            },
            {
                "type": {
                    "names": [
                        "TocLeader"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "TocLeader"
                    }
                },
                "name": "LeaderType",
                "description": "The leader type in the table of figures.",
                "optional": true,
                "defaultvalue": "\"dot\""
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "FormatAsLinks",
                "description": "Specifies whether to format the table of figures as links.",
                "optional": true,
                "defaultvalue": true
            },
            {
                "type": {
                    "names": [
                        "CaptionLabel",
                        "string"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "CaptionLabel"
                            },
                            {
                                "type": "NameExpression",
                                "name": "string"
                            }
                        ]
                    }
                },
                "name": "BuildFrom",
                "description": "Specifies whether to generate the table of figures based on the specified caption label or the paragraph style name used (for example, \"Heading 1\").",
                "optional": true,
                "defaultvalue": "\"Figure\""
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "LabelNumber",
                "description": "Specifies whether to include the label and number in the table of figures.",
                "optional": true,
                "defaultvalue": true
            },
            {
                "type": {
                    "names": [
                        "TofStyle"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "TofStyle"
                    }
                },
                "name": "TofStyle",
                "description": "The table of figures style type.",
                "optional": true,
                "defaultvalue": "\"distinctive\""
            }
        ],
        "see": [
            "office-js-api/Examples/Enumerations/TofPr.js"
        ],
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        }
    },
    {
        "comment": "/**\n\t * Table of contents properties which specify whether to generate the table of contents from the outline levels or the specified styles.\n\t * @typedef {Object} TocBuildFromPr\n\t * @property {number} [OutlineLvls=9] - Maximum number of levels in the table of contents.\n\t * @property {TocStyleLvl[]} StylesLvls - Style levels (for example, [{Name: \"Heading 1\", Lvl: 2}, {Name: \"Heading 2\", Lvl: 3}]).\n\t * <note>If StylesLvls.length > 0, then the OutlineLvls property will be ignored.</note>\n\t * @see office-js-api/Examples/Enumerations/TocBuildFromPr.js\n\t */",
        "description": "Table of contents properties which specify whether to generate the table of contents from the outline levels or the specified styles.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet tocBuildFromPr = {\"OutlineLvls\": 9};\nlet tocPr = {\"ShowPageNums\": true, \"RightAlgn\": true, \"LeaderType\": \"dot\", \"FormatAsLinks\": true, \"BuildFrom\": tocBuildFromPr, \"TocStyle\": \"standard\"};\ndoc.AddTableOfContents(tocPr);\n```",
        "name": "TocBuildFromPr",
        "longname": "TocBuildFromPr",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4299,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "OutlineLvls",
                "description": "Maximum number of levels in the table of contents.",
                "optional": true,
                "defaultvalue": 9
            },
            {
                "type": {
                    "names": [
                        "Array.<TocStyleLvl>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "TocStyleLvl",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "StylesLvls",
                "description": "Style levels (for example, [{Name: \"Heading 1\", Lvl: 2}, {Name: \"Heading 2\", Lvl: 3}]).\n<note>If StylesLvls.length > 0, then the OutlineLvls property will be ignored.</note>",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "see": [
            "office-js-api/Examples/Enumerations/TocBuildFromPr.js"
        ],
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        }
    },
    {
        "comment": "/**\n\t * Table of contents style levels.\n\t * @typedef {Object} TocStyleLvl\n\t * @property {string} Name - Style name (for example, \"Heading 1\").\n\t * @property {number} Lvl - Level which will be applied to the specified style in the table of contents.\n\t * @see office-js-api/Examples/Enumerations/TocStyleLvl.js\n\t */",
        "description": "Table of contents style levels.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet tocStyleLvl = [{Name: \"Heading 1\", Lvl: 2}, {Name: \"Heading 2\", Lvl: 3}];\nlet tocPr = {\"ShowPageNums\": true, \"RightAlgn\": true, \"LeaderType\": \"dot\", \"FormatAsLinks\": true, \"BuildFrom\": {\"StylesLvls\": tocStyleLvl}, \"TocStyle\": \"standard\"};\ndoc.AddTableOfContents(tocPr);\n```",
        "name": "TocStyleLvl",
        "longname": "TocStyleLvl",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4308,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Name",
                "description": "Style name (for example, \"Heading 1\").",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "Lvl",
                "description": "Level which will be applied to the specified style in the table of contents.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "see": [
            "office-js-api/Examples/Enumerations/TocStyleLvl.js"
        ],
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        }
    },
    {
        "comment": "/**\n\t * Possible values for the table of contents leader:\n\t * <b>\"dot\"</b> - \".......\"\n\t * <b>\"dash\"</b> - \"-------\"\n\t * <b>\"underline\"</b> - \"_______\"\n     * @typedef {(\"dot\" | \"dash\" | \"underline\" | \"none\")} TocLeader\n\t * @see office-js-api/Examples/Enumerations/TocLeader.js\n\t */",
        "description": "Possible values for the table of contents leader:\n<b>\"dot\"</b> - \".......\"\n<b>\"dash\"</b> - \"-------\"\n<b>\"underline\"</b> - \"_______\"\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet tocLeader = \"dot\";\nlet tocPr = {\"ShowPageNums\": true, \"RightAlgn\": true, \"LeaderType\": tocLeader, \"FormatAsLinks\": true, \"BuildFrom\": {\"OutlineLvls\": 9}, \"TocStyle\": \"standard\"};\ndoc.AddTableOfContents(tocPr);\n```",
        "name": "TocLeader",
        "longname": "TocLeader",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4316,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/TocLeader.js"
        ],
        "type": {
            "names": [
                "\"dot\"",
                "\"dash\"",
                "\"underline\"",
                "\"none\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"dot\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dash\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"underline\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"none\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n     * Possible values for the table of contents style.\n     * @typedef {(\"simple\" | \"online\" | \"standard\" | \"modern\" | \"classic\")} TocStyle\n\t * @see office-js-api/Examples/Enumerations/TocStyle.js\n\t */",
        "description": "Possible values for the table of contents style.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet tocStyle = \"standard\";\nlet tocPr = {\"ShowPageNums\": true, \"RightAlgn\": true, \"LeaderType\": \"dot\", \"FormatAsLinks\": true, \"BuildFrom\": {\"OutlineLvls\": 9}, \"TocStyle\": tocStyle};\ndoc.AddTableOfContents(tocPr);\n```",
        "name": "TocStyle",
        "longname": "TocStyle",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4325,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/TocStyle.js"
        ],
        "type": {
            "names": [
                "\"simple\"",
                "\"online\"",
                "\"standard\"",
                "\"modern\"",
                "\"classic\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"simple\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"online\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"standard\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"modern\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"classic\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n     * Possible values for the table of figures style.\n     * @typedef {(\"simple\" | \"online\" | \"classic\" | \"distinctive\" | \"centered\" | \"formal\")} TofStyle\n\t * @see office-js-api/Examples/Enumerations/TofStyle.js\n\t */",
        "description": "Possible values for the table of figures style.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet tofStyle = \"distinctive\";\nlet tofPr = {\"ShowPageNums\": true, \"RightAlgn\": true, \"LeaderType\": \"dot\", \"FormatAsLinks\": true, \"BuildFrom\": \"Figure\", \"LabelNumber\": true, \"TofStyle\": tofStyle};\ndoc.AddTableOfFigures(tofPr);\n```",
        "name": "TofStyle",
        "longname": "TofStyle",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4331,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/TofStyle.js"
        ],
        "type": {
            "names": [
                "\"simple\"",
                "\"online\"",
                "\"classic\"",
                "\"distinctive\"",
                "\"centered\"",
                "\"formal\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"simple\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"online\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"classic\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"distinctive\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"centered\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"formal\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n     * Any valid drawing element.\n     * @typedef {(ApiShape | ApiImage | ApiGroup | ApiOleObject | ApiChart )} Drawing\n\t * @see office-js-api/Examples/Enumerations/Drawing.js\n\t */",
        "description": "Any valid drawing element.",
        "name": "Drawing",
        "longname": "Drawing",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4337,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/Drawing.js"
        ],
        "type": {
            "names": [
                "ApiShape",
                "ApiImage",
                "ApiGroup",
                "ApiOleObject",
                "ApiChart"
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "ApiShape"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiImage"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiGroup"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiOleObject"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiChart"
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n     * Available drawing element for grouping.\n     * @typedef {(ApiShape | ApiGroup | ApiImage | ApiChart)} DrawingForGroup\n\t * @see office-js-api/Examples/Enumerations/DrawingForGroup.js\n\t */",
        "description": "Available drawing element for grouping.",
        "name": "DrawingForGroup",
        "longname": "DrawingForGroup",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4343,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/DrawingForGroup.js"
        ],
        "type": {
            "names": [
                "ApiShape",
                "ApiGroup",
                "ApiImage",
                "ApiChart"
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "ApiShape"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiGroup"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiImage"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ApiChart"
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n     * The 1000th of a percent (100000 = 100%).\n\t * @typedef {number} PositivePercentage\n\t * @see office-js-api/Examples/Enumerations/PositivePercentage.js\n\t */",
        "description": "The 1000th of a percent (100000 = 100%).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet gs = Api.CreateGradientStop(Api.CreateRGBColor(255, 164, 101), 100000);\n```",
        "name": "PositivePercentage",
        "longname": "PositivePercentage",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4355,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/PositivePercentage.js"
        ],
        "type": {
            "names": [
                "number"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "number"
            }
        }
    },
    {
        "comment": "/**\n\t * The type of tick mark appearance.\n\t * @typedef {(\"cross\" | \"in\" | \"none\" | \"out\")} TickMark\n\t * @see office-js-api/Examples/Enumerations/TickMark.js\n\t */",
        "description": "The type of tick mark appearance.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nchart.SetVertAxisMajorTickMark(\"cross\");\n```",
        "name": "TickMark",
        "longname": "TickMark",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4361,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/TickMark.js"
        ],
        "type": {
            "names": [
                "\"cross\"",
                "\"in\"",
                "\"none\"",
                "\"out\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"cross\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"in\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"none\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"out\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * The watermark type.\n\t * @typedef {(\"none\" | \"text\" | \"image\")} WatermarkType\n\t * @see office-js-api/Examples/Enumerations/WatermarkType.js\n\t */",
        "description": "The watermark type.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwatermarkSettings.SetType(\"text\");\n```",
        "name": "WatermarkType",
        "longname": "WatermarkType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4367,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/WatermarkType.js"
        ],
        "type": {
            "names": [
                "\"none\"",
                "\"text\"",
                "\"image\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"none\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"text\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"image\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * The watermark direction.\n\t * @typedef {(\"horizontal\" | \"clockwise45\" | \"counterclockwise45\")} WatermarkDirection\n\t * @see office-js-api/Examples/Enumerations/WatermarkDirection.js\n\t */",
        "description": "The watermark direction.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nwatermarkSettings.SetDirection(\"clockwise45\");\n```",
        "name": "WatermarkDirection",
        "longname": "WatermarkDirection",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 4373,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/WatermarkDirection.js"
        ],
        "type": {
            "names": [
                "\"horizontal\"",
                "\"clockwise45\"",
                "\"counterclockwise45\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"horizontal\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"clockwise45\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"counterclockwise45\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Record of one comment.\n\t * @typedef {Object} CommentReportRecord\n\t * @property {boolean} [IsAnswer=false] - Specifies whether this is an initial comment or a reply to another comment.\n\t * @property {string} CommentMessage - The text of the current comment.\n\t * @property {number} Date - The time when this change was made in local time.\n\t * @property {number} DateUTC - The time when this change was made in UTC.\n\t * @property {string} [QuoteText=undefined] - The text to which this comment is related.\n\t * @see office-js-api/Examples/Enumerations/CommentReportRecord.js\n\t */",
        "description": "Record of one comment.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet commentsReport = oDocument.GetCommentsReport();\n```",
        "name": "CommentReportRecord",
        "longname": "CommentReportRecord",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 6064,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "IsAnswer",
                "description": "Specifies whether this is an initial comment or a reply to another comment.",
                "optional": true,
                "defaultvalue": false
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "CommentMessage",
                "description": "The text of the current comment.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "Date",
                "description": "The time when this change was made in local time.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "DateUTC",
                "description": "The time when this change was made in UTC.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "QuoteText",
                "description": "The text to which this comment is related.",
                "optional": true,
                "defaultvalue": null
            }
        ],
        "see": [
            "office-js-api/Examples/Enumerations/CommentReportRecord.js"
        ],
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        }
    },
    {
        "comment": "/**\n\t * Report on all comments.\n\t * This is a dictionary where the keys are usernames.\n\t * @typedef {Object.<string, Array.<CommentReportRecord>>} CommentReport\n\t * @example\n\t *  {\n\t *    \"John Smith\" : [{IsAnswer: false, CommentMessage: 'Good text', Date: 1688588002698, DateUTC: 1688570002698, QuoteText: 'Some text'},\n\t *      {IsAnswer: true, CommentMessage: \"I don't think so\", Date: 1688588012661, DateUTC: 1688570012661}],\n\t *\n\t *    \"Mark Pottato\" : [{IsAnswer: false, CommentMessage: 'Need to change this part', Date: 1688587967245, DateUTC: 1688569967245, QuoteText: 'The quick brown fox jumps over the lazy dog'},\n\t *      {IsAnswer: false, CommentMessage: 'We need to add a link', Date: 1688587967245, DateUTC: 1688569967245, QuoteText: 'OnlyOffice'}]\n\t *  }\n\t * @see office-js-api/Examples/Enumerations/CommentReport.js\n\t */",
        "description": "Report on all comments.\nThis is a dictionary where the keys are usernames.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet commentsReport = oDocument.GetCommentsReport();\n```",
        "name": "CommentReport",
        "longname": "CommentReport",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 6075,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/CommentReport.js"
        ],
        "type": {
            "names": [
                "Object.<string, Array.<CommentReportRecord>>"
            ],
            "parsedType": {
                "type": "TypeApplication",
                "expression": {
                    "type": "NameExpression",
                    "name": "Object"
                },
                "applications": [
                    {
                        "type": "NameExpression",
                        "name": "string"
                    },
                    {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "type": "NameExpression",
                                "name": "CommentReportRecord"
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Review record type.\n\t * @typedef {(\"TextAdd\" | \"TextRem\" | \"ParaAdd\" | \"ParaRem\" | \"TextPr\" | \"ParaPr\" | \"Unknown\")} ReviewReportRecordType\n\t * @see office-js-api/Examples/Enumerations/ReviewReportRecordType.js\n\t */",
        "description": "Review record type.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet reviewReportRecord1 = {Type: \"TextRem\", Value: \"Hello, Mark!\", Date: 1679941734161};\nlet reviewReportRecord2 = {Type: \"TextAdd\", Value: \"Dear Mr. Pottato.\", Date: 1679941736189};\nlet reviewReportRecord3 = {Type: \"ParaRem\", Date: 1679941755942};\nlet reviewReportRecord4 = {Type: \"TextPr\", Date: 1679941757832};\nlet reviewRecord = {\n\t\"John Smith\" : [reviewReportRecord1, reviewReportRecord2],\n\t\"Mark Pottato\" : [reviewReportRecord3, reviewReportRecord4]\n};\n```",
        "name": "ReviewReportRecordType",
        "longname": "ReviewReportRecordType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 6142,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/ReviewReportRecordType.js"
        ],
        "type": {
            "names": [
                "\"TextAdd\"",
                "\"TextRem\"",
                "\"ParaAdd\"",
                "\"ParaRem\"",
                "\"TextPr\"",
                "\"ParaPr\"",
                "\"Unknown\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"TextAdd\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"TextRem\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ParaAdd\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ParaRem\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"TextPr\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"ParaPr\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"Unknown\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Record of one review change.\n\t * @typedef {Object} ReviewReportRecord\n\t * @property {ReviewReportRecordType} Type - Review record type.\n\t * @property {string} [Value=undefined] - Review change value that is set for the \"TextAdd\" and \"TextRem\" types only.\n\t * @property {number} Date - The time when this change was made.\n\t * @property {ApiParagraph | ApiTable} ReviewedElement - Element that has been reviewed.\n\t * @see office-js-api/Examples/Enumerations/ReviewReportRecord.js\n\t */",
        "description": "Record of one review change.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet reviewReportRecord1 = {Type: \"TextRem\", Value: \"Hello, Mark!\", Date: 1679941734161};\nlet reviewReportRecord2 = {Type: \"TextAdd\", Value: \"Dear Mr. Pottato.\", Date: 1679941736189};\nlet reviewReportRecord3 = {Type: \"ParaRem\", Date: 1679941755942};\nlet reviewReportRecord4 = {Type: \"TextPr\", Date: 1679941757832};\nlet reviewRecord = {\n\t\"John Smith\" : [reviewReportRecord1, reviewReportRecord2],\n\t\"Mark Pottato\" : [reviewReportRecord3, reviewReportRecord4]\n};\n```",
        "name": "ReviewReportRecord",
        "longname": "ReviewReportRecord",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 6148,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "ReviewReportRecordType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ReviewReportRecordType"
                    }
                },
                "name": "Type",
                "description": "Review record type.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "Value",
                "description": "Review change value that is set for the \"TextAdd\" and \"TextRem\" types only.",
                "optional": true,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "Date",
                "description": "The time when this change was made.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "ApiParagraph",
                        "ApiTable"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "ApiParagraph"
                            },
                            {
                                "type": "NameExpression",
                                "name": "ApiTable"
                            }
                        ]
                    }
                },
                "name": "ReviewedElement",
                "description": "Element that has been reviewed.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "see": [
            "office-js-api/Examples/Enumerations/ReviewReportRecord.js"
        ],
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        }
    },
    {
        "comment": "/**\n\t * Report on all review changes.\n\t * This is a dictionary where the keys are usernames.\n\t * @typedef {Object.<string, Array.<ReviewReportRecord>>} ReviewReport\n\t * @example\n\t * \t{\n\t * \t  \"John Smith\" : [{Type: 'TextRem', Value: 'Hello, Mark!', Date: 1679941734161, Element: ApiParagraph},\n\t * \t                {Type: 'TextAdd', Value: 'Dear Mr. Pottato.', Date: 1679941736189, Element: ApiParagraph}],\n\t * \t  \"Mark Pottato\" : [{Type: 'ParaRem', Date: 1679941755942, ReviewedElement: ApiParagraph},\n\t * \t                  {Type: 'TextPr', Date: 1679941757832, ReviewedElement: ApiParagraph}]\n\t * \t}\n\t * @see office-js-api/Examples/Enumerations/ReviewReport.js\n\t */",
        "description": "Report on all review changes.\nThis is a dictionary where the keys are usernames.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet reviewRecord = {\n\t\"John Smith\" : [{Type: \"TextRem\", Value: \"Hello, Mark!\", Date: 1679941734161},\n\t\t\t\t\t{Type: \"TextAdd\", Value: \"Dear Mr. Pottato.\", Date: 1679941736189}],\n\t\"Mark Pottato\" : [{Type: \"ParaRem\", Date: 1679941755942},\n\t\t\t\t\t{Type: \"TextPr\", Date: 1679941757832}]\n}\n```",
        "name": "ReviewReport",
        "longname": "ReviewReport",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 6158,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/ReviewReport.js"
        ],
        "type": {
            "names": [
                "Object.<string, Array.<ReviewReportRecord>>"
            ],
            "parsedType": {
                "type": "TypeApplication",
                "expression": {
                    "type": "NameExpression",
                    "name": "Object"
                },
                "applications": [
                    {
                        "type": "NameExpression",
                        "name": "string"
                    },
                    {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "type": "NameExpression",
                                "name": "ReviewReportRecord"
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * The specific form type.\n\t * @typedef {(\"text\" | \"checkBox\" | \"picture\" | \"comboBox\" | \"dropDownList\" | \"dateTime\" | \"radio\")} FormSpecificType\n\t * @see office-js-api/Examples/Enumerations/FormSpecificType.js\n\t */",
        "description": "The specific form type.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet formsData = doc.GetFormsData();\n```",
        "name": "FormSpecificType",
        "longname": "FormSpecificType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 6424,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/FormSpecificType.js"
        ],
        "type": {
            "names": [
                "\"text\"",
                "\"checkBox\"",
                "\"picture\"",
                "\"comboBox\"",
                "\"dropDownList\"",
                "\"dateTime\"",
                "\"radio\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"text\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"checkBox\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"picture\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"comboBox\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dropDownList\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"dateTime\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"radio\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Form data.\n\t * @typedef {Object} FormData\n\t * @property {string} key - The form key. If the current form is a radio button, then this field contains the group key.\n\t * @property {string | boolean} value - The current field value.\n\t * @property {string} tag - The form tag.\n\t * @property {FormSpecificType} type - The form type.\n\t * @example\n\t * \t{\n\t * \t  \"key\" : \"CompanyName\",\n\t * \t  \"tag\" : \"companyName\",\n\t * \t  \"value\" : \"ONLYOFFICE\",\n\t * \t  \"type\" : \"text\"\n\t * \t}\n\t * @see office-js-api/Examples/Enumerations/FormData.js\n\t */",
        "description": "Form data.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet formData = {key: \"CompanyName\", value: \"OnlyOffice\", type: \"text\"};\n```",
        "name": "FormData",
        "longname": "FormData",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 6429,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "key",
                "description": "The form key. If the current form is a radio button, then this field contains the group key.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string",
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "TypeUnion",
                        "elements": [
                            {
                                "type": "NameExpression",
                                "name": "string"
                            },
                            {
                                "type": "NameExpression",
                                "name": "boolean"
                            }
                        ]
                    }
                },
                "name": "value",
                "description": "The current field value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "tag",
                "description": "The form tag.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "FormSpecificType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "FormSpecificType"
                    }
                },
                "name": "type",
                "description": "The form type.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "see": [
            "office-js-api/Examples/Enumerations/FormData.js"
        ],
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        }
    },
    {
        "comment": "/**\n\t * The section break type which defines how the contents of the current section are placed relative to the previous section.\n\t * WordprocessingML supports five distinct types of section breaks:\n\t * <b>Next page</b> (\"nextPage\") - starts a new section on the next page (the default value).\n\t * <b>Odd</b> (\"oddPage\") - starts a new section on the next odd-numbered page.\n\t * <b>Even</b> (\"evenPage\") - starts a new section on the next even-numbered page.\n\t * <b>Continuous</b> (\"continuous\") - starts a new section in the next paragraph.\n\t * This means that continuous section breaks might not specify certain page-level section properties,\n\t * since they shall be inherited from the following section.\n\t * However, these breaks can specify other section properties, such as line numbering and footnote/endnote settings.\n\t * <b>Column</b> (\"nextColumn\") - starts a new section in the next column on the page.\n\t * @typedef {(\"nextPage\" | \"oddPage\" | \"evenPage\" | \"continuous\" | \"nextColumn\")} SectionBreakType\n\t* @see office-js-api/Examples/Enumerations/SectionBreakType.js\n\t*/",
        "description": "The section break type which defines how the contents of the current section are placed relative to the previous section.\nWordprocessingML supports five distinct types of section breaks:\n<b>Next page</b> (\"nextPage\") - starts a new section on the next page (the default value).\n<b>Odd</b> (\"oddPage\") - starts a new section on the next odd-numbered page.\n<b>Even</b> (\"evenPage\") - starts a new section on the next even-numbered page.\n<b>Continuous</b> (\"continuous\") - starts a new section in the next paragraph.\nThis means that continuous section breaks might not specify certain page-level section properties,\nsince they shall be inherited from the following section.\nHowever, these breaks can specify other section properties, such as line numbering and footnote/endnote settings.\n<b>Column</b> (\"nextColumn\") - starts a new section in the next column on the page.",
        "name": "SectionBreakType",
        "longname": "SectionBreakType",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 10724,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/SectionBreakType.js"
        ],
        "type": {
            "names": [
                "\"nextPage\"",
                "\"oddPage\"",
                "\"evenPage\"",
                "\"continuous\"",
                "\"nextColumn\""
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "\"nextPage\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"oddPage\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"evenPage\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"continuous\""
                    },
                    {
                        "type": "NameExpression",
                        "name": "\"nextColumn\""
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Returns a type of the ApiFormBase class.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {\"form\"}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetClassType.js\n\t */",
        "description": "Returns a type of the ApiFormBase class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet classType = textForm.GetClassType();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Class type: \" + classType);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiFormBase",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"form\""
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "\"form\""
                    }
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiFormBase#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19388,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {FormType}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetFormType.js\n\t */",
        "description": "Returns a type of the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet formType = textForm.GetFormType();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Form type: \" + formType);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiFormBase",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "FormType"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "FormType"
                    }
                }
            }
        ],
        "name": "GetFormType",
        "longname": "ApiFormBase#GetFormType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19399,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetFormType.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the current form key.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetFormKey.js\n\t */",
        "description": "Returns the current form key.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet comboBoxForm = Api.CreateComboBoxForm({\"key\": \"Personal information\", \"tip\": \"Choose your country\", \"required\": true, \"placeholder\": \"Country\", \"editable\": false, \"autoFit\": false, \"items\": [\"Latvia\", \"USA\", \"UK\"]});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(comboBoxForm);\nlet key = comboBoxForm.GetFormKey();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Form key: \" + key);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiFormBase",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetFormKey",
        "longname": "ApiFormBase#GetFormKey",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19423,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetFormKey.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets a key to the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @param {string} sKey - Form key.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetFormKey.js\n\t */",
        "description": "Sets a key to the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetFormKey(\"Personal information\");\nlet key = textForm.GetFormKey();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Form key: \" + key);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiFormBase",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sKey",
                "description": "Form key.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetFormKey",
        "longname": "ApiFormBase#SetFormKey",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19443,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetFormKey.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the tip text of the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetTipText.js\n\t */",
        "description": "Returns the tip text of the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet comboBoxForm = Api.CreateComboBoxForm({\"key\": \"Personal information\", \"tip\": \"Choose your country\", \"required\": true, \"placeholder\": \"Country\", \"editable\": false, \"autoFit\": false, \"items\": [\"Latvia\", \"USA\", \"UK\"]});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(comboBoxForm);\nlet tipText = comboBoxForm.GetTipText();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Form tip text: \" + tipText);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiFormBase",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetTipText",
        "longname": "ApiFormBase#GetTipText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19472,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetTipText.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the tip text to the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @param {string} sText - Tip text.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetTipText.js\n\t */",
        "description": "Sets the tip text to the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetTipText(\"Enter your first name\");\nlet tipText = textForm.GetTipText();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Tip text: \" + tipText);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiFormBase",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sText",
                "description": "Tip text.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetTipText",
        "longname": "ApiFormBase#SetTipText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19489,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetTipText.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks if the current form is required.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/IsRequired.js\n\t */",
        "description": "Checks if the current form is required.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet required = textForm.IsRequired();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document is required: \" + required);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiFormBase",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "IsRequired",
        "longname": "ApiFormBase#IsRequired",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19509,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/IsRequired.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies if the current form should be required.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @param {boolean} bRequired - Defines if the current form is required (true) or not (false).\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetRequired.js\n\t */",
        "description": "Specifies if the current form should be required.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetRequired(true);\nlet required = textForm.IsRequired();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document is required: \" + required);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiFormBase",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bRequired",
                "description": "Defines if the current form is required (true) or not (false).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetRequired",
        "longname": "ApiFormBase#SetRequired",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19521,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetRequired.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks if the current form is fixed size.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/IsFixed.js\n\t */",
        "description": "Checks if the current form is fixed size.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.ToFixed(10 * 240, 2 * 240);\nlet fixed = textForm.IsFixed();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document is fixed: \" + fixed);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiFormBase",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "IsFixed",
        "longname": "ApiFormBase#IsFixed",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19543,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/IsFixed.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts the current form to a fixed size form.\n\t * @memberof ApiFormBase\n\t * @param {twips} width - The wrapper shape width measured in twentieths of a point (1/1440 of an inch).\n\t * @param {twips} height - The wrapper shape height measured in twentieths of a point (1/1440 of an inch).\n\t * @param {boolean} keepPosition - Save position on the page (it can be a little bit slow, because it runs the document calculation)\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/ToFixed.js\n\t */",
        "description": "Converts the current form to a fixed size form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.ToFixed(10 * 240, 2 * 240);\nlet fixed = textForm.IsFixed();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document has a fixed size: \" + fixed);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiFormBase",
        "params": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "twips"
                    }
                },
                "name": "width",
                "description": "The wrapper shape width measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "twips"
                    }
                },
                "name": "height",
                "description": "The wrapper shape height measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "keepPosition",
                "description": "Save position on the page (it can be a little bit slow, because it runs the document calculation)",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "ToFixed",
        "longname": "ApiFormBase#ToFixed",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19557,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/ToFixed.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts the current form to an inline form.\n\t *Picture form can't be converted to an inline form, it's always a fixed size object.*\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/ToInline.js\n\t */",
        "description": "Converts the current form to an inline form.\nPicture form can't be converted to an inline form, it's always a fixed size object.*\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.ToFixed(10 * 240, 2 * 240);\nlet copyForm = textForm.Copy();\nparagraph = Api.CreateParagraph();\nparagraph.AddElement(copyForm);\ndoc.Push(paragraph);\ncopyForm.ToInline();\nlet fixed = textForm.IsFixed();\nlet fixedCopy = copyForm.IsFixed();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document has a fixed size: \" + fixed);\nparagraph.AddLineBreak();\nparagraph.AddText(\"The second form from this document has a fixed size: \" + fixedCopy);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiFormBase",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "ToInline",
        "longname": "ApiFormBase#ToInline",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19578,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/ToInline.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the border color to the current form.\n\t * @memberof ApiFormBase\n\t * @param {byte} r - Red color component value.\n\t * @param {byte} g - Green color component value.\n\t * @param {byte} b - Blue color component value.\n\t * @param {boolean} bNone - Defines that border color will not be set.\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetBorderColor.js\n\t */",
        "description": "Sets the border color to the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetBorderColor(255, 111, 61);\n```",
        "memberof": "ApiFormBase",
        "params": [
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "byte"
                    }
                },
                "name": "r",
                "description": "Red color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "byte"
                    }
                },
                "name": "g",
                "description": "Green color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "byte"
                    }
                },
                "name": "b",
                "description": "Blue color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bNone",
                "description": "Defines that border color will not be set.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetBorderColor",
        "longname": "ApiFormBase#SetBorderColor",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19599,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetBorderColor.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the background color to the current form.\n\t * @memberof ApiFormBase\n\t * @param {byte} r - Red color component value.\n\t * @param {byte} g - Green color component value.\n\t * @param {byte} b - Blue color component value.\n\t * @param {boolean} bNone - Defines that background color will not be set.\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetBackgroundColor.js\n\t */",
        "description": "Sets the background color to the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetBackgroundColor(255, 111, 61);\n```",
        "memberof": "ApiFormBase",
        "params": [
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "byte"
                    }
                },
                "name": "r",
                "description": "Red color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "byte"
                    }
                },
                "name": "g",
                "description": "Green color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "byte"
                    }
                },
                "name": "b",
                "description": "Blue color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bNone",
                "description": "Defines that background color will not be set.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetBackgroundColor",
        "longname": "ApiFormBase#SetBackgroundColor",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19631,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetBackgroundColor.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the text from the current form.\n\t *Returns the value as a string if possible for the given form type*\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetText.js\n\t */",
        "description": "Returns the text from the current form.\nReturns the value as a string if possible for the given form type*\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet text = textForm.GetText();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Form text: \" + text);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiFormBase",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetText",
        "longname": "ApiFormBase#GetText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19674,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetText.js"
        ]
    },
    {
        "comment": "/**\n\t * Clears the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/Clear.js\n\t */",
        "description": "Clears the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetText(\"John Smith\");\ntextForm.Clear();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document was cleared.\");\ndoc.Push(paragraph);\n```",
        "memberof": "ApiFormBase",
        "params": null,
        "returns": null,
        "name": "Clear",
        "longname": "ApiFormBase#Clear",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19684,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/Clear.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a shape in which the form is placed to control the position and size of the fixed size form frame.\n\t * The null value will be returned for the inline forms.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {?ApiShape} - returns the shape in which the form is placed.\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetWrapperShape.js\n\t */",
        "description": "Returns a shape in which the form is placed to control the position and size of the fixed size form frame.\nThe null value will be returned for the inline forms.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.ToFixed(10 * 240, 2 * 240);\nlet shape = textForm.GetWrapperShape();\nlet stroke = Api.CreateStroke(36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\nshape.SetOutLine(stroke);\n```",
        "memberof": "ApiFormBase",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiShape"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiShape",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "GetWrapperShape",
        "longname": "ApiFormBase#GetWrapperShape",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19698,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetWrapperShape.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the placeholder text to the current form.\n\t *Can't be set to checkbox or radio button.*\n\t * @memberof ApiFormBase\n\t * @param {string} sText - The text that will be set to the current form.\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetPlaceholderText.js\n\t */",
        "description": "Sets the placeholder text to the current form.\nCan't be set to checkbox or radio button.*\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetPlaceholderText(\"First name\");\n```",
        "memberof": "ApiFormBase",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sText",
                "description": "The text that will be set to the current form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetPlaceholderText",
        "longname": "ApiFormBase#SetPlaceholderText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19716,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetPlaceholderText.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the text properties to the current form.\n\t *Used if possible for this type of form*\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @param {ApiTextPr} oTextPr - The text properties that will be set to the current form.\n\t * @return {boolean}  \n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetTextPr.js\n\t */",
        "description": "Sets the text properties to the current form.\nUsed if possible for this type of form*\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet textPr = Api.CreateTextPr();\ntextPr.SetFontSize(30);\ntextPr.SetBold(true);\ntextForm.SetTextPr(textPr);\n```",
        "memberof": "ApiFormBase",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                },
                "name": "oTextPr",
                "description": "The text properties that will be set to the current form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetTextPr",
        "longname": "ApiFormBase#SetTextPr",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19737,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetTextPr.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the text properties from the current form.\n\t *Used if possible for this type of form*\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @return {ApiTextPr}  \n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetTextPr.js\n\t */",
        "description": "Returns the text properties from the current form.\nUsed if possible for this type of form*\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet textPr = Api.CreateTextPr();\ntextPr.SetFontSize(30);\ntextPr.SetBold(true);\ntextForm.SetTextPr(textPr);\nlet formTextPr = textForm.GetTextPr();\nformTextPr.SetItalic(true);\ntextForm.SetTextPr(formTextPr);\n```",
        "memberof": "ApiFormBase",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextPr"
                    }
                }
            }
        ],
        "name": "GetTextPr",
        "longname": "ApiFormBase#GetTextPr",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19755,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetTextPr.js"
        ]
    },
    {
        "comment": "/**\n\t * Places a cursor before/after the current form.\n\t * @param {boolean?} [isAfter=true] - Specifies whether a cursor will be placed before (false) or after (true) the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/MoveCursorOutside.js\n\t */",
        "description": "Places a cursor before/after the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetText(\"The cursor will be placed after the current form.\");\ntextForm.MoveCursorOutside(true);\n```",
        "memberof": "ApiFormBase",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean",
                        "nullable": true
                    }
                },
                "name": "isAfter",
                "description": "Specifies whether a cursor will be placed before (false) or after (true) the current form.",
                "optional": true,
                "defaultvalue": true
            }
        ],
        "returns": null,
        "name": "MoveCursorOutside",
        "longname": "ApiFormBase#MoveCursorOutside",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19767,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/MoveCursorOutside.js"
        ]
    },
    {
        "comment": "/**\n\t * Copies the current form (copies with the shape if it exists).\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {?ApiForm}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/Copy.js\n\t */",
        "description": "Copies the current form (copies with the shape if it exists).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet copyTextForm = textForm.Copy();\nparagraph.AddLineBreak();\nparagraph.AddElement(copyTextForm);\n```",
        "memberof": "ApiFormBase",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiForm"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiForm",
                        "nullable": true
                    }
                }
            }
        ],
        "name": "Copy",
        "longname": "ApiFormBase#Copy",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19778,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/Copy.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks if the text field content is autofit, i.e. whether the font size adjusts to the size of the fixed size form.\n\t * @memberof ApiTextForm\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiTextForm/Methods/IsAutoFit.js\n\t */",
        "description": "Checks if the text field content is autofit, i.e. whether the font size adjusts to the size of the fixed size form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet autoFit = textForm.IsAutoFit();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first text form from this document is autofit: \" + autoFit);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiTextForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "IsAutoFit",
        "longname": "ApiTextForm#IsAutoFit",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19827,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiTextForm/Methods/IsAutoFit.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies if the text field content should be autofit, i.e. whether the font size adjusts to the size of the fixed size form.\n\t * @memberof ApiTextForm\n\t * @param {boolean} bAutoFit - Defines if the text field content is autofit (true) or not (false).\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiTextForm/Methods/SetAutoFit.js\n\t */",
        "description": "Specifies if the text field content should be autofit, i.e. whether the font size adjusts to the size of the fixed size form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"multiLine\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.ToFixed(6 * 240, 2 * 240);\ntextForm.SetAutoFit(true);\nlet autoFit = textForm.IsAutoFit();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first text form from this document is autofit: \" + autoFit);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiTextForm",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bAutoFit",
                "description": "Defines if the text field content is autofit (true) or not (false).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetAutoFit",
        "longname": "ApiTextForm#SetAutoFit",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19839,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiTextForm/Methods/SetAutoFit.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks if the current text field is multiline.\n\t * @memberof ApiTextForm\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiTextForm/Methods/IsMultiline.js\n\t */",
        "description": "Checks if the current text field is multiline.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet multiline = textForm.IsMultiline();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first text form from this document is multiline: \" + multiline);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiTextForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "IsMultiline",
        "longname": "ApiTextForm#IsMultiline",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19861,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiTextForm/Methods/IsMultiline.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies if the current text field should be miltiline.\n\t * @memberof ApiTextForm\n\t * @param {boolean} bMultiline - Defines if the current text field is multiline (true) or not (false).\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean} - return false, if the text field is not fixed size.\n\t * @see office-js-api/Examples/{Editor}/ApiTextForm/Methods/SetMultiline.js\n\t */",
        "description": "Specifies if the current text field should be miltiline.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.ToFixed(3 * 240, 3 * 240);\ntextForm.SetMultiline(true);\nlet multiline = textForm.IsMultiline();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first text form from this document is multiline: \" + multiline);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiTextForm",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bMultiline",
                "description": "Defines if the current text field is multiline (true) or not (false).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetMultiline",
        "longname": "ApiTextForm#SetMultiline",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19873,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiTextForm/Methods/SetMultiline.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a limit of the text field characters.\n\t * @memberof ApiTextForm\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {number} - if this method returns -1 -> the form has no limit for characters\n\t * @see office-js-api/Examples/{Editor}/ApiTextForm/Methods/GetCharactersLimit.js\n\t */",
        "description": "Returns a limit of the text field characters.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetCharactersLimit(5);\ntextForm.SetText(\"John Smith\");\nlet limit = textForm.GetCharactersLimit();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Characters limit: \" + limit);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiTextForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GetCharactersLimit",
        "longname": "ApiTextForm#GetCharactersLimit",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19897,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiTextForm/Methods/GetCharactersLimit.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets a limit to the text field characters.\n\t * @memberof ApiTextForm\n\t * @param {number} nChars - The maximum number of characters in the text field. If this parameter is equal to -1, no limit will be set.\n\t * A limit is required to be set if a comb of characters is applied.\n\t * Maximum value for this parameter is 1000000.\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiTextForm/Methods/SetCharactersLimit.js\n\t */",
        "description": "Sets a limit to the text field characters.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetCharactersLimit(5);\ntextForm.SetText(\"John Smith\");\nlet limit = textForm.GetCharactersLimit();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Characters limit: \" + limit);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiTextForm",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nChars",
                "description": "The maximum number of characters in the text field. If this parameter is equal to -1, no limit will be set.\nA limit is required to be set if a comb of characters is applied.\nMaximum value for this parameter is 1000000.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetCharactersLimit",
        "longname": "ApiTextForm#SetCharactersLimit",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19915,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiTextForm/Methods/SetCharactersLimit.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks if the text field is a comb of characters with the same cell width.\n\t * @memberof ApiTextForm\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiTextForm/Methods/IsComb.js\n\t */",
        "description": "Checks if the text field is a comb of characters with the same cell width.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"maxCharacters\": 10, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetComb(true);\nlet comb = textForm.IsComb();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first text form from this document is comb: \" + comb);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiTextForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "IsComb",
        "longname": "ApiTextForm#IsComb",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19945,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiTextForm/Methods/IsComb.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies if the text field should be a comb of characters with the same cell width.\n\t * The maximum number of characters must be set to a positive value.\n\t * @memberof ApiTextForm\n\t * @param {boolean} bComb - Defines if the text field is a comb of characters (true) or not (false).\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiTextForm/Methods/SetComb.js\n\t */",
        "description": "Specifies if the text field should be a comb of characters with the same cell width.\nThe maximum number of characters must be set to a positive value.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"maxCharacters\": 10, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetComb(true);\nlet comb = textForm.IsComb();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first text form from this document is comb: \" + comb);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiTextForm",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "bComb",
                "description": "Defines if the text field is a comb of characters (true) or not (false).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetComb",
        "longname": "ApiTextForm#SetComb",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19959,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiTextForm/Methods/SetComb.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the cell width to the applied comb of characters.\n\t * @memberof ApiTextForm\n\t * @param {mm} [nCellWidth=0] - The cell width measured in millimeters.\n\t * If this parameter is not specified or equal to 0 or less, then the width will be set automatically. Must be >= 1 and <= 558.8.\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiTextForm/Methods/SetCellWidth.js\n\t */",
        "description": "Sets the cell width to the applied comb of characters.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"maxCharacters\": 10, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetComb(true);\ntextForm.SetCellWidth(7);\n```",
        "memberof": "ApiTextForm",
        "params": [
            {
                "type": {
                    "names": [
                        "mm"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "mm"
                    }
                },
                "name": "nCellWidth",
                "description": "The cell width measured in millimeters.\nIf this parameter is not specified or equal to 0 or less, then the width will be set automatically. Must be >= 1 and <= 558.8.",
                "optional": true,
                "defaultvalue": 0
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetCellWidth",
        "longname": "ApiTextForm#SetCellWidth",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19991,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiTextForm/Methods/SetCellWidth.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the text to the current text field.\n\t * @memberof ApiTextForm\n\t * @param {string} sText - The text that will be set to the current text field.\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiTextForm/Methods/SetText.js\n\t */",
        "description": "Sets the text to the current text field.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetText(\"John Smith\");\n```",
        "memberof": "ApiTextForm",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sText",
                "description": "The text that will be set to the current text field.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetText",
        "longname": "ApiTextForm#SetText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 20016,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiTextForm/Methods/SetText.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the current scaling condition of the picture form.\n\t * @memberof ApiPictureForm\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {ScaleFlag}\n\t * @see office-js-api/Examples/{Editor}/ApiPictureForm/Methods/GetScaleFlag.js\n\t */",
        "description": "Returns the current scaling condition of the picture form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet pictureForm = Api.CreatePictureForm({\"key\": \"Personal information\", \"tip\": \"Upload your photo\", \"required\": true, \"placeholder\": \"Photo\", \"scaleFlag\": \"tooBig\", \"lockAspectRatio\": true, \"respectBorders\": false, \"shiftX\": 50, \"shiftY\": 50});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(pictureForm);\npictureForm.SetImage(\"https://api.onlyoffice.com/content/img/docbuilder/examples/user-profile.png\");\nlet scaleFlag = pictureForm.GetScaleFlag();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Picture scale flag: \" + scaleFlag);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiPictureForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ScaleFlag"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ScaleFlag"
                    }
                }
            }
        ],
        "name": "GetScaleFlag",
        "longname": "ApiPictureForm#GetScaleFlag",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 20042,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiPictureForm/Methods/GetScaleFlag.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the scaling condition to the current picture form.\n\t * @memberof ApiPictureForm\n\t * @param {ScaleFlag} sScaleFlag - Picture scaling condition: \"always\", \"never\", \"tooBig\" or \"tooSmall\".\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiPictureForm/Methods/SetScaleFlag.js\n\t */",
        "description": "Sets the scaling condition to the current picture form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet pictureForm = Api.CreatePictureForm({\"key\": \"Personal information\", \"tip\": \"Upload your photo\", \"required\": true, \"placeholder\": \"Photo\", \"lockAspectRatio\": true, \"respectBorders\": false, \"shiftX\": 50, \"shiftY\": 50});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(pictureForm);\npictureForm.SetImage(\"https://api.onlyoffice.com/content/img/docbuilder/examples/user-profile.png\");\npictureForm.SetScaleFlag(\"tooBig\");\nlet scaleFlag = pictureForm.GetScaleFlag();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Picture scale flag: \" + scaleFlag);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiPictureForm",
        "params": [
            {
                "type": {
                    "names": [
                        "ScaleFlag"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ScaleFlag"
                    }
                },
                "name": "sScaleFlag",
                "description": "Picture scaling condition: \"always\", \"never\", \"tooBig\" or \"tooSmall\".",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetScaleFlag",
        "longname": "ApiPictureForm#SetScaleFlag",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 20072,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiPictureForm/Methods/SetScaleFlag.js"
        ]
    },
    {
        "comment": "/**\n\t * Locks the aspect ratio of the current picture form.\n\t * @memberof ApiPictureForm\n\t * @param {boolean} [isLock=true] - Specifies if the aspect ratio of the current picture form will be locked (true) or not (false).\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiPictureForm/Methods/SetLockAspectRatio.js\n\t */",
        "description": "Locks the aspect ratio of the current picture form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet pictureForm = Api.CreatePictureForm({\"key\": \"Personal information\", \"tip\": \"Upload your photo\", \"required\": true, \"placeholder\": \"Photo\", \"scaleFlag\": \"tooBig\", \"respectBorders\": false, \"shiftX\": 50, \"shiftY\": 50});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(pictureForm);\npictureForm.SetImage(\"https://api.onlyoffice.com/content/img/docbuilder/examples/user-profile.png\");\npictureForm.SetLockAspectRatio(true);\nlet lock = pictureForm.IsLockAspectRatio();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The aspect ratio of the first picture form in this document is locked: \" + lock);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiPictureForm",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isLock",
                "description": "Specifies if the aspect ratio of the current picture form will be locked (true) or not (false).",
                "optional": true,
                "defaultvalue": true
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetLockAspectRatio",
        "longname": "ApiPictureForm#SetLockAspectRatio",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 20109,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiPictureForm/Methods/SetLockAspectRatio.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks if the aspect ratio of the current picture form is locked or not.\n\t * @memberof ApiPictureForm\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiPictureForm/Methods/IsLockAspectRatio.js\n\t */",
        "description": "Checks if the aspect ratio of the current picture form is locked or not.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet pictureForm = Api.CreatePictureForm({\"key\": \"Personal information\", \"tip\": \"Upload your photo\", \"required\": true, \"placeholder\": \"Photo\", \"scaleFlag\": \"tooBig\", \"respectBorders\": false, \"shiftX\": 50, \"shiftY\": 50});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(pictureForm);\npictureForm.SetImage(\"https://api.onlyoffice.com/content/img/docbuilder/examples/user-profile.png\");\npictureForm.SetLockAspectRatio(true);\nlet lock = pictureForm.IsLockAspectRatio();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The aspect ratio of the first picture form in this document is locked: \" + lock);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiPictureForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "IsLockAspectRatio",
        "longname": "ApiPictureForm#IsLockAspectRatio",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 20126,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiPictureForm/Methods/IsLockAspectRatio.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the picture position inside the current form:\n\t * <b>0</b> - the picture is placed on the left/top;\n\t * <b>50</b> - the picture is placed in the center;\n\t * <b>100</b> - the picture is placed on the right/bottom.\n\t * @memberof ApiPictureForm\n\t * @param {percentage} nShiftX - Horizontal position measured in percent.\n\t * @param {percentage} nShiftY - Vertical position measured in percent.\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiPictureForm/Methods/SetPicturePosition.js\n\t */",
        "description": "Sets the picture position inside the current form:\n<b>0</b> - the picture is placed on the left/top;\n<b>50</b> - the picture is placed in the center;\n<b>100</b> - the picture is placed on the right/bottom.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet pictureForm = Api.CreatePictureForm({\"key\": \"Personal information\", \"tip\": \"Upload your photo\", \"required\": true, \"placeholder\": \"Photo\", \"scaleFlag\": \"tooBig\", \"lockAspectRatio\": true, \"respectBorders\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(pictureForm);\npictureForm.SetImage(\"https://api.onlyoffice.com/content/img/docbuilder/examples/user-profile.png\");\npictureForm.SetPicturePosition(70, 70);\nlet position = pictureForm.GetPicturePosition();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Picture position: \");\nparagraph.AddLineBreak();\nfor (let i = 0; i < position.length; i++ ){\n\tlet shift = position[i];\n\tparagraph.AddText(\"\" + shift);\n\tparagraph.AddLineBreak();\n}\ndoc.Push(paragraph);\n```",
        "memberof": "ApiPictureForm",
        "params": [
            {
                "type": {
                    "names": [
                        "percentage"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "percentage"
                    }
                },
                "name": "nShiftX",
                "description": "Horizontal position measured in percent.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "percentage"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "percentage"
                    }
                },
                "name": "nShiftY",
                "description": "Vertical position measured in percent.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetPicturePosition",
        "longname": "ApiPictureForm#SetPicturePosition",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 20142,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiPictureForm/Methods/SetPicturePosition.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the picture position inside the current form.\n\t * @memberof ApiPictureForm\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {Array.<percentage>} Array of two numbers [shiftX, shiftY]\n\t * @see office-js-api/Examples/{Editor}/ApiPictureForm/Methods/GetPicturePosition.js\n\t */",
        "description": "Returns the picture position inside the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet pictureForm = Api.CreatePictureForm({\"key\": \"Personal information\", \"tip\": \"Upload your photo\", \"required\": true, \"placeholder\": \"Photo\", \"scaleFlag\": \"tooBig\", \"lockAspectRatio\": true, \"respectBorders\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(pictureForm);\npictureForm.SetImage(\"https://api.onlyoffice.com/content/img/docbuilder/examples/user-profile.png\");\npictureForm.SetPicturePosition(70, 70);\nlet position = pictureForm.GetPicturePosition();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Picture position: \");\nparagraph.AddLineBreak();\nfor (let i = 0; i < position.length; i++ ){\n\tlet shift = position[i];\n\tparagraph.AddText(\"\" + shift);\n\tparagraph.AddLineBreak();\n}\ndoc.Push(paragraph);\n```",
        "memberof": "ApiPictureForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<percentage>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "type": "NameExpression",
                                "name": "percentage"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetPicturePosition",
        "longname": "ApiPictureForm#GetPicturePosition",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 20160,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiPictureForm/Methods/GetPicturePosition.js"
        ]
    },
    {
        "comment": "/**\n\t * Respects the form border width when scaling the image.\n\t * @memberof ApiPictureForm\n\t * @param {boolean} [isRespect=true] - Specifies if the form border width will be respected (true) or not (false).\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiPictureForm/Methods/SetRespectBorders.js\n\t */",
        "description": "Respects the form border width when scaling the image.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet pictureForm = Api.CreatePictureForm({\"key\": \"Personal information\", \"tip\": \"Upload your photo\", \"required\": true, \"placeholder\": \"Photo\", \"scaleFlag\": \"tooBig\", \"lockAspectRatio\": true, \"shiftX\": 50, \"shiftY\": 50});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(pictureForm);\npictureForm.SetImage(\"https://api.onlyoffice.com/content/img/docbuilder/examples/user-profile.png\");\npictureForm.SetRespectBorders(true);\nlet respectBorders = pictureForm.IsRespectBorders();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The borders of the first picture form in this document are respected when scaling the image: \" + respectBorders);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiPictureForm",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isRespect",
                "description": "Specifies if the form border width will be respected (true) or not (false).",
                "optional": true,
                "defaultvalue": true
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetRespectBorders",
        "longname": "ApiPictureForm#SetRespectBorders",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 20173,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiPictureForm/Methods/SetRespectBorders.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks if the form border width is respected or not.\n\t * @memberof ApiPictureForm\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiPictureForm/Methods/IsRespectBorders.js\n\t */",
        "description": "Checks if the form border width is respected or not.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet pictureForm = Api.CreatePictureForm({\"key\": \"Personal information\", \"tip\": \"Upload your photo\", \"required\": true, \"placeholder\": \"Photo\", \"scaleFlag\": \"tooBig\", \"lockAspectRatio\": true, \"shiftX\": 50, \"shiftY\": 50});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(pictureForm);\npictureForm.SetImage(\"https://api.onlyoffice.com/content/img/docbuilder/examples/user-profile.png\");\npictureForm.SetRespectBorders(true);\nlet respectBorders = pictureForm.IsRespectBorders();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The borders of the first picture form in this document are respected when scaling the image: \" + respectBorders);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiPictureForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "IsRespectBorders",
        "longname": "ApiPictureForm#IsRespectBorders",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 20190,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiPictureForm/Methods/IsRespectBorders.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns an image in the base64 format from the current picture form.\n\t * @memberof ApiPictureForm\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {base64img}\n\t * @see office-js-api/Examples/{Editor}/ApiPictureForm/Methods/GetImage.js\n\t */",
        "description": "Returns an image in the base64 format from the current picture form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet pictureForm = Api.CreatePictureForm({\"key\": \"Personal information\", \"tip\": \"Upload your photo\", \"required\": true, \"placeholder\": \"Photo\", \"scaleFlag\": \"tooBig\", \"lockAspectRatio\": true, \"respectBorders\": false, \"shiftX\": 50, \"shiftY\": 50});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(pictureForm);\npictureForm.SetImage(\"https://static.onlyoffice.com/assets/docs/samples/img/onlyoffice_logo.png\");\nlet base64img = pictureForm.GetImage();\nlet drawing = Api.CreateImage(base64img, 60 * 36000, 35 * 36000);\nparagraph.AddDrawing(drawing);\n```",
        "memberof": "ApiPictureForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "base64img"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "base64img"
                    }
                }
            }
        ],
        "name": "GetImage",
        "longname": "ApiPictureForm#GetImage",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 20201,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiPictureForm/Methods/GetImage.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets an image to the current picture form.\n\t * @memberof ApiPictureForm\n\t * @param {string} sImageSrc - The image source where the image to be inserted should be taken from (currently, only internet URL or base64 encoded images are supported).\n\t * @param {EMU} nWidth - The image width in English measure units.\n\t * @param {EMU} nHeight - The image height in English measure units.\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiPictureForm/Methods/SetImage.js\n\t */",
        "description": "Sets an image to the current picture form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet pictureForm = Api.CreatePictureForm({\"tip\": \"Upload your photo\", \"required\": true, \"placeholder\": \"Photo\", \"scaleFlag\": \"tooBig\", \"lockAspectRatio\": true, \"respectBorders\": false, \"shiftX\": 50, \"shiftY\": 50});\npictureForm.SetImage(\"https://api.onlyoffice.com/content/img/docbuilder/examples/user-profile.png\");\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(pictureForm);\n```",
        "memberof": "ApiPictureForm",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sImageSrc",
                "description": "The image source where the image to be inserted should be taken from (currently, only internet URL or base64 encoded images are supported).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nWidth",
                "description": "The image width in English measure units.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "EMU"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EMU"
                    }
                },
                "name": "nHeight",
                "description": "The image height in English measure units.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetImage",
        "longname": "ApiPictureForm#SetImage",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 20228,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiPictureForm/Methods/SetImage.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the list values from the current combo box.\n\t * @memberof ApiComboBoxForm\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {string[]}\n\t * @see office-js-api/Examples/{Editor}/ApiComboBoxForm/Methods/GetListValues.js\n\t */",
        "description": "Returns the list values from the current combo box.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet comboBoxForm = Api.CreateComboBoxForm({\"key\": \"Personal information\", \"tip\": \"Choose your country\", \"required\": true, \"placeholder\": \"Country\", \"editable\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(comboBoxForm);\ncomboBoxForm.SetListValues([\"Latvia\", \"USA\", \"UK\"]);\nlet listValues = comboBoxForm.GetListValues();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Combo box list values: \");\nparagraph.AddLineBreak();\nfor (let i = 0; i < listValues.length; i++ ){\n\tparagraph.AddText(listValues[i]);\n\tparagraph.AddLineBreak();\n}\ndoc.Push(paragraph);\n```",
        "memberof": "ApiComboBoxForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "string",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "GetListValues",
        "longname": "ApiComboBoxForm#GetListValues",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 20306,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiComboBoxForm/Methods/GetListValues.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the list values to the current combo box.\n\t * @memberof ApiComboBoxForm\n\t * @param {string[]} aListString - The combo box list values.\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiComboBoxForm/Methods/SetListValues.js\n\t */",
        "description": "Sets the list values to the current combo box.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet comboBoxForm = Api.CreateComboBoxForm({\"key\": \"Personal information\", \"tip\": \"Choose your country\", \"required\": true, \"placeholder\": \"Country\", \"editable\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(comboBoxForm);\ncomboBoxForm.SetListValues([\"Latvia\", \"USA\", \"UK\"]);\n```",
        "memberof": "ApiComboBoxForm",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "string",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "name": "aListString",
                "description": "The combo box list values.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetListValues",
        "longname": "ApiComboBoxForm#SetListValues",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 20327,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiComboBoxForm/Methods/SetListValues.js"
        ]
    },
    {
        "comment": "/**\n\t * Selects the specified value from the combo box list values. \n\t * @memberof ApiComboBoxForm\n\t * @param {string} sValue - The combo box list value that will be selected.\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiComboBoxForm/Methods/SelectListValue.js\n\t */",
        "description": "Selects the specified value from the combo box list values.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet comboBoxForm = Api.CreateComboBoxForm({\"key\": \"Personal information\", \"tip\": \"Choose your country\", \"required\": true, \"placeholder\": \"Country\", \"editable\": false, \"autoFit\": false, \"items\": [\"Latvia\", \"USA\", \"UK\"]});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(comboBoxForm);\ncomboBoxForm.SelectListValue(\"USA\");\n```",
        "memberof": "ApiComboBoxForm",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sValue",
                "description": "The combo box list value that will be selected.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SelectListValue",
        "longname": "ApiComboBoxForm#SelectListValue",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 20362,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiComboBoxForm/Methods/SelectListValue.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the text to the current combo box.\n\t *Available only for editable combo box forms.*\n\t * @memberof ApiComboBoxForm\n\t * @param {string} sText - The combo box text.\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiComboBoxForm/Methods/SetText.js\n\t */",
        "description": "Sets the text to the current combo box.\nAvailable only for editable combo box forms.*\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet comboBoxForm = Api.CreateComboBoxForm({\"key\": \"Personal information\", \"tip\": \"Choose your country\", \"required\": true, \"placeholder\": \"Country\", \"editable\": true, \"autoFit\": false, \"items\": [\"Latvia\", \"USA\", \"UK\"]});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(comboBoxForm);\ncomboBoxForm.SetText(\"France\");\n```",
        "memberof": "ApiComboBoxForm",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sText",
                "description": "The combo box text.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetText",
        "longname": "ApiComboBoxForm#SetText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 20389,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiComboBoxForm/Methods/SetText.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks if the combo box text can be edited. If it is not editable, then this form is a dropdown list.\n\t * @memberof ApiComboBoxForm\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiComboBoxForm/Methods/IsEditable.js\n\t */",
        "description": "Checks if the combo box text can be edited. If it is not editable, then this form is a dropdown list.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet comboBoxForm = Api.CreateComboBoxForm({\"key\": \"Personal information\", \"tip\": \"Choose your country\", \"required\": true, \"placeholder\": \"Country\", \"editable\": false, \"autoFit\": false, \"items\": [\"Latvia\", \"USA\", \"UK\"]});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(comboBoxForm);\nlet editable = comboBoxForm.IsEditable();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first combo box from this document is editable: \" + editable);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiComboBoxForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "IsEditable",
        "longname": "ApiComboBoxForm#IsEditable",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 20416,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiComboBoxForm/Methods/IsEditable.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks the current checkbox.\n\t * @memberof ApiCheckBoxForm\n\t * @param {boolean} isChecked - Specifies if the current checkbox will be checked (true) or not (false).\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiCheckBoxForm/Methods/SetChecked.js\n\t */",
        "description": "Checks the current checkbox.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet checkBoxForm = Api.CreateCheckBoxForm({\"key\": \"Marital status\", \"tip\": \"Specify your marital status\", \"required\": true, \"placeholder\": \"Marital status\", \"radio\": true});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(checkBoxForm);\nparagraph.AddText(\" Married\");\nparagraph.AddLineBreak();\ncheckBoxForm = Api.CreateCheckBoxForm({\"key\": \"Marital status\", \"tip\": \"Specify your marital status\", \"required\": true, \"placeholder\": \"Marital status\", \"radio\": true});\nparagraph.AddElement(checkBoxForm);\nparagraph.AddText(\" Single\");\ncheckBoxForm.SetChecked(true);\n```",
        "memberof": "ApiCheckBoxForm",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "isChecked",
                "description": "Specifies if the current checkbox will be checked (true) or not (false).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetChecked",
        "longname": "ApiCheckBoxForm#SetChecked",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 20435,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiCheckBoxForm/Methods/SetChecked.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the state of the current checkbox (checked or not).\n\t * @memberof ApiCheckBoxForm\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiCheckBoxForm/Methods/IsChecked.js\n\t */",
        "description": "Returns the state of the current checkbox (checked or not).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet checkBoxForm = Api.CreateCheckBoxForm({\"key\": \"Marital status\", \"tip\": \"Specify your marital status\", \"required\": true, \"placeholder\": \"Marital status\", \"radio\": true});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(checkBoxForm);\nparagraph.AddText(\" Married\");\nparagraph.AddLineBreak();\ncheckBoxForm = Api.CreateCheckBoxForm({\"key\": \"Marital status\", \"tip\": \"Specify your marital status\", \"required\": true, \"placeholder\": \"Marital status\", \"radio\": true});\nparagraph.AddElement(checkBoxForm);\nparagraph.AddText(\" Single\");\ncheckBoxForm.SetChecked(true);\nlet checked = checkBoxForm.IsChecked();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The second radio button from this document is checked: \" + checked);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiCheckBoxForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "IsChecked",
        "longname": "ApiCheckBoxForm#IsChecked",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 20453,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiCheckBoxForm/Methods/IsChecked.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks if the current checkbox is a radio button. \n\t * @memberof ApiCheckBoxForm\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiCheckBoxForm/Methods/IsRadioButton.js\n\t */",
        "description": "Checks if the current checkbox is a radio button.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet checkBoxForm = Api.CreateCheckBoxForm({\"key\": \"Marital status\", \"tip\": \"Specify your marital status\", \"required\": true, \"placeholder\": \"Marital status\", \"radio\": true});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(checkBoxForm);\nparagraph.AddText(\" Married\");\nparagraph.AddLineBreak();\ncheckBoxForm = Api.CreateCheckBoxForm({\"key\": \"Marital status\", \"tip\": \"Specify your marital status\", \"required\": true, \"placeholder\": \"Marital status\", \"radio\": true});\nparagraph.AddElement(checkBoxForm);\nparagraph.AddText(\" Single\");\nlet radioButton = checkBoxForm.IsRadioButton();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The second form from this document is a radio button: \" + radioButton);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiCheckBoxForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "IsRadioButton",
        "longname": "ApiCheckBoxForm#IsRadioButton",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 20464,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiCheckBoxForm/Methods/IsRadioButton.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the radio group key if the current checkbox is a radio button.\n\t * @memberof ApiCheckBoxForm\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiCheckBoxForm/Methods/GetRadioGroup.js\n\t */",
        "description": "Returns the radio group key if the current checkbox is a radio button.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet checkBoxForm = Api.CreateCheckBoxForm({\"tip\": \"Specify your marital status\", \"required\": true, \"placeholder\": \"Marital status\", \"radio\": true});\ncheckBoxForm.SetRadioGroup(\"Marital status\");\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(checkBoxForm);\nparagraph.AddText(\" Married\");\nparagraph.AddLineBreak();\ncheckBoxForm = Api.CreateCheckBoxForm({\"tip\": \"Specify your marital status\", \"required\": true, \"placeholder\": \"Marital status\", \"radio\": true});\ncheckBoxForm.SetRadioGroup(\"Marital status\");\nparagraph.AddElement(checkBoxForm);\nparagraph.AddText(\" Single\");\nlet radioGroup = checkBoxForm.GetRadioGroup();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Radio group name of the radio buttons in this document: \" + radioGroup);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiCheckBoxForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetRadioGroup",
        "longname": "ApiCheckBoxForm#GetRadioGroup",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 20475,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiCheckBoxForm/Methods/GetRadioGroup.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the radio group key to the current radio button.\n\t * @memberof ApiCheckBoxForm\n\t * @param {string} sKey - Radio group key.\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @see office-js-api/Examples/{Editor}/ApiCheckBoxForm/Methods/SetRadioGroup.js\n\t */",
        "description": "Sets the radio group key to the current radio button.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet checkBoxForm = Api.CreateCheckBoxForm({\"tip\": \"Specify your marital status\", \"required\": true, \"placeholder\": \"Marital status\", \"radio\": true});\ncheckBoxForm.SetRadioGroup(\"Marital status\");\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(checkBoxForm);\nparagraph.AddText(\" Married\");\nparagraph.AddLineBreak();\ncheckBoxForm = Api.CreateCheckBoxForm({\"tip\": \"Specify your marital status\", \"required\": true, \"placeholder\": \"Marital status\", \"radio\": true});\ncheckBoxForm.SetRadioGroup(\"Marital status\");\nparagraph.AddElement(checkBoxForm);\nparagraph.AddText(\" Single\");\nlet radioGroup = checkBoxForm.GetRadioGroup();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Radio group name of the radio buttons in this document: \" + radioGroup);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiCheckBoxForm",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sKey",
                "description": "Radio group key.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": null,
        "name": "SetRadioGroup",
        "longname": "ApiCheckBoxForm#SetRadioGroup",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 20487,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiCheckBoxForm/Methods/SetRadioGroup.js"
        ]
    },
    {
        "comment": "/**\n\t * Gets the date format of the current form.\n\t * @memberof ApiDateForm\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {string}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiDateForm/Methods/GetFormat.js\n\t */",
        "description": "Gets the date format of the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet dateForm = Api.CreateDateForm({\"key\": \"Nowadays\", \"tip\": \"Enter current date\", \"required\": true, \"placeholder\": \"Your date here\", \"format\": \"mm.dd.yyyy\", \"lang\": \"en-US\"});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(dateForm);\ndateForm.SetFormat(\"dddd, dd MMMM yyyy\");\nlet format = dateForm.GetFormat();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first date form from this document has format: \" + format);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiDateForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetFormat",
        "longname": "ApiDateForm#GetFormat",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 20514,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiDateForm/Methods/GetFormat.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the date format to the current form.\n\t * @memberof ApiDateForm\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @param {string} sFormat - The date format. For example, mm.dd.yyyy\n\t * @returns {boolean}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiDateForm/Methods/SetFormat.js\n\t */",
        "description": "Sets the date format to the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet dateForm = Api.CreateDateForm({\"key\": \"Nowadays\", \"tip\": \"Enter current date\", \"required\": true, \"placeholder\": \"Your date here\", \"format\": \"mm.dd.yyyy\", \"lang\": \"en-US\"});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(dateForm);\ndateForm.SetFormat(\"dddd, dd MMMM yyyy\");\nlet format = dateForm.GetFormat();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first date form from this document has format: \" + format);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiDateForm",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sFormat",
                "description": "The date format. For example, mm.dd.yyyy",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetFormat",
        "longname": "ApiDateForm#SetFormat",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 20528,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiDateForm/Methods/SetFormat.js"
        ]
    },
    {
        "comment": "/**\n\t * Gets the used date language of the current form.\n\t * @memberof ApiDateForm\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {string}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiDateForm/Methods/GetLanguage.js\n\t */",
        "description": "Gets the used date language of the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet dateForm = Api.CreateDateForm({\"key\": \"Nowadays\", \"tip\": \"Enter current date\", \"required\": true, \"placeholder\": \"Your date here\", \"format\": \"mm.dd.yyyy\", \"lang\": \"en-US\"});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(dateForm);\ndateForm.SetLanguage(\"en-CA\");\nlet langId = dateForm.GetLanguage();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first date form from this document has setted language: \" + langId);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiDateForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                }
            }
        ],
        "name": "GetLanguage",
        "longname": "ApiDateForm#GetLanguage",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 20550,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiDateForm/Methods/GetLanguage.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the date language to the current form.\n\t * @memberof ApiDateForm\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @param {string} sLangId - The date language. The possible value for this parameter is a language identifier as defined in\n\t * RFC 4646/BCP 47. Example: \"en-CA\".\n\t * @returns {boolean}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiDateForm/Methods/SetLanguage.js\n\t */",
        "description": "Sets the date language to the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet dateForm = Api.CreateDateForm({\"key\": \"Nowadays\", \"tip\": \"Enter current date\", \"required\": true, \"placeholder\": \"Your date here\", \"format\": \"mm.dd.yyyy\", \"lang\": \"en-US\"});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(dateForm);\ndateForm.SetLanguage(\"en-CA\");\nlet langId = dateForm.GetLanguage();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first date form from this document has setted language: \" + langId);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiDateForm",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "sLangId",
                "description": "The date language. The possible value for this parameter is a language identifier as defined in\nRFC 4646/BCP 47. Example: \"en-CA\".",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetLanguage",
        "longname": "ApiDateForm#SetLanguage",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 20570,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiDateForm/Methods/SetLanguage.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the timestamp of the current form.\n\t * @memberof ApiDateForm\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {number}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiDateForm/Methods/GetTime.js\n\t */",
        "description": "Returns the timestamp of the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet dateForm = Api.CreateDateForm({\"key\": \"Nowadays\", \"tip\": \"Enter current date\", \"required\": true, \"placeholder\": \"Your date here\", \"format\": \"mm.dd.yyyy\", \"lang\": \"en-US\"});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(dateForm);\ndateForm.SetTime(new Date().getTime());\nlet timeStamp = dateForm.GetTime();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first date form from this document has setted time: \" + new Date(timeStamp));\ndoc.Push(paragraph);\n```",
        "memberof": "ApiDateForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "GetTime",
        "longname": "ApiDateForm#GetTime",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 20593,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiDateForm/Methods/GetTime.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the timestamp to the current form.\n\t * @memberof ApiDateForm\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @param {number} nTimeStamp The timestamp that will be set to the current date form.\n\t * @returns {boolean}\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiDateForm/Methods/SetTime.js\n\t */",
        "description": "Sets the timestamp to the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet dateForm = Api.CreateDateForm({\"key\": \"Nowadays\", \"tip\": \"Enter current date\", \"required\": true, \"placeholder\": \"Your date here\", \"format\": \"mm.dd.yyyy\", \"lang\": \"en-US\"});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(dateForm);\ndateForm.SetTime(new Date().getTime());\nlet timeStamp = dateForm.GetTime();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first date form from this document has setted time: \" + new Date(timeStamp));\ndoc.Push(paragraph);\n```",
        "memberof": "ApiDateForm",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "nTimeStamp",
                "description": "The timestamp that will be set to the current date form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "SetTime",
        "longname": "ApiDateForm#SetTime",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 20610,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiDateForm/Methods/SetTime.js"
        ]
    },
    {
        "comment": "/**\n\t * Common form properties.\n\t * @typedef {Object} FormPrBase\n\t * @property {string} key - Form key.\n\t * @property {string} tip - Form tip text.\n\t * @property {string} tag - Form tag.\n\t * @property {boolean} required - Specifies if the form is required or not.\n\t * @property {string} placeholder - Form placeholder text.\n\t * @see office-js-api/Examples/Enumerations/FormPrBase.js\n\t */",
        "description": "Common form properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet formPrBase = {\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\"};\nlet textForm = Api.CreateTextForm(formPrBase);\n```",
        "name": "FormPrBase",
        "longname": "FormPrBase",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 58,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "key",
                "description": "Form key.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "tip",
                "description": "Form tip text.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "tag",
                "description": "Form tag.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "required",
                "description": "Specifies if the form is required or not.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "placeholder",
                "description": "Form placeholder text.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "see": [
            "office-js-api/Examples/Enumerations/FormPrBase.js"
        ],
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        }
    },
    {
        "comment": "/**\n\t * Specific text field properties.\n\t * @typedef {Object} TextFormPrBase\n\t * @property {boolean} comb - Specifies if the text field should be a comb of characters with the same cell width. The maximum number of characters must be set to a positive value.\n\t * @property {number} maxCharacters - The maximum number of characters in the text field.\n\t * @property {number} cellWidth - The cell width for each character measured in millimeters. If this parameter is not specified or equal to 0 or less, then the width will be set automatically.\n\t * @property {boolean} multiLine - Specifies if the current fixed size text field is multiline or not.\n\t * @property {boolean} autoFit - Specifies if the text field content should be autofit, i.e. whether the font size adjusts to the size of the fixed size form.\n\t * @see office-js-api/Examples/Enumerations/TextFormPrBase.js\n\t */",
        "description": "Specific text field properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet textFormPrBase = {\"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false};\nlet textForm = Api.CreateTextForm(textFormPrBase);\n```",
        "name": "TextFormPrBase",
        "longname": "TextFormPrBase",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 69,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "comb",
                "description": "Specifies if the text field should be a comb of characters with the same cell width. The maximum number of characters must be set to a positive value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "maxCharacters",
                "description": "The maximum number of characters in the text field.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "cellWidth",
                "description": "The cell width for each character measured in millimeters. If this parameter is not specified or equal to 0 or less, then the width will be set automatically.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "multiLine",
                "description": "Specifies if the current fixed size text field is multiline or not.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "autoFit",
                "description": "Specifies if the text field content should be autofit, i.e. whether the font size adjusts to the size of the fixed size form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "see": [
            "office-js-api/Examples/Enumerations/TextFormPrBase.js"
        ],
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        }
    },
    {
        "comment": "/**\n\t * Text field properties.\n\t * @typedef {FormPrBase | TextFormPrBase} TextFormPr\n\t * @see office-js-api/Examples/Enumerations/TextFormPr.js\n\t */",
        "description": "Text field properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet textFormPr = {\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false};\nlet textForm = Api.CreateTextForm(textFormPr);\n```",
        "name": "TextFormPr",
        "longname": "TextFormPr",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 80,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/TextFormPr.js"
        ],
        "type": {
            "names": [
                "FormPrBase",
                "TextFormPrBase"
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "FormPrBase"
                    },
                    {
                        "type": "NameExpression",
                        "name": "TextFormPrBase"
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Form insertion specific properties.\n\t * @typedef {Object} FormInsertPr\n\t * @property {boolean} [placeholderFromSelection=false] - Specifies if the currently selected text should be saved as a placeholder of the inserted form.\n\t * @property {boolean} [keepSelectedTextInForm=true] - Specifies if the currently selected text should be saved as the content of the inserted form.\n\t * @see office-js-api/Examples/Enumerations/FormInsertPr.js\n\t */",
        "description": "Form insertion specific properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet textFormInsertPr = {\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"Name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false, \"placeholderFromSelection\": true, \"keepSelectedTextInForm\": false};\ndoc.InsertTextForm(textFormInsertPr);\n```",
        "name": "FormInsertPr",
        "longname": "FormInsertPr",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 86,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "placeholderFromSelection",
                "description": "Specifies if the currently selected text should be saved as a placeholder of the inserted form.",
                "optional": true,
                "defaultvalue": false
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "keepSelectedTextInForm",
                "description": "Specifies if the currently selected text should be saved as the content of the inserted form.",
                "optional": true,
                "defaultvalue": true
            }
        ],
        "see": [
            "office-js-api/Examples/Enumerations/FormInsertPr.js"
        ],
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        }
    },
    {
        "comment": "/**\n\t * Properties for inserting a text field.\n\t * @typedef {FormPrBase | TextFormPrBase | FormInsertPr} TextFormInsertPr\n\t * @see office-js-api/Examples/Enumerations/TextFormInsertPr.js\n\t */",
        "description": "Properties for inserting a text field.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet textFormInsertPr = {\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"Name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false, \"placeholderFromSelection\": true, \"keepSelectedTextInForm\": false};\ndoc.InsertTextForm(textFormInsertPr);\n```",
        "name": "TextFormInsertPr",
        "longname": "TextFormInsertPr",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 94,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/TextFormInsertPr.js"
        ],
        "type": {
            "names": [
                "FormPrBase",
                "TextFormPrBase",
                "FormInsertPr"
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "FormPrBase"
                    },
                    {
                        "type": "NameExpression",
                        "name": "TextFormPrBase"
                    },
                    {
                        "type": "NameExpression",
                        "name": "FormInsertPr"
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Specific checkbox / radio button properties.\n\t * @typedef {Object} CheckBoxFormPrBase\n\t * @property {boolean} radio - Specifies if the current checkbox is a radio button. In this case, the key parameter is considered as an identifier for the group of radio buttons.\n\t * @see office-js-api/Examples/Enumerations/CheckBoxFormPrBase.js\n\t */",
        "description": "Specific checkbox / radio button properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet checkBoxFormPrBase = {\"radio\": true};\nlet checkBoxForm = Api.CreateCheckBoxForm(checkBoxFormPrBase)\n```",
        "name": "CheckBoxFormPrBase",
        "longname": "CheckBoxFormPrBase",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 101,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "radio",
                "description": "Specifies if the current checkbox is a radio button. In this case, the key parameter is considered as an identifier for the group of radio buttons.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "see": [
            "office-js-api/Examples/Enumerations/CheckBoxFormPrBase.js"
        ],
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        }
    },
    {
        "comment": "/**\n\t * Checkbox / radio button properties.\n\t * @typedef {FormPrBase | CheckBoxFormPrBase} CheckBoxFormPr\n\t * @see office-js-api/Examples/Enumerations/CheckBoxFormPr.js\n\t */",
        "description": "Checkbox / radio button properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet checkBoxFormPr = {\"key\": \"Marital status\", \"tip\": \"Specify your marital status\", \"required\": true, \"placeholder\": \"Marital status\", \"radio\": true};\nlet checkBoxForm = Api.CreateCheckBoxForm(checkBoxFormPr);\n```",
        "name": "CheckBoxFormPr",
        "longname": "CheckBoxFormPr",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 108,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/CheckBoxFormPr.js"
        ],
        "type": {
            "names": [
                "FormPrBase",
                "CheckBoxFormPrBase"
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "FormPrBase"
                    },
                    {
                        "type": "NameExpression",
                        "name": "CheckBoxFormPrBase"
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Specific combo box / dropdown list properties.\n\t * @typedef {Object} ComboBoxFormPrBase\n\t * @property {boolean} editable - Specifies if the combo box text can be edited.\n\t * @property {boolean} autoFit - Specifies if the combo box form content should be autofit, i.e. whether the font size adjusts to the size of the fixed size form.\n\t * @property {Array.<string | Array.<string>>} items - The combo box items.\n     * This array consists of strings or arrays of two strings where the first string is the displayed value and the second one is its meaning.\n     * If the array consists of single strings, then the displayed value and its meaning are the same.\n     * Example: [\"First\", [\"Second\", \"2\"], [\"Third\", \"3\"], \"Fourth\"].\n\n\t * @see office-js-api/Examples/Enumerations/ComboBoxFormPrBase.js\n\t */",
        "description": "Specific combo box / dropdown list properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet comboBoxFormPrBase = {\"editable\": false, \"autoFit\": false, \"items\": [\"Latvia\", \"USA\", \"UK\"]};\nlet comboBoxForm = Api.CreateComboBoxForm(comboBoxFormPrBase);\n```",
        "name": "ComboBoxFormPrBase",
        "longname": "ComboBoxFormPrBase",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 114,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "editable",
                "description": "Specifies if the combo box text can be edited.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "autoFit",
                "description": "Specifies if the combo box form content should be autofit, i.e. whether the font size adjusts to the size of the fixed size form.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "Array.<(string|Array.<string>)>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "type": "TypeUnion",
                                "elements": [
                                    {
                                        "type": "NameExpression",
                                        "name": "string"
                                    },
                                    {
                                        "type": "TypeApplication",
                                        "expression": {
                                            "type": "NameExpression",
                                            "name": "Array"
                                        },
                                        "applications": [
                                            {
                                                "type": "NameExpression",
                                                "name": "string"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                },
                "name": "items",
                "description": "The combo box items.\nThis array consists of strings or arrays of two strings where the first string is the displayed value and the second one is its meaning.\nIf the array consists of single strings, then the displayed value and its meaning are the same.\nExample: [\"First\", [\"Second\", \"2\"], [\"Third\", \"3\"], \"Fourth\"].",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "see": [
            "office-js-api/Examples/Enumerations/ComboBoxFormPrBase.js"
        ],
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        }
    },
    {
        "comment": "/**\n\t * Combo box / dropdown list properties.\n\t * @typedef {FormPrBase | ComboBoxFormPrBase} ComboBoxFormPr\n\t * @see office-js-api/Examples/Enumerations/ComboBoxFormPr.js\n\t */",
        "description": "Combo box / dropdown list properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet comboBoxFormPr = {\"key\": \"Personal information\", \"tip\": \"Choose your country\", \"required\": true, \"placeholder\": \"Country\", \"editable\": false, \"autoFit\": false, \"items\": [\"Latvia\", \"USA\", \"UK\"]};\nlet comboBoxForm = Api.CreateComboBoxForm(comboBoxFormPr);\n```",
        "name": "ComboBoxFormPr",
        "longname": "ComboBoxFormPr",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 127,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/ComboBoxFormPr.js"
        ],
        "type": {
            "names": [
                "FormPrBase",
                "ComboBoxFormPrBase"
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "FormPrBase"
                    },
                    {
                        "type": "NameExpression",
                        "name": "ComboBoxFormPrBase"
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Specific picture form properties.\n\t * @typedef {Object} PictureFormPrBase\n\t * @property {ScaleFlag} scaleFlag - The condition to scale an image in the picture form: \"always\", \"never\", \"tooBig\" or \"tooSmall\".\n\t * @property {boolean} lockAspectRatio - Specifies if the aspect ratio of the picture form is locked or not.\n\t * @property {boolean} respectBorders - Specifies if the form border width is respected or not when scaling the image.\n\t * @property {percentage} shiftX - Horizontal picture position inside the picture form measured in percent:\n\t * <b>0</b> - the picture is placed on the left;\n\t * <b>50</b> - the picture is placed in the center;\n\t * <b>100</b> - the picture is placed on the right.\n\t * @property {percentage} shiftY - Vertical picture position inside the picture form measured in percent:\n\t * <b>0</b> - the picture is placed on top;\n\t * <b>50</b> - the picture is placed in the center;\n\t * <b>100</b> - the picture is placed on the bottom.\n\t * @see office-js-api/Examples/Enumerations/PictureFormPrBase.js\n\t */",
        "description": "Specific picture form properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet comboBoxFormPr = {\"editable\": false, \"autoFit\": false, \"items\": [\"Latvia\", \"USA\", \"UK\"]};\nlet comboBoxForm = Api.CreateComboBoxForm(comboBoxFormPr);\n```",
        "name": "PictureFormPrBase",
        "longname": "PictureFormPrBase",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 145,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "ScaleFlag"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ScaleFlag"
                    }
                },
                "name": "scaleFlag",
                "description": "The condition to scale an image in the picture form: \"always\", \"never\", \"tooBig\" or \"tooSmall\".",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "lockAspectRatio",
                "description": "Specifies if the aspect ratio of the picture form is locked or not.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "respectBorders",
                "description": "Specifies if the form border width is respected or not when scaling the image.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "percentage"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "percentage"
                    }
                },
                "name": "shiftX",
                "description": "Horizontal picture position inside the picture form measured in percent:\n<b>0</b> - the picture is placed on the left;\n<b>50</b> - the picture is placed in the center;\n<b>100</b> - the picture is placed on the right.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "percentage"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "percentage"
                    }
                },
                "name": "shiftY",
                "description": "Vertical picture position inside the picture form measured in percent:\n<b>0</b> - the picture is placed on top;\n<b>50</b> - the picture is placed in the center;\n<b>100</b> - the picture is placed on the bottom.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "see": [
            "office-js-api/Examples/Enumerations/PictureFormPrBase.js"
        ],
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        }
    },
    {
        "comment": "/**\n\t * Picture form properties.\n\t * @typedef {FormPrBase | PictureFormPrBase} PictureFormPr\n\t * @see office-js-api/Examples/Enumerations/PictureFormPr.js\n\t */",
        "description": "Picture form properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet pictureFormPr = {\"key\": \"Personal information\", \"tip\": \"Upload your photo\", \"required\": true, \"placeholder\": \"Photo\", \"scaleFlag\": \"tooBig\", \"lockAspectRatio\": true, \"respectBorders\": false, \"shiftX\": 50, \"shiftY\": 50};\nlet pictureForm = Api.CreatePictureForm(pictureFormPr);\n```",
        "name": "PictureFormPr",
        "longname": "PictureFormPr",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 162,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/PictureFormPr.js"
        ],
        "type": {
            "names": [
                "FormPrBase",
                "PictureFormPrBase"
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "FormPrBase"
                    },
                    {
                        "type": "NameExpression",
                        "name": "PictureFormPrBase"
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Specific date form properties.\n\t * @typedef {Object} DateFormPrBase\n\t * @property {string} format\t- The date format, ex: mm.dd.yyyy\n\t * @property {string} lang\t\t- The date language. Possible value for this parameter is a language identifier as defined by\n\t * RFC 4646/BCP 47. Example: \"en-CA\".\n\t * @see office-js-api/Examples/Enumerations/DateFormPrBase.js\n\t */",
        "description": "Specific date form properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet dateFormPrBase = {\"format\": \"mm.dd.yyyy\", \"lang\": \"en-US\"};\nlet dateForm = Api.CreateDateForm(dateFormPrBase);\n```",
        "name": "DateFormPrBase",
        "longname": "DateFormPrBase",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 168,
            "columnno": 1
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "format",
                "description": "The date format, ex: mm.dd.yyyy",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "name": "lang",
                "description": "The date language. Possible value for this parameter is a language identifier as defined by\nRFC 4646/BCP 47. Example: \"en-CA\".",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "see": [
            "office-js-api/Examples/Enumerations/DateFormPrBase.js"
        ],
        "type": {
            "names": [
                "Object"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Object"
            }
        }
    },
    {
        "comment": "/**\n\t * Date form properties.\n\t * @typedef {FormPrBase | DateFormPrBase} DateFormPr\n\t * @see office-js-api/Examples/Enumerations/DateFormPr.js\n\t */",
        "description": "Date form properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet dateFormPr = {\"key\": \"Nowadays\", \"tip\": \"Enter current date\", \"required\": true, \"placeholder\": \"Your date here\", \"format\": \"mm.dd.yyyy\", \"lang\": \"en-US\"};\nlet dateForm = Api.CreateDateForm(dateFormPr);\n```",
        "name": "DateFormPr",
        "longname": "DateFormPr",
        "kind": "typedef",
        "scope": "global",
        "meta": {
            "lineno": 177,
            "columnno": 1
        },
        "properties": null,
        "see": [
            "office-js-api/Examples/Enumerations/DateFormPr.js"
        ],
        "type": {
            "names": [
                "FormPrBase",
                "DateFormPrBase"
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "FormPrBase"
                    },
                    {
                        "type": "NameExpression",
                        "name": "DateFormPrBase"
                    }
                ]
            }
        }
    },
    {
        "comment": "/**\n\t * Creates a text field with the specified text field properties.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @param {TextFormPr} oFormPr - Text field properties.\n\t * @returns {ApiTextForm}\n\t * @see office-js-api/Examples/Forms/Api/Methods/CreateTextForm.js\n\t */",
        "description": "Creates a text field with the specified text field properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "TextFormPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "TextFormPr"
                    }
                },
                "name": "oFormPr",
                "description": "Text field properties.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextForm"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiTextForm"
                    }
                }
            }
        ],
        "name": "CreateTextForm",
        "longname": "Api#CreateTextForm",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 191,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Forms/Api/Methods/CreateTextForm.js"
        ]
    },
    {
        "comment": "/**\n\t * Creates a checkbox / radio button with the specified checkbox / radio button properties.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @param {CheckBoxFormPr} oFormPr - Checkbox / radio button properties.\n\t * @returns {ApiCheckBoxForm}\n\t * @see office-js-api/Examples/Forms/Api/Methods/CreateCheckBoxForm.js\n\t */",
        "description": "Creates a checkbox / radio button with the specified checkbox / radio button properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet checkBoxForm = Api.CreateCheckBoxForm({\"key\": \"Marital status\", \"tip\": \"Specify your marital status\", \"required\": true, \"placeholder\": \"Marital status\", \"radio\": true});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(checkBoxForm);\nparagraph.AddText(\" Married\");\nparagraph.AddLineBreak();\ncheckBoxForm = Api.CreateCheckBoxForm({\"key\": \"Marital status\", \"tip\": \"Specify your marital status\", \"required\": true, \"placeholder\": \"Marital status\", \"radio\": true});\nparagraph.AddElement(checkBoxForm);\nparagraph.AddText(\" Single\");\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "CheckBoxFormPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "CheckBoxFormPr"
                    }
                },
                "name": "oFormPr",
                "description": "Checkbox / radio button properties.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiCheckBoxForm"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiCheckBoxForm"
                    }
                }
            }
        ],
        "name": "CreateCheckBoxForm",
        "longname": "Api#CreateCheckBoxForm",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 212,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Forms/Api/Methods/CreateCheckBoxForm.js"
        ]
    },
    {
        "comment": "/**\n\t * Creates a combo box / dropdown list with the specified combo box / dropdown list properties.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @param {ComboBoxFormPr} oFormPr - Combo box / dropdown list properties.\n\t * @returns {ApiComboBoxForm}\n\t * @see office-js-api/Examples/Forms/Api/Methods/CreateComboBoxForm.js\n\t */",
        "description": "Creates a combo box / dropdown list with the specified combo box / dropdown list properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet comboBoxForm = Api.CreateComboBoxForm({\"key\": \"Personal information\", \"tip\": \"Choose your country\", \"required\": true, \"placeholder\": \"Country\", \"editable\": false, \"autoFit\": false, \"items\": [\"Latvia\", \"USA\", \"UK\"]});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(comboBoxForm);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "ComboBoxFormPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ComboBoxFormPr"
                    }
                },
                "name": "oFormPr",
                "description": "Combo box / dropdown list properties.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiComboBoxForm"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiComboBoxForm"
                    }
                }
            }
        ],
        "name": "CreateComboBoxForm",
        "longname": "Api#CreateComboBoxForm",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 287,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Forms/Api/Methods/CreateComboBoxForm.js"
        ]
    },
    {
        "comment": "/**\n\t * Creates a picture form with the specified picture form properties.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @param {PictureFormPr} oFormPr - Picture form properties.\n\t * @returns {ApiPictureForm}\n\t * @see office-js-api/Examples/Forms/Api/Methods/CreatePictureForm.js\n\t */",
        "description": "Creates a picture form with the specified picture form properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet pictureForm = Api.CreatePictureForm({\"key\": \"Personal information\", \"tip\": \"Upload your photo\", \"required\": true, \"placeholder\": \"Photo\", \"scaleFlag\": \"tooBig\", \"lockAspectRatio\": true, \"respectBorders\": false, \"shiftX\": 50, \"shiftY\": 50});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(pictureForm);\npictureForm.SetImage(\"https://api.onlyoffice.com/content/img/docbuilder/examples/user-profile.png\");\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "PictureFormPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PictureFormPr"
                    }
                },
                "name": "oFormPr",
                "description": "Picture form properties.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiPictureForm"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiPictureForm"
                    }
                }
            }
        ],
        "name": "CreatePictureForm",
        "longname": "Api#CreatePictureForm",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 357,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Forms/Api/Methods/CreatePictureForm.js"
        ]
    },
    {
        "comment": "/**\n\t * Creates a date form with the specified date form properties.\n\t * @memberof Api\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @param {DateFormPr} oFormPr - Date form properties.\n\t * @returns {ApiDateForm}\n\t * @see office-js-api/Examples/Forms/Api/Methods/CreateDateForm.js\n\t */",
        "description": "Creates a date form with the specified date form properties.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet dateForm = Api.CreateDateForm({\"key\": \"Nowadays\", \"tip\": \"Enter current date\", \"required\": true, \"placeholder\": \"Your date here\", \"format\": \"mm.dd.yyyy\", \"lang\": \"en-US\"});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(dateForm);\n```",
        "memberof": "Api",
        "params": [
            {
                "type": {
                    "names": [
                        "DateFormPr"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "DateFormPr"
                    }
                },
                "name": "oFormPr",
                "description": "Date form properties.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiDateForm"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ApiDateForm"
                    }
                }
            }
        ],
        "name": "CreateDateForm",
        "longname": "Api#CreateDateForm",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 409,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Forms/Api/Methods/CreateDateForm.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the ApiFormBase class.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {\"form\"}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetClassType.js\n\t */",
        "description": "Returns a type of the ApiFormBase class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet classType = textForm.GetClassType();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Class type: \" + classType);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiTextForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"form\""
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiTextForm#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19388,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {FormType}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetFormType.js\n\t */",
        "description": "Returns a type of the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet formType = textForm.GetFormType();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Form type: \" + formType);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiTextForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "FormType"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetFormType",
        "longname": "ApiTextForm#GetFormType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19399,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetFormType.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the current form key.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetFormKey.js\n\t */",
        "description": "Returns the current form key.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet comboBoxForm = Api.CreateComboBoxForm({\"key\": \"Personal information\", \"tip\": \"Choose your country\", \"required\": true, \"placeholder\": \"Country\", \"editable\": false, \"autoFit\": false, \"items\": [\"Latvia\", \"USA\", \"UK\"]});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(comboBoxForm);\nlet key = comboBoxForm.GetFormKey();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Form key: \" + key);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiTextForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetFormKey",
        "longname": "ApiTextForm#GetFormKey",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19423,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetFormKey.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets a key to the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @param {string} sKey - Form key.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetFormKey.js\n\t */",
        "description": "Sets a key to the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetFormKey(\"Personal information\");\nlet key = textForm.GetFormKey();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Form key: \" + key);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiTextForm",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                },
                "name": "sKey",
                "description": "Form key.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetFormKey",
        "longname": "ApiTextForm#SetFormKey",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19443,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetFormKey.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the tip text of the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetTipText.js\n\t */",
        "description": "Returns the tip text of the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet comboBoxForm = Api.CreateComboBoxForm({\"key\": \"Personal information\", \"tip\": \"Choose your country\", \"required\": true, \"placeholder\": \"Country\", \"editable\": false, \"autoFit\": false, \"items\": [\"Latvia\", \"USA\", \"UK\"]});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(comboBoxForm);\nlet tipText = comboBoxForm.GetTipText();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Form tip text: \" + tipText);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiTextForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetTipText",
        "longname": "ApiTextForm#GetTipText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19472,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetTipText.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the tip text to the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @param {string} sText - Tip text.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetTipText.js\n\t */",
        "description": "Sets the tip text to the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetTipText(\"Enter your first name\");\nlet tipText = textForm.GetTipText();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Tip text: \" + tipText);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiTextForm",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                },
                "name": "sText",
                "description": "Tip text.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetTipText",
        "longname": "ApiTextForm#SetTipText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19489,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetTipText.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks if the current form is required.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/IsRequired.js\n\t */",
        "description": "Checks if the current form is required.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet required = textForm.IsRequired();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document is required: \" + required);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiTextForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "IsRequired",
        "longname": "ApiTextForm#IsRequired",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19509,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/IsRequired.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies if the current form should be required.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @param {boolean} bRequired - Defines if the current form is required (true) or not (false).\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetRequired.js\n\t */",
        "description": "Specifies if the current form should be required.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetRequired(true);\nlet required = textForm.IsRequired();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document is required: \" + required);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiTextForm",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "bRequired",
                "description": "Defines if the current form is required (true) or not (false).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetRequired",
        "longname": "ApiTextForm#SetRequired",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19521,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetRequired.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks if the current form is fixed size.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/IsFixed.js\n\t */",
        "description": "Checks if the current form is fixed size.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.ToFixed(10 * 240, 2 * 240);\nlet fixed = textForm.IsFixed();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document is fixed: \" + fixed);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiTextForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "IsFixed",
        "longname": "ApiTextForm#IsFixed",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19543,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/IsFixed.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts the current form to a fixed size form.\n\t * @memberof ApiFormBase\n\t * @param {twips} width - The wrapper shape width measured in twentieths of a point (1/1440 of an inch).\n\t * @param {twips} height - The wrapper shape height measured in twentieths of a point (1/1440 of an inch).\n\t * @param {boolean} keepPosition - Save position on the page (it can be a little bit slow, because it runs the document calculation)\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/ToFixed.js\n\t */",
        "description": "Converts the current form to a fixed size form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.ToFixed(10 * 240, 2 * 240);\nlet fixed = textForm.IsFixed();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document has a fixed size: \" + fixed);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiTextForm",
        "params": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": null
                },
                "name": "width",
                "description": "The wrapper shape width measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": null
                },
                "name": "height",
                "description": "The wrapper shape height measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "keepPosition",
                "description": "Save position on the page (it can be a little bit slow, because it runs the document calculation)",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "ToFixed",
        "longname": "ApiTextForm#ToFixed",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19557,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/ToFixed.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts the current form to an inline form.\n\t *Picture form can't be converted to an inline form, it's always a fixed size object.*\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/ToInline.js\n\t */",
        "description": "Converts the current form to an inline form.\nPicture form can't be converted to an inline form, it's always a fixed size object.*\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.ToFixed(10 * 240, 2 * 240);\nlet copyForm = textForm.Copy();\nparagraph = Api.CreateParagraph();\nparagraph.AddElement(copyForm);\ndoc.Push(paragraph);\ncopyForm.ToInline();\nlet fixed = textForm.IsFixed();\nlet fixedCopy = copyForm.IsFixed();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document has a fixed size: \" + fixed);\nparagraph.AddLineBreak();\nparagraph.AddText(\"The second form from this document has a fixed size: \" + fixedCopy);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiTextForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "ToInline",
        "longname": "ApiTextForm#ToInline",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19578,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/ToInline.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the border color to the current form.\n\t * @memberof ApiFormBase\n\t * @param {byte} r - Red color component value.\n\t * @param {byte} g - Green color component value.\n\t * @param {byte} b - Blue color component value.\n\t * @param {boolean} bNone - Defines that border color will not be set.\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetBorderColor.js\n\t */",
        "description": "Sets the border color to the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetBorderColor(255, 111, 61);\n```",
        "memberof": "ApiTextForm",
        "params": [
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": null
                },
                "name": "r",
                "description": "Red color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": null
                },
                "name": "g",
                "description": "Green color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": null
                },
                "name": "b",
                "description": "Blue color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "bNone",
                "description": "Defines that border color will not be set.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetBorderColor",
        "longname": "ApiTextForm#SetBorderColor",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19599,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetBorderColor.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the background color to the current form.\n\t * @memberof ApiFormBase\n\t * @param {byte} r - Red color component value.\n\t * @param {byte} g - Green color component value.\n\t * @param {byte} b - Blue color component value.\n\t * @param {boolean} bNone - Defines that background color will not be set.\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetBackgroundColor.js\n\t */",
        "description": "Sets the background color to the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetBackgroundColor(255, 111, 61);\n```",
        "memberof": "ApiTextForm",
        "params": [
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": null
                },
                "name": "r",
                "description": "Red color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": null
                },
                "name": "g",
                "description": "Green color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": null
                },
                "name": "b",
                "description": "Blue color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "bNone",
                "description": "Defines that background color will not be set.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetBackgroundColor",
        "longname": "ApiTextForm#SetBackgroundColor",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19631,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetBackgroundColor.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the text from the current form.\n\t *Returns the value as a string if possible for the given form type*\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetText.js\n\t */",
        "description": "Returns the text from the current form.\nReturns the value as a string if possible for the given form type*\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet text = textForm.GetText();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Form text: \" + text);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiTextForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetText",
        "longname": "ApiTextForm#GetText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19674,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetText.js"
        ]
    },
    {
        "comment": "/**\n\t * Clears the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/Clear.js\n\t */",
        "description": "Clears the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetText(\"John Smith\");\ntextForm.Clear();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document was cleared.\");\ndoc.Push(paragraph);\n```",
        "memberof": "ApiTextForm",
        "params": null,
        "returns": null,
        "name": "Clear",
        "longname": "ApiTextForm#Clear",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19684,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/Clear.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a shape in which the form is placed to control the position and size of the fixed size form frame.\n\t * The null value will be returned for the inline forms.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {?ApiShape} - returns the shape in which the form is placed.\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetWrapperShape.js\n\t */",
        "description": "Returns a shape in which the form is placed to control the position and size of the fixed size form frame.\nThe null value will be returned for the inline forms.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.ToFixed(10 * 240, 2 * 240);\nlet shape = textForm.GetWrapperShape();\nlet stroke = Api.CreateStroke(36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\nshape.SetOutLine(stroke);\n```",
        "memberof": "ApiTextForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiShape"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetWrapperShape",
        "longname": "ApiTextForm#GetWrapperShape",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19698,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetWrapperShape.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the placeholder text to the current form.\n\t *Can't be set to checkbox or radio button.*\n\t * @memberof ApiFormBase\n\t * @param {string} sText - The text that will be set to the current form.\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetPlaceholderText.js\n\t */",
        "description": "Sets the placeholder text to the current form.\nCan't be set to checkbox or radio button.*\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetPlaceholderText(\"First name\");\n```",
        "memberof": "ApiTextForm",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                },
                "name": "sText",
                "description": "The text that will be set to the current form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetPlaceholderText",
        "longname": "ApiTextForm#SetPlaceholderText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19716,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetPlaceholderText.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the text properties to the current form.\n\t *Used if possible for this type of form*\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @param {ApiTextPr} oTextPr - The text properties that will be set to the current form.\n\t * @return {boolean}  \n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetTextPr.js\n\t */",
        "description": "Sets the text properties to the current form.\nUsed if possible for this type of form*\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet textPr = Api.CreateTextPr();\ntextPr.SetFontSize(30);\ntextPr.SetBold(true);\ntextForm.SetTextPr(textPr);\n```",
        "memberof": "ApiTextForm",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                },
                "name": "oTextPr",
                "description": "The text properties that will be set to the current form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetTextPr",
        "longname": "ApiTextForm#SetTextPr",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19737,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetTextPr.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the text properties from the current form.\n\t *Used if possible for this type of form*\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @return {ApiTextPr}  \n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetTextPr.js\n\t */",
        "description": "Returns the text properties from the current form.\nUsed if possible for this type of form*\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet textPr = Api.CreateTextPr();\ntextPr.SetFontSize(30);\ntextPr.SetBold(true);\ntextForm.SetTextPr(textPr);\nlet formTextPr = textForm.GetTextPr();\nformTextPr.SetItalic(true);\ntextForm.SetTextPr(formTextPr);\n```",
        "memberof": "ApiTextForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetTextPr",
        "longname": "ApiTextForm#GetTextPr",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19755,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetTextPr.js"
        ]
    },
    {
        "comment": "/**\n\t * Places a cursor before/after the current form.\n\t * @param {boolean?} [isAfter=true] - Specifies whether a cursor will be placed before (false) or after (true) the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/MoveCursorOutside.js\n\t */",
        "description": "Places a cursor before/after the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetText(\"The cursor will be placed after the current form.\");\ntextForm.MoveCursorOutside(true);\n```",
        "memberof": "ApiTextForm",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "isAfter",
                "description": "Specifies whether a cursor will be placed before (false) or after (true) the current form.",
                "optional": true,
                "defaultvalue": true
            }
        ],
        "returns": null,
        "name": "MoveCursorOutside",
        "longname": "ApiTextForm#MoveCursorOutside",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19767,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/MoveCursorOutside.js"
        ]
    },
    {
        "comment": "/**\n\t * Copies the current form (copies with the shape if it exists).\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {?ApiForm}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/Copy.js\n\t */",
        "description": "Copies the current form (copies with the shape if it exists).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet copyTextForm = textForm.Copy();\nparagraph.AddLineBreak();\nparagraph.AddElement(copyTextForm);\n```",
        "memberof": "ApiTextForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiForm"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "Copy",
        "longname": "ApiTextForm#Copy",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19778,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/Copy.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the ApiFormBase class.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {\"form\"}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetClassType.js\n\t */",
        "description": "Returns a type of the ApiFormBase class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet classType = textForm.GetClassType();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Class type: \" + classType);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiComboBoxForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"form\""
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiComboBoxForm#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19388,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {FormType}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetFormType.js\n\t */",
        "description": "Returns a type of the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet formType = textForm.GetFormType();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Form type: \" + formType);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiComboBoxForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "FormType"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetFormType",
        "longname": "ApiComboBoxForm#GetFormType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19399,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetFormType.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the current form key.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetFormKey.js\n\t */",
        "description": "Returns the current form key.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet comboBoxForm = Api.CreateComboBoxForm({\"key\": \"Personal information\", \"tip\": \"Choose your country\", \"required\": true, \"placeholder\": \"Country\", \"editable\": false, \"autoFit\": false, \"items\": [\"Latvia\", \"USA\", \"UK\"]});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(comboBoxForm);\nlet key = comboBoxForm.GetFormKey();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Form key: \" + key);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiComboBoxForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetFormKey",
        "longname": "ApiComboBoxForm#GetFormKey",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19423,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetFormKey.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets a key to the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @param {string} sKey - Form key.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetFormKey.js\n\t */",
        "description": "Sets a key to the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetFormKey(\"Personal information\");\nlet key = textForm.GetFormKey();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Form key: \" + key);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiComboBoxForm",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                },
                "name": "sKey",
                "description": "Form key.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetFormKey",
        "longname": "ApiComboBoxForm#SetFormKey",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19443,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetFormKey.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the tip text of the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetTipText.js\n\t */",
        "description": "Returns the tip text of the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet comboBoxForm = Api.CreateComboBoxForm({\"key\": \"Personal information\", \"tip\": \"Choose your country\", \"required\": true, \"placeholder\": \"Country\", \"editable\": false, \"autoFit\": false, \"items\": [\"Latvia\", \"USA\", \"UK\"]});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(comboBoxForm);\nlet tipText = comboBoxForm.GetTipText();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Form tip text: \" + tipText);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiComboBoxForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetTipText",
        "longname": "ApiComboBoxForm#GetTipText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19472,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetTipText.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the tip text to the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @param {string} sText - Tip text.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetTipText.js\n\t */",
        "description": "Sets the tip text to the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetTipText(\"Enter your first name\");\nlet tipText = textForm.GetTipText();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Tip text: \" + tipText);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiComboBoxForm",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                },
                "name": "sText",
                "description": "Tip text.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetTipText",
        "longname": "ApiComboBoxForm#SetTipText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19489,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetTipText.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks if the current form is required.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/IsRequired.js\n\t */",
        "description": "Checks if the current form is required.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet required = textForm.IsRequired();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document is required: \" + required);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiComboBoxForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "IsRequired",
        "longname": "ApiComboBoxForm#IsRequired",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19509,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/IsRequired.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies if the current form should be required.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @param {boolean} bRequired - Defines if the current form is required (true) or not (false).\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetRequired.js\n\t */",
        "description": "Specifies if the current form should be required.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetRequired(true);\nlet required = textForm.IsRequired();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document is required: \" + required);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiComboBoxForm",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "bRequired",
                "description": "Defines if the current form is required (true) or not (false).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetRequired",
        "longname": "ApiComboBoxForm#SetRequired",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19521,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetRequired.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks if the current form is fixed size.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/IsFixed.js\n\t */",
        "description": "Checks if the current form is fixed size.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.ToFixed(10 * 240, 2 * 240);\nlet fixed = textForm.IsFixed();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document is fixed: \" + fixed);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiComboBoxForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "IsFixed",
        "longname": "ApiComboBoxForm#IsFixed",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19543,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/IsFixed.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts the current form to a fixed size form.\n\t * @memberof ApiFormBase\n\t * @param {twips} width - The wrapper shape width measured in twentieths of a point (1/1440 of an inch).\n\t * @param {twips} height - The wrapper shape height measured in twentieths of a point (1/1440 of an inch).\n\t * @param {boolean} keepPosition - Save position on the page (it can be a little bit slow, because it runs the document calculation)\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/ToFixed.js\n\t */",
        "description": "Converts the current form to a fixed size form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.ToFixed(10 * 240, 2 * 240);\nlet fixed = textForm.IsFixed();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document has a fixed size: \" + fixed);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiComboBoxForm",
        "params": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": null
                },
                "name": "width",
                "description": "The wrapper shape width measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": null
                },
                "name": "height",
                "description": "The wrapper shape height measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "keepPosition",
                "description": "Save position on the page (it can be a little bit slow, because it runs the document calculation)",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "ToFixed",
        "longname": "ApiComboBoxForm#ToFixed",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19557,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/ToFixed.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts the current form to an inline form.\n\t *Picture form can't be converted to an inline form, it's always a fixed size object.*\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/ToInline.js\n\t */",
        "description": "Converts the current form to an inline form.\nPicture form can't be converted to an inline form, it's always a fixed size object.*\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.ToFixed(10 * 240, 2 * 240);\nlet copyForm = textForm.Copy();\nparagraph = Api.CreateParagraph();\nparagraph.AddElement(copyForm);\ndoc.Push(paragraph);\ncopyForm.ToInline();\nlet fixed = textForm.IsFixed();\nlet fixedCopy = copyForm.IsFixed();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document has a fixed size: \" + fixed);\nparagraph.AddLineBreak();\nparagraph.AddText(\"The second form from this document has a fixed size: \" + fixedCopy);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiComboBoxForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "ToInline",
        "longname": "ApiComboBoxForm#ToInline",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19578,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/ToInline.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the border color to the current form.\n\t * @memberof ApiFormBase\n\t * @param {byte} r - Red color component value.\n\t * @param {byte} g - Green color component value.\n\t * @param {byte} b - Blue color component value.\n\t * @param {boolean} bNone - Defines that border color will not be set.\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetBorderColor.js\n\t */",
        "description": "Sets the border color to the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetBorderColor(255, 111, 61);\n```",
        "memberof": "ApiComboBoxForm",
        "params": [
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": null
                },
                "name": "r",
                "description": "Red color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": null
                },
                "name": "g",
                "description": "Green color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": null
                },
                "name": "b",
                "description": "Blue color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "bNone",
                "description": "Defines that border color will not be set.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetBorderColor",
        "longname": "ApiComboBoxForm#SetBorderColor",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19599,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetBorderColor.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the background color to the current form.\n\t * @memberof ApiFormBase\n\t * @param {byte} r - Red color component value.\n\t * @param {byte} g - Green color component value.\n\t * @param {byte} b - Blue color component value.\n\t * @param {boolean} bNone - Defines that background color will not be set.\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetBackgroundColor.js\n\t */",
        "description": "Sets the background color to the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetBackgroundColor(255, 111, 61);\n```",
        "memberof": "ApiComboBoxForm",
        "params": [
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": null
                },
                "name": "r",
                "description": "Red color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": null
                },
                "name": "g",
                "description": "Green color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": null
                },
                "name": "b",
                "description": "Blue color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "bNone",
                "description": "Defines that background color will not be set.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetBackgroundColor",
        "longname": "ApiComboBoxForm#SetBackgroundColor",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19631,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetBackgroundColor.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the text from the current form.\n\t *Returns the value as a string if possible for the given form type*\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetText.js\n\t */",
        "description": "Returns the text from the current form.\nReturns the value as a string if possible for the given form type*\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet text = textForm.GetText();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Form text: \" + text);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiComboBoxForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetText",
        "longname": "ApiComboBoxForm#GetText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19674,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetText.js"
        ]
    },
    {
        "comment": "/**\n\t * Clears the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/Clear.js\n\t */",
        "description": "Clears the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetText(\"John Smith\");\ntextForm.Clear();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document was cleared.\");\ndoc.Push(paragraph);\n```",
        "memberof": "ApiComboBoxForm",
        "params": null,
        "returns": null,
        "name": "Clear",
        "longname": "ApiComboBoxForm#Clear",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19684,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/Clear.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a shape in which the form is placed to control the position and size of the fixed size form frame.\n\t * The null value will be returned for the inline forms.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {?ApiShape} - returns the shape in which the form is placed.\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetWrapperShape.js\n\t */",
        "description": "Returns a shape in which the form is placed to control the position and size of the fixed size form frame.\nThe null value will be returned for the inline forms.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.ToFixed(10 * 240, 2 * 240);\nlet shape = textForm.GetWrapperShape();\nlet stroke = Api.CreateStroke(36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\nshape.SetOutLine(stroke);\n```",
        "memberof": "ApiComboBoxForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiShape"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetWrapperShape",
        "longname": "ApiComboBoxForm#GetWrapperShape",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19698,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetWrapperShape.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the placeholder text to the current form.\n\t *Can't be set to checkbox or radio button.*\n\t * @memberof ApiFormBase\n\t * @param {string} sText - The text that will be set to the current form.\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetPlaceholderText.js\n\t */",
        "description": "Sets the placeholder text to the current form.\nCan't be set to checkbox or radio button.*\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetPlaceholderText(\"First name\");\n```",
        "memberof": "ApiComboBoxForm",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                },
                "name": "sText",
                "description": "The text that will be set to the current form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetPlaceholderText",
        "longname": "ApiComboBoxForm#SetPlaceholderText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19716,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetPlaceholderText.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the text properties to the current form.\n\t *Used if possible for this type of form*\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @param {ApiTextPr} oTextPr - The text properties that will be set to the current form.\n\t * @return {boolean}  \n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetTextPr.js\n\t */",
        "description": "Sets the text properties to the current form.\nUsed if possible for this type of form*\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet textPr = Api.CreateTextPr();\ntextPr.SetFontSize(30);\ntextPr.SetBold(true);\ntextForm.SetTextPr(textPr);\n```",
        "memberof": "ApiComboBoxForm",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                },
                "name": "oTextPr",
                "description": "The text properties that will be set to the current form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetTextPr",
        "longname": "ApiComboBoxForm#SetTextPr",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19737,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetTextPr.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the text properties from the current form.\n\t *Used if possible for this type of form*\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @return {ApiTextPr}  \n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetTextPr.js\n\t */",
        "description": "Returns the text properties from the current form.\nUsed if possible for this type of form*\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet textPr = Api.CreateTextPr();\ntextPr.SetFontSize(30);\ntextPr.SetBold(true);\ntextForm.SetTextPr(textPr);\nlet formTextPr = textForm.GetTextPr();\nformTextPr.SetItalic(true);\ntextForm.SetTextPr(formTextPr);\n```",
        "memberof": "ApiComboBoxForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetTextPr",
        "longname": "ApiComboBoxForm#GetTextPr",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19755,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetTextPr.js"
        ]
    },
    {
        "comment": "/**\n\t * Places a cursor before/after the current form.\n\t * @param {boolean?} [isAfter=true] - Specifies whether a cursor will be placed before (false) or after (true) the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/MoveCursorOutside.js\n\t */",
        "description": "Places a cursor before/after the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetText(\"The cursor will be placed after the current form.\");\ntextForm.MoveCursorOutside(true);\n```",
        "memberof": "ApiComboBoxForm",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "isAfter",
                "description": "Specifies whether a cursor will be placed before (false) or after (true) the current form.",
                "optional": true,
                "defaultvalue": true
            }
        ],
        "returns": null,
        "name": "MoveCursorOutside",
        "longname": "ApiComboBoxForm#MoveCursorOutside",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19767,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/MoveCursorOutside.js"
        ]
    },
    {
        "comment": "/**\n\t * Copies the current form (copies with the shape if it exists).\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {?ApiForm}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/Copy.js\n\t */",
        "description": "Copies the current form (copies with the shape if it exists).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet copyTextForm = textForm.Copy();\nparagraph.AddLineBreak();\nparagraph.AddElement(copyTextForm);\n```",
        "memberof": "ApiComboBoxForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiForm"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "Copy",
        "longname": "ApiComboBoxForm#Copy",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19778,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/Copy.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the ApiFormBase class.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {\"form\"}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetClassType.js\n\t */",
        "description": "Returns a type of the ApiFormBase class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet classType = textForm.GetClassType();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Class type: \" + classType);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiCheckBoxForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"form\""
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiCheckBoxForm#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19388,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {FormType}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetFormType.js\n\t */",
        "description": "Returns a type of the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet formType = textForm.GetFormType();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Form type: \" + formType);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiCheckBoxForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "FormType"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetFormType",
        "longname": "ApiCheckBoxForm#GetFormType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19399,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetFormType.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the current form key.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetFormKey.js\n\t */",
        "description": "Returns the current form key.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet comboBoxForm = Api.CreateComboBoxForm({\"key\": \"Personal information\", \"tip\": \"Choose your country\", \"required\": true, \"placeholder\": \"Country\", \"editable\": false, \"autoFit\": false, \"items\": [\"Latvia\", \"USA\", \"UK\"]});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(comboBoxForm);\nlet key = comboBoxForm.GetFormKey();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Form key: \" + key);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiCheckBoxForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetFormKey",
        "longname": "ApiCheckBoxForm#GetFormKey",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19423,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetFormKey.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets a key to the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @param {string} sKey - Form key.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetFormKey.js\n\t */",
        "description": "Sets a key to the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetFormKey(\"Personal information\");\nlet key = textForm.GetFormKey();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Form key: \" + key);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiCheckBoxForm",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                },
                "name": "sKey",
                "description": "Form key.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetFormKey",
        "longname": "ApiCheckBoxForm#SetFormKey",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19443,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetFormKey.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the tip text of the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetTipText.js\n\t */",
        "description": "Returns the tip text of the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet comboBoxForm = Api.CreateComboBoxForm({\"key\": \"Personal information\", \"tip\": \"Choose your country\", \"required\": true, \"placeholder\": \"Country\", \"editable\": false, \"autoFit\": false, \"items\": [\"Latvia\", \"USA\", \"UK\"]});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(comboBoxForm);\nlet tipText = comboBoxForm.GetTipText();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Form tip text: \" + tipText);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiCheckBoxForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetTipText",
        "longname": "ApiCheckBoxForm#GetTipText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19472,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetTipText.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the tip text to the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @param {string} sText - Tip text.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetTipText.js\n\t */",
        "description": "Sets the tip text to the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetTipText(\"Enter your first name\");\nlet tipText = textForm.GetTipText();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Tip text: \" + tipText);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiCheckBoxForm",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                },
                "name": "sText",
                "description": "Tip text.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetTipText",
        "longname": "ApiCheckBoxForm#SetTipText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19489,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetTipText.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks if the current form is required.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/IsRequired.js\n\t */",
        "description": "Checks if the current form is required.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet required = textForm.IsRequired();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document is required: \" + required);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiCheckBoxForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "IsRequired",
        "longname": "ApiCheckBoxForm#IsRequired",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19509,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/IsRequired.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies if the current form should be required.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @param {boolean} bRequired - Defines if the current form is required (true) or not (false).\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetRequired.js\n\t */",
        "description": "Specifies if the current form should be required.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetRequired(true);\nlet required = textForm.IsRequired();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document is required: \" + required);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiCheckBoxForm",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "bRequired",
                "description": "Defines if the current form is required (true) or not (false).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetRequired",
        "longname": "ApiCheckBoxForm#SetRequired",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19521,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetRequired.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks if the current form is fixed size.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/IsFixed.js\n\t */",
        "description": "Checks if the current form is fixed size.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.ToFixed(10 * 240, 2 * 240);\nlet fixed = textForm.IsFixed();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document is fixed: \" + fixed);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiCheckBoxForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "IsFixed",
        "longname": "ApiCheckBoxForm#IsFixed",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19543,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/IsFixed.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts the current form to a fixed size form.\n\t * @memberof ApiFormBase\n\t * @param {twips} width - The wrapper shape width measured in twentieths of a point (1/1440 of an inch).\n\t * @param {twips} height - The wrapper shape height measured in twentieths of a point (1/1440 of an inch).\n\t * @param {boolean} keepPosition - Save position on the page (it can be a little bit slow, because it runs the document calculation)\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/ToFixed.js\n\t */",
        "description": "Converts the current form to a fixed size form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.ToFixed(10 * 240, 2 * 240);\nlet fixed = textForm.IsFixed();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document has a fixed size: \" + fixed);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiCheckBoxForm",
        "params": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": null
                },
                "name": "width",
                "description": "The wrapper shape width measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": null
                },
                "name": "height",
                "description": "The wrapper shape height measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "keepPosition",
                "description": "Save position on the page (it can be a little bit slow, because it runs the document calculation)",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "ToFixed",
        "longname": "ApiCheckBoxForm#ToFixed",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19557,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/ToFixed.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts the current form to an inline form.\n\t *Picture form can't be converted to an inline form, it's always a fixed size object.*\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/ToInline.js\n\t */",
        "description": "Converts the current form to an inline form.\nPicture form can't be converted to an inline form, it's always a fixed size object.*\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.ToFixed(10 * 240, 2 * 240);\nlet copyForm = textForm.Copy();\nparagraph = Api.CreateParagraph();\nparagraph.AddElement(copyForm);\ndoc.Push(paragraph);\ncopyForm.ToInline();\nlet fixed = textForm.IsFixed();\nlet fixedCopy = copyForm.IsFixed();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document has a fixed size: \" + fixed);\nparagraph.AddLineBreak();\nparagraph.AddText(\"The second form from this document has a fixed size: \" + fixedCopy);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiCheckBoxForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "ToInline",
        "longname": "ApiCheckBoxForm#ToInline",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19578,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/ToInline.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the border color to the current form.\n\t * @memberof ApiFormBase\n\t * @param {byte} r - Red color component value.\n\t * @param {byte} g - Green color component value.\n\t * @param {byte} b - Blue color component value.\n\t * @param {boolean} bNone - Defines that border color will not be set.\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetBorderColor.js\n\t */",
        "description": "Sets the border color to the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetBorderColor(255, 111, 61);\n```",
        "memberof": "ApiCheckBoxForm",
        "params": [
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": null
                },
                "name": "r",
                "description": "Red color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": null
                },
                "name": "g",
                "description": "Green color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": null
                },
                "name": "b",
                "description": "Blue color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "bNone",
                "description": "Defines that border color will not be set.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetBorderColor",
        "longname": "ApiCheckBoxForm#SetBorderColor",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19599,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetBorderColor.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the background color to the current form.\n\t * @memberof ApiFormBase\n\t * @param {byte} r - Red color component value.\n\t * @param {byte} g - Green color component value.\n\t * @param {byte} b - Blue color component value.\n\t * @param {boolean} bNone - Defines that background color will not be set.\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetBackgroundColor.js\n\t */",
        "description": "Sets the background color to the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetBackgroundColor(255, 111, 61);\n```",
        "memberof": "ApiCheckBoxForm",
        "params": [
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": null
                },
                "name": "r",
                "description": "Red color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": null
                },
                "name": "g",
                "description": "Green color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": null
                },
                "name": "b",
                "description": "Blue color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "bNone",
                "description": "Defines that background color will not be set.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetBackgroundColor",
        "longname": "ApiCheckBoxForm#SetBackgroundColor",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19631,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetBackgroundColor.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the text from the current form.\n\t *Returns the value as a string if possible for the given form type*\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetText.js\n\t */",
        "description": "Returns the text from the current form.\nReturns the value as a string if possible for the given form type*\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet text = textForm.GetText();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Form text: \" + text);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiCheckBoxForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetText",
        "longname": "ApiCheckBoxForm#GetText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19674,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetText.js"
        ]
    },
    {
        "comment": "/**\n\t * Clears the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/Clear.js\n\t */",
        "description": "Clears the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetText(\"John Smith\");\ntextForm.Clear();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document was cleared.\");\ndoc.Push(paragraph);\n```",
        "memberof": "ApiCheckBoxForm",
        "params": null,
        "returns": null,
        "name": "Clear",
        "longname": "ApiCheckBoxForm#Clear",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19684,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/Clear.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a shape in which the form is placed to control the position and size of the fixed size form frame.\n\t * The null value will be returned for the inline forms.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {?ApiShape} - returns the shape in which the form is placed.\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetWrapperShape.js\n\t */",
        "description": "Returns a shape in which the form is placed to control the position and size of the fixed size form frame.\nThe null value will be returned for the inline forms.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.ToFixed(10 * 240, 2 * 240);\nlet shape = textForm.GetWrapperShape();\nlet stroke = Api.CreateStroke(36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\nshape.SetOutLine(stroke);\n```",
        "memberof": "ApiCheckBoxForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiShape"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetWrapperShape",
        "longname": "ApiCheckBoxForm#GetWrapperShape",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19698,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetWrapperShape.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the placeholder text to the current form.\n\t *Can't be set to checkbox or radio button.*\n\t * @memberof ApiFormBase\n\t * @param {string} sText - The text that will be set to the current form.\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetPlaceholderText.js\n\t */",
        "description": "Sets the placeholder text to the current form.\nCan't be set to checkbox or radio button.*\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetPlaceholderText(\"First name\");\n```",
        "memberof": "ApiCheckBoxForm",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                },
                "name": "sText",
                "description": "The text that will be set to the current form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetPlaceholderText",
        "longname": "ApiCheckBoxForm#SetPlaceholderText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19716,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetPlaceholderText.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the text properties to the current form.\n\t *Used if possible for this type of form*\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @param {ApiTextPr} oTextPr - The text properties that will be set to the current form.\n\t * @return {boolean}  \n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetTextPr.js\n\t */",
        "description": "Sets the text properties to the current form.\nUsed if possible for this type of form*\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet textPr = Api.CreateTextPr();\ntextPr.SetFontSize(30);\ntextPr.SetBold(true);\ntextForm.SetTextPr(textPr);\n```",
        "memberof": "ApiCheckBoxForm",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                },
                "name": "oTextPr",
                "description": "The text properties that will be set to the current form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetTextPr",
        "longname": "ApiCheckBoxForm#SetTextPr",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19737,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetTextPr.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the text properties from the current form.\n\t *Used if possible for this type of form*\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @return {ApiTextPr}  \n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetTextPr.js\n\t */",
        "description": "Returns the text properties from the current form.\nUsed if possible for this type of form*\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet textPr = Api.CreateTextPr();\ntextPr.SetFontSize(30);\ntextPr.SetBold(true);\ntextForm.SetTextPr(textPr);\nlet formTextPr = textForm.GetTextPr();\nformTextPr.SetItalic(true);\ntextForm.SetTextPr(formTextPr);\n```",
        "memberof": "ApiCheckBoxForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetTextPr",
        "longname": "ApiCheckBoxForm#GetTextPr",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19755,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetTextPr.js"
        ]
    },
    {
        "comment": "/**\n\t * Places a cursor before/after the current form.\n\t * @param {boolean?} [isAfter=true] - Specifies whether a cursor will be placed before (false) or after (true) the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/MoveCursorOutside.js\n\t */",
        "description": "Places a cursor before/after the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetText(\"The cursor will be placed after the current form.\");\ntextForm.MoveCursorOutside(true);\n```",
        "memberof": "ApiCheckBoxForm",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "isAfter",
                "description": "Specifies whether a cursor will be placed before (false) or after (true) the current form.",
                "optional": true,
                "defaultvalue": true
            }
        ],
        "returns": null,
        "name": "MoveCursorOutside",
        "longname": "ApiCheckBoxForm#MoveCursorOutside",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19767,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/MoveCursorOutside.js"
        ]
    },
    {
        "comment": "/**\n\t * Copies the current form (copies with the shape if it exists).\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {?ApiForm}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/Copy.js\n\t */",
        "description": "Copies the current form (copies with the shape if it exists).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet copyTextForm = textForm.Copy();\nparagraph.AddLineBreak();\nparagraph.AddElement(copyTextForm);\n```",
        "memberof": "ApiCheckBoxForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiForm"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "Copy",
        "longname": "ApiCheckBoxForm#Copy",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19778,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/Copy.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the ApiFormBase class.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {\"form\"}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetClassType.js\n\t */",
        "description": "Returns a type of the ApiFormBase class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet classType = textForm.GetClassType();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Class type: \" + classType);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiPictureForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"form\""
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiPictureForm#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19388,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {FormType}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetFormType.js\n\t */",
        "description": "Returns a type of the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet formType = textForm.GetFormType();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Form type: \" + formType);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiPictureForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "FormType"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetFormType",
        "longname": "ApiPictureForm#GetFormType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19399,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetFormType.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the current form key.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetFormKey.js\n\t */",
        "description": "Returns the current form key.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet comboBoxForm = Api.CreateComboBoxForm({\"key\": \"Personal information\", \"tip\": \"Choose your country\", \"required\": true, \"placeholder\": \"Country\", \"editable\": false, \"autoFit\": false, \"items\": [\"Latvia\", \"USA\", \"UK\"]});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(comboBoxForm);\nlet key = comboBoxForm.GetFormKey();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Form key: \" + key);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiPictureForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetFormKey",
        "longname": "ApiPictureForm#GetFormKey",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19423,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetFormKey.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets a key to the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @param {string} sKey - Form key.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetFormKey.js\n\t */",
        "description": "Sets a key to the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetFormKey(\"Personal information\");\nlet key = textForm.GetFormKey();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Form key: \" + key);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiPictureForm",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                },
                "name": "sKey",
                "description": "Form key.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetFormKey",
        "longname": "ApiPictureForm#SetFormKey",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19443,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetFormKey.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the tip text of the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetTipText.js\n\t */",
        "description": "Returns the tip text of the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet comboBoxForm = Api.CreateComboBoxForm({\"key\": \"Personal information\", \"tip\": \"Choose your country\", \"required\": true, \"placeholder\": \"Country\", \"editable\": false, \"autoFit\": false, \"items\": [\"Latvia\", \"USA\", \"UK\"]});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(comboBoxForm);\nlet tipText = comboBoxForm.GetTipText();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Form tip text: \" + tipText);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiPictureForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetTipText",
        "longname": "ApiPictureForm#GetTipText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19472,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetTipText.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the tip text to the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @param {string} sText - Tip text.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetTipText.js\n\t */",
        "description": "Sets the tip text to the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetTipText(\"Enter your first name\");\nlet tipText = textForm.GetTipText();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Tip text: \" + tipText);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiPictureForm",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                },
                "name": "sText",
                "description": "Tip text.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetTipText",
        "longname": "ApiPictureForm#SetTipText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19489,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetTipText.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks if the current form is required.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/IsRequired.js\n\t */",
        "description": "Checks if the current form is required.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet required = textForm.IsRequired();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document is required: \" + required);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiPictureForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "IsRequired",
        "longname": "ApiPictureForm#IsRequired",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19509,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/IsRequired.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies if the current form should be required.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @param {boolean} bRequired - Defines if the current form is required (true) or not (false).\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetRequired.js\n\t */",
        "description": "Specifies if the current form should be required.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetRequired(true);\nlet required = textForm.IsRequired();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document is required: \" + required);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiPictureForm",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "bRequired",
                "description": "Defines if the current form is required (true) or not (false).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetRequired",
        "longname": "ApiPictureForm#SetRequired",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19521,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetRequired.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks if the current form is fixed size.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/IsFixed.js\n\t */",
        "description": "Checks if the current form is fixed size.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.ToFixed(10 * 240, 2 * 240);\nlet fixed = textForm.IsFixed();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document is fixed: \" + fixed);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiPictureForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "IsFixed",
        "longname": "ApiPictureForm#IsFixed",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19543,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/IsFixed.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts the current form to a fixed size form.\n\t * @memberof ApiFormBase\n\t * @param {twips} width - The wrapper shape width measured in twentieths of a point (1/1440 of an inch).\n\t * @param {twips} height - The wrapper shape height measured in twentieths of a point (1/1440 of an inch).\n\t * @param {boolean} keepPosition - Save position on the page (it can be a little bit slow, because it runs the document calculation)\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/ToFixed.js\n\t */",
        "description": "Converts the current form to a fixed size form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.ToFixed(10 * 240, 2 * 240);\nlet fixed = textForm.IsFixed();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document has a fixed size: \" + fixed);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiPictureForm",
        "params": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": null
                },
                "name": "width",
                "description": "The wrapper shape width measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": null
                },
                "name": "height",
                "description": "The wrapper shape height measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "keepPosition",
                "description": "Save position on the page (it can be a little bit slow, because it runs the document calculation)",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "ToFixed",
        "longname": "ApiPictureForm#ToFixed",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19557,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/ToFixed.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts the current form to an inline form.\n\t *Picture form can't be converted to an inline form, it's always a fixed size object.*\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/ToInline.js\n\t */",
        "description": "Converts the current form to an inline form.\nPicture form can't be converted to an inline form, it's always a fixed size object.*\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.ToFixed(10 * 240, 2 * 240);\nlet copyForm = textForm.Copy();\nparagraph = Api.CreateParagraph();\nparagraph.AddElement(copyForm);\ndoc.Push(paragraph);\ncopyForm.ToInline();\nlet fixed = textForm.IsFixed();\nlet fixedCopy = copyForm.IsFixed();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document has a fixed size: \" + fixed);\nparagraph.AddLineBreak();\nparagraph.AddText(\"The second form from this document has a fixed size: \" + fixedCopy);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiPictureForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "ToInline",
        "longname": "ApiPictureForm#ToInline",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19578,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/ToInline.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the border color to the current form.\n\t * @memberof ApiFormBase\n\t * @param {byte} r - Red color component value.\n\t * @param {byte} g - Green color component value.\n\t * @param {byte} b - Blue color component value.\n\t * @param {boolean} bNone - Defines that border color will not be set.\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetBorderColor.js\n\t */",
        "description": "Sets the border color to the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetBorderColor(255, 111, 61);\n```",
        "memberof": "ApiPictureForm",
        "params": [
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": null
                },
                "name": "r",
                "description": "Red color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": null
                },
                "name": "g",
                "description": "Green color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": null
                },
                "name": "b",
                "description": "Blue color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "bNone",
                "description": "Defines that border color will not be set.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetBorderColor",
        "longname": "ApiPictureForm#SetBorderColor",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19599,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetBorderColor.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the background color to the current form.\n\t * @memberof ApiFormBase\n\t * @param {byte} r - Red color component value.\n\t * @param {byte} g - Green color component value.\n\t * @param {byte} b - Blue color component value.\n\t * @param {boolean} bNone - Defines that background color will not be set.\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetBackgroundColor.js\n\t */",
        "description": "Sets the background color to the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetBackgroundColor(255, 111, 61);\n```",
        "memberof": "ApiPictureForm",
        "params": [
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": null
                },
                "name": "r",
                "description": "Red color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": null
                },
                "name": "g",
                "description": "Green color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": null
                },
                "name": "b",
                "description": "Blue color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "bNone",
                "description": "Defines that background color will not be set.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetBackgroundColor",
        "longname": "ApiPictureForm#SetBackgroundColor",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19631,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetBackgroundColor.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the text from the current form.\n\t *Returns the value as a string if possible for the given form type*\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetText.js\n\t */",
        "description": "Returns the text from the current form.\nReturns the value as a string if possible for the given form type*\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet text = textForm.GetText();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Form text: \" + text);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiPictureForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetText",
        "longname": "ApiPictureForm#GetText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19674,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetText.js"
        ]
    },
    {
        "comment": "/**\n\t * Clears the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/Clear.js\n\t */",
        "description": "Clears the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetText(\"John Smith\");\ntextForm.Clear();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document was cleared.\");\ndoc.Push(paragraph);\n```",
        "memberof": "ApiPictureForm",
        "params": null,
        "returns": null,
        "name": "Clear",
        "longname": "ApiPictureForm#Clear",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19684,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/Clear.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a shape in which the form is placed to control the position and size of the fixed size form frame.\n\t * The null value will be returned for the inline forms.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {?ApiShape} - returns the shape in which the form is placed.\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetWrapperShape.js\n\t */",
        "description": "Returns a shape in which the form is placed to control the position and size of the fixed size form frame.\nThe null value will be returned for the inline forms.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.ToFixed(10 * 240, 2 * 240);\nlet shape = textForm.GetWrapperShape();\nlet stroke = Api.CreateStroke(36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\nshape.SetOutLine(stroke);\n```",
        "memberof": "ApiPictureForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiShape"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetWrapperShape",
        "longname": "ApiPictureForm#GetWrapperShape",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19698,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetWrapperShape.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the placeholder text to the current form.\n\t *Can't be set to checkbox or radio button.*\n\t * @memberof ApiFormBase\n\t * @param {string} sText - The text that will be set to the current form.\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetPlaceholderText.js\n\t */",
        "description": "Sets the placeholder text to the current form.\nCan't be set to checkbox or radio button.*\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetPlaceholderText(\"First name\");\n```",
        "memberof": "ApiPictureForm",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                },
                "name": "sText",
                "description": "The text that will be set to the current form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetPlaceholderText",
        "longname": "ApiPictureForm#SetPlaceholderText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19716,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetPlaceholderText.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the text properties to the current form.\n\t *Used if possible for this type of form*\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @param {ApiTextPr} oTextPr - The text properties that will be set to the current form.\n\t * @return {boolean}  \n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetTextPr.js\n\t */",
        "description": "Sets the text properties to the current form.\nUsed if possible for this type of form*\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet textPr = Api.CreateTextPr();\ntextPr.SetFontSize(30);\ntextPr.SetBold(true);\ntextForm.SetTextPr(textPr);\n```",
        "memberof": "ApiPictureForm",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                },
                "name": "oTextPr",
                "description": "The text properties that will be set to the current form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetTextPr",
        "longname": "ApiPictureForm#SetTextPr",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19737,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetTextPr.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the text properties from the current form.\n\t *Used if possible for this type of form*\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @return {ApiTextPr}  \n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetTextPr.js\n\t */",
        "description": "Returns the text properties from the current form.\nUsed if possible for this type of form*\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet textPr = Api.CreateTextPr();\ntextPr.SetFontSize(30);\ntextPr.SetBold(true);\ntextForm.SetTextPr(textPr);\nlet formTextPr = textForm.GetTextPr();\nformTextPr.SetItalic(true);\ntextForm.SetTextPr(formTextPr);\n```",
        "memberof": "ApiPictureForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetTextPr",
        "longname": "ApiPictureForm#GetTextPr",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19755,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetTextPr.js"
        ]
    },
    {
        "comment": "/**\n\t * Places a cursor before/after the current form.\n\t * @param {boolean?} [isAfter=true] - Specifies whether a cursor will be placed before (false) or after (true) the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/MoveCursorOutside.js\n\t */",
        "description": "Places a cursor before/after the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetText(\"The cursor will be placed after the current form.\");\ntextForm.MoveCursorOutside(true);\n```",
        "memberof": "ApiPictureForm",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "isAfter",
                "description": "Specifies whether a cursor will be placed before (false) or after (true) the current form.",
                "optional": true,
                "defaultvalue": true
            }
        ],
        "returns": null,
        "name": "MoveCursorOutside",
        "longname": "ApiPictureForm#MoveCursorOutside",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19767,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/MoveCursorOutside.js"
        ]
    },
    {
        "comment": "/**\n\t * Copies the current form (copies with the shape if it exists).\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {?ApiForm}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/Copy.js\n\t */",
        "description": "Copies the current form (copies with the shape if it exists).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet copyTextForm = textForm.Copy();\nparagraph.AddLineBreak();\nparagraph.AddElement(copyTextForm);\n```",
        "memberof": "ApiPictureForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiForm"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "Copy",
        "longname": "ApiPictureForm#Copy",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19778,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/Copy.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the ApiFormBase class.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {\"form\"}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetClassType.js\n\t */",
        "description": "Returns a type of the ApiFormBase class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet classType = textForm.GetClassType();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Class type: \" + classType);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiDateForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"form\""
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiDateForm#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19388,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {FormType}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetFormType.js\n\t */",
        "description": "Returns a type of the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet formType = textForm.GetFormType();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Form type: \" + formType);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiDateForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "FormType"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetFormType",
        "longname": "ApiDateForm#GetFormType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19399,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetFormType.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the current form key.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetFormKey.js\n\t */",
        "description": "Returns the current form key.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet comboBoxForm = Api.CreateComboBoxForm({\"key\": \"Personal information\", \"tip\": \"Choose your country\", \"required\": true, \"placeholder\": \"Country\", \"editable\": false, \"autoFit\": false, \"items\": [\"Latvia\", \"USA\", \"UK\"]});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(comboBoxForm);\nlet key = comboBoxForm.GetFormKey();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Form key: \" + key);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiDateForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetFormKey",
        "longname": "ApiDateForm#GetFormKey",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19423,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetFormKey.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets a key to the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @param {string} sKey - Form key.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetFormKey.js\n\t */",
        "description": "Sets a key to the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetFormKey(\"Personal information\");\nlet key = textForm.GetFormKey();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Form key: \" + key);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiDateForm",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                },
                "name": "sKey",
                "description": "Form key.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetFormKey",
        "longname": "ApiDateForm#SetFormKey",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19443,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetFormKey.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the tip text of the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetTipText.js\n\t */",
        "description": "Returns the tip text of the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet comboBoxForm = Api.CreateComboBoxForm({\"key\": \"Personal information\", \"tip\": \"Choose your country\", \"required\": true, \"placeholder\": \"Country\", \"editable\": false, \"autoFit\": false, \"items\": [\"Latvia\", \"USA\", \"UK\"]});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(comboBoxForm);\nlet tipText = comboBoxForm.GetTipText();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Form tip text: \" + tipText);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiDateForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetTipText",
        "longname": "ApiDateForm#GetTipText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19472,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetTipText.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the tip text to the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @param {string} sText - Tip text.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetTipText.js\n\t */",
        "description": "Sets the tip text to the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetTipText(\"Enter your first name\");\nlet tipText = textForm.GetTipText();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Tip text: \" + tipText);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiDateForm",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                },
                "name": "sText",
                "description": "Tip text.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetTipText",
        "longname": "ApiDateForm#SetTipText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19489,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetTipText.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks if the current form is required.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/IsRequired.js\n\t */",
        "description": "Checks if the current form is required.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet required = textForm.IsRequired();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document is required: \" + required);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiDateForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "IsRequired",
        "longname": "ApiDateForm#IsRequired",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19509,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/IsRequired.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies if the current form should be required.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @param {boolean} bRequired - Defines if the current form is required (true) or not (false).\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetRequired.js\n\t */",
        "description": "Specifies if the current form should be required.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetRequired(true);\nlet required = textForm.IsRequired();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document is required: \" + required);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiDateForm",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "bRequired",
                "description": "Defines if the current form is required (true) or not (false).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetRequired",
        "longname": "ApiDateForm#SetRequired",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19521,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetRequired.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks if the current form is fixed size.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/IsFixed.js\n\t */",
        "description": "Checks if the current form is fixed size.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.ToFixed(10 * 240, 2 * 240);\nlet fixed = textForm.IsFixed();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document is fixed: \" + fixed);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiDateForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "IsFixed",
        "longname": "ApiDateForm#IsFixed",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19543,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/IsFixed.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts the current form to a fixed size form.\n\t * @memberof ApiFormBase\n\t * @param {twips} width - The wrapper shape width measured in twentieths of a point (1/1440 of an inch).\n\t * @param {twips} height - The wrapper shape height measured in twentieths of a point (1/1440 of an inch).\n\t * @param {boolean} keepPosition - Save position on the page (it can be a little bit slow, because it runs the document calculation)\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/ToFixed.js\n\t */",
        "description": "Converts the current form to a fixed size form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.ToFixed(10 * 240, 2 * 240);\nlet fixed = textForm.IsFixed();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document has a fixed size: \" + fixed);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiDateForm",
        "params": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": null
                },
                "name": "width",
                "description": "The wrapper shape width measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": null
                },
                "name": "height",
                "description": "The wrapper shape height measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "keepPosition",
                "description": "Save position on the page (it can be a little bit slow, because it runs the document calculation)",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "ToFixed",
        "longname": "ApiDateForm#ToFixed",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19557,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/ToFixed.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts the current form to an inline form.\n\t *Picture form can't be converted to an inline form, it's always a fixed size object.*\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/ToInline.js\n\t */",
        "description": "Converts the current form to an inline form.\nPicture form can't be converted to an inline form, it's always a fixed size object.*\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.ToFixed(10 * 240, 2 * 240);\nlet copyForm = textForm.Copy();\nparagraph = Api.CreateParagraph();\nparagraph.AddElement(copyForm);\ndoc.Push(paragraph);\ncopyForm.ToInline();\nlet fixed = textForm.IsFixed();\nlet fixedCopy = copyForm.IsFixed();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document has a fixed size: \" + fixed);\nparagraph.AddLineBreak();\nparagraph.AddText(\"The second form from this document has a fixed size: \" + fixedCopy);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiDateForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "ToInline",
        "longname": "ApiDateForm#ToInline",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19578,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/ToInline.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the border color to the current form.\n\t * @memberof ApiFormBase\n\t * @param {byte} r - Red color component value.\n\t * @param {byte} g - Green color component value.\n\t * @param {byte} b - Blue color component value.\n\t * @param {boolean} bNone - Defines that border color will not be set.\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetBorderColor.js\n\t */",
        "description": "Sets the border color to the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetBorderColor(255, 111, 61);\n```",
        "memberof": "ApiDateForm",
        "params": [
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": null
                },
                "name": "r",
                "description": "Red color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": null
                },
                "name": "g",
                "description": "Green color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": null
                },
                "name": "b",
                "description": "Blue color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "bNone",
                "description": "Defines that border color will not be set.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetBorderColor",
        "longname": "ApiDateForm#SetBorderColor",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19599,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetBorderColor.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the background color to the current form.\n\t * @memberof ApiFormBase\n\t * @param {byte} r - Red color component value.\n\t * @param {byte} g - Green color component value.\n\t * @param {byte} b - Blue color component value.\n\t * @param {boolean} bNone - Defines that background color will not be set.\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetBackgroundColor.js\n\t */",
        "description": "Sets the background color to the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetBackgroundColor(255, 111, 61);\n```",
        "memberof": "ApiDateForm",
        "params": [
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": null
                },
                "name": "r",
                "description": "Red color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": null
                },
                "name": "g",
                "description": "Green color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": null
                },
                "name": "b",
                "description": "Blue color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "bNone",
                "description": "Defines that background color will not be set.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetBackgroundColor",
        "longname": "ApiDateForm#SetBackgroundColor",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19631,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetBackgroundColor.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the text from the current form.\n\t *Returns the value as a string if possible for the given form type*\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetText.js\n\t */",
        "description": "Returns the text from the current form.\nReturns the value as a string if possible for the given form type*\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet text = textForm.GetText();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Form text: \" + text);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiDateForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetText",
        "longname": "ApiDateForm#GetText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19674,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetText.js"
        ]
    },
    {
        "comment": "/**\n\t * Clears the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/Clear.js\n\t */",
        "description": "Clears the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetText(\"John Smith\");\ntextForm.Clear();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document was cleared.\");\ndoc.Push(paragraph);\n```",
        "memberof": "ApiDateForm",
        "params": null,
        "returns": null,
        "name": "Clear",
        "longname": "ApiDateForm#Clear",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19684,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/Clear.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a shape in which the form is placed to control the position and size of the fixed size form frame.\n\t * The null value will be returned for the inline forms.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {?ApiShape} - returns the shape in which the form is placed.\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetWrapperShape.js\n\t */",
        "description": "Returns a shape in which the form is placed to control the position and size of the fixed size form frame.\nThe null value will be returned for the inline forms.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.ToFixed(10 * 240, 2 * 240);\nlet shape = textForm.GetWrapperShape();\nlet stroke = Api.CreateStroke(36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\nshape.SetOutLine(stroke);\n```",
        "memberof": "ApiDateForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiShape"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetWrapperShape",
        "longname": "ApiDateForm#GetWrapperShape",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19698,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetWrapperShape.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the placeholder text to the current form.\n\t *Can't be set to checkbox or radio button.*\n\t * @memberof ApiFormBase\n\t * @param {string} sText - The text that will be set to the current form.\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetPlaceholderText.js\n\t */",
        "description": "Sets the placeholder text to the current form.\nCan't be set to checkbox or radio button.*\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetPlaceholderText(\"First name\");\n```",
        "memberof": "ApiDateForm",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                },
                "name": "sText",
                "description": "The text that will be set to the current form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetPlaceholderText",
        "longname": "ApiDateForm#SetPlaceholderText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19716,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetPlaceholderText.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the text properties to the current form.\n\t *Used if possible for this type of form*\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @param {ApiTextPr} oTextPr - The text properties that will be set to the current form.\n\t * @return {boolean}  \n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetTextPr.js\n\t */",
        "description": "Sets the text properties to the current form.\nUsed if possible for this type of form*\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet textPr = Api.CreateTextPr();\ntextPr.SetFontSize(30);\ntextPr.SetBold(true);\ntextForm.SetTextPr(textPr);\n```",
        "memberof": "ApiDateForm",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                },
                "name": "oTextPr",
                "description": "The text properties that will be set to the current form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetTextPr",
        "longname": "ApiDateForm#SetTextPr",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19737,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetTextPr.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the text properties from the current form.\n\t *Used if possible for this type of form*\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @return {ApiTextPr}  \n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetTextPr.js\n\t */",
        "description": "Returns the text properties from the current form.\nUsed if possible for this type of form*\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet textPr = Api.CreateTextPr();\ntextPr.SetFontSize(30);\ntextPr.SetBold(true);\ntextForm.SetTextPr(textPr);\nlet formTextPr = textForm.GetTextPr();\nformTextPr.SetItalic(true);\ntextForm.SetTextPr(formTextPr);\n```",
        "memberof": "ApiDateForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetTextPr",
        "longname": "ApiDateForm#GetTextPr",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19755,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetTextPr.js"
        ]
    },
    {
        "comment": "/**\n\t * Places a cursor before/after the current form.\n\t * @param {boolean?} [isAfter=true] - Specifies whether a cursor will be placed before (false) or after (true) the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/MoveCursorOutside.js\n\t */",
        "description": "Places a cursor before/after the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetText(\"The cursor will be placed after the current form.\");\ntextForm.MoveCursorOutside(true);\n```",
        "memberof": "ApiDateForm",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "isAfter",
                "description": "Specifies whether a cursor will be placed before (false) or after (true) the current form.",
                "optional": true,
                "defaultvalue": true
            }
        ],
        "returns": null,
        "name": "MoveCursorOutside",
        "longname": "ApiDateForm#MoveCursorOutside",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19767,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/MoveCursorOutside.js"
        ]
    },
    {
        "comment": "/**\n\t * Copies the current form (copies with the shape if it exists).\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {?ApiForm}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/Copy.js\n\t */",
        "description": "Copies the current form (copies with the shape if it exists).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet copyTextForm = textForm.Copy();\nparagraph.AddLineBreak();\nparagraph.AddElement(copyTextForm);\n```",
        "memberof": "ApiDateForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiForm"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "Copy",
        "longname": "ApiDateForm#Copy",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19778,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/Copy.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the ApiFormBase class.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {\"form\"}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetClassType.js\n\t */",
        "description": "Returns a type of the ApiFormBase class.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet classType = textForm.GetClassType();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Class type: \" + classType);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiComplexForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "\"form\""
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetClassType",
        "longname": "ApiComplexForm#GetClassType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19388,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetClassType.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a type of the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {FormType}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetFormType.js\n\t */",
        "description": "Returns a type of the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet formType = textForm.GetFormType();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Form type: \" + formType);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiComplexForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "FormType"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetFormType",
        "longname": "ApiComplexForm#GetFormType",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19399,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetFormType.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the current form key.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetFormKey.js\n\t */",
        "description": "Returns the current form key.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet comboBoxForm = Api.CreateComboBoxForm({\"key\": \"Personal information\", \"tip\": \"Choose your country\", \"required\": true, \"placeholder\": \"Country\", \"editable\": false, \"autoFit\": false, \"items\": [\"Latvia\", \"USA\", \"UK\"]});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(comboBoxForm);\nlet key = comboBoxForm.GetFormKey();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Form key: \" + key);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiComplexForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetFormKey",
        "longname": "ApiComplexForm#GetFormKey",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19423,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetFormKey.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets a key to the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @param {string} sKey - Form key.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetFormKey.js\n\t */",
        "description": "Sets a key to the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetFormKey(\"Personal information\");\nlet key = textForm.GetFormKey();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Form key: \" + key);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiComplexForm",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                },
                "name": "sKey",
                "description": "Form key.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetFormKey",
        "longname": "ApiComplexForm#SetFormKey",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19443,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetFormKey.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the tip text of the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetTipText.js\n\t */",
        "description": "Returns the tip text of the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet comboBoxForm = Api.CreateComboBoxForm({\"key\": \"Personal information\", \"tip\": \"Choose your country\", \"required\": true, \"placeholder\": \"Country\", \"editable\": false, \"autoFit\": false, \"items\": [\"Latvia\", \"USA\", \"UK\"]});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(comboBoxForm);\nlet tipText = comboBoxForm.GetTipText();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Form tip text: \" + tipText);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiComplexForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetTipText",
        "longname": "ApiComplexForm#GetTipText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19472,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetTipText.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the tip text to the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @param {string} sText - Tip text.\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetTipText.js\n\t */",
        "description": "Sets the tip text to the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetTipText(\"Enter your first name\");\nlet tipText = textForm.GetTipText();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Tip text: \" + tipText);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiComplexForm",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                },
                "name": "sText",
                "description": "Tip text.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetTipText",
        "longname": "ApiComplexForm#SetTipText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19489,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetTipText.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks if the current form is required.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/IsRequired.js\n\t */",
        "description": "Checks if the current form is required.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet required = textForm.IsRequired();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document is required: \" + required);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiComplexForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "IsRequired",
        "longname": "ApiComplexForm#IsRequired",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19509,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/IsRequired.js"
        ]
    },
    {
        "comment": "/**\n\t * Specifies if the current form should be required.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @param {boolean} bRequired - Defines if the current form is required (true) or not (false).\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetRequired.js\n\t */",
        "description": "Specifies if the current form should be required.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetRequired(true);\nlet required = textForm.IsRequired();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document is required: \" + required);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiComplexForm",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "bRequired",
                "description": "Defines if the current form is required (true) or not (false).",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetRequired",
        "longname": "ApiComplexForm#SetRequired",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19521,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetRequired.js"
        ]
    },
    {
        "comment": "/**\n\t * Checks if the current form is fixed size.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/IsFixed.js\n\t */",
        "description": "Checks if the current form is fixed size.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.ToFixed(10 * 240, 2 * 240);\nlet fixed = textForm.IsFixed();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document is fixed: \" + fixed);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiComplexForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "IsFixed",
        "longname": "ApiComplexForm#IsFixed",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19543,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/IsFixed.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts the current form to a fixed size form.\n\t * @memberof ApiFormBase\n\t * @param {twips} width - The wrapper shape width measured in twentieths of a point (1/1440 of an inch).\n\t * @param {twips} height - The wrapper shape height measured in twentieths of a point (1/1440 of an inch).\n\t * @param {boolean} keepPosition - Save position on the page (it can be a little bit slow, because it runs the document calculation)\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/ToFixed.js\n\t */",
        "description": "Converts the current form to a fixed size form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.ToFixed(10 * 240, 2 * 240);\nlet fixed = textForm.IsFixed();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document has a fixed size: \" + fixed);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiComplexForm",
        "params": [
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": null
                },
                "name": "width",
                "description": "The wrapper shape width measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "twips"
                    ],
                    "parsedType": null
                },
                "name": "height",
                "description": "The wrapper shape height measured in twentieths of a point (1/1440 of an inch).",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "keepPosition",
                "description": "Save position on the page (it can be a little bit slow, because it runs the document calculation)",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "ToFixed",
        "longname": "ApiComplexForm#ToFixed",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19557,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/ToFixed.js"
        ]
    },
    {
        "comment": "/**\n\t * Converts the current form to an inline form.\n\t *Picture form can't be converted to an inline form, it's always a fixed size object.*\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/ToInline.js\n\t */",
        "description": "Converts the current form to an inline form.\nPicture form can't be converted to an inline form, it's always a fixed size object.*\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.ToFixed(10 * 240, 2 * 240);\nlet copyForm = textForm.Copy();\nparagraph = Api.CreateParagraph();\nparagraph.AddElement(copyForm);\ndoc.Push(paragraph);\ncopyForm.ToInline();\nlet fixed = textForm.IsFixed();\nlet fixedCopy = copyForm.IsFixed();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document has a fixed size: \" + fixed);\nparagraph.AddLineBreak();\nparagraph.AddText(\"The second form from this document has a fixed size: \" + fixedCopy);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiComplexForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "ToInline",
        "longname": "ApiComplexForm#ToInline",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19578,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/ToInline.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the border color to the current form.\n\t * @memberof ApiFormBase\n\t * @param {byte} r - Red color component value.\n\t * @param {byte} g - Green color component value.\n\t * @param {byte} b - Blue color component value.\n\t * @param {boolean} bNone - Defines that border color will not be set.\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetBorderColor.js\n\t */",
        "description": "Sets the border color to the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetBorderColor(255, 111, 61);\n```",
        "memberof": "ApiComplexForm",
        "params": [
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": null
                },
                "name": "r",
                "description": "Red color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": null
                },
                "name": "g",
                "description": "Green color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": null
                },
                "name": "b",
                "description": "Blue color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "bNone",
                "description": "Defines that border color will not be set.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetBorderColor",
        "longname": "ApiComplexForm#SetBorderColor",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19599,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetBorderColor.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the background color to the current form.\n\t * @memberof ApiFormBase\n\t * @param {byte} r - Red color component value.\n\t * @param {byte} g - Green color component value.\n\t * @param {byte} b - Blue color component value.\n\t * @param {boolean} bNone - Defines that background color will not be set.\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetBackgroundColor.js\n\t */",
        "description": "Sets the background color to the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetBackgroundColor(255, 111, 61);\n```",
        "memberof": "ApiComplexForm",
        "params": [
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": null
                },
                "name": "r",
                "description": "Red color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": null
                },
                "name": "g",
                "description": "Green color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "byte"
                    ],
                    "parsedType": null
                },
                "name": "b",
                "description": "Blue color component value.",
                "optional": null,
                "defaultvalue": null
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "bNone",
                "description": "Defines that background color will not be set.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetBackgroundColor",
        "longname": "ApiComplexForm#SetBackgroundColor",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19631,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetBackgroundColor.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the text from the current form.\n\t *Returns the value as a string if possible for the given form type*\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {string}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetText.js\n\t */",
        "description": "Returns the text from the current form.\nReturns the value as a string if possible for the given form type*\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet text = textForm.GetText();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"Form text: \" + text);\ndoc.Push(paragraph);\n```",
        "memberof": "ApiComplexForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetText",
        "longname": "ApiComplexForm#GetText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19674,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetText.js"
        ]
    },
    {
        "comment": "/**\n\t * Clears the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/Clear.js\n\t */",
        "description": "Clears the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetText(\"John Smith\");\ntextForm.Clear();\nparagraph = Api.CreateParagraph();\nparagraph.AddText(\"The first form from this document was cleared.\");\ndoc.Push(paragraph);\n```",
        "memberof": "ApiComplexForm",
        "params": null,
        "returns": null,
        "name": "Clear",
        "longname": "ApiComplexForm#Clear",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19684,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/Clear.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns a shape in which the form is placed to control the position and size of the fixed size form frame.\n\t * The null value will be returned for the inline forms.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {?ApiShape} - returns the shape in which the form is placed.\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetWrapperShape.js\n\t */",
        "description": "Returns a shape in which the form is placed to control the position and size of the fixed size form frame.\nThe null value will be returned for the inline forms.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.ToFixed(10 * 240, 2 * 240);\nlet shape = textForm.GetWrapperShape();\nlet stroke = Api.CreateStroke(36000, Api.CreateSolidFill(Api.CreateRGBColor(255, 111, 61)));\nshape.SetOutLine(stroke);\n```",
        "memberof": "ApiComplexForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiShape"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetWrapperShape",
        "longname": "ApiComplexForm#GetWrapperShape",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19698,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetWrapperShape.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the placeholder text to the current form.\n\t *Can't be set to checkbox or radio button.*\n\t * @memberof ApiFormBase\n\t * @param {string} sText - The text that will be set to the current form.\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {boolean}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetPlaceholderText.js\n\t */",
        "description": "Sets the placeholder text to the current form.\nCan't be set to checkbox or radio button.*\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetPlaceholderText(\"First name\");\n```",
        "memberof": "ApiComplexForm",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": null
                },
                "name": "sText",
                "description": "The text that will be set to the current form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetPlaceholderText",
        "longname": "ApiComplexForm#SetPlaceholderText",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19716,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetPlaceholderText.js"
        ]
    },
    {
        "comment": "/**\n\t * Sets the text properties to the current form.\n\t *Used if possible for this type of form*\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @param {ApiTextPr} oTextPr - The text properties that will be set to the current form.\n\t * @return {boolean}  \n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/SetTextPr.js\n\t */",
        "description": "Sets the text properties to the current form.\nUsed if possible for this type of form*\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet textPr = Api.CreateTextPr();\ntextPr.SetFontSize(30);\ntextPr.SetBold(true);\ntextForm.SetTextPr(textPr);\n```",
        "memberof": "ApiComplexForm",
        "params": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                },
                "name": "oTextPr",
                "description": "The text properties that will be set to the current form.",
                "optional": null,
                "defaultvalue": null
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "SetTextPr",
        "longname": "ApiComplexForm#SetTextPr",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19737,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/SetTextPr.js"
        ]
    },
    {
        "comment": "/**\n\t * Returns the text properties from the current form.\n\t *Used if possible for this type of form*\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @return {ApiTextPr}  \n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/GetTextPr.js\n\t */",
        "description": "Returns the text properties from the current form.\nUsed if possible for this type of form*\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet textPr = Api.CreateTextPr();\ntextPr.SetFontSize(30);\ntextPr.SetBold(true);\ntextForm.SetTextPr(textPr);\nlet formTextPr = textForm.GetTextPr();\nformTextPr.SetItalic(true);\ntextForm.SetTextPr(formTextPr);\n```",
        "memberof": "ApiComplexForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiTextPr"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "GetTextPr",
        "longname": "ApiComplexForm#GetTextPr",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19755,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/GetTextPr.js"
        ]
    },
    {
        "comment": "/**\n\t * Places a cursor before/after the current form.\n\t * @param {boolean?} [isAfter=true] - Specifies whether a cursor will be placed before (false) or after (true) the current form.\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @since 8.1.0\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/MoveCursorOutside.js\n\t */",
        "description": "Places a cursor before/after the current form.\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\ntextForm.SetText(\"The cursor will be placed after the current form.\");\ntextForm.MoveCursorOutside(true);\n```",
        "memberof": "ApiComplexForm",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": null
                },
                "name": "isAfter",
                "description": "Specifies whether a cursor will be placed before (false) or after (true) the current form.",
                "optional": true,
                "defaultvalue": true
            }
        ],
        "returns": null,
        "name": "MoveCursorOutside",
        "longname": "ApiComplexForm#MoveCursorOutside",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19767,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/MoveCursorOutside.js"
        ]
    },
    {
        "comment": "/**\n\t * Copies the current form (copies with the shape if it exists).\n\t * @memberof ApiFormBase\n\t * @typeofeditors [\"CDE\", \"CFE\"]\n\t * @returns {?ApiForm}\n\t * @see office-js-api/Examples/{Editor}/ApiFormBase/Methods/Copy.js\n\t */",
        "description": "Copies the current form (copies with the shape if it exists).\n\n## Try it\n\n ```js document-builder={\"documentType\": \"pdf\"}\nlet doc = Api.GetDocument();\nlet textForm = Api.CreateTextForm({\"key\": \"Personal information\", \"tip\": \"Enter your first name\", \"required\": true, \"placeholder\": \"First name\", \"comb\": true, \"maxCharacters\": 10, \"cellWidth\": 3, \"multiLine\": false, \"autoFit\": false});\nlet paragraph = doc.GetElement(0);\nparagraph.AddElement(textForm);\nlet copyTextForm = textForm.Copy();\nparagraph.AddLineBreak();\nparagraph.AddElement(copyTextForm);\n```",
        "memberof": "ApiComplexForm",
        "params": null,
        "returns": [
            {
                "type": {
                    "names": [
                        "ApiForm"
                    ],
                    "parsedType": null
                }
            }
        ],
        "name": "Copy",
        "longname": "ApiComplexForm#Copy",
        "kind": "function",
        "scope": "instance",
        "type": null,
        "properties": null,
        "meta": {
            "lineno": 19778,
            "columnno": 1
        },
        "see": [
            "office-js-api/Examples/Word/ApiFormBase/Methods/Copy.js"
        ]
    }
]